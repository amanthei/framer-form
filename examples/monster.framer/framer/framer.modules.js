require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"form":[function(require,module,exports){
var Light, Mesh, Model, Scene, Studio;

window.THREE = require('./src/lib/three.min.js');

require('./src/GA.coffee');

Scene = require('./src/Scene.coffee').Scene;

Studio = require('./src/Studio.coffee').Studio;

Model = require('./src/Model.coffee').Model;

Mesh = require('./src/Mesh.coffee').Mesh;

Light = require('./src/Light.coffee').Light;

module.exports = {
  Scene: Scene,
  Studio: Studio,
  Model: Model,
  Mesh: Mesh,
  Light: Light,
  MeshPhongMaterial: THREE.MeshPhongMaterial,
  MeshNormalMaterial: THREE.MeshNormalMaterial,
  MeshStandardMaterial: THREE.MeshStandardMaterial,
  LineBasicMaterial: THREE.LineBasicMaterial,
  LineDashedMaterial: THREE.LineDashedMaterial,
  MeshBasicMaterial: THREE.MeshBasicMaterial,
  MeshDepthMaterial: THREE.MeshDepthMaterial,
  MeshLambertMaterial: THREE.MeshLambertMaterial,
  MeshPhysicalMaterial: THREE.MeshPhysicalMaterial,
  MeshToonMaterial: THREE.MeshToonMaterial,
  PointsMaterial: THREE.PointsMaterial,
  RawShaderMaterial: THREE.RawShaderMaterial,
  ShaderMaterial: THREE.ShaderMaterial,
  ShadowMaterial: THREE.ShadowMaterial,
  SpriteMaterial: THREE.SpriteMaterial
};


},{"./src/GA.coffee":"src/GA","./src/Light.coffee":"src/Light","./src/Mesh.coffee":"src/Mesh","./src/Model.coffee":"src/Model","./src/Scene.coffee":"src/Scene","./src/Studio.coffee":"src/Studio","./src/lib/three.min.js":"src/lib/three-min"}],"src/GA":[function(require,module,exports){
var s;

s = document.createElement('script');

s.setAttribute('src', 'https://www.googletagmanager.com/gtag/js?id=UA-75056533-3');

s.setAttribute('async', '');

document.head.appendChild(s);

window.dataLayer = window.dataLayer || [];

window.gtag = function() {
  return dataLayer.push(arguments);
};

window.gtag('js', new Date());

window.gtag('config', 'UA-75056533-3');

if (window.location.href.includes('framer.cloud')) {
  window.gtag('event', 'Cloud', {
    'event_category': 'Visitors'
  });
} else {
  window.gtag('event', 'Non-Cloud', {
    'event_category': 'Visitors'
  });
}


},{}],"src/Light":[function(require,module,exports){
var Animation, BaseClass, States, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

BaseClass = require('./_BaseClass.coffee').BaseClass;

Animation = require('./_Animation.coffee').Animation;

States = require('./_States.coffee').States;

exports.Light = (function(superClass) {
  extend(Light, superClass);

  function Light(properties) {
    Light.__super__.constructor.call(this);
    if (!properties.type) {
      throw Error('Please specify a light type!');
    }
    this.properties = _.defaults(properties);
    this.setupLight();
  }

  Light.prototype.setupLight = function() {
    switch (this.properties.type) {
      case 'point':
        this.light = new THREE.PointLight(new THREE.Color(this.properties.color, this.properties.intensity, this.properties.distance, this.properties.decay));
        break;
      case 'directional':
        this.light = new THREE.DirectionalLight(new THREE.Color(this.properties.color, this.properties.intensity));
        break;
      case 'ambient':
        this.light = new THREE.AmbientLight(new THREE.Color(this.properties.color, this.properties.intensity));
        break;
      case 'hemisphere':
        this.light = new THREE.HemisphereLight(new THREE.Color(this.properties.skyColor, new THREE.Color(this.properties.groundColor, this.properties.intensity)));
        break;
      case 'rectarea':
        this.light = new THREE.RectAreaLight(new THREE.Color(this.properties.color, this.properties.intensity, this.properties.width, this.properties.height));
        break;
      case 'spot':
        this.light = new THREE.SpotLight(new THREE.Color(this.properties.color, this.properties.intensity, this.properties.distance, this.properties.angle, this.properties.penumbra, this.properties.decay));
    }
    this.addToRenderingInstance(this.properties.parent);
    this.applyProperties();
    this.saveInitialProperties();
    return this._states = new States(this);
  };

  Light.prototype.addToRenderingInstance = function(parent) {
    if (parent.scene) {
      return parent.scene.add(this.light);
    } else {
      return parent.add(this.light);
    }
  };

  Light.prototype.applyProperties = function(properties) {
    return Object.keys(this.properties).map((function(_this) {
      return function(k) {
        return _this[k] = _this.properties[k];
      };
    })(this));
  };

  Light.prototype.saveInitialProperties = function() {
    return this.initialProperties = this;
  };

  Light.prototype.on = function(eventName, cb) {
    var callback;
    if (eventName.includes('change')) {
      callback = function(e) {
        return cb(e.value);
      };
      this.light.addEventListener(eventName, callback);
      return Framer.CurrentContext.on('reset', (function(_this) {
        return function() {
          return _this.light.removeEventListener(eventName, callback);
        };
      })(this));
    }
  };

  Light.prototype.animate = function(properties) {
    return new Animation(this, properties);
  };

  Light.prototype.stateSwitch = function(state) {
    return Object.keys(this.states).map((function(_this) {
      return function(k) {
        if (k === state) {
          _this.states.current = _this.states[k];
          return Object.keys(_this.states.current).map(function(pk) {
            return _this[pk] = _this.states.current[pk];
          });
        }
      };
    })(this));
  };

  Light.prototype.stateCycle = function(stateA, stateB) {
    if (this.states.current === this.states[stateA] || this.states.current === this.states[stateB]) {
      if (this.states.current === this.states[stateA]) {
        return this.animate(stateB);
      } else if (this.states.current === this.states[stateB]) {
        return this.animate(stateA);
      }
    } else {
      return this.animate(stateA);
    }
  };

  Light.define('position', {
    get: function() {
      return this.light.position;
    }
  });

  Light.define('x', {
    get: function() {
      return this.light.position.x;
    },
    set: function(x) {
      this.light.position.x = x;
      return this.light.dispatchEvent({
        type: 'change:x',
        value: this.x
      });
    }
  });

  Light.define('y', {
    get: function() {
      return this.light.position.y;
    },
    set: function(y) {
      this.light.position.y = y;
      return this.light.dispatchEvent({
        type: 'change:y',
        value: this.y
      });
    }
  });

  Light.define('z', {
    get: function() {
      return this.light.position.z;
    },
    set: function(z) {
      this.light.position.z = z;
      return this.light.dispatchEvent({
        type: 'change:z',
        value: this.z
      });
    }
  });

  Light.define('rotation', {
    get: function() {
      return this.light.rotation;
    }
  });

  Light.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.light.rotation.x);
    },
    set: function(x) {
      this.light.rotation.x = THREE.Math.degToRad(x);
      return this.light.dispatchEvent({
        type: 'change:rotationX',
        value: this.rotationX
      });
    }
  });

  Light.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.light.rotation.y);
    },
    set: function(y) {
      this.light.rotation.y = THREE.Math.degToRad(y);
      return this.light.dispatchEvent({
        type: 'change:rotationY',
        value: this.rotationY
      });
    }
  });

  Light.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.light.rotation.z);
    },
    set: function(z) {
      this.light.rotation.z = THREE.Math.degToRad(z);
      return this.light.dispatchEvent({
        type: 'change:rotationZ',
        value: this.rotationZ
      });
    }
  });

  Light.define('visible', {
    get: function() {
      return this.light.visible;
    },
    set: function(bool) {
      this.light.visible = bool;
      return this.light.dispatchEvent({
        type: 'change:visible',
        value: this.visible
      });
    }
  });

  Light.define('states', {
    get: function() {
      return this._states.states;
    },
    set: function(states) {
      return _.extend(this.states, states);
    }
  });

  Light.define('color', {
    get: function() {
      return this.light.color;
    },
    set: function(color) {
      this.light.color = new THREE.Color(color);
      return this.light.dispatchEvent({
        type: 'change:color',
        value: this.color
      });
    }
  });

  Light.define('intensity', {
    get: function() {
      return this.light.intensity;
    },
    set: function(intensity) {
      this.light.intensity = intensity;
      return this.light.dispatchEvent({
        type: 'change:intensity',
        value: this.intensity
      });
    }
  });

  Light.define('angle', {
    get: function() {
      return this.light.angle;
    },
    set: function(angle) {
      this.light.angle = angle;
      return this.light.dispatchEvent({
        type: 'change:angle',
        value: this.angle
      });
    }
  });

  Light.define('castShadow', {
    get: function() {
      return this.light.castShadow;
    },
    set: function(bool) {
      this.light.castShadow = bool;
      return this.light.dispatchEvent({
        type: 'change:castShadow',
        value: this.castShadow
      });
    }
  });

  Light.define('decay', {
    get: function() {
      return this.light.decay;
    },
    set: function(decay) {
      this.light.decay = decay;
      return this.light.dispatchEvent({
        type: 'change:decay',
        value: this.decay
      });
    }
  });

  Light.define('distance', {
    get: function() {
      return this.light.distance;
    },
    set: function(distance) {
      this.light.distance = distance;
      return this.light.dispatchEvent({
        type: 'change:distance',
        value: this.distance
      });
    }
  });

  Light.define('penumbra', {
    get: function() {
      return this.light.penumbra;
    },
    set: function(penumbra) {
      this.light.penumbra = penumbra;
      return this.light.dispatchEvent({
        type: 'change:penumbra',
        value: this.penumbra
      });
    }
  });

  Light.define('power', {
    get: function() {
      return this.light.power;
    },
    set: function(power) {
      this.light.power = power;
      return this.light.dispatchEvent({
        type: 'change:power',
        value: this.power
      });
    }
  });

  Light.define('shadow', {
    get: function() {
      return this.light.shadow;
    },
    set: function(shadow) {
      return this.light.shadow = shadow;
    }
  });

  Light.define('target', {
    get: function() {
      return this.light.target;
    },
    set: function(target) {
      this.light.target = target;
      return this.light.dispatchEvent({
        type: 'change:target',
        value: this.target
      });
    }
  });

  Light.define('width', {
    get: function() {
      return this.light.width;
    },
    set: function(width) {
      this.light.width = width;
      return this.light.dispatchEvent({
        type: 'change:width',
        value: this.width
      });
    }
  });

  Light.define('height', {
    get: function() {
      return this.light.height;
    },
    set: function(height) {
      this.light.height = height;
      return this.light.dispatchEvent({
        type: 'change:height',
        value: this.height
      });
    }
  });

  Light.define('groundColor', {
    get: function() {
      return this.light.groundColor;
    },
    set: function(groundColor) {
      this.light.groundColor = new THREE.Color(groundColor);
      return this.light.dispatchEvent({
        type: 'change:groundColor',
        value: this.groundColor
      });
    }
  });

  Light.define('skyColor', {
    get: function() {
      return this.light.skyColor;
    },
    set: function(skyColor) {
      this.light.skyColor = new THREE.Color(skyColor);
      return this.light.dispatchEvent({
        type: 'change:skyColor',
        value: this.skyColor
      });
    }
  });

  return Light;

})(BaseClass);


},{"./_Animation.coffee":"src/_Animation","./_BaseClass.coffee":"src/_BaseClass","./_States.coffee":"src/_States"}],"src/Mesh":[function(require,module,exports){
var _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

exports.Mesh = (function(superClass) {
  extend(Mesh, superClass);

  Mesh.define = function(propertyName, descriptor) {
    if (descriptor.readonly) {
      descriptor.set = function(value) {
        throw Error(this.constructor.name + "." + propertyName + " is readonly");
      };
    }
    return Object.defineProperty(this.prototype, propertyName, descriptor);
  };

  function Mesh(properties) {
    if (properties == null) {
      properties = {};
    }
    Mesh.__super__.constructor.call(this, properties.geometry, properties.material);
    _.defaults(properties, {
      castShadow: true,
      receiveShadow: true
    });
    this.setupShadowSettings(properties);
    if (properties.parent) {
      this.addToRenderingInstance(properties.parent);
    }
    this.setScale(properties.scale, properties.scaleX, properties.scaleY, properties.scaleZ);
    this.setPosition([properties.x, properties.y, properties.z]);
    this.setRotation([properties.rotationX, properties.rotationY, properties.rotationZ]);
  }

  Mesh.prototype.setupShadowSettings = function(properties) {
    this.castShadow = properties.castShadow;
    return this.receiveShadow = properties.receiveShadow;
  };

  Mesh.prototype.addToRenderingInstance = function(parent) {
    if (parent.scene) {
      return parent.scene.add(this);
    } else {
      return parent.add(this);
    }
  };

  Mesh.prototype.setScale = function(uniformScale, scaleX, scaleY, scaleZ) {
    if (uniformScale) {
      return this.scale = uniformScale || 1;
    } else {
      this.scaleX = scaleX || 1;
      this.scaleY = scaleY || 1;
      return this.scaleZ = scaleZ || 1;
    }
  };

  Mesh.prototype.setPosition = function(position) {
    this.x = position[0] || 0;
    this.y = position[1] || 0;
    return this.z = position[2] || 0;
  };

  Mesh.prototype.setRotation = function(rotation) {
    this.rotationX = rotation[0] || 0;
    this.rotationY = rotation[1] || 0;
    return this.rotationZ = rotation[2] || 0;
  };

  Mesh.define('scale', {
    get: function() {
      return this.scale.x;
    },
    set: function(scale) {
      return this.scale.set(scale, scale, scale);
    }
  });

  Mesh.define('scaleX', {
    get: function() {
      return this.scale.x;
    },
    set: function(scale) {
      return this.scale.set(scale, this.scale.y, this.scale.z);
    }
  });

  Mesh.define('scaleY', {
    get: function() {
      return this.scale.y;
    },
    set: function(scale) {
      return this.scale.set(this.scale.x, scale, this.scale.z);
    }
  });

  Mesh.define('scaleZ', {
    get: function() {
      return this.scale.z;
    },
    set: function(scale) {
      return this.scale.set(this.scale.x, this.scale.y, scale);
    }
  });

  Mesh.define('x', {
    get: function() {
      return this.position.x;
    },
    set: function(x) {
      return this.position.x = x;
    }
  });

  Mesh.define('y', {
    get: function() {
      return this.position.y;
    },
    set: function(y) {
      return this.position.y = y;
    }
  });

  Mesh.define('z', {
    get: function() {
      return this.position.z;
    },
    set: function(z) {
      return this.position.z = z;
    }
  });

  Mesh.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.rotation.x);
    },
    set: function(x) {
      return this.rotation.x = THREE.Math.degToRad(x);
    }
  });

  Mesh.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.rotation.y);
    },
    set: function(y) {
      return this.rotation.y = THREE.Math.degToRad(y);
    }
  });

  Mesh.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.rotation.z);
    },
    set: function(z) {
      return this.rotation.z = THREE.Math.degToRad(z);
    }
  });

  return Mesh;

})(THREE.Mesh);


},{}],"src/Model":[function(require,module,exports){
var Animation, BaseClass, Collada, FBX, GLTF, JSONObject, OBJ, States, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

BaseClass = require('./_BaseClass.coffee').BaseClass;

Animation = require('./_Animation.coffee').Animation;

States = require('./_States.coffee').States;

OBJ = require('./loaders/OBJ.coffee').OBJ;

FBX = require('./loaders/FBX.coffee').FBX;

GLTF = require('./loaders/GLTF.coffee').GLTF;

Collada = require('./loaders/Collada.coffee').Collada;

JSONObject = require('./loaders/JSONObject.coffee').JSONObject;

exports.Model = (function(superClass) {
  extend(Model, superClass);

  function Model(properties) {
    if (properties == null) {
      properties = {};
    }
    this.updateMixer = bind(this.updateMixer, this);
    Model.__super__.constructor.call(this);
    _.defaults(properties, {
      animate: true,
      castShadow: true,
      receiveShadow: true,
      reposition: true
    });
    switch (this.getExtension(properties.path)) {
      case 'obj':
        new OBJ(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'fbx':
        new FBX(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'gltf' || 'glb':
        new GLTF(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'dae':
        new Collada(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'json':
        new JSONObject(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
    }
  }

  Model.prototype.getExtension = function(path) {
    return path.split('.').pop();
  };

  Model.prototype.setupModel = function(properties) {
    if (properties.reposition) {
      this.repositionMesh();
    }
    this.pivot = new THREE.Group;
    this.pivot.add(this.mesh);
    this.saveInitialProperties();
    if (properties.material) {
      this.applyMaterial(properties.material);
    }
    this.setupShadowSettings(properties);
    if (properties.smoothShading) {
      this.mesh.traverse(function(c) {
        if (c instanceof THREE.Mesh) {
          return c.material.shading = THREE.SmoothShading;
        }
      });
    }
    if (properties.animate && this.mesh.animations && this.mesh.animations[0]) {
      this.handleAnimations(properties);
    }
    if (properties.parent) {
      this.addToRenderingInstance(properties.parent);
    }
    this.setScale(properties.scale, properties.scaleX, properties.scaleY, properties.scaleZ);
    this.setPosition([properties.x, properties.y, properties.z]);
    this.setRotation([properties.rotationX, properties.rotationY, properties.rotationZ]);
    this.setMid({
      midX: properties.midX,
      midY: properties.midY,
      midZ: properties.midZ
    });
    if (properties.visible) {
      this.visible = properties.visible;
    }
    this._states = new States(this);
    if (properties.onLoad) {
      return properties.onLoad(this);
    }
  };

  Model.prototype.repositionMesh = function() {
    this.boundingBox = new THREE.Box3().setFromObject(this.mesh);
    this.offset = this.boundingBox.getCenter(this.mesh.position);
    return this.mesh.position.multiplyScalar(-1);
  };

  Model.prototype.saveInitialProperties = function() {
    return this.initialProperties = this;
  };

  Model.prototype.applyMaterial = function(material) {
    return this.mesh.traverse(function(c) {
      if (c instanceof THREE.Mesh) {
        return c.material = material;
      }
    });
  };

  Model.prototype.setupShadowSettings = function(properties) {
    return this.mesh.traverse(function(c) {
      if (c instanceof THREE.Mesh) {
        c.castShadow = properties.castShadow;
        return c.receiveShadow = properties.receiveShadow;
      }
    });
  };

  Model.prototype.addToRenderingInstance = function(parent) {
    if (parent.scene) {
      return parent.scene.add(this.pivot);
    } else {
      return parent.add(this.pivot);
    }
  };

  Model.prototype.handleAnimations = function(properties) {
    if (_.isNumber(properties.animation)) {
      this.animationIndex = properties.animation - 1;
    } else {
      this.animationIndex = 0;
    }
    this.clock = new THREE.Clock;
    this.mesh.mixer = new THREE.AnimationMixer(this.mesh);
    this.action = this.mesh.mixer.clipAction(this.mesh.animations[this.animationIndex]);
    this.action.play();
    this.updateMixer();
    return Framer.CurrentContext.on('reset', (function(_this) {
      return function() {
        return cancelAnimationFrame(_this.mixerRequestId);
      };
    })(this));
  };

  Model.prototype.updateMixer = function() {
    this.mixerRequestId = requestAnimationFrame(this.updateMixer);
    return this.mesh.mixer.update(this.clock.getDelta());
  };

  Model.prototype.on = function(eventName, cb) {
    var callback;
    if (eventName.includes('change')) {
      callback = function(e) {
        return cb(e.value);
      };
      this.pivot.addEventListener(eventName, callback);
      return Framer.CurrentContext.on('reset', (function(_this) {
        return function() {
          return _this.pivot.removeEventListener(eventName, callback);
        };
      })(this));
    } else {
      return this.mesh.traverse(function(c) {
        if (c instanceof THREE.Mesh) {
          callback = function() {
            return cb();
          };
          c.addEventListener(eventName, callback);
          return Framer.CurrentContext.on('reset', (function(_this) {
            return function() {
              return c.removeEventListener(eventName, callback);
            };
          })(this));
        }
      });
    }
  };

  Model.prototype.setScale = function(uniformScale, scaleX, scaleY, scaleZ) {
    if (uniformScale) {
      return this.scale = uniformScale || 1;
    } else {
      this.scaleX = scaleX || 1;
      this.scaleY = scaleY || 1;
      return this.scaleZ = scaleZ || 1;
    }
  };

  Model.prototype.setPosition = function(position) {
    this.x = position[0] || 0;
    this.y = position[1] || 0;
    return this.z = position[2] || 0;
  };

  Model.prototype.setRotation = function(rotation) {
    this.rotationX = rotation[0] || 0;
    this.rotationY = rotation[1] || 0;
    return this.rotationZ = rotation[2] || 0;
  };

  Model.prototype.setMid = function(mid) {
    return Object.keys(mid).map((function(_this) {
      return function(k) {
        if (mid[k]) {
          return _this[k] = mid[k];
        }
      };
    })(this));
  };

  Model.prototype.animate = function(properties) {
    return new Animation(this, properties);
  };

  Model.prototype.lookAt = function(a, b, c) {
    if (arguments.length === 1) {
      return this.pivot.lookAt(a);
    } else if (arguments.length === 3) {
      return this.pivot.lookAt(a, b, c);
    }
  };

  Model.prototype.stateSwitch = function(state) {
    return Object.keys(this.states).map((function(_this) {
      return function(k) {
        if (k === state) {
          _this.states.current = _this.states[k];
          return Object.keys(_this.states.current).map(function(pk) {
            return _this[pk] = _this.states.current[pk];
          });
        }
      };
    })(this));
  };

  Model.prototype.stateCycle = function(stateA, stateB) {
    if (this.states.current === this.states[stateA] || this.states.current === this.states[stateB]) {
      if (this.states.current === this.states[stateA]) {
        return this.animate(stateB);
      } else if (this.states.current === this.states[stateB]) {
        return this.animate(stateA);
      }
    } else {
      return this.animate(stateA);
    }
  };

  Model.define('scale', {
    get: function() {
      return this.pivot.scale.x;
    },
    set: function(scale) {
      this.pivot.scale.set(scale, scale, scale);
      return this.pivot.dispatchEvent({
        type: 'change:scale',
        value: this.scale
      });
    }
  });

  Model.define('scaleX', {
    get: function() {
      return this.pivot.scale.x;
    },
    set: function(scale) {
      this.pivot.scale.set(scale, this.pivot.scale.y, this.pivot.scale.z);
      return this.pivot.dispatchEvent({
        type: 'change:scaleX',
        value: this.scaleX
      });
    }
  });

  Model.define('scaleY', {
    get: function() {
      return this.pivot.scale.y;
    },
    set: function(scale) {
      this.pivot.scale.set(this.pivot.scale.x, scale, this.pivot.scale.z);
      return this.pivot.dispatchEvent({
        type: 'change:scaleY',
        value: this.scaleY
      });
    }
  });

  Model.define('scaleZ', {
    get: function() {
      return this.pivot.scale.z;
    },
    set: function(scale) {
      this.pivot.scale.set(this.pivot.scale.x, this.pivot.scale.y, scale);
      return this.pivot.dispatchEvent({
        type: 'change:scaleZ',
        value: this.scaleZ
      });
    }
  });

  Model.define('position', {
    get: function() {
      return this.pivot.position;
    }
  });

  Model.define('x', {
    get: function() {
      return this.pivot.position.x;
    },
    set: function(x) {
      this.pivot.position.x = x;
      return this.pivot.dispatchEvent({
        type: 'change:x',
        value: this.x
      });
    }
  });

  Model.define('y', {
    get: function() {
      return this.pivot.position.y;
    },
    set: function(y) {
      this.pivot.position.y = y;
      return this.pivot.dispatchEvent({
        type: 'change:y',
        value: this.y
      });
    }
  });

  Model.define('z', {
    get: function() {
      return this.pivot.position.z;
    },
    set: function(z) {
      this.pivot.position.z = z;
      return this.pivot.dispatchEvent({
        type: 'change:z',
        value: this.z
      });
    }
  });

  Model.define('rotation', {
    get: function() {
      return this.pivot.rotation;
    }
  });

  Model.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.pivot.rotation.x);
    },
    set: function(x) {
      this.pivot.rotation.x = THREE.Math.degToRad(x);
      return this.pivot.dispatchEvent({
        type: 'change:rotationX',
        value: this.rotationX
      });
    }
  });

  Model.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.pivot.rotation.y);
    },
    set: function(y) {
      this.pivot.rotation.y = THREE.Math.degToRad(y);
      return this.pivot.dispatchEvent({
        type: 'change:rotationY',
        value: this.rotationY
      });
    }
  });

  Model.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.pivot.rotation.z);
    },
    set: function(z) {
      this.pivot.rotation.z = THREE.Math.degToRad(z);
      return this.pivot.dispatchEvent({
        type: 'change:rotationZ',
        value: this.rotationZ
      });
    }
  });

  Model.define('midX', {
    set: function(midX) {
      return this.mesh.position.x = -midX;
    }
  });

  Model.define('midY', {
    set: function(midY) {
      return this.mesh.position.y = -midY;
    }
  });

  Model.define('midZ', {
    set: function(midZ) {
      return this.mesh.position.z = -midZ;
    }
  });

  Model.define('parent', {
    get: function() {
      return this.pivot.parent;
    },
    set: function(parent) {
      this.pivot.parent = parent;
      return this.pivot.dispatchEvent({
        type: 'change:parent',
        value: this.parent
      });
    }
  });

  Model.define('visible', {
    get: function() {
      return this.pivot.visible;
    },
    set: function(bool) {
      this.pivot.visible = bool;
      return this.pivot.dispatchEvent({
        type: 'change:visible',
        value: this.visible
      });
    }
  });

  Model.define('children', {
    get: function() {
      return this.pivot.children;
    }
  });

  Model.define('size', {
    get: function() {
      return {
        height: this.boundingBox.max.y - this.boundingBox.min.y,
        width: this.boundingBox.max.x - this.boundingBox.min.x,
        depth: this.boundingBox.max.z - this.boundingBox.min.z
      };
    }
  });

  Model.define('states', {
    get: function() {
      return this._states.states;
    },
    set: function(states) {
      return _.extend(this.states, states);
    }
  });

  Model.define('animation', {
    get: function() {
      return this.animationIndex + 1;
    },
    set: function(animation) {
      if (this.mesh.animations[animation - 1]) {
        this.animationIndex = animation - 1;
        this.action = this.mesh.mixer.clipAction(this.mesh.animations[this.animationIndex]);
        return this.action.play();
      }
    }
  });

  return Model;

})(BaseClass);


},{"./_Animation.coffee":"src/_Animation","./_BaseClass.coffee":"src/_BaseClass","./_States.coffee":"src/_States","./loaders/Collada.coffee":"src/loaders/Collada","./loaders/FBX.coffee":"src/loaders/FBX","./loaders/GLTF.coffee":"src/loaders/GLTF","./loaders/JSONObject.coffee":"src/loaders/JSONObject","./loaders/OBJ.coffee":"src/loaders/OBJ"}],"src/Scene":[function(require,module,exports){
var Camera, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

Camera = require('./_Camera.coffee').Camera;

exports.Scene = (function(superClass) {
  extend(Scene, superClass);

  function Scene(properties) {
    var cameraProps;
    if (properties == null) {
      properties = {};
    }
    this.onWindowResize = bind(this.onWindowResize, this);
    this.handleRaycaster = bind(this.handleRaycaster, this);
    this.loop = bind(this.loop, this);
    Scene.__super__.constructor.call(this, _.defaults(properties, {
      backgroundColor: '#000'
    }));
    this.renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true
    });
    this._element.appendChild(this.renderer.domElement);
    this.renderer.setSize(this.width, this.height);
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.domElement.style.width = '100%';
    this.renderer.domElement.style.height = '100%';
    this.renderer.shadowMap.enabled = true;
    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    this.scene = new THREE.Scene;
    cameraProps = _.defaults(properties.camera, {
      aspect: this.width / this.height
    });
    this.camera = new Camera(cameraProps, this._element);
    Canvas.onResize(this.onWindowResize);
    this.raycaster = new THREE.Raycaster;
    this.mouse = new THREE.Vector2;
    this.intersected = null;
    this.intersectedEventEmitted = false;
    this.mousedown = false;
    this.on('mousemove', (function(_this) {
      return function(e) {
        _this.mouse.x = (e.clientX / _this.width) * 2 - 1;
        return _this.mouse.y = -(e.clientY / _this.height) * 2 + 1;
      };
    })(this));
    this.on('mousedown', (function(_this) {
      return function(e) {
        _this.mousedown = true;
        if (_this.intersected) {
          _this.intersected.object.dispatchEvent({
            type: 'mousedown'
          });
          _this.intersected.object.dispatchEvent({
            type: 'onmousedown'
          });
          _this.intersected.object.dispatchEvent({
            type: 'click'
          });
          return _this.intersected.object.dispatchEvent({
            type: 'onclick'
          });
        }
      };
    })(this));
    this.on('mouseup', (function(_this) {
      return function(e) {
        _this.mousedown = false;
        if (_this.intersected) {
          _this.intersected.object.dispatchEvent({
            type: 'mouseup'
          });
          return _this.intersected.object.dispatchEvent({
            type: 'onmouseup'
          });
        }
      };
    })(this));
    this.loop();
    Framer.CurrentContext.on('reset', (function(_this) {
      return function() {
        return cancelAnimationFrame(_this.animationLoopRequestId);
      };
    })(this));
  }

  Scene.prototype.loop = function() {
    this.animationLoopRequestId = requestAnimationFrame(this.loop);
    if (this.animationLoop) {
      this.animationLoop();
    }
    if (this.camera.controls) {
      this.camera.controls.update();
    }
    this.handleRaycaster();
    return this.renderer.render(this.scene, this.camera.nativeCamera);
  };

  Scene.prototype.handleRaycaster = function() {
    var intersects;
    this.raycaster.setFromCamera(this.mouse, this.camera.nativeCamera);
    intersects = this.raycaster.intersectObjects(this.scene.children, true);
    if (intersects.length && this.intersected !== intersects[0]) {
      this.intersected = intersects[0];
    }
    if (this.intersected && !intersects.length) {
      this.intersected.object.dispatchEvent({
        type: 'mouseout'
      });
      this.intersected.object.dispatchEvent({
        type: 'onmouseout'
      });
    }
    if (!intersects.length) {
      this.intersected = null;
      this.intersectedEventEmitted = false;
    }
    if (!this.intersectedEventEmitted && this.intersected) {
      this.intersected.object.dispatchEvent({
        type: 'mouseover'
      });
      this.intersected.object.dispatchEvent({
        type: 'onmouseover'
      });
      return this.intersectedEventEmitted = true;
    }
  };

  Scene.prototype.onWindowResize = function(e) {
    this.camera.aspect = this.width / this.height;
    this.camera.nativeCamera.updateProjectionMatrix();
    return this.renderer.setSize(this.width, this.height);
  };

  return Scene;

})(Layer);


},{"./_Camera.coffee":"src/_Camera"}],"src/Studio":[function(require,module,exports){
var Scene, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

Scene = require('./Scene.coffee').Scene;

exports.Studio = (function(superClass) {
  extend(Studio, superClass);

  function Studio(properties) {
    if (properties == null) {
      properties = {};
    }
    _.defaults(properties, {
      camera: {
        y: 220,
        rotationX: -15
      }
    });
    Studio.__super__.constructor.call(this, properties);
    this.scene.background = new THREE.Color(0x9181a0);
    this.scene.fog = new THREE.Fog(0x9181a0, 400, 1000);
    this.hlight = new THREE.HemisphereLight(0xffffff, 0x444444);
    this.hlight.position.y = 200;
    this.scene.add(this.hlight);
    this.light = new THREE.PointLight(0xffffff, .1);
    this.light.position.set(0, 800, 0);
    this.light.castShadow = true;
    this.light.shadow.camera.near = 100;
    this.light.shadow.camera.far = 1000;
    this.light.shadow.bias = .0001;
    this.light.shadow.radius = 5;
    this.light.shadow.mapSize.width = 1024;
    this.light.shadow.mapSize.height = 1024;
    this.scene.add(this.light);
    this.light2 = new THREE.DirectionalLight(0xff9999, .3);
    this.light2.position.set(-100, 200, -300);
    this.scene.add(this.light2);
    this.light3 = new THREE.DirectionalLight(0x6666ff, .2);
    this.light3.position.set(100, 200, -300);
    this.scene.add(this.light3);
    this.light4 = new THREE.DirectionalLight(0xff9999, .3);
    this.light4.position.set(-100, 200, 300);
    this.scene.add(this.light4);
    this.light5 = new THREE.DirectionalLight(0x6666ff, .2);
    this.light5.position.set(100, 200, 300);
    this.scene.add(this.light5);
    this.floorGeo = new THREE.CircleGeometry(800, 100);
    this.floorMat = new THREE.MeshStandardMaterial({
      roughness: .6,
      color: 0xaaaaaa,
      metalness: 0.2,
      bumpScale: 0.0005
    });
    this.floor = new THREE.Mesh(this.floorGeo, this.floorMat);
    this.floor.rotation.x = -Math.PI / 2;
    this.floor.receiveShadow = true;
    this.scene.add(this.floor);

    /*
    @grid = new THREE.GridHelper 2000, 20, 0x000000, 0x000000
    @grid.material.opacity = .2
    @grid.material.transparent = true
    @scene.add @grid
     */
  }

  return Studio;

})(Scene);


},{"./Scene.coffee":"src/Scene"}],"src/_Animation":[function(require,module,exports){
var Model, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

Model = require('./Model.coffee').Model;

exports.Animation = (function(superClass) {
  extend(Animation, superClass);

  function Animation(model, properties) {
    var stateName;
    if (properties == null) {
      properties = {};
    }
    this.animationLoop = bind(this.animationLoop, this);
    Animation.__super__.constructor.call(this);
    if (!properties) {
      throw Error('Please specify properties or a state to animate!');
    }
    if (_.isString(properties)) {
      stateName = properties;
      Object.keys(model.states).map((function(_this) {
        return function(k) {
          if (k === stateName) {
            model.states.current = model.states[k];
            return properties = model.states[stateName];
          }
        };
      })(this));
    }
    this.properties = this.filterProperties(properties);
    this.options = _.defaults(properties.options, {
      time: 1,
      delay: 0,
      curve: 'linear'
    });
    Utils.delay(this.options.delay, (function(_this) {
      return function() {
        _this.model = model;
        _this.mesh = model.mesh || model.light || model.nativeCamera;
        _this.fps = 60;
        _this.time = _this.options.time;
        _this.renderedFrames = 0;
        _this.totalFrames = _this.time * _this.fps;
        _this.modelPropertyInitialValues = {};
        _this.deltas = _this.calculateDeltas();
        if (_this.deltas.length) {
          _this.intervalDisposer = setInterval(function() {
            if (_this.renderedFrames >= _this.totalFrames) {
              return _this.disposeInterval;
            }
            requestAnimationFrame(_this.animationLoop);
            return _this.renderedFrames++;
          }, 1000 / _this.fps);
        }
        return Framer.CurrentContext.on('reset', function() {
          if (_this.intervalDisposer) {
            return clearInterval(_this.intervalDisposer);
          }
        });
      };
    })(this));
  }

  Animation.prototype.filterProperties = function(properties) {
    var props;
    props = Object.assign({}, properties);
    delete props.options;
    return props;
  };

  Animation.prototype.calculateDeltas = function() {
    var deltas;
    deltas = Object.keys(this.properties).map((function(_this) {
      return function(k) {
        var newObj;
        _this.modelPropertyInitialValues[k] = _this.model[k];
        newObj = {};
        if (_this.model[k] > _this.properties[k]) {
          newObj[k] = -Math.abs(_this.model[k] - _this.properties[k]);
        } else if (_this.model[k] < _this.properties[k]) {
          newObj[k] = Math.abs(_this.model[k] - _this.properties[k]);
        } else {
          null;
        }
        return newObj;
      };
    })(this));
    return deltas.filter(function(d) {
      return d;
    });
  };

  Animation.prototype.applyEasing = function(t, b, c, d) {
    if (this.options.curve.includes('ease')) {
      return this[this.options.curve](t, b, c, d);
    } else {
      return this.linear(t, b, c, d);
    }
  };

  Animation.prototype.animationLoop = function() {
    var delta, deltaValue, easedValue, i, j, len, prop, ref, results;
    ref = this.deltas;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      delta = ref[i];
      prop = Object.keys(delta)[0];
      deltaValue = Object.values(delta)[0];
      easedValue = this.applyEasing(this.renderedFrames, this.modelPropertyInitialValues[prop], deltaValue, this.totalFrames);
      results.push(this.model[prop] = easedValue);
    }
    return results;
  };

  Animation.prototype.disposeInterval = function() {
    return clearInterval(this.intervalDisposer);
  };

  Animation.prototype.linear = function(t, b, c, d) {
    return c * t / d + b;
  };

  Animation.prototype.easeInQuad = function(t, b, c, d) {
    return c * (t /= d) * t + b;
  };

  Animation.prototype.easeOutQuad = function(t, b, c, d) {
    return -c * (t /= d) * (t - 2) + b;
  };

  Animation.prototype.easeInOutQuad = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t + b;
    } else {
      return -c / 2 * ((--t) * (t - 2) - 1) + b;
    }
  };

  Animation.prototype.easeInCubic = function(t, b, c, d) {
    return c * (t /= d) * t * t + b;
  };

  Animation.prototype.easeOutCubic = function(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t + 1) + b;
  };

  Animation.prototype.easeInOutCubic = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t + b;
    } else {
      return c / 2 * ((t -= 2) * t * t + 2) + b;
    }
  };

  Animation.prototype.easeInQuart = function(t, b, c, d) {
    return c * (t /= d) * t * t * t + b;
  };

  Animation.prototype.easeOutQuart = function(t, b, c, d) {
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  };

  Animation.prototype.easeInOutQuart = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t + b;
    } else {
      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    }
  };

  Animation.prototype.easeInQuint = function(t, b, c, d) {
    return c * (t /= d) * t * t * t * t + b;
  };

  Animation.prototype.easeOutQuint = function(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  };

  Animation.prototype.easeInOutQuint = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t * t + b;
    } else {
      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    }
  };

  Animation.prototype.easeInSine = function(t, b, c, d) {
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  };

  Animation.prototype.easeOutSine = function(t, b, c, d) {
    return c * Math.sin(t / d * (Math.PI / 2)) + b;
  };

  Animation.prototype.easeInOutSine = function(t, b, c, d) {
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  };

  Animation.prototype.easeInExpo = function(t, b, c, d) {
    var ref;
    return (ref = t === 0) != null ? ref : {
      b: c * Math.pow(2, 10 * (t / d - 1)) + b
    };
  };

  Animation.prototype.easeOutExpo = function(t, b, c, d) {
    var ref;
    return (ref = t === d) != null ? ref : b + {
      c: c * (-Math.pow(2, -10 * t / d) + 1) + b
    };
  };

  Animation.prototype.easeInOutExpo = function(t, b, c, d) {
    if (t === 0) {
      b;
    }
    if (t === d) {
      b + c;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
    } else {
      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    }
  };

  Animation.prototype.easeInCirc = function(t, b, c, d) {
    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
  };

  Animation.prototype.easeOutCirc = function(t, b, c, d) {
    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
  };

  Animation.prototype.easeInOutCirc = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
    } else {
      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    }
  };

  Animation.prototype.easeInElastic = function(t, b, c, d) {
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      b;
    }
    if ((t /= d) === 1) {
      b + c;
    }
    if (!p) {
      p = d * .3;
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
  };

  Animation.prototype.easeOutElastic = function(t, b, c, d) {
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      b;
    }
    if ((t /= d) === 1) {
      b + c;
    }
    if (!p) {
      p = d * .3;
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
  };

  Animation.prototype.easeInOutElastic = function(t, b, c, d) {
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      b;
    }
    if ((t /= d / 2) === 2) {
      b + c;
    }
    if (!p) {
      p = d * (.3 * 1.5);
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    if (t < 1) {
      -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    }
    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
  };

  return Animation;

})(Framer.EventEmitter);


},{"./Model.coffee":"src/Model"}],"src/_BaseClass":[function(require,module,exports){
exports.BaseClass = (function() {
  function BaseClass() {}

  BaseClass.define = function(propertyName, descriptor) {
    if (descriptor.readonly) {
      descriptor.set = function(value) {
        throw Error(this.constructor.name + "." + propertyName + " is readonly");
      };
    }
    return Object.defineProperty(this.prototype, propertyName, descriptor);
  };

  return BaseClass;

})();


},{}],"src/_Camera":[function(require,module,exports){
var Animation, BaseClass, States, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

require('./lib/OrbitControls');

BaseClass = require('./_BaseClass.coffee').BaseClass;

Animation = require('./_Animation.coffee').Animation;

States = require('./_States.coffee').States;

exports.Camera = (function(superClass) {
  extend(Camera, superClass);

  function Camera(properties, sceneDOM) {
    if (properties == null) {
      properties = {};
    }
    Camera.__super__.constructor.call(this);
    this.sceneDOM = sceneDOM;
    _.defaults(properties, {
      x: 0,
      y: 0,
      z: 500,
      rotationX: 0,
      rotationY: 0,
      rotationZ: 0,
      fov: 35,
      near: 0.1,
      far: 10000,
      enablePan: false,
      enableZoom: false,
      enableRotate: false,
      autoRotate: false,
      autoRotateSpeed: 10,
      target: new THREE.Vector3(0, 0, 0)
    });
    this.nativeCamera = new THREE.PerspectiveCamera(properties.fov, properties.aspect, properties.near, properties.far);
    if (properties.orbitControls) {
      this.setupOrbitControls(properties);
    }
    this.setPosition([properties.x, properties.y, properties.z]);
    this.setRotation([properties.rotationX, properties.rotationY, properties.rotationZ]);
    this.saveInitialProperties();
    this._states = new States(this);
  }

  Camera.prototype.setupOrbitControls = function(properties) {
    this.controls = new THREE.OrbitControls(this.nativeCamera, this.sceneDOM);
    this.enablePan = properties.enablePan;
    this.enableZoom = properties.enableZoom;
    this.enableRotate = properties.enableRotate;
    this.autoRotate = properties.autoRotate;
    this.autoRotateSpeed = properties.autoRotateSpeed;
    return this.target = properties.target;
  };

  Camera.prototype.saveInitialProperties = function() {
    return this.initialProperties = this;
  };

  Camera.prototype.on = function(eventName, cb) {
    var callback;
    if (eventName.includes('change')) {
      callback = function(e) {
        return cb(e.value);
      };
      this.nativeCamera.addEventListener(eventName, callback);
      return Framer.CurrentContext.on('reset', (function(_this) {
        return function() {
          return _this.nativeCamera.removeEventListener(eventName, callback);
        };
      })(this));
    }
  };

  Camera.prototype.setPosition = function(positions) {
    this.x = positions[0];
    this.y = positions[1];
    return this.z = positions[2];
  };

  Camera.prototype.setRotation = function(rotations) {
    this.rotationX = rotations[0];
    this.rotationY = rotations[1];
    return this.rotationZ = rotations[2];
  };

  Camera.prototype.animate = function(properties) {
    return new Animation(this, properties);
  };

  Camera.prototype.lookAt = function(a, b, c) {
    if (arguments.length === 1) {
      return this.nativeCamera.lookAt(a);
    } else if (arguments.length === 3) {
      return this.nativeCamera.lookAt(a, b, c);
    }
  };

  Camera.prototype.stateSwitch = function(state) {
    return Object.keys(this.states).map((function(_this) {
      return function(k) {
        if (k === state) {
          _this.states.current = _this.states[k];
          return Object.keys(_this.states.current).map(function(pk) {
            return _this[pk] = _this.states.current[pk];
          });
        }
      };
    })(this));
  };

  Camera.prototype.stateCycle = function(stateA, stateB) {
    if (this.states.current === this.states[stateA] || this.states.current === this.states[stateB]) {
      if (this.states.current === this.states[stateA]) {
        return this.animate(stateB);
      } else if (this.states.current === this.states[stateB]) {
        return this.animate(stateA);
      }
    } else {
      return this.animate(stateA);
    }
  };

  Camera.define('position', {
    get: function() {
      return this.nativeCamera.position;
    }
  });

  Camera.define('x', {
    get: function() {
      return this.nativeCamera.position.x;
    },
    set: function(x) {
      this.nativeCamera.position.x = x;
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:x',
        value: this.x
      });
    }
  });

  Camera.define('y', {
    get: function() {
      return this.nativeCamera.position.y;
    },
    set: function(y) {
      this.nativeCamera.position.y = y;
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:y',
        value: this.y
      });
    }
  });

  Camera.define('z', {
    get: function() {
      return this.nativeCamera.position.z;
    },
    set: function(z) {
      this.nativeCamera.position.z = z;
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:z',
        value: this.z
      });
    }
  });

  Camera.define('rotation', {
    get: function() {
      return this.nativeCamera.rotation;
    }
  });

  Camera.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.nativeCamera.rotation.x);
    },
    set: function(x) {
      this.nativeCamera.rotation.x = THREE.Math.degToRad(x);
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:rotationX',
        value: this.rotationX
      });
    }
  });

  Camera.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.nativeCamera.rotation.y);
    },
    set: function(y) {
      this.nativeCamera.rotation.y = THREE.Math.degToRad(y);
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:rotationY',
        value: this.rotationY
      });
    }
  });

  Camera.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.nativeCamera.rotation.z);
    },
    set: function(z) {
      this.nativeCamera.rotation.z = THREE.Math.degToRad(z);
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:rotationZ',
        value: this.rotationZ
      });
    }
  });

  Camera.define('fov', {
    get: function() {
      return this.nativeCamera.fov;
    },
    set: function(fov) {
      this.nativeCamera.fov = fov;
      return this.nativeCamera.dispatchEvent({
        type: 'change:fov',
        value: this.fov
      });
    }
  });

  Camera.define('zoom', {
    get: function() {
      return this.nativeCamera.zoom;
    },
    set: function(factor) {
      this.nativeCamera.zoom = factor;
      return this.nativeCamera.dispatchEvent({
        type: 'change:zoom',
        value: this.zoom
      });
    }
  });

  Camera.define('near', {
    get: function() {
      return this.nativeCamera.near;
    },
    set: function(near) {
      this.nativeCamera.near = near;
      return this.nativeCamera.dispatchEvent({
        type: 'change:near',
        value: this.near
      });
    }
  });

  Camera.define('far', {
    get: function() {
      return this.nativeCamera.far;
    },
    set: function(far) {
      this.nativeCamera.far = far;
      return this.nativeCamera.dispatchEvent({
        type: 'change:far',
        value: this.far
      });
    }
  });

  Camera.define('aspect', {
    get: function() {
      return this.nativeCamera.aspect;
    },
    set: function(aspect) {
      this.nativeCamera.aspect = aspect;
      return this.nativeCamera.dispatchEvent({
        type: 'change:aspect',
        value: this.aspect
      });
    }
  });

  Camera.define('states', {
    get: function() {
      return this._states.states;
    },
    set: function(states) {
      return _.extend(this.states, states);
    }
  });

  Camera.define('enablePan', {
    get: function() {
      return this.controls.enablePan;
    },
    set: function(bool) {
      this.controls.enablePan = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:enablePan',
        value: this.enablePan
      });
    }
  });

  Camera.define('enableZoom', {
    get: function() {
      return this.controls.enableZoom;
    },
    set: function(bool) {
      this.controls.enableZoom = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:enableZoom',
        value: this.enableZoom
      });
    }
  });

  Camera.define('enableRotate', {
    get: function() {
      return this.controls.enableRotate;
    },
    set: function(bool) {
      this.controls.enableRotate = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:enableRotate',
        value: this.enableRotate
      });
    }
  });

  Camera.define('autoRotate', {
    get: function() {
      return this.controls.autoRotate;
    },
    set: function(bool) {
      this.controls.autoRotate = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:autoRotate',
        value: this.autoRotate
      });
    }
  });

  Camera.define('autoRotateSpeed', {
    get: function() {
      return this.controls.autoRotateSpeed;
    },
    set: function(speed) {
      this.controls.autoRotateSpeed = speed;
      return this.nativeCamera.dispatchEvent({
        type: 'change:autoRotateSpeed',
        value: this.autoRotateSpeed
      });
    }
  });

  Camera.define('target', {
    get: function() {
      return this.controls.target;
    },
    set: function(vector3) {
      this.controls.target = vector3;
      return this.nativeCamera.dispatchEvent({
        type: 'change:target',
        value: this.target
      });
    }
  });

  return Camera;

})(BaseClass);


},{"./_Animation.coffee":"src/_Animation","./_BaseClass.coffee":"src/_BaseClass","./_States.coffee":"src/_States","./lib/OrbitControls":"src/lib/OrbitControls"}],"src/_States":[function(require,module,exports){
var BaseClass, acceptedModelProperties, reservedStateError,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseClass = require('./_BaseClass.coffee').BaseClass;

acceptedModelProperties = ['x', 'y', 'z', 'rotationX', 'rotationY', 'rotationZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'options'];

reservedStateError = function(name) {
  throw Error("The state '" + name + "' is a reserved name.");
};

exports.States = (function(superClass) {
  extend(States, superClass);

  function States(model) {
    States.__super__.constructor.call(this);
    this.model = model;
    this.initialModelProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(this.model.initialProperties));
    this.states = {
      "default": this.filterProperties(this.initialModelProperties),
      current: this.filterProperties(this.initialModelProperties)
    };
  }

  States.prototype.filterProperties = function(propeties) {
    var newPropertyObj;
    newPropertyObj = {};
    propeties.map((function(_this) {
      return function(k) {
        if (acceptedModelProperties.includes(k)) {
          return newPropertyObj[k] = _this.model[k];
        }
      };
    })(this));
    return newPropertyObj;
  };

  States.define('current', {
    get: function() {
      return this.states.current;
    },
    set: function(state) {
      this.states.previous = this.states.current;
      return this.states.current = state;
    }
  });

  States.define('previous', {
    get: function() {
      return this.states.previous;
    }
  });

  return States;

})(BaseClass);


},{"./_BaseClass.coffee":"src/_BaseClass"}],"src/lib/ColladaLoader":[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

THREE.ColladaLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.ColladaLoader.prototype = {
    
        constructor: THREE.ColladaLoader,
    
        crossOrigin: 'Anonymous',
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var path = scope.path === undefined ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;
    
            var loader = new THREE.FileLoader( scope.manager );
            loader.load( url, function ( text ) {
    
                onLoad( scope.parse( text, path ) );
    
            }, onProgress, onError );
    
        },
    
        setPath: function ( value ) {
    
            this.path = value;
    
        },
    
        options: {
    
            set convertUpAxis( value ) {
    
                console.warn( 'THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.' );
    
            }
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        },
    
        parse: function ( text, path ) {
    
            function getElementsByTagName( xml, name ) {
    
                // Non recursive xml.getElementsByTagName() ...
    
                var array = [];
                var childNodes = xml.childNodes;
    
                for ( var i = 0, l = childNodes.length; i < l; i ++ ) {
    
                    var child = childNodes[ i ];
    
                    if ( child.nodeName === name ) {
    
                        array.push( child );
    
                    }
    
                }
    
                return array;
    
            }
    
            function parseStrings( text ) {
    
                if ( text.length === 0 ) return [];
    
                var parts = text.trim().split( /\s+/ );
                var array = new Array( parts.length );
    
                for ( var i = 0, l = parts.length; i < l; i ++ ) {
    
                    array[ i ] = parts[ i ];
    
                }
    
                return array;
    
            }
    
            function parseFloats( text ) {
    
                if ( text.length === 0 ) return [];
    
                var parts = text.trim().split( /\s+/ );
                var array = new Array( parts.length );
    
                for ( var i = 0, l = parts.length; i < l; i ++ ) {
    
                    array[ i ] = parseFloat( parts[ i ] );
    
                }
    
                return array;
    
            }
    
            function parseInts( text ) {
    
                if ( text.length === 0 ) return [];
    
                var parts = text.trim().split( /\s+/ );
                var array = new Array( parts.length );
    
                for ( var i = 0, l = parts.length; i < l; i ++ ) {
    
                    array[ i ] = parseInt( parts[ i ] );
    
                }
    
                return array;
    
            }
    
            function parseId( text ) {
    
                return text.substring( 1 );
    
            }
    
            function generateId() {
    
                return 'three_default_' + ( count ++ );
    
            }
    
            function isEmpty( object ) {
    
                return Object.keys( object ).length === 0;
    
            }
    
            // asset
    
            function parseAsset( xml ) {
    
                return {
                    unit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),
                    upAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )
                };
    
            }
    
            function parseAssetUnit( xml ) {
    
                return xml !== undefined ? parseFloat( xml.getAttribute( 'meter' ) ) : 1;
    
            }
    
            function parseAssetUpAxis( xml ) {
    
                return xml !== undefined ? xml.textContent : 'Y_UP';
    
            }
    
            // library
    
            function parseLibrary( xml, libraryName, nodeName, parser ) {
    
                var library = getElementsByTagName( xml, libraryName )[ 0 ];
    
                if ( library !== undefined ) {
    
                    var elements = getElementsByTagName( library, nodeName );
    
                    for ( var i = 0; i < elements.length; i ++ ) {
    
                        parser( elements[ i ] );
    
                    }
    
                }
    
            }
    
            function buildLibrary( data, builder ) {
    
                for ( var name in data ) {
    
                    var object = data[ name ];
                    object.build = builder( data[ name ] );
    
                }
    
            }
    
            // get
    
            function getBuild( data, builder ) {
    
                if ( data.build !== undefined ) return data.build;
    
                data.build = builder( data );
    
                return data.build;
    
            }
    
            // animation
    
            function parseAnimation( xml ) {
    
                var data = {
                    sources: {},
                    samplers: {},
                    channels: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    var id;
    
                    switch ( child.nodeName ) {
    
                        case 'source':
                            id = child.getAttribute( 'id' );
                            data.sources[ id ] = parseSource( child );
                            break;
    
                        case 'sampler':
                            id = child.getAttribute( 'id' );
                            data.samplers[ id ] = parseAnimationSampler( child );
                            break;
    
                        case 'channel':
                            id = child.getAttribute( 'target' );
                            data.channels[ id ] = parseAnimationChannel( child );
                            break;
    
                        default:
                            console.log( child );
    
                    }
    
                }
    
                library.animations[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseAnimationSampler( xml ) {
    
                var data = {
                    inputs: {},
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var id = parseId( child.getAttribute( 'source' ) );
                            var semantic = child.getAttribute( 'semantic' );
                            data.inputs[ semantic ] = id;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseAnimationChannel( xml ) {
    
                var data = {};
    
                var target = xml.getAttribute( 'target' );
    
                // parsing SID Addressing Syntax
    
                var parts = target.split( '/' );
    
                var id = parts.shift();
                var sid = parts.shift();
    
                // check selection syntax
    
                var arraySyntax = ( sid.indexOf( '(' ) !== - 1 );
                var memberSyntax = ( sid.indexOf( '.' ) !== - 1 );
    
                if ( memberSyntax ) {
    
                    //  member selection access
    
                    parts = sid.split( '.' );
                    sid = parts.shift();
                    data.member = parts.shift();
    
                } else if ( arraySyntax ) {
    
                    // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.
    
                    var indices = sid.split( '(' );
                    sid = indices.shift();
    
                    for ( var i = 0; i < indices.length; i ++ ) {
    
                        indices[ i ] = parseInt( indices[ i ].replace( /\)/, '' ) );
    
                    }
    
                    data.indices = indices;
    
                }
    
                data.id = id;
                data.sid = sid;
    
                data.arraySyntax = arraySyntax;
                data.memberSyntax = memberSyntax;
    
                data.sampler = parseId( xml.getAttribute( 'source' ) );
    
                return data;
    
            }
    
            function buildAnimation( data ) {
    
                var tracks = [];
    
                var channels = data.channels;
                var samplers = data.samplers;
                var sources = data.sources;
    
                for ( var target in channels ) {
    
                    if ( channels.hasOwnProperty( target ) ) {
    
                        var channel = channels[ target ];
                        var sampler = samplers[ channel.sampler ];
    
                        var inputId = sampler.inputs.INPUT;
                        var outputId = sampler.inputs.OUTPUT;
    
                        var inputSource = sources[ inputId ];
                        var outputSource = sources[ outputId ];
    
                        var animation = buildAnimationChannel( channel, inputSource, outputSource );
    
                        createKeyframeTracks( animation, tracks );
    
                    }
    
                }
    
                return tracks;
    
            }
    
            function getAnimation( id ) {
    
                return getBuild( library.animations[ id ], buildAnimation );
    
            }
    
            function buildAnimationChannel( channel, inputSource, outputSource ) {
    
                var node = library.nodes[ channel.id ];
                var object3D = getNode( node.id );
    
                var transform = node.transforms[ channel.sid ];
                var defaultMatrix = node.matrix.clone().transpose();
    
                var time, stride;
                var i, il, j, jl;
    
                var data = {};
    
                // the collada spec allows the animation of data in various ways.
                // depending on the transform type (matrix, translate, rotate, scale), we execute different logic
    
                switch ( transform ) {
    
                    case 'matrix':
    
                        for ( i = 0, il = inputSource.array.length; i < il; i ++ ) {
    
                            time = inputSource.array[ i ];
                            stride = i * outputSource.stride;
    
                            if ( data[ time ] === undefined ) data[ time ] = {};
    
                            if ( channel.arraySyntax === true ) {
    
                                var value = outputSource.array[ stride ];
                                var index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];
    
                                data[ time ][ index ] = value;
    
                            } else {
    
                                for ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {
    
                                    data[ time ][ j ] = outputSource.array[ stride + j ];
    
                                }
    
                            }
    
                        }
    
                        break;
    
                    case 'translate':
                        console.warn( 'THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform );
                        break;
    
                    case 'rotate':
                        console.warn( 'THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform );
                        break;
    
                    case 'scale':
                        console.warn( 'THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform );
                        break;
    
                }
    
                var keyframes = prepareAnimationData( data, defaultMatrix );
    
                var animation = {
                    name: object3D.uuid,
                    keyframes: keyframes
                };
    
                return animation;
    
            }
    
            function prepareAnimationData( data, defaultMatrix ) {
    
                var keyframes = [];
    
                // transfer data into a sortable array
    
                for ( var time in data ) {
    
                    keyframes.push( { time: parseFloat( time ), value: data[ time ] } );
    
                }
    
                // ensure keyframes are sorted by time
    
                keyframes.sort( ascending );
    
                // now we clean up all animation data, so we can use them for keyframe tracks
    
                for ( var i = 0; i < 16; i ++ ) {
    
                    transformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );
    
                }
    
                return keyframes;
    
                // array sort function
    
                function ascending( a, b ) {
    
                    return a.time - b.time;
    
                }
    
            }
    
            var position = new THREE.Vector3();
            var scale = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
    
            function createKeyframeTracks( animation, tracks ) {
    
                var keyframes = animation.keyframes;
                var name = animation.name;
    
                var times = [];
                var positionData = [];
                var quaternionData = [];
                var scaleData = [];
    
                for ( var i = 0, l = keyframes.length; i < l; i ++ ) {
    
                    var keyframe = keyframes[ i ];
    
                    var time = keyframe.time;
                    var value = keyframe.value;
    
                    matrix.fromArray( value ).transpose();
                    matrix.decompose( position, quaternion, scale );
    
                    times.push( time );
                    positionData.push( position.x, position.y, position.z );
                    quaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );
                    scaleData.push( scale.x, scale.y, scale.z );
    
                }
    
                if ( positionData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.position', times, positionData ) );
                if ( quaternionData.length > 0 ) tracks.push( new THREE.QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );
                if ( scaleData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.scale', times, scaleData ) );
    
                return tracks;
    
            }
    
            function transformAnimationData( keyframes, property, defaultValue ) {
    
                var keyframe;
    
                var empty = true;
                var i, l;
    
                // check, if values of a property are missing in our keyframes
    
                for ( i = 0, l = keyframes.length; i < l; i ++ ) {
    
                    keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] === undefined ) {
    
                        keyframe.value[ property ] = null; // mark as missing
    
                    } else {
    
                        empty = false;
    
                    }
    
                }
    
                if ( empty === true ) {
    
                    // no values at all, so we set a default value
    
                    for ( i = 0, l = keyframes.length; i < l; i ++ ) {
    
                        keyframe = keyframes[ i ];
    
                        keyframe.value[ property ] = defaultValue;
    
                    }
    
                } else {
    
                    // filling gaps
    
                    createMissingKeyframes( keyframes, property );
    
                }
    
            }
    
            function createMissingKeyframes( keyframes, property ) {
    
                var prev, next;
    
                for ( var i = 0, l = keyframes.length; i < l; i ++ ) {
    
                    var keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] === null ) {
    
                        prev = getPrev( keyframes, i, property );
                        next = getNext( keyframes, i, property );
    
                        if ( prev === null ) {
    
                            keyframe.value[ property ] = next.value[ property ];
                            continue;
    
                        }
    
                        if ( next === null ) {
    
                            keyframe.value[ property ] = prev.value[ property ];
                            continue;
    
                        }
    
                        interpolate( keyframe, prev, next, property );
    
                    }
    
                }
    
            }
    
            function getPrev( keyframes, i, property ) {
    
                while ( i >= 0 ) {
    
                    var keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] !== null ) return keyframe;
    
                    i --;
    
                }
    
                return null;
    
            }
    
            function getNext( keyframes, i, property ) {
    
                while ( i < keyframes.length ) {
    
                    var keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] !== null ) return keyframe;
    
                    i ++;
    
                }
    
                return null;
    
            }
    
            function interpolate( key, prev, next, property ) {
    
                if ( ( next.time - prev.time ) === 0 ) {
    
                    key.value[ property ] = prev.value[ property ];
                    return;
    
                }
    
                key.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];
    
            }
    
            // animation clips
    
            function parseAnimationClip( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'id' ) || 'default',
                    start: parseFloat( xml.getAttribute( 'start' ) || 0 ),
                    end: parseFloat( xml.getAttribute( 'end' ) || 0 ),
                    animations: []
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'instance_animation':
                            data.animations.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                    }
    
                }
    
                library.clips[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildAnimationClip( data ) {
    
                var tracks = [];
    
                var name = data.name;
                var duration = ( data.end - data.start ) || - 1;
                var animations = data.animations;
    
                for ( var i = 0, il = animations.length; i < il; i ++ ) {
    
                    var animationTracks = getAnimation( animations[ i ] );
    
                    for ( var j = 0, jl = animationTracks.length; j < jl; j ++ ) {
    
                        tracks.push( animationTracks[ j ] );
    
                    }
    
                }
    
                return new THREE.AnimationClip( name, duration, tracks );
    
            }
    
            function getAnimationClip( id ) {
    
                return getBuild( library.clips[ id ], buildAnimationClip );
    
            }
    
            // controller
    
            function parseController( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'skin':
                            // there is exactly one skin per controller
                            data.id = parseId( child.getAttribute( 'source' ) );
                            data.skin = parseSkin( child );
                            break;
    
                        case 'morph':
                            data.id = parseId( child.getAttribute( 'source' ) );
                            console.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );
                            break;
    
                    }
    
                }
    
                library.controllers[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseSkin( xml ) {
    
                var data = {
                    sources: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'bind_shape_matrix':
                            data.bindShapeMatrix = parseFloats( child.textContent );
                            break;
    
                        case 'source':
                            var id = child.getAttribute( 'id' );
                            data.sources[ id ] = parseSource( child );
                            break;
    
                        case 'joints':
                            data.joints = parseJoints( child );
                            break;
    
                        case 'vertex_weights':
                            data.vertexWeights = parseVertexWeights( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseJoints( xml ) {
    
                var data = {
                    inputs: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var semantic = child.getAttribute( 'semantic' );
                            var id = parseId( child.getAttribute( 'source' ) );
                            data.inputs[ semantic ] = id;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseVertexWeights( xml ) {
    
                var data = {
                    inputs: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var semantic = child.getAttribute( 'semantic' );
                            var id = parseId( child.getAttribute( 'source' ) );
                            var offset = parseInt( child.getAttribute( 'offset' ) );
                            data.inputs[ semantic ] = { id: id, offset: offset };
                            break;
    
                        case 'vcount':
                            data.vcount = parseInts( child.textContent );
                            break;
    
                        case 'v':
                            data.v = parseInts( child.textContent );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildController( data ) {
    
                var build = {
                    id: data.id
                };
    
                var geometry = library.geometries[ build.id ];
    
                if ( data.skin !== undefined ) {
    
                    build.skin = buildSkin( data.skin );
    
                    // we enhance the 'sources' property of the corresponding geometry with our skin data
    
                    geometry.sources.skinIndices = build.skin.indices;
                    geometry.sources.skinWeights = build.skin.weights;
    
                }
    
                return build;
    
            }
    
            function buildSkin( data ) {
    
                var BONE_LIMIT = 4;
    
                var build = {
                    joints: [], // this must be an array to preserve the joint order
                    indices: {
                        array: [],
                        stride: BONE_LIMIT
                    },
                    weights: {
                        array: [],
                        stride: BONE_LIMIT
                    }
                };
    
                var sources = data.sources;
                var vertexWeights = data.vertexWeights;
    
                var vcount = vertexWeights.vcount;
                var v = vertexWeights.v;
                var jointOffset = vertexWeights.inputs.JOINT.offset;
                var weightOffset = vertexWeights.inputs.WEIGHT.offset;
    
                var jointSource = data.sources[ data.joints.inputs.JOINT ];
                var inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];
    
                var weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;
                var stride = 0;
    
                var i, j, l;
    
                // procces skin data for each vertex
    
                for ( i = 0, l = vcount.length; i < l; i ++ ) {
    
                    var jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex
                    var vertexSkinData = [];
    
                    for ( j = 0; j < jointCount; j ++ ) {
    
                        var skinIndex = v[ stride + jointOffset ];
                        var weightId = v[ stride + weightOffset ];
                        var skinWeight = weights[ weightId ];
    
                        vertexSkinData.push( { index: skinIndex, weight: skinWeight } );
    
                        stride += 2;
    
                    }
    
                    // we sort the joints in descending order based on the weights.
                    // this ensures, we only procced the most important joints of the vertex
    
                    vertexSkinData.sort( descending );
    
                    // now we provide for each vertex a set of four index and weight values.
                    // the order of the skin data matches the order of vertices
    
                    for ( j = 0; j < BONE_LIMIT; j ++ ) {
    
                        var d = vertexSkinData[ j ];
    
                        if ( d !== undefined ) {
    
                            build.indices.array.push( d.index );
                            build.weights.array.push( d.weight );
    
                        } else {
    
                            build.indices.array.push( 0 );
                            build.weights.array.push( 0 );
    
                        }
    
                    }
    
                }
    
                // setup bind matrix
    
                build.bindMatrix = new THREE.Matrix4().fromArray( data.bindShapeMatrix ).transpose();
    
                // process bones and inverse bind matrix data
    
                for ( i = 0, l = jointSource.array.length; i < l; i ++ ) {
    
                    var name = jointSource.array[ i ];
                    var boneInverse = new THREE.Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();
    
                    build.joints.push( { name: name, boneInverse: boneInverse } );
    
                }
    
                return build;
    
                // array sort function
    
                function descending( a, b ) {
    
                    return b.weight - a.weight;
    
                }
    
            }
    
            function getController( id ) {
    
                return getBuild( library.controllers[ id ], buildController );
    
            }
    
            // image
    
            function parseImage( xml ) {
    
                var data = {
                    init_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent
                };
    
                library.images[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildImage( data ) {
    
                if ( data.build !== undefined ) return data.build;
    
                return data.init_from;
    
            }
    
            function getImage( id ) {
    
                return getBuild( library.images[ id ], buildImage );
    
            }
    
            // effect
    
            function parseEffect( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'profile_COMMON':
                            data.profile = parseEffectProfileCOMMON( child );
                            break;
    
                    }
    
                }
    
                library.effects[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseEffectProfileCOMMON( xml ) {
    
                var data = {
                    surfaces: {},
                    samplers: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'newparam':
                            parseEffectNewparam( child, data );
                            break;
    
                        case 'technique':
                            data.technique = parseEffectTechnique( child );
                            break;
    
                        case 'extra':
                            data.extra = parseEffectExtra( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectNewparam( xml, data ) {
    
                var sid = xml.getAttribute( 'sid' );
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'surface':
                            data.surfaces[ sid ] = parseEffectSurface( child );
                            break;
    
                        case 'sampler2D':
                            data.samplers[ sid ] = parseEffectSampler( child );
                            break;
    
                    }
    
                }
    
            }
    
            function parseEffectSurface( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'init_from':
                            data.init_from = child.textContent;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectSampler( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'source':
                            data.source = child.textContent;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'constant':
                        case 'lambert':
                        case 'blinn':
                        case 'phong':
                            data.type = child.nodeName;
                            data.parameters = parseEffectParameters( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameters( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'emission':
                        case 'diffuse':
                        case 'specular':
                        case 'shininess':
                        case 'transparency':
                            data[ child.nodeName ] = parseEffectParameter( child );
                            break;
                        case 'transparent':
                            data[ child.nodeName ] = {
                                opaque: child.getAttribute( 'opaque' ),
                                data: parseEffectParameter( child )
                            };
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameter( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'color':
                            data[ child.nodeName ] = parseFloats( child.textContent );
                            break;
    
                        case 'float':
                            data[ child.nodeName ] = parseFloat( child.textContent );
                            break;
    
                        case 'texture':
                            data[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameterTexture( xml ) {
    
                var data = {
                    technique: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'extra':
                            parseEffectParameterTextureExtra( child, data );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameterTextureExtra( xml, data ) {
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique':
                            parseEffectParameterTextureExtraTechnique( child, data );
                            break;
    
                    }
    
                }
    
            }
    
            function parseEffectParameterTextureExtraTechnique( xml, data ) {
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'repeatU':
                        case 'repeatV':
                        case 'offsetU':
                        case 'offsetV':
                            data.technique[ child.nodeName ] = parseFloat( child.textContent );
                            break;
    
                        case 'wrapU':
                        case 'wrapV':
    
                            // some files have values for wrapU/wrapV which become NaN via parseInt
    
                            if ( child.textContent.toUpperCase() === 'TRUE' ) {
    
                                data.technique[ child.nodeName ] = 1;
    
                            } else if ( child.textContent.toUpperCase() === 'FALSE' ) {
    
                                data.technique[ child.nodeName ] = 0;
    
                            } else {
    
                                data.technique[ child.nodeName ] = parseInt( child.textContent );
    
                            }
    
                            break;
    
                    }
    
                }
    
            }
    
            function parseEffectExtra( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique':
                            data.technique = parseEffectExtraTechnique( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectExtraTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'double_sided':
                            data[ child.nodeName ] = parseInt( child.textContent );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildEffect( data ) {
    
                return data;
    
            }
    
            function getEffect( id ) {
    
                return getBuild( library.effects[ id ], buildEffect );
    
            }
    
            // material
    
            function parseMaterial( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' )
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'instance_effect':
                            data.url = parseId( child.getAttribute( 'url' ) );
                            break;
    
                    }
    
                }
    
                library.materials[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildMaterial( data ) {
    
                var effect = getEffect( data.url );
                var technique = effect.profile.technique;
                var extra = effect.profile.extra;
    
                var material;
    
                switch ( technique.type ) {
    
                    case 'phong':
                    case 'blinn':
                        material = new THREE.MeshPhongMaterial();
                        break;
    
                    case 'lambert':
                        material = new THREE.MeshLambertMaterial();
                        break;
    
                    default:
                        material = new THREE.MeshBasicMaterial();
                        break;
    
                }
    
                material.name = data.name;
    
                function getTexture( textureObject ) {
    
                    var sampler = effect.profile.samplers[ textureObject.id ];
                    var image;
    
                    // get image
    
                    if ( sampler !== undefined ) {
    
                        var surface = effect.profile.surfaces[ sampler.source ];
                        image = getImage( surface.init_from );
    
                    } else {
    
                        console.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );
                        image = getImage( textureObject.id );
    
                    }
    
                    // create texture if image is avaiable
    
                    if ( image !== undefined ) {
    
                        var texture = textureLoader.load( image );
    
                        var extra = textureObject.extra;
    
                        if ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {
    
                            var technique = extra.technique;
    
                            texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                            texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
    
                            texture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );
                            texture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );
    
                        } else {
    
                            texture.wrapS = THREE.RepeatWrapping;
                            texture.wrapT = THREE.RepeatWrapping;
    
                        }
    
                        return texture;
    
                    } else {
    
                        console.error( 'THREE.ColladaLoader: Unable to load texture with ID:', textureObject.id );
    
                        return null;
    
                    }
    
                }
    
                var parameters = technique.parameters;
    
                for ( var key in parameters ) {
    
                    var parameter = parameters[ key ];
    
                    switch ( key ) {
    
                        case 'diffuse':
                            if ( parameter.color ) material.color.fromArray( parameter.color );
                            if ( parameter.texture ) material.map = getTexture( parameter.texture );
                            break;
                        case 'specular':
                            if ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );
                            if ( parameter.texture ) material.specularMap = getTexture( parameter.texture );
                            break;
                        case 'shininess':
                            if ( parameter.float && material.shininess )
                                material.shininess = parameter.float;
                            break;
                        case 'emission':
                            if ( parameter.color && material.emissive )
                                material.emissive.fromArray( parameter.color );
                            break;
    
                    }
    
                }
    
                //
    
                var transparent = parameters[ 'transparent' ];
                var transparency = parameters[ 'transparency' ];
    
                // <transparency> does not exist but <transparent>
    
                if ( transparency === undefined && transparent ) {
    
                    transparency = {
                        float: 1
                    };
    
                }
    
                // <transparent> does not exist but <transparency>
    
                if ( transparent === undefined && transparency ) {
    
                    transparent = {
                        opaque: 'A_ONE',
                        data: {
                            color: [ 1, 1, 1, 1 ]
                        } };
    
                }
    
                if ( transparent && transparency ) {
    
                    // handle case if a texture exists but no color
    
                    if ( transparent.data.texture ) {
    
                        material.alphaMap = getTexture( transparent.data.texture );
                        material.transparent = true;
    
                    } else {
    
                        var color = transparent.data.color;
    
                        switch ( transparent.opaque ) {
    
                            case 'A_ONE':
                                material.opacity = color[ 3 ] * transparency.float;
                                break;
                            case 'RGB_ZERO':
                                material.opacity = 1 - ( color[ 0 ] * transparency.float );
                                break;
                            case 'A_ZERO':
                                material.opacity = 1 - ( color[ 3 ] * transparency.float );
                                break;
                            case 'RGB_ONE':
                                material.opacity = color[ 0 ] * transparency.float;
                                break;
                            default:
                                console.warn( 'THREE.ColladaLoader: Invalid opaque type "%s" of transparent tag.', transparent.opaque );
    
                        }
    
                        if ( material.opacity < 1 ) material.transparent = true;
    
                    }
    
                }
    
                //
    
                if ( extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1 ) {
    
                    material.side = THREE.DoubleSide;
    
                }
    
                return material;
    
            }
    
            function getMaterial( id ) {
    
                return getBuild( library.materials[ id ], buildMaterial );
    
            }
    
            // camera
    
            function parseCamera( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' )
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'optics':
                            data.optics = parseCameraOptics( child );
                            break;
    
                    }
    
                }
    
                library.cameras[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseCameraOptics( xml ) {
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'technique_common':
                            return parseCameraTechnique( child );
    
                    }
    
                }
    
                return {};
    
            }
    
            function parseCameraTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'perspective':
                        case 'orthographic':
    
                            data.technique = child.nodeName;
                            data.parameters = parseCameraParameters( child );
    
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseCameraParameters( xml ) {
    
                var data = {};
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'xfov':
                        case 'yfov':
                        case 'xmag':
                        case 'ymag':
                        case 'znear':
                        case 'zfar':
                        case 'aspect_ratio':
                            data[ child.nodeName ] = parseFloat( child.textContent );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildCamera( data ) {
    
                var camera;
    
                switch ( data.optics.technique ) {
    
                    case 'perspective':
                        camera = new THREE.PerspectiveCamera(
                            data.optics.parameters.yfov,
                            data.optics.parameters.aspect_ratio,
                            data.optics.parameters.znear,
                            data.optics.parameters.zfar
                        );
                        break;
    
                    case 'orthographic':
                        var ymag = data.optics.parameters.ymag;
                        var xmag = data.optics.parameters.xmag;
                        var aspectRatio = data.optics.parameters.aspect_ratio;
    
                        xmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;
                        ymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;
    
                        xmag *= 0.5;
                        ymag *= 0.5;
    
                        camera = new THREE.OrthographicCamera(
                            - xmag, xmag, ymag, - ymag, // left, right, top, bottom
                            data.optics.parameters.znear,
                            data.optics.parameters.zfar
                        );
                        break;
    
                    default:
                        camera = new THREE.PerspectiveCamera();
                        break;
    
                }
    
                camera.name = data.name;
    
                return camera;
    
            }
    
            function getCamera( id ) {
    
                var data = library.cameras[ id ];
    
                if ( data !== undefined ) {
    
                    return getBuild( data, buildCamera );
    
                }
    
                console.warn( 'THREE.ColladaLoader: Couldn\'t find camera with ID:', id );
    
                return null;
    
            }
    
            // light
    
            function parseLight( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique_common':
                            data = parseLightTechnique( child );
                            break;
    
                    }
    
                }
    
                library.lights[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseLightTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'directional':
                        case 'point':
                        case 'spot':
                        case 'ambient':
    
                            data.technique = child.nodeName;
                            data.parameters = parseLightParameters( child );
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseLightParameters( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'color':
                            var array = parseFloats( child.textContent );
                            data.color = new THREE.Color().fromArray( array );
                            break;
    
                        case 'falloff_angle':
                            data.falloffAngle = parseFloat( child.textContent );
                            break;
    
                        case 'quadratic_attenuation':
                            var f = parseFloat( child.textContent );
                            data.distance = f ? Math.sqrt( 1 / f ) : 0;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildLight( data ) {
    
                var light;
    
                switch ( data.technique ) {
    
                    case 'directional':
                        light = new THREE.DirectionalLight();
                        break;
    
                    case 'point':
                        light = new THREE.PointLight();
                        break;
    
                    case 'spot':
                        light = new THREE.SpotLight();
                        break;
    
                    case 'ambient':
                        light = new THREE.AmbientLight();
                        break;
    
                }
    
                if ( data.parameters.color ) light.color.copy( data.parameters.color );
                if ( data.parameters.distance ) light.distance = data.parameters.distance;
    
                return light;
    
            }
    
            function getLight( id ) {
    
                var data = library.lights[ id ];
    
                if ( data !== undefined ) {
    
                    return getBuild( data, buildLight );
    
                }
    
                console.warn( 'THREE.ColladaLoader: Couldn\'t find light with ID:', id );
    
                return null;
    
            }
    
            // geometry
    
            function parseGeometry( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ),
                    sources: {},
                    vertices: {},
                    primitives: []
                };
    
                var mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];
    
                // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep
                if ( mesh === undefined ) return;
    
                for ( var i = 0; i < mesh.childNodes.length; i ++ ) {
    
                    var child = mesh.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    var id = child.getAttribute( 'id' );
    
                    switch ( child.nodeName ) {
    
                        case 'source':
                            data.sources[ id ] = parseSource( child );
                            break;
    
                        case 'vertices':
                            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];
                            data.vertices = parseGeometryVertices( child );
                            break;
    
                        case 'polygons':
                            console.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );
                            break;
    
                        case 'lines':
                        case 'linestrips':
                        case 'polylist':
                        case 'triangles':
                            data.primitives.push( parseGeometryPrimitive( child ) );
                            break;
    
                        default:
                            console.log( child );
    
                    }
    
                }
    
                library.geometries[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseSource( xml ) {
    
                var data = {
                    array: [],
                    stride: 3
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'float_array':
                            data.array = parseFloats( child.textContent );
                            break;
    
                        case 'Name_array':
                            data.array = parseStrings( child.textContent );
                            break;
    
                        case 'technique_common':
                            var accessor = getElementsByTagName( child, 'accessor' )[ 0 ];
    
                            if ( accessor !== undefined ) {
    
                                data.stride = parseInt( accessor.getAttribute( 'stride' ) );
    
                            }
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseGeometryVertices( xml ) {
    
                var data = {};
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    data[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );
    
                }
    
                return data;
    
            }
    
            function parseGeometryPrimitive( xml ) {
    
                var primitive = {
                    type: xml.nodeName,
                    material: xml.getAttribute( 'material' ),
                    count: parseInt( xml.getAttribute( 'count' ) ),
                    inputs: {},
                    stride: 0
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var id = parseId( child.getAttribute( 'source' ) );
                            var semantic = child.getAttribute( 'semantic' );
                            var offset = parseInt( child.getAttribute( 'offset' ) );
                            primitive.inputs[ semantic ] = { id: id, offset: offset };
                            primitive.stride = Math.max( primitive.stride, offset + 1 );
                            break;
    
                        case 'vcount':
                            primitive.vcount = parseInts( child.textContent );
                            break;
    
                        case 'p':
                            primitive.p = parseInts( child.textContent );
                            break;
    
                    }
    
                }
    
                return primitive;
    
            }
    
            function groupPrimitives( primitives ) {
    
                var build = {};
    
                for ( var i = 0; i < primitives.length; i ++ ) {
    
                    var primitive = primitives[ i ];
    
                    if ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];
    
                    build[ primitive.type ].push( primitive );
    
                }
    
                return build;
    
            }
    
            function buildGeometry( data ) {
    
                var build = {};
    
                var sources = data.sources;
                var vertices = data.vertices;
                var primitives = data.primitives;
    
                if ( primitives.length === 0 ) return {};
    
                // our goal is to create one buffer geoemtry for a single type of primitives
                // first, we group all primitives by their type
    
                var groupedPrimitives = groupPrimitives( primitives );
    
                for ( var type in groupedPrimitives ) {
    
                    // second, we create for each type of primitives (polylist,triangles or lines) a buffer geometry
    
                    build[ type ] = buildGeometryType( groupedPrimitives[ type ], sources, vertices );
    
                }
    
                return build;
    
            }
    
            function buildGeometryType( primitives, sources, vertices ) {
    
                var build = {};
    
                var position = { array: [], stride: 0 };
                var normal = { array: [], stride: 0 };
                var uv = { array: [], stride: 0 };
                var color = { array: [], stride: 0 };
    
                var skinIndex = { array: [], stride: 4 };
                var skinWeight = { array: [], stride: 4 };
    
                var geometry = new THREE.BufferGeometry();
    
                var materialKeys = [];
    
                var start = 0, count = 0;
    
                for ( var p = 0; p < primitives.length; p ++ ) {
    
                    var primitive = primitives[ p ];
                    var inputs = primitive.inputs;
                    var triangleCount = 1;
    
                    if ( primitive.vcount && primitive.vcount[ 0 ] === 4 ) {
    
                        triangleCount = 2; // one quad -> two triangles
    
                    }
    
                    // groups
    
                    if ( primitive.type === 'lines' || primitive.type === 'linestrips' ) {
    
                        count = primitive.count * 2;
    
                    } else {
    
                        count = primitive.count * 3 * triangleCount;
    
                    }
    
                    geometry.addGroup( start, count, p );
                    start += count;
    
                    // material
    
                    if ( primitive.material ) {
    
                        materialKeys.push( primitive.material );
    
                    }
    
                    // geometry data
    
                    for ( var name in inputs ) {
    
                        var input = inputs[ name ];
    
                        switch ( name )	{
    
                            case 'VERTEX':
                                for ( var key in vertices ) {
    
                                    var id = vertices[ key ];
    
                                    switch ( key ) {
    
                                        case 'POSITION':
                                            buildGeometryData( primitive, sources[ id ], input.offset, position.array );
                                            position.stride = sources[ id ].stride;
    
                                            if ( sources.skinWeights && sources.skinIndices ) {
    
                                                buildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );
                                                buildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );
    
                                            }
                                            break;
    
                                        case 'NORMAL':
                                            buildGeometryData( primitive, sources[ id ], input.offset, normal.array );
                                            normal.stride = sources[ id ].stride;
                                            break;
    
                                        case 'COLOR':
                                            buildGeometryData( primitive, sources[ id ], input.offset, color.array );
                                            color.stride = sources[ id ].stride;
                                            break;
    
                                        case 'TEXCOORD':
                                            buildGeometryData( primitive, sources[ id ], input.offset, uv.array );
                                            uv.stride = sources[ id ].stride;
                                            break;
    
                                        default:
                                            console.warn( 'THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.', key );
    
                                    }
    
                                }
                                break;
    
                            case 'NORMAL':
                                buildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );
                                normal.stride = sources[ input.id ].stride;
                                break;
    
                            case 'COLOR':
                                buildGeometryData( primitive, sources[ input.id ], input.offset, color.array );
                                color.stride = sources[ input.id ].stride;
                                break;
    
                            case 'TEXCOORD':
                                buildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );
                                uv.stride = sources[ input.id ].stride;
                                break;
    
                        }
    
                    }
    
                }
    
                // build geometry
    
                if ( position.array.length > 0 ) geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( position.array, position.stride ) );
                if ( normal.array.length > 0 ) geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normal.array, normal.stride ) );
                if ( color.array.length > 0 ) geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( color.array, color.stride ) );
                if ( uv.array.length > 0 ) geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uv.array, uv.stride ) );
    
                if ( skinIndex.array.length > 0 ) geometry.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );
                if ( skinWeight.array.length > 0 ) geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );
    
                build.data = geometry;
                build.type = primitives[ 0 ].type;
                build.materialKeys = materialKeys;
    
                return build;
    
            }
    
            function buildGeometryData( primitive, source, offset, array ) {
    
                var indices = primitive.p;
                var stride = primitive.stride;
                var vcount = primitive.vcount;
    
                function pushVector( i ) {
    
                    var index = indices[ i + offset ] * sourceStride;
                    var length = index + sourceStride;
    
                    for ( ; index < length; index ++ ) {
    
                        array.push( sourceArray[ index ] );
    
                    }
    
                }
    
                var maxcount = 0;
    
                var sourceArray = source.array;
                var sourceStride = source.stride;
    
                if ( primitive.vcount !== undefined ) {
    
                    var index = 0;
    
                    for ( var i = 0, l = vcount.length; i < l; i ++ ) {
    
                        var count = vcount[ i ];
    
                        if ( count === 4 ) {
    
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
                            var d = index + stride * 3;
    
                            pushVector( a ); pushVector( b ); pushVector( d );
                            pushVector( b ); pushVector( c ); pushVector( d );
    
                        } else if ( count === 3 ) {
    
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
    
                            pushVector( a ); pushVector( b ); pushVector( c );
    
                        } else {
    
                            maxcount = Math.max( maxcount, count );
    
                        }
    
                        index += stride * count;
    
                    }
    
                    if ( maxcount > 0 ) {
    
                        console.log( 'THREE.ColladaLoader: Geometry has faces with more than 4 vertices.' );
    
                    }
    
                } else {
    
                    for ( var i = 0, l = indices.length; i < l; i += stride ) {
    
                        pushVector( i );
    
                    }
    
                }
    
            }
    
            function getGeometry( id ) {
    
                return getBuild( library.geometries[ id ], buildGeometry );
    
            }
    
            // kinematics
    
            function parseKinematicsModel( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ) || '',
                    joints: {},
                    links: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique_common':
                            parseKinematicsTechniqueCommon( child, data );
                            break;
    
                    }
    
                }
    
                library.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildKinematicsModel( data ) {
    
                if ( data.build !== undefined ) return data.build;
    
                return data;
    
            }
    
            function getKinematicsModel( id ) {
    
                return getBuild( library.kinematicsModels[ id ], buildKinematicsModel );
    
            }
    
            function parseKinematicsTechniqueCommon( xml, data ) {
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'joint':
                            data.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );
                            break;
    
                        case 'link':
                            data.links.push( parseKinematicsLink( child ) );
                            break;
    
                    }
    
                }
    
            }
    
            function parseKinematicsJoint( xml ) {
    
                var data;
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'prismatic':
                        case 'revolute':
                            data = parseKinematicsJointParameter( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseKinematicsJointParameter( xml, data ) {
    
                var data = {
                    sid: xml.getAttribute( 'sid' ),
                    name: xml.getAttribute( 'name' ) || '',
                    axis: new THREE.Vector3(),
                    limits: {
                        min: 0,
                        max: 0
                    },
                    type: xml.nodeName,
                    static: false,
                    zeroPosition: 0,
                    middlePosition: 0
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'axis':
                            var array = parseFloats( child.textContent );
                            data.axis.fromArray( array );
                            break;
                        case 'limits':
                            var max = child.getElementsByTagName( 'max' )[ 0 ];
                            var min = child.getElementsByTagName( 'min' )[ 0 ];
    
                            data.limits.max = parseFloat( max.textContent );
                            data.limits.min = parseFloat( min.textContent );
                            break;
    
                    }
    
                }
    
                // if min is equal to or greater than max, consider the joint static
    
                if ( data.limits.min >= data.limits.max ) {
    
                    data.static = true;
    
                }
    
                // calculate middle position
    
                data.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;
    
                return data;
    
            }
    
            function parseKinematicsLink( xml ) {
    
                var data = {
                    sid: xml.getAttribute( 'sid' ),
                    name: xml.getAttribute( 'name' ) || '',
                    attachments: [],
                    transforms: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'attachment_full':
                            data.attachments.push( parseKinematicsAttachment( child ) );
                            break;
    
                        case 'matrix':
                        case 'translate':
                        case 'rotate':
                            data.transforms.push( parseKinematicsTransform( child ) );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseKinematicsAttachment( xml ) {
    
                var data = {
                    joint: xml.getAttribute( 'joint' ).split( '/' ).pop(),
                    transforms: [],
                    links: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'link':
                            data.links.push( parseKinematicsLink( child ) );
                            break;
    
                        case 'matrix':
                        case 'translate':
                        case 'rotate':
                            data.transforms.push( parseKinematicsTransform( child ) );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseKinematicsTransform( xml ) {
    
                var data = {
                    type: xml.nodeName
                };
    
                var array = parseFloats( xml.textContent );
    
                switch ( data.type ) {
    
                    case 'matrix':
                        data.obj = new THREE.Matrix4();
                        data.obj.fromArray( array ).transpose();
                        break;
    
                    case 'translate':
                        data.obj = new THREE.Vector3();
                        data.obj.fromArray( array );
                        break;
    
                    case 'rotate':
                        data.obj = new THREE.Vector3();
                        data.obj.fromArray( array );
                        data.angle = THREE.Math.degToRad( array[ 3 ] );
                        break;
    
                }
    
                return data;
    
            }
    
            function parseKinematicsScene( xml ) {
    
                var data = {
                    bindJointAxis: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'bind_joint_axis':
                            data.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );
                            break;
    
                    }
    
                }
    
                library.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;
    
            }
    
            function parseKinematicsBindJointAxis( xml ) {
    
                var data = {
                    target: xml.getAttribute( 'target' ).split( '/' ).pop()
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'axis':
                            var param = child.getElementsByTagName( 'param' )[ 0 ];
                            data.axis = param.textContent;
                            var tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];
                            data.jointIndex = tmpJointIndex.substr( 0, tmpJointIndex.length - 1 );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildKinematicsScene( data ) {
    
                if ( data.build !== undefined ) return data.build;
    
                return data;
    
            }
    
            function getKinematicsScene( id ) {
    
                return getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );
    
            }
    
            function setupKinematics() {
    
                var kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];
                var kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];
                var visualSceneId = Object.keys( library.visualScenes )[ 0 ];
    
                if ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;
    
                var kinematicsModel = getKinematicsModel( kinematicsModelId );
                var kinematicsScene = getKinematicsScene( kinematicsSceneId );
                var visualScene = getVisualScene( visualSceneId );
    
                var bindJointAxis = kinematicsScene.bindJointAxis;
                var jointMap = {};
    
                for ( var i = 0, l = bindJointAxis.length; i < l; i ++ ) {
    
                    var axis = bindJointAxis[ i ];
    
                    // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'
    
                    var targetElement = collada.querySelector( '[sid="' + axis.target + '"]' );
    
                    if ( targetElement ) {
    
                        // get the parent of the transfrom element
    
                        var parentVisualElement = targetElement.parentElement;
    
                        // connect the joint of the kinematics model with the element in the visual scene
    
                        connect( axis.jointIndex, parentVisualElement );
    
                    }
    
                }
    
                function connect( jointIndex, visualElement ) {
    
                    var visualElementName = visualElement.getAttribute( 'name' );
                    var joint = kinematicsModel.joints[ jointIndex ];
    
                    visualScene.traverse( function ( object ) {
    
                        if ( object.name === visualElementName ) {
    
                            jointMap[ jointIndex ] = {
                                object: object,
                                transforms: buildTransformList( visualElement ),
                                joint: joint,
                                position: joint.zeroPosition
                            };
    
                        }
    
                    } );
    
                }
    
                var m0 = new THREE.Matrix4();
    
                kinematics = {
    
                    joints: kinematicsModel && kinematicsModel.joints,
    
                    getJointValue: function ( jointIndex ) {
    
                        var jointData = jointMap[ jointIndex ];
    
                        if ( jointData ) {
    
                            return jointData.position;
    
                        } else {
    
                            console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\'t exist.' );
    
                        }
    
                    },
    
                    setJointValue: function ( jointIndex, value ) {
    
                        var jointData = jointMap[ jointIndex ];
    
                        if ( jointData ) {
    
                            var joint = jointData.joint;
    
                            if ( value > joint.limits.max || value < joint.limits.min ) {
    
                                console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );
    
                            } else if ( joint.static ) {
    
                                console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );
    
                            } else {
    
                                var object = jointData.object;
                                var axis = joint.axis;
                                var transforms = jointData.transforms;
    
                                matrix.identity();
    
                                // each update, we have to apply all transforms in the correct order
    
                                for ( var i = 0; i < transforms.length; i ++ ) {
    
                                    var transform = transforms[ i ];
    
                                    // if there is a connection of the transform node with a joint, apply the joint value
    
                                    if ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {
    
                                        switch ( joint.type ) {
    
                                            case 'revolute':
                                                matrix.multiply( m0.makeRotationAxis( axis, THREE.Math.degToRad( value ) ) );
                                                break;
    
                                            case 'prismatic':
                                                matrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );
                                                break;
    
                                            default:
                                                console.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );
                                                break;
    
                                        }
    
                                    } else {
    
                                        switch ( transform.type ) {
    
                                            case 'matrix':
                                                matrix.multiply( transform.obj );
                                                break;
    
                                            case 'translate':
                                                matrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );
                                                break;
    
                                            case 'scale':
                                                matrix.scale( transform.obj );
                                                break;
    
                                            case 'rotate':
                                                matrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );
                                                break;
    
                                        }
    
                                    }
    
                                }
    
                                object.matrix.copy( matrix );
                                object.matrix.decompose( object.position, object.quaternion, object.scale );
    
                                jointMap[ jointIndex ].position = value;
    
                            }
    
                        } else {
    
                            console.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );
    
                        }
    
                    }
    
                };
    
            }
    
            function buildTransformList( node ) {
    
                var transforms = [];
    
                var xml = collada.querySelector( '[id="' + node.id + '"]' );
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'matrix':
                            var array = parseFloats( child.textContent );
                            var matrix = new THREE.Matrix4().fromArray( array ).transpose();
                            transforms.push( {
                                sid: child.getAttribute( 'sid' ),
                                type: child.nodeName,
                                obj: matrix
                            } );
                            break;
    
                        case 'translate':
                        case 'scale':
                            var array = parseFloats( child.textContent );
                            var vector = new THREE.Vector3().fromArray( array );
                            transforms.push( {
                                sid: child.getAttribute( 'sid' ),
                                type: child.nodeName,
                                obj: vector
                            } );
                            break;
    
                        case 'rotate':
                            var array = parseFloats( child.textContent );
                            var vector = new THREE.Vector3().fromArray( array );
                            var angle = THREE.Math.degToRad( array[ 3 ] );
                            transforms.push( {
                                sid: child.getAttribute( 'sid' ),
                                type: child.nodeName,
                                obj: vector,
                                angle: angle
                            } );
                            break;
    
                    }
    
                }
    
                return transforms;
    
            }
    
            // nodes
    
            function prepareNodes( xml ) {
    
                var elements = xml.getElementsByTagName( 'node' );
    
                // ensure all node elements have id attributes
    
                for ( var i = 0; i < elements.length; i ++ ) {
    
                    var element = elements[ i ];
    
                    if ( element.hasAttribute( 'id' ) === false ) {
    
                        element.setAttribute( 'id', generateId() );
    
                    }
    
                }
    
            }
    
            var matrix = new THREE.Matrix4();
            var vector = new THREE.Vector3();
    
            function parseNode( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ) || '',
                    type: xml.getAttribute( 'type' ),
                    id: xml.getAttribute( 'id' ),
                    sid: xml.getAttribute( 'sid' ),
                    matrix: new THREE.Matrix4(),
                    nodes: [],
                    instanceCameras: [],
                    instanceControllers: [],
                    instanceLights: [],
                    instanceGeometries: [],
                    instanceNodes: [],
                    transforms: {}
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'node':
                            data.nodes.push( child.getAttribute( 'id' ) );
                            parseNode( child );
                            break;
    
                        case 'instance_camera':
                            data.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                        case 'instance_controller':
                            data.instanceControllers.push( parseNodeInstance( child ) );
                            break;
    
                        case 'instance_light':
                            data.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                        case 'instance_geometry':
                            data.instanceGeometries.push( parseNodeInstance( child ) );
                            break;
    
                        case 'instance_node':
                            data.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                        case 'matrix':
                            var array = parseFloats( child.textContent );
                            data.matrix.multiply( matrix.fromArray( array ).transpose() );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'translate':
                            var array = parseFloats( child.textContent );
                            vector.fromArray( array );
                            data.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'rotate':
                            var array = parseFloats( child.textContent );
                            var angle = THREE.Math.degToRad( array[ 3 ] );
                            data.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'scale':
                            var array = parseFloats( child.textContent );
                            data.matrix.scale( vector.fromArray( array ) );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'extra':
                            break;
    
                        default:
                            console.log( child );
    
                    }
    
                }
    
                library.nodes[ data.id ] = data;
    
                return data;
    
            }
    
            function parseNodeInstance( xml ) {
    
                var data = {
                    id: parseId( xml.getAttribute( 'url' ) ),
                    materials: {},
                    skeletons: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'bind_material':
                            var instances = child.getElementsByTagName( 'instance_material' );
    
                            for ( var j = 0; j < instances.length; j ++ ) {
    
                                var instance = instances[ j ];
                                var symbol = instance.getAttribute( 'symbol' );
                                var target = instance.getAttribute( 'target' );
    
                                data.materials[ symbol ] = parseId( target );
    
                            }
    
                            break;
    
                        case 'skeleton':
                            data.skeletons.push( parseId( child.textContent ) );
                            break;
    
                        default:
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildSkeleton( skeletons, joints ) {
    
                var boneData = [];
                var sortedBoneData = [];
    
                var i, j, data;
    
                // a skeleton can have multiple root bones. collada expresses this
                // situtation with multiple "skeleton" tags per controller instance
    
                for ( i = 0; i < skeletons.length; i ++ ) {
    
                    var skeleton = skeletons[ i ];
                    var root = getNode( skeleton );
    
                    // setup bone data for a single bone hierarchy
    
                    buildBoneHierarchy( root, joints, boneData );
    
                }
    
                // sort bone data (the order is defined in the corresponding controller)
    
                for ( i = 0; i < joints.length; i ++ ) {
    
                    for ( j = 0; j < boneData.length; j ++ ) {
    
                        data = boneData[ j ];
    
                        if ( data.bone.name === joints[ i ].name ) {
    
                            sortedBoneData[ i ] = data;
                            data.processed = true;
                            break;
    
                        }
    
                    }
    
                }
    
                // add unprocessed bone data at the end of the list
    
                for ( i = 0; i < boneData.length; i ++ ) {
    
                    data = boneData[ i ];
    
                    if ( data.processed === false ) {
    
                        sortedBoneData.push( data );
                        data.processed = true;
    
                    }
    
                }
    
                // setup arrays for skeleton creation
    
                var bones = [];
                var boneInverses = [];
    
                for ( i = 0; i < sortedBoneData.length; i ++ ) {
    
                    data = sortedBoneData[ i ];
    
                    bones.push( data.bone );
                    boneInverses.push( data.boneInverse );
    
                }
    
                return new THREE.Skeleton( bones, boneInverses );
    
            }
    
            function buildBoneHierarchy( root, joints, boneData ) {
    
                // setup bone data from visual scene
    
                root.traverse( function ( object ) {
    
                    if ( object.isBone === true ) {
    
                        var boneInverse;
    
                        // retrieve the boneInverse from the controller data
    
                        for ( var i = 0; i < joints.length; i ++ ) {
    
                            var joint = joints[ i ];
    
                            if ( joint.name === object.name ) {
    
                                boneInverse = joint.boneInverse;
                                break;
    
                            }
    
                        }
    
                        if ( boneInverse === undefined ) {
    
                            // Unfortunately, there can be joints in the visual scene that are not part of the
                            // corresponding controller. In this case, we have to create a dummy boneInverse matrix
                            // for the respective bone. This bone won't affect any vertices, because there are no skin indices
                            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to
                            // ensure a correct animation of the model.
    
                             boneInverse = new THREE.Matrix4();
    
                        }
    
                        boneData.push( { bone: object, boneInverse: boneInverse, processed: false } );
    
                    }
    
                } );
    
            }
    
            function buildNode( data ) {
    
                var objects = [];
    
                var matrix = data.matrix;
                var nodes = data.nodes;
                var type = data.type;
                var instanceCameras = data.instanceCameras;
                var instanceControllers = data.instanceControllers;
                var instanceLights = data.instanceLights;
                var instanceGeometries = data.instanceGeometries;
                var instanceNodes = data.instanceNodes;
    
                // nodes
    
                for ( var i = 0, l = nodes.length; i < l; i ++ ) {
    
                    objects.push( getNode( nodes[ i ] ) );
    
                }
    
                // instance cameras
    
                for ( var i = 0, l = instanceCameras.length; i < l; i ++ ) {
    
                    var instanceCamera = getCamera( instanceCameras[ i ] );
    
                    if ( instanceCamera !== null ) {
    
                        objects.push( instanceCamera.clone() );
    
                    }
    
                }
    
                // instance controllers
    
                for ( var i = 0, l = instanceControllers.length; i < l; i ++ ) {
    
                    var instance = instanceControllers[ i ];
                    var controller = getController( instance.id );
                    var geometries = getGeometry( controller.id );
                    var newObjects = buildObjects( geometries, instance.materials );
    
                    var skeletons = instance.skeletons;
                    var joints = controller.skin.joints;
    
                    var skeleton = buildSkeleton( skeletons, joints );
    
                    for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {
    
                        var object = newObjects[ j ];
    
                        if ( object.isSkinnedMesh ) {
    
                            object.bind( skeleton, controller.skin.bindMatrix );
                            object.normalizeSkinWeights();
    
                        }
    
                        objects.push( object );
    
                    }
    
                }
    
                // instance lights
    
                for ( var i = 0, l = instanceLights.length; i < l; i ++ ) {
    
                    var instanceLight = getLight( instanceLights[ i ] );
    
                    if ( instanceLight !== null ) {
    
                        objects.push( instanceLight.clone() );
    
                    }
    
                }
    
                // instance geometries
    
                for ( var i = 0, l = instanceGeometries.length; i < l; i ++ ) {
    
                    var instance = instanceGeometries[ i ];
    
                    // a single geometry instance in collada can lead to multiple object3Ds.
                    // this is the case when primitives are combined like triangles and lines
    
                    var geometries = getGeometry( instance.id );
                    var newObjects = buildObjects( geometries, instance.materials );
    
                    for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {
    
                        objects.push( newObjects[ j ] );
    
                    }
    
                }
    
                // instance nodes
    
                for ( var i = 0, l = instanceNodes.length; i < l; i ++ ) {
    
                    objects.push( getNode( instanceNodes[ i ] ).clone() );
    
                }
    
                var object;
    
                if ( nodes.length === 0 && objects.length === 1 ) {
    
                    object = objects[ 0 ];
    
                } else {
    
                    object = ( type === 'JOINT' ) ? new THREE.Bone() : new THREE.Group();
    
                    for ( var i = 0; i < objects.length; i ++ ) {
    
                        object.add( objects[ i ] );
    
                    }
    
                }
    
                object.name = ( type === 'JOINT' ) ? data.sid : data.name;
                object.matrix.copy( matrix );
                object.matrix.decompose( object.position, object.quaternion, object.scale );
    
                return object;
    
            }
    
            function resolveMaterialBinding( keys, instanceMaterials ) {
    
                var materials = [];
    
                for ( var i = 0, l = keys.length; i < l; i ++ ) {
    
                    var id = instanceMaterials[ keys[ i ] ];
                    materials.push( getMaterial( id ) );
    
                }
    
                return materials;
    
            }
    
            function buildObjects( geometries, instanceMaterials ) {
    
                var objects = [];
    
                for ( var type in geometries ) {
    
                    var geometry = geometries[ type ];
    
                    var materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );
    
                    // handle case if no materials are defined
    
                    if ( materials.length === 0 ) {
    
                        if ( type === 'lines' || type === 'linestrips' ) {
    
                            materials.push( new THREE.LineBasicMaterial() );
    
                        } else {
    
                            materials.push( new THREE.MeshPhongMaterial() );
    
                        }
    
                    }
    
                    // regard skinning
    
                    var skinning = ( geometry.data.attributes.skinIndex !== undefined );
    
                    if ( skinning ) {
    
                        for ( var i = 0, l = materials.length; i < l; i ++ ) {
    
                            materials[ i ].skinning = true;
    
                        }
    
                    }
    
                    // choose between a single or multi materials (material array)
    
                    var material = ( materials.length === 1 ) ? materials[ 0 ] : materials;
    
                    // now create a specific 3D object
    
                    var object;
    
                    switch ( type ) {
    
                        case 'lines':
                            object = new THREE.LineSegments( geometry.data, material );
                            break;
    
                        case 'linestrips':
                            object = new THREE.Line( geometry.data, material );
                            break;
    
                        case 'triangles':
                        case 'polylist':
                            if ( skinning ) {
    
                                object = new THREE.SkinnedMesh( geometry.data, material );
    
                            } else {
    
                                object = new THREE.Mesh( geometry.data, material );
    
                            }
                            break;
    
                    }
    
                    objects.push( object );
    
                }
    
                return objects;
    
            }
    
            function getNode( id ) {
    
                return getBuild( library.nodes[ id ], buildNode );
    
            }
    
            // visual scenes
    
            function parseVisualScene( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ),
                    children: []
                };
    
                prepareNodes( xml );
    
                var elements = getElementsByTagName( xml, 'node' );
    
                for ( var i = 0; i < elements.length; i ++ ) {
    
                    data.children.push( parseNode( elements[ i ] ) );
    
                }
    
                library.visualScenes[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildVisualScene( data ) {
    
                var group = new THREE.Group();
                group.name = data.name;
    
                var children = data.children;
    
                for ( var i = 0; i < children.length; i ++ ) {
    
                    var child = children[ i ];
    
                    if ( child.id === null ) {
    
                        group.add( buildNode( child ) );
    
                    } else {
    
                        // if there is an ID, let's try to get the finished build (e.g. joints are already build)
    
                        group.add( getNode( child.id ) );
    
                    }
    
                }
    
                return group;
    
            }
    
            function getVisualScene( id ) {
    
                return getBuild( library.visualScenes[ id ], buildVisualScene );
    
            }
    
            // scenes
    
            function parseScene( xml ) {
    
                var instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];
                return getVisualScene( parseId( instance.getAttribute( 'url' ) ) );
    
            }
    
            function setupAnimations() {
    
                var clips = library.clips;
    
                if ( isEmpty( clips ) === true ) {
    
                    if ( isEmpty( library.animations ) === false ) {
    
                        // if there are animations but no clips, we create a default clip for playback
    
                        var tracks = [];
    
                        for ( var id in library.animations ) {
    
                            var animationTracks = getAnimation( id );
    
                            for ( var i = 0, l = animationTracks.length; i < l; i ++ ) {
    
                                tracks.push( animationTracks[ i ] );
    
                            }
    
                        }
    
                        animations.push( new THREE.AnimationClip( 'default', - 1, tracks ) );
    
                    }
    
                } else {
    
                    for ( var id in clips ) {
    
                        animations.push( getAnimationClip( id ) );
    
                    }
    
                }
    
            }
    
            console.time( 'THREE.ColladaLoader' );
    
            if ( text.length === 0 ) {
    
                return { scene: new THREE.Scene() };
    
            }
    
            console.time( 'THREE.ColladaLoader: DOMParser' );
    
            var xml = new DOMParser().parseFromString( text, 'application/xml' );
    
            console.timeEnd( 'THREE.ColladaLoader: DOMParser' );
    
            var collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];
    
            // metadata
    
            var version = collada.getAttribute( 'version' );
            console.log( 'THREE.ColladaLoader: File version', version );
    
            var asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );
            var textureLoader = new THREE.TextureLoader( this.manager );
            textureLoader.setPath( path ).setCrossOrigin( this.crossOrigin );
    
            //
    
            var animations = [];
            var kinematics = {};
            var count = 0;
    
            //
    
            var library = {
                animations: {},
                clips: {},
                controllers: {},
                images: {},
                effects: {},
                materials: {},
                cameras: {},
                lights: {},
                geometries: {},
                nodes: {},
                visualScenes: {},
                kinematicsModels: {},
                kinematicsScenes: {}
            };
    
            console.time( 'THREE.ColladaLoader: Parse' );
    
            parseLibrary( collada, 'library_animations', 'animation', parseAnimation );
            parseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );
            parseLibrary( collada, 'library_controllers', 'controller', parseController );
            parseLibrary( collada, 'library_images', 'image', parseImage );
            parseLibrary( collada, 'library_effects', 'effect', parseEffect );
            parseLibrary( collada, 'library_materials', 'material', parseMaterial );
            parseLibrary( collada, 'library_cameras', 'camera', parseCamera );
            parseLibrary( collada, 'library_lights', 'light', parseLight );
            parseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );
            parseLibrary( collada, 'library_nodes', 'node', parseNode );
            parseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );
            parseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );
            parseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );
    
            console.timeEnd( 'THREE.ColladaLoader: Parse' );
    
            console.time( 'THREE.ColladaLoader: Build' );
    
            buildLibrary( library.animations, buildAnimation );
            buildLibrary( library.clips, buildAnimationClip );
            buildLibrary( library.controllers, buildController );
            buildLibrary( library.images, buildImage );
            buildLibrary( library.effects, buildEffect );
            buildLibrary( library.materials, buildMaterial );
            buildLibrary( library.cameras, buildCamera );
            buildLibrary( library.lights, buildLight );
            buildLibrary( library.geometries, buildGeometry );
            buildLibrary( library.visualScenes, buildVisualScene );
    
            console.timeEnd( 'THREE.ColladaLoader: Build' );
    
            setupAnimations();
            setupKinematics();
    
            var scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );
    
            if ( asset.upAxis === 'Z_UP' ) {
    
                scene.rotation.x = - Math.PI / 2;
    
            }
    
            scene.scale.multiplyScalar( asset.unit );
    
            console.timeEnd( 'THREE.ColladaLoader' );
    
            return {
                animations: animations,
                kinematics: kinematics,
                library: library,
                scene: scene
            };
    
        }
    
    };
},{}],"src/lib/FBXLoader":[function(require,module,exports){
/**
 * @author Kyle-Larson https://github.com/Kyle-Larson
 * @author Takahiro https://github.com/takahirox
 * @author Lewy Blue https://github.com/looeee
 *
 * Loader loads FBX file and generates Group representing FBX scene.
 * Requires FBX file to be >= 7.0 and in ASCII or to be any version in Binary format.
 *
 * Supports:
 * 	Mesh Generation (Positional Data)
 * 	Normal Data (Per Vertex Drawing Instance)
 *	UV Data (Per Vertex Drawing Instance)
 *	Skinning
 *	Animation
 * 	- Separated Animations based on stacks.
 * 	- Skeletal & Non-Skeletal Animations
 *	NURBS (Open, Closed and Periodic forms)
 *
 * Needs Support:
 *	Euler rotation order
 *
 *
 * FBX format references:
 * 	https://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure
 *
 * 	Binary format specification:
 *		https://code.blender.org/2013/08/fbx-binary-file-format-specification/
 *		https://wiki.rogiken.org/specifications/file-format/fbx/ (more detail but Japanese)
 */

( function () {
    
        THREE.FBXLoader = function ( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
        };
    
        Object.assign( THREE.FBXLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var self = this;
    
                var resourceDirectory = THREE.LoaderUtils.extractUrlBase( url );
    
                var loader = new THREE.FileLoader( this.manager );
                loader.setResponseType( 'arraybuffer' );
                loader.load( url, function ( buffer ) {
    
                    try {
    
                        var scene = self.parse( buffer, resourceDirectory );
                        onLoad( scene );
    
                    } catch ( error ) {
    
                        window.setTimeout( function () {
    
                            if ( onError ) onError( error );
    
                            self.manager.itemError( url );
    
                        }, 0 );
    
                    }
    
                }, onProgress, onError );
    
            },
    
            parse: function ( FBXBuffer, resourceDirectory ) {
    
                var FBXTree;
    
                if ( isFbxFormatBinary( FBXBuffer ) ) {
    
                    FBXTree = new BinaryParser().parse( FBXBuffer );
    
                } else {
    
                    var FBXText = convertArrayBufferToString( FBXBuffer );
    
                    if ( ! isFbxFormatASCII( FBXText ) ) {
    
                        throw new Error( 'THREE.FBXLoader: Unknown format.' );
    
                    }
    
                    if ( getFbxVersion( FBXText ) < 7000 ) {
    
                        throw new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );
    
                    }
    
                    FBXTree = new TextParser().parse( FBXText );
    
                }
    
                // console.log( FBXTree );
    
                var connections = parseConnections( FBXTree );
                var images = parseImages( FBXTree );
                var textures = parseTextures( FBXTree, new THREE.TextureLoader( this.manager ).setPath( resourceDirectory ), images, connections );
                var materials = parseMaterials( FBXTree, textures, connections );
                var skeletons = parseDeformers( FBXTree, connections );
                var geometryMap = parseGeometries( FBXTree, connections, skeletons );
                var sceneGraph = parseScene( FBXTree, connections, skeletons, geometryMap, materials );
    
                return sceneGraph;
    
            }
    
        } );
    
        // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )
        // and details the connection type
        function parseConnections( FBXTree ) {
    
            var connectionMap = new Map();
    
            if ( 'Connections' in FBXTree ) {
    
                var rawConnections = FBXTree.Connections.connections;
    
                rawConnections.forEach( function ( rawConnection ) {
    
                    var fromID = rawConnection[ 0 ];
                    var toID = rawConnection[ 1 ];
                    var relationship = rawConnection[ 2 ];
    
                    if ( ! connectionMap.has( fromID ) ) {
    
                        connectionMap.set( fromID, {
                            parents: [],
                            children: []
                        } );
    
                    }
    
                    var parentRelationship = { ID: toID, relationship: relationship };
                    connectionMap.get( fromID ).parents.push( parentRelationship );
    
                    if ( ! connectionMap.has( toID ) ) {
    
                        connectionMap.set( toID, {
                            parents: [],
                            children: []
                        } );
    
                    }
    
                    var childRelationship = { ID: fromID, relationship: relationship };
                    connectionMap.get( toID ).children.push( childRelationship );
    
                } );
    
            }
    
            return connectionMap;
    
        }
    
        // Parse FBXTree.Objects.Video for embedded image data
        // These images are connected to textures in FBXTree.Objects.Textures
        // via FBXTree.Connections.
        function parseImages( FBXTree ) {
    
            var images = {};
            var blobs = {};
    
            if ( 'Video' in FBXTree.Objects ) {
    
                var videoNodes = FBXTree.Objects.Video;
    
                for ( var nodeID in videoNodes ) {
    
                    var videoNode = videoNodes[ nodeID ];
    
                    var id = parseInt( nodeID );
    
                    images[ id ] = videoNode.Filename;
    
                    // raw image data is in videoNode.Content
                    if ( 'Content' in videoNode ) {
    
                        var arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );
                        var base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );
    
                        if ( arrayBufferContent || base64Content ) {
    
                            var image = parseImage( videoNodes[ nodeID ] );
    
                            blobs[ videoNode.Filename ] = image;
    
                        }
    
                    }
    
                }
    
            }
    
            for ( var id in images ) {
    
                var filename = images[ id ];
    
                if ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];
                else images[ id ] = images[ id ].split( '\\' ).pop();
    
            }
    
            return images;
    
        }
    
        // Parse embedded image data in FBXTree.Video.Content
        function parseImage( videoNode ) {
    
            var content = videoNode.Content;
            var fileName = videoNode.RelativeFilename || videoNode.Filename;
            var extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();
    
            var type;
    
            switch ( extension ) {
    
                case 'bmp':
    
                    type = 'image/bmp';
                    break;
    
                case 'jpg':
                case 'jpeg':
    
                    type = 'image/jpeg';
                    break;
    
                case 'png':
    
                    type = 'image/png';
                    break;
    
                case 'tif':
    
                    type = 'image/tiff';
                    break;
    
                default:
    
                    console.warn( 'FBXLoader: Image type "' + extension + '" is not supported.' );
                    return;
    
            }
    
            if ( typeof content === 'string' ) { // ASCII format
    
                return 'data:' + type + ';base64,' + content;
    
            } else { // Binary Format
    
                var array = new Uint8Array( content );
                return window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );
    
            }
    
        }
    
        // Parse nodes in FBXTree.Objects.Texture
        // These contain details such as UV scaling, cropping, rotation etc and are connected
        // to images in FBXTree.Objects.Video
        function parseTextures( FBXTree, loader, images, connections ) {
    
            var textureMap = new Map();
    
            if ( 'Texture' in FBXTree.Objects ) {
    
                var textureNodes = FBXTree.Objects.Texture;
                for ( var nodeID in textureNodes ) {
    
                    var texture = parseTexture( textureNodes[ nodeID ], loader, images, connections );
                    textureMap.set( parseInt( nodeID ), texture );
    
                }
    
            }
    
            return textureMap;
    
        }
    
        // Parse individual node in FBXTree.Objects.Texture
        function parseTexture( textureNode, loader, images, connections ) {
    
            var texture = loadTexture( textureNode, loader, images, connections );
    
            texture.ID = textureNode.id;
    
            texture.name = textureNode.attrName;
    
            var wrapModeU = textureNode.WrapModeU;
            var wrapModeV = textureNode.WrapModeV;
    
            var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;
            var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;
    
            // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a
            // 0: repeat(default), 1: clamp
    
            texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
            texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
    
            if ( 'Scaling' in textureNode ) {
    
                var values = textureNode.Scaling.value;
    
                texture.repeat.x = values[ 0 ];
                texture.repeat.y = values[ 1 ];
    
            }
    
            return texture;
    
        }
    
        // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader
        function loadTexture( textureNode, loader, images, connections ) {
    
            var fileName;
    
            var currentPath = loader.path;
    
            var children = connections.get( textureNode.id ).children;
    
            if ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {
    
                fileName = images[ children[ 0 ].ID ];
    
                if ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {
    
                    loader.setPath( undefined );
    
                }
    
            }
    
            var texture = loader.load( fileName );
    
            loader.setPath( currentPath );
    
            return texture;
    
        }
    
        // Parse nodes in FBXTree.Objects.Material
        function parseMaterials( FBXTree, textureMap, connections ) {
    
            var materialMap = new Map();
    
            if ( 'Material' in FBXTree.Objects ) {
    
                var materialNodes = FBXTree.Objects.Material;
    
                for ( var nodeID in materialNodes ) {
    
                    var material = parseMaterial( FBXTree, materialNodes[ nodeID ], textureMap, connections );
    
                    if ( material !== null ) materialMap.set( parseInt( nodeID ), material );
    
                }
    
            }
    
            return materialMap;
    
        }
    
        // Parse single node in FBXTree.Objects.Material
        // Materials are connected to texture maps in FBXTree.Objects.Textures
        // FBX format currently only supports Lambert and Phong shading models
        function parseMaterial( FBXTree, materialNode, textureMap, connections ) {
    
            var ID = materialNode.id;
            var name = materialNode.attrName;
            var type = materialNode.ShadingModel;
    
            //Case where FBX wraps shading model in property object.
            if ( typeof type === 'object' ) {
    
                type = type.value;
    
            }
    
            // Ignore unused materials which don't have any connections.
            if ( ! connections.has( ID ) ) return null;
    
            var parameters = parseParameters( FBXTree, materialNode, textureMap, ID, connections );
    
            var material;
    
            switch ( type.toLowerCase() ) {
    
                case 'phong':
                    material = new THREE.MeshPhongMaterial();
                    break;
                case 'lambert':
                    material = new THREE.MeshLambertMaterial();
                    break;
                default:
                    console.warn( 'THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.', type );
                    material = new THREE.MeshPhongMaterial( { color: 0x3300ff } );
                    break;
    
            }
    
            material.setValues( parameters );
            material.name = name;
    
            return material;
    
        }
    
        // Parse FBX material and return parameters suitable for a three.js material
        // Also parse the texture map and return any textures associated with the material
        function parseParameters( FBXTree, properties, textureMap, ID, connections ) {
    
            var parameters = {};
    
            if ( properties.BumpFactor ) {
    
                parameters.bumpScale = properties.BumpFactor.value;
    
            }
            if ( properties.Diffuse ) {
    
                parameters.color = new THREE.Color().fromArray( properties.Diffuse.value );
    
            }
            if ( properties.DisplacementFactor ) {
    
                parameters.displacementScale = properties.DisplacementFactor.value;
    
            }
            if ( properties.ReflectionFactor ) {
    
                parameters.reflectivity = properties.ReflectionFactor.value;
    
            }
            if ( properties.Specular ) {
    
                parameters.specular = new THREE.Color().fromArray( properties.Specular.value );
    
            }
            if ( properties.Shininess ) {
    
                parameters.shininess = properties.Shininess.value;
    
            }
            if ( properties.Emissive ) {
    
                parameters.emissive = new THREE.Color().fromArray( properties.Emissive.value );
    
            }
            if ( properties.EmissiveFactor ) {
    
                parameters.emissiveIntensity = parseFloat( properties.EmissiveFactor.value );
    
            }
            if ( properties.Opacity ) {
    
                parameters.opacity = parseFloat( properties.Opacity.value );
    
            }
            if ( parameters.opacity < 1.0 ) {
    
                parameters.transparent = true;
    
            }
    
            connections.get( ID ).children.forEach( function ( child ) {
    
                var type = child.relationship;
    
                switch ( type ) {
    
                    case 'Bump':
                        parameters.bumpMap = textureMap.get( child.ID );
                        break;
    
                    case 'DiffuseColor':
                        parameters.map = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'DisplacementColor':
                        parameters.displacementMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
    
                    case 'EmissiveColor':
                        parameters.emissiveMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'NormalMap':
                        parameters.normalMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'ReflectionColor':
                        parameters.envMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;
                        break;
    
                    case 'SpecularColor':
                        parameters.specularMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'TransparentColor':
                        parameters.alphaMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        parameters.transparent = true;
                        break;
    
                    case 'AmbientColor':
                    case 'ShininessExponent': // AKA glossiness map
                    case 'SpecularFactor': // AKA specularLevel
                    case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor
                    default:
                        console.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );
                        break;
    
                }
    
            } );
    
            return parameters;
    
        }
    
        // get a texture from the textureMap for use by a material.
        function getTexture( FBXTree, textureMap, id, connections ) {
    
            // if the texture is a layered texture, just use the first layer and issue a warning
            if ( 'LayeredTexture' in FBXTree.Objects && id in FBXTree.Objects.LayeredTexture ) {
    
                console.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );
                id = connections.get( id ).children[ 0 ].ID;
    
            }
    
            return textureMap.get( id );
    
        }
    
        // Parse nodes in FBXTree.Objects.Deformer
        // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here
        // Generates map of Skeleton-like objects for use later when generating and binding skeletons.
        function parseDeformers( FBXTree, connections ) {
    
            var skeletons = {};
    
            if ( 'Deformer' in FBXTree.Objects ) {
    
                var DeformerNodes = FBXTree.Objects.Deformer;
    
                for ( var nodeID in DeformerNodes ) {
    
                    var deformerNode = DeformerNodes[ nodeID ];
    
                    if ( deformerNode.attrType === 'Skin' ) {
    
                        var relationships = connections.get( parseInt( nodeID ) );
    
                        var skeleton = parseSkeleton( relationships, DeformerNodes );
                        skeleton.ID = nodeID;
    
                        if ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );
                        skeleton.geometryID = relationships.parents[ 0 ].ID;
    
                        skeletons[ nodeID ] = skeleton;
    
                    }
    
                }
    
            }
    
            return skeletons;
    
        }
    
        // Parse single nodes in FBXTree.Objects.Deformer
        // The top level deformer nodes have type 'Skin' and subDeformer nodes have type 'Cluster'
        // Each skin node represents a skeleton and each cluster node represents a bone
        function parseSkeleton( connections, deformerNodes ) {
    
            var rawBones = [];
    
            connections.children.forEach( function ( child ) {
    
                var subDeformerNode = deformerNodes[ child.ID ];
    
                if ( subDeformerNode.attrType !== 'Cluster' ) return;
    
                var rawBone = {
    
                    ID: child.ID,
                    indices: [],
                    weights: [],
                    transform: new THREE.Matrix4().fromArray( subDeformerNode.Transform.a ),
                    transformLink: new THREE.Matrix4().fromArray( subDeformerNode.TransformLink.a ),
                    linkMode: subDeformerNode.Mode,
    
                };
    
                if ( 'Indexes' in subDeformerNode ) {
    
                    rawBone.indices = subDeformerNode.Indexes.a;
                    rawBone.weights = subDeformerNode.Weights.a;
    
                }
    
                rawBones.push( rawBone );
    
            } );
    
            return {
    
                rawBones: rawBones,
                bones: []
    
            };
    
        }
    
        // Parse nodes in FBXTree.Objects.Geometry
        function parseGeometries( FBXTree, connections, skeletons ) {
    
            var geometryMap = new Map();
    
            if ( 'Geometry' in FBXTree.Objects ) {
    
                var geometryNodes = FBXTree.Objects.Geometry;
    
    
    
                for ( var nodeID in geometryNodes ) {
    
                    var relationships = connections.get( parseInt( nodeID ) );
                    var geo = parseGeometry( FBXTree, relationships, geometryNodes[ nodeID ], skeletons );
    
                    geometryMap.set( parseInt( nodeID ), geo );
    
                }
    
            }
    
            return geometryMap;
    
        }
    
        // Parse single node in FBXTree.Objects.Geometry
        function parseGeometry( FBXTree, relationships, geometryNode, skeletons ) {
    
            switch ( geometryNode.attrType ) {
    
                case 'Mesh':
                    return parseMeshGeometry( FBXTree, relationships, geometryNode, skeletons );
                    break;
    
                case 'NurbsCurve':
                    return parseNurbsGeometry( geometryNode );
                    break;
    
            }
    
        }
    
    
        // Parse single node mesh geometry in FBXTree.Objects.Geometry
        function parseMeshGeometry( FBXTree, relationships, geometryNode, skeletons ) {
    
            var modelNodes = relationships.parents.map( function ( parent ) {
    
                return FBXTree.Objects.Model[ parent.ID ];
    
            } );
    
            // don't create geometry if it is not associated with any models
            if ( modelNodes.length === 0 ) return;
    
            var skeleton = relationships.children.reduce( function ( skeleton, child ) {
    
                if ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];
    
                return skeleton;
    
            }, null );
    
            var preTransform = new THREE.Matrix4();
    
            // TODO: if there is more than one model associated with the geometry, AND the models have
            // different geometric transforms, then this will cause problems
            // if ( modelNodes.length > 1 ) { }
    
            // For now just assume one model and get the preRotations from that
            var modelNode = modelNodes[ 0 ];
    
            if ( 'GeometricRotation' in modelNode ) {
    
                var array = modelNode.GeometricRotation.value.map( THREE.Math.degToRad );
                array[ 3 ] = 'ZYX';
    
                preTransform.makeRotationFromEuler( new THREE.Euler().fromArray( array ) );
    
            }
    
            if ( 'GeometricTranslation' in modelNode ) {
    
                preTransform.setPosition( new THREE.Vector3().fromArray( modelNode.GeometricTranslation.value ) );
    
            }
    
            return genGeometry( FBXTree, relationships, geometryNode, skeleton, preTransform );
    
        }
    
        // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry
        function genGeometry( FBXTree, relationships, geometryNode, skeleton, preTransform ) {
    
            var vertexPositions = geometryNode.Vertices.a;
            var vertexIndices = geometryNode.PolygonVertexIndex.a;
    
            // create arrays to hold the final data used to build the buffergeometry
            var vertexBuffer = [];
            var normalBuffer = [];
            var colorsBuffer = [];
            var uvsBuffer = [];
            var materialIndexBuffer = [];
            var vertexWeightsBuffer = [];
            var weightsIndicesBuffer = [];
    
            if ( geometryNode.LayerElementColor ) {
    
                var colorInfo = getColors( geometryNode.LayerElementColor[ 0 ] );
    
            }
    
            if ( geometryNode.LayerElementMaterial ) {
    
                var materialInfo = getMaterials( geometryNode.LayerElementMaterial[ 0 ] );
    
            }
    
            if ( geometryNode.LayerElementNormal ) {
    
                var normalInfo = getNormals( geometryNode.LayerElementNormal[ 0 ] );
    
            }
    
            if ( geometryNode.LayerElementUV ) {
    
                var uvInfo = [];
                var i = 0;
                while ( geometryNode.LayerElementUV[ i ] ) {
    
                    uvInfo.push( getUVs( geometryNode.LayerElementUV[ i ] ) );
                    i ++;
    
                }
    
            }
    
            var weightTable = {};
    
            if ( skeleton !== null ) {
    
                skeleton.rawBones.forEach( function ( rawBone, i ) {
    
                    // loop over the bone's vertex indices and weights
                    rawBone.indices.forEach( function ( index, j ) {
    
                        if ( weightTable[ index ] === undefined ) weightTable[ index ] = [];
    
                        weightTable[ index ].push( {
    
                            id: i,
                            weight: rawBone.weights[ j ],
    
                        } );
    
                    } );
    
                } );
    
            }
    
            var polygonIndex = 0;
            var faceLength = 0;
            var displayedWeightsWarning = false;
    
            // these will hold data for a single face
            var vertexPositionIndexes = [];
            var faceNormals = [];
            var faceColors = [];
            var faceUVs = [];
            var faceWeights = [];
            var faceWeightIndices = [];
    
            vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {
    
                var endOfFace = false;
    
                // Face index and vertex index arrays are combined in a single array
                // A cube with quad faces looks like this:
                // PolygonVertexIndex: *24 {
                //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5
                //  }
                // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3
                // to find index of last vertex multiply by -1 and subtract 1: -3 * - 1 - 1 = 2
                if ( vertexIndex < 0 ) {
    
                    vertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1
                    vertexIndices[ polygonVertexIndex ] = vertexIndex;
                    endOfFace = true;
    
                }
    
                var weightIndices = [];
                var weights = [];
    
                vertexPositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );
    
                if ( colorInfo ) {
    
                    var data = getData( polygonVertexIndex, polygonIndex, vertexIndex, colorInfo );
    
                    faceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );
    
                }
    
                if ( skeleton ) {
    
                    if ( weightTable[ vertexIndex ] !== undefined ) {
    
                        weightTable[ vertexIndex ].forEach( function ( wt ) {
    
                            weights.push( wt.weight );
                            weightIndices.push( wt.id );
    
                        } );
    
    
                    }
    
                    if ( weights.length > 4 ) {
    
                        if ( ! displayedWeightsWarning ) {
    
                            console.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );
                            displayedWeightsWarning = true;
    
                        }
    
                        var wIndex = [ 0, 0, 0, 0 ];
                        var Weight = [ 0, 0, 0, 0 ];
    
                        weights.forEach( function ( weight, weightIndex ) {
    
                            var currentWeight = weight;
                            var currentIndex = weightIndices[ weightIndex ];
    
                            Weight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {
    
                                if ( currentWeight > comparedWeight ) {
    
                                    comparedWeightArray[ comparedWeightIndex ] = currentWeight;
                                    currentWeight = comparedWeight;
    
                                    var tmp = wIndex[ comparedWeightIndex ];
                                    wIndex[ comparedWeightIndex ] = currentIndex;
                                    currentIndex = tmp;
    
                                }
    
                            } );
    
                        } );
    
                        weightIndices = wIndex;
                        weights = Weight;
    
                    }
    
                    // if the weight array is shorter than 4 pad with 0s
                    while ( weights.length < 4 ) {
    
                        weights.push( 0 );
                        weightIndices.push( 0 );
    
                    }
    
                    for ( var i = 0; i < 4; ++ i ) {
    
                        faceWeights.push( weights[ i ] );
                        faceWeightIndices.push( weightIndices[ i ] );
    
                    }
    
                }
    
                if ( normalInfo ) {
    
                    var data = getData( polygonVertexIndex, polygonIndex, vertexIndex, normalInfo );
    
                    faceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );
    
                }
    
                if ( materialInfo && materialInfo.mappingType !== 'AllSame' ) {
    
                    var materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, materialInfo )[ 0 ];
    
                }
    
                if ( uvInfo ) {
    
                    uvInfo.forEach( function ( uv, i ) {
    
                        var data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );
    
                        if ( faceUVs[ i ] === undefined ) {
    
                            faceUVs[ i ] = [];
    
                        }
    
                        faceUVs[ i ].push( data[ 0 ] );
                        faceUVs[ i ].push( data[ 1 ] );
    
                    } );
    
                }
    
                faceLength ++;
    
                // we have reached the end of a face - it may have 4 sides though
                // in which case the data is split to represent two 3 sided faces
                if ( endOfFace ) {
    
                    for ( var i = 2; i < faceLength; i ++ ) {
    
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ 0 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ 1 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ 2 ] ] );
    
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ ( i - 1 ) * 3 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );
    
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ i * 3 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ i * 3 + 1 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ i * 3 + 2 ] ] );
    
                        if ( skeleton ) {
    
                            vertexWeightsBuffer.push( faceWeights[ 0 ] );
                            vertexWeightsBuffer.push( faceWeights[ 1 ] );
                            vertexWeightsBuffer.push( faceWeights[ 2 ] );
                            vertexWeightsBuffer.push( faceWeights[ 3 ] );
    
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 ] );
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );
    
                            vertexWeightsBuffer.push( faceWeights[ i * 4 ] );
                            vertexWeightsBuffer.push( faceWeights[ i * 4 + 1 ] );
                            vertexWeightsBuffer.push( faceWeights[ i * 4 + 2 ] );
                            vertexWeightsBuffer.push( faceWeights[ i * 4 + 3 ] );
    
                            weightsIndicesBuffer.push( faceWeightIndices[ 0 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ 1 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ 2 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ 3 ] );
    
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );
    
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 + 1 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 + 2 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 + 3 ] );
    
                        }
    
                        if ( colorInfo ) {
    
                            colorsBuffer.push( faceColors[ 0 ] );
                            colorsBuffer.push( faceColors[ 1 ] );
                            colorsBuffer.push( faceColors[ 2 ] );
    
                            colorsBuffer.push( faceColors[ ( i - 1 ) * 3 ] );
                            colorsBuffer.push( faceColors[ ( i - 1 ) * 3 + 1 ] );
                            colorsBuffer.push( faceColors[ ( i - 1 ) * 3 + 2 ] );
    
                            colorsBuffer.push( faceColors[ i * 3 ] );
                            colorsBuffer.push( faceColors[ i * 3 + 1 ] );
                            colorsBuffer.push( faceColors[ i * 3 + 2 ] );
    
                        }
    
                        if ( materialInfo && materialInfo.mappingType !== 'AllSame' ) {
    
                            materialIndexBuffer.push( materialIndex );
                            materialIndexBuffer.push( materialIndex );
                            materialIndexBuffer.push( materialIndex );
    
                        }
    
                        if ( normalInfo ) {
    
                            normalBuffer.push( faceNormals[ 0 ] );
                            normalBuffer.push( faceNormals[ 1 ] );
                            normalBuffer.push( faceNormals[ 2 ] );
    
                            normalBuffer.push( faceNormals[ ( i - 1 ) * 3 ] );
                            normalBuffer.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );
                            normalBuffer.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );
    
                            normalBuffer.push( faceNormals[ i * 3 ] );
                            normalBuffer.push( faceNormals[ i * 3 + 1 ] );
                            normalBuffer.push( faceNormals[ i * 3 + 2 ] );
    
                        }
    
                        if ( uvInfo ) {
    
                            uvInfo.forEach( function ( uv, j ) {
    
                                if ( uvsBuffer[ j ] === undefined ) uvsBuffer[ j ] = [];
    
                                uvsBuffer[ j ].push( faceUVs[ j ][ 0 ] );
                                uvsBuffer[ j ].push( faceUVs[ j ][ 1 ] );
    
                                uvsBuffer[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );
                                uvsBuffer[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );
    
                                uvsBuffer[ j ].push( faceUVs[ j ][ i * 2 ] );
                                uvsBuffer[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );
    
                            } );
    
                        }
    
                    }
    
                    polygonIndex ++;
                    faceLength = 0;
    
                    // reset arrays for the next face
                    vertexPositionIndexes = [];
                    faceNormals = [];
                    faceColors = [];
                    faceUVs = [];
                    faceWeights = [];
                    faceWeightIndices = [];
    
                }
    
            } );
    
            var geo = new THREE.BufferGeometry();
            geo.name = geometryNode.name;
    
            var positionAttribute = new THREE.Float32BufferAttribute( vertexBuffer, 3 );
    
            preTransform.applyToBufferAttribute( positionAttribute );
    
            geo.addAttribute( 'position', positionAttribute );
    
            if ( colorsBuffer.length > 0 ) {
    
                geo.addAttribute( 'color', new THREE.Float32BufferAttribute( colorsBuffer, 3 ) );
    
            }
    
            if ( skeleton ) {
    
                geo.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( weightsIndicesBuffer, 4 ) );
    
                geo.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( vertexWeightsBuffer, 4 ) );
    
                // used later to bind the skeleton to the model
                geo.FBX_Deformer = skeleton;
    
            }
    
            if ( normalBuffer.length > 0 ) {
    
                var normalAttribute = new THREE.Float32BufferAttribute( normalBuffer, 3 );
    
                var normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );
                normalMatrix.applyToBufferAttribute( normalAttribute );
    
                geo.addAttribute( 'normal', normalAttribute );
    
            }
    
            uvsBuffer.forEach( function ( uvBuffer, i ) {
    
                // subsequent uv buffers are called 'uv1', 'uv2', ...
                var name = 'uv' + ( i + 1 ).toString();
    
                // the first uv buffer is just called 'uv'
                if ( i === 0 ) {
    
                    name = 'uv';
    
                }
    
                geo.addAttribute( name, new THREE.Float32BufferAttribute( uvsBuffer[ i ], 2 ) );
    
            } );
    
            if ( materialInfo && materialInfo.mappingType !== 'AllSame' ) {
    
                // Convert the material indices of each vertex into rendering groups on the geometry.
                var prevMaterialIndex = materialIndexBuffer[ 0 ];
                var startIndex = 0;
    
                materialIndexBuffer.forEach( function ( currentIndex, i ) {
    
                    if ( currentIndex !== prevMaterialIndex ) {
    
                        geo.addGroup( startIndex, i - startIndex, prevMaterialIndex );
    
                        prevMaterialIndex = currentIndex;
                        startIndex = i;
    
                    }
    
                } );
    
                // the loop above doesn't add the last group, do that here.
                if ( geo.groups.length > 0 ) {
    
                    var lastGroup = geo.groups[ geo.groups.length - 1 ];
                    var lastIndex = lastGroup.start + lastGroup.count;
    
                    if ( lastIndex !== materialIndexBuffer.length ) {
    
                        geo.addGroup( lastIndex, materialIndexBuffer.length - lastIndex, prevMaterialIndex );
    
                    }
    
                }
    
                // case where there are multiple materials but the whole geometry is only
                // using one of them
                if ( geo.groups.length === 0 ) {
    
                    geo.addGroup( 0, materialIndexBuffer.length, materialIndexBuffer[ 0 ] );
    
                }
    
            }
    
            return geo;
    
        }
    
    
        // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists
        function getNormals( NormalNode ) {
    
            var mappingType = NormalNode.MappingInformationType;
            var referenceType = NormalNode.ReferenceInformationType;
            var buffer = NormalNode.Normals.a;
            var indexBuffer = [];
            if ( referenceType === 'IndexToDirect' ) {
    
                if ( 'NormalIndex' in NormalNode ) {
    
                    indexBuffer = NormalNode.NormalIndex.a;
    
                } else if ( 'NormalsIndex' in NormalNode ) {
    
                    indexBuffer = NormalNode.NormalsIndex.a;
    
                }
    
            }
    
            return {
                dataSize: 3,
                buffer: buffer,
                indices: indexBuffer,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists
        function getUVs( UVNode ) {
    
            var mappingType = UVNode.MappingInformationType;
            var referenceType = UVNode.ReferenceInformationType;
            var buffer = UVNode.UV.a;
            var indexBuffer = [];
            if ( referenceType === 'IndexToDirect' ) {
    
                indexBuffer = UVNode.UVIndex.a;
    
            }
    
            return {
                dataSize: 2,
                buffer: buffer,
                indices: indexBuffer,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists
        function getColors( ColorNode ) {
    
            var mappingType = ColorNode.MappingInformationType;
            var referenceType = ColorNode.ReferenceInformationType;
            var buffer = ColorNode.Colors.a;
            var indexBuffer = [];
            if ( referenceType === 'IndexToDirect' ) {
    
                indexBuffer = ColorNode.ColorIndex.a;
    
            }
    
            return {
                dataSize: 4,
                buffer: buffer,
                indices: indexBuffer,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists
        function getMaterials( MaterialNode ) {
    
            var mappingType = MaterialNode.MappingInformationType;
            var referenceType = MaterialNode.ReferenceInformationType;
    
            if ( mappingType === 'NoMappingInformation' ) {
    
                return {
                    dataSize: 1,
                    buffer: [ 0 ],
                    indices: [ 0 ],
                    mappingType: 'AllSame',
                    referenceType: referenceType
                };
    
            }
    
            var materialIndexBuffer = MaterialNode.Materials.a;
    
            // Since materials are stored as indices, there's a bit of a mismatch between FBX and what
            // we expect.So we create an intermediate buffer that points to the index in the buffer,
            // for conforming with the other functions we've written for other data.
            var materialIndices = [];
    
            for ( var i = 0; i < materialIndexBuffer.length; ++ i ) {
    
                materialIndices.push( i );
    
            }
    
            return {
                dataSize: 1,
                buffer: materialIndexBuffer,
                indices: materialIndices,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Functions use the infoObject and given indices to return value array of geometry.
        // Parameters:
        // 	- polygonVertexIndex - Index of vertex in draw order (which index of the index buffer refers to this vertex).
        // 	- polygonIndex - Index of polygon in geometry.
        // 	- vertexIndex - Index of vertex inside vertex buffer (used because some data refers to old index buffer that we don't use anymore).
        // 	- infoObject: can be materialInfo, normalInfo, UVInfo or colorInfo
        // Index type:
        //	- Direct: index is same as polygonVertexIndex
        //	- IndexToDirect: infoObject has it's own set of indices
        var dataArray = [];
    
        var GetData = {
    
            ByPolygonVertex: {
    
                Direct: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = ( polygonVertexIndex * infoObject.dataSize );
                    var to = ( polygonVertexIndex * infoObject.dataSize ) + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                },
    
                IndexToDirect: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var index = infoObject.indices[ polygonVertexIndex ];
                    var from = ( index * infoObject.dataSize );
                    var to = ( index * infoObject.dataSize ) + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            },
    
            ByPolygon: {
    
                Direct: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = polygonIndex * infoObject.dataSize;
                    var to = polygonIndex * infoObject.dataSize + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                },
    
                IndexToDirect: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var index = infoObject.indices[ polygonIndex ];
                    var from = index * infoObject.dataSize;
                    var to = index * infoObject.dataSize + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            },
    
            ByVertice: {
    
                Direct: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = ( vertexIndex * infoObject.dataSize );
                    var to = ( vertexIndex * infoObject.dataSize ) + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            },
    
            AllSame: {
    
                IndexToDirect: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = infoObject.indices[ 0 ] * infoObject.dataSize;
                    var to = infoObject.indices[ 0 ] * infoObject.dataSize + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            }
    
        };
    
        function getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
            return GetData[ infoObject.mappingType ][ infoObject.referenceType ]( polygonVertexIndex, polygonIndex, vertexIndex, infoObject );
    
        }
    
        // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry
        function parseNurbsGeometry( geometryNode ) {
    
            if ( THREE.NURBSCurve === undefined ) {
    
                console.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );
                return new THREE.BufferGeometry();
    
            }
    
            var order = parseInt( geometryNode.Order );
    
            if ( isNaN( order ) ) {
    
                console.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geometryNode.Order, geometryNode.id );
                return new THREE.BufferGeometry();
    
            }
    
            var degree = order - 1;
    
            var knots = geometryNode.KnotVector.a;
            var controlPoints = [];
            var pointsValues = geometryNode.Points.a;
    
            for ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {
    
                controlPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );
    
            }
    
            var startKnot, endKnot;
    
            if ( geometryNode.Form === 'Closed' ) {
    
                controlPoints.push( controlPoints[ 0 ] );
    
            } else if ( geometryNode.Form === 'Periodic' ) {
    
                startKnot = degree;
                endKnot = knots.length - 1 - startKnot;
    
                for ( var i = 0; i < degree; ++ i ) {
    
                    controlPoints.push( controlPoints[ i ] );
    
                }
    
            }
    
            var curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );
            var vertices = curve.getPoints( controlPoints.length * 7 );
    
            var positions = new Float32Array( vertices.length * 3 );
    
            vertices.forEach( function ( vertex, i ) {
    
                vertex.toArray( positions, i * 3 );
    
            } );
    
            var geometry = new THREE.BufferGeometry();
            geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
    
            return geometry;
    
        }
    
        // create the main THREE.Group() to be returned by the loader
        function parseScene( FBXTree, connections, skeletons, geometryMap, materialMap ) {
    
            var sceneGraph = new THREE.Group();
    
            var modelMap = parseModels( FBXTree, skeletons, geometryMap, materialMap, connections );
    
            var modelNodes = FBXTree.Objects.Model;
    
            modelMap.forEach( function ( model ) {
    
                var modelNode = modelNodes[ model.ID ];
                setLookAtProperties( FBXTree, model, modelNode, connections, sceneGraph );
    
                var parentConnections = connections.get( model.ID ).parents;
    
                parentConnections.forEach( function ( connection ) {
    
                    var parent = modelMap.get( connection.ID );
                    if ( parent !== undefined ) parent.add( model );
    
                } );
    
                if ( model.parent === null ) {
    
                    sceneGraph.add( model );
    
                }
    
    
            } );
    
            bindSkeleton( FBXTree, skeletons, geometryMap, modelMap, connections );
    
            addAnimations( FBXTree, connections, sceneGraph );
    
            createAmbientLight( FBXTree, sceneGraph );
    
            return sceneGraph;
    
        }
    
        // parse nodes in FBXTree.Objects.Model
        function parseModels( FBXTree, skeletons, geometryMap, materialMap, connections ) {
    
            var modelMap = new Map();
            var modelNodes = FBXTree.Objects.Model;
    
            for ( var nodeID in modelNodes ) {
    
                var id = parseInt( nodeID );
                var node = modelNodes[ nodeID ];
                var relationships = connections.get( id );
    
                var model = buildSkeleton( relationships, skeletons, id, node.attrName );
    
                if ( ! model ) {
    
                    switch ( node.attrType ) {
    
                        case 'Camera':
                            model = createCamera( FBXTree, relationships );
                            break;
                        case 'Light':
                            model = createLight( FBXTree, relationships );
                            break;
                        case 'Mesh':
                            model = createMesh( FBXTree, relationships, geometryMap, materialMap );
                            break;
                        case 'NurbsCurve':
                            model = createCurve( relationships, geometryMap );
                            break;
                        case 'LimbNode': // usually associated with a Bone, however if a Bone was not created we'll make a Group instead
                        case 'Null':
                        default:
                            model = new THREE.Group();
                            break;
    
                    }
    
                    model.name = THREE.PropertyBinding.sanitizeNodeName( node.attrName );
                    model.ID = id;
    
                }
    
                setModelTransforms( FBXTree, model, node );
                modelMap.set( id, model );
    
            }
    
            return modelMap;
    
        }
    
        function buildSkeleton( relationships, skeletons, id, name ) {
    
            var bone = null;
    
            relationships.parents.forEach( function ( parent ) {
    
                for ( var ID in skeletons ) {
    
                    var skeleton = skeletons[ ID ];
    
                    skeleton.rawBones.forEach( function ( rawBone, i ) {
    
                        if ( rawBone.ID === parent.ID ) {
    
                            var subBone = bone;
                            bone = new THREE.Bone();
                            bone.matrixWorld.copy( rawBone.transformLink );
    
                            // set name and id here - otherwise in cases where "subBone" is created it will not have a name / id
                            bone.name = THREE.PropertyBinding.sanitizeNodeName( name );
                            bone.ID = id;
    
                            skeleton.bones[ i ] = bone;
    
                            // In cases where a bone is shared between multiple meshes
                            // duplicate the bone here and and it as a child of the first bone
                            if ( subBone !== null ) {
    
                                bone.add( subBone );
    
                            }
    
                        }
    
                    } );
    
                }
    
            } );
    
            return bone;
    
        }
    
        // create a THREE.PerspectiveCamera or THREE.OrthographicCamera
        function createCamera( FBXTree, relationships ) {
    
            var model;
            var cameraAttribute;
    
            relationships.children.forEach( function ( child ) {
    
                var attr = FBXTree.Objects.NodeAttribute[ child.ID ];
    
                if ( attr !== undefined ) {
    
                    cameraAttribute = attr;
    
                }
    
            } );
    
            if ( cameraAttribute === undefined ) {
    
                model = new THREE.Object3D();
    
            } else {
    
                var type = 0;
                if ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {
    
                    type = 1;
    
                }
    
                var nearClippingPlane = 1;
                if ( cameraAttribute.NearPlane !== undefined ) {
    
                    nearClippingPlane = cameraAttribute.NearPlane.value / 1000;
    
                }
    
                var farClippingPlane = 1000;
                if ( cameraAttribute.FarPlane !== undefined ) {
    
                    farClippingPlane = cameraAttribute.FarPlane.value / 1000;
    
                }
    
    
                var width = window.innerWidth;
                var height = window.innerHeight;
    
                if ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {
    
                    width = cameraAttribute.AspectWidth.value;
                    height = cameraAttribute.AspectHeight.value;
    
                }
    
                var aspect = width / height;
    
                var fov = 45;
                if ( cameraAttribute.FieldOfView !== undefined ) {
    
                    fov = cameraAttribute.FieldOfView.value;
    
                }
    
                var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;
    
                switch ( type ) {
    
                    case 0: // Perspective
                        model = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );
                        if ( focalLength !== null ) model.setFocalLength( focalLength );
                        break;
    
                    case 1: // Orthographic
                        model = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );
                        break;
    
                    default:
                        console.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );
                        model = new THREE.Object3D();
                        break;
    
                }
    
            }
    
            return model;
    
        }
    
        // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight
        function createLight( FBXTree, relationships ) {
    
            var model;
            var lightAttribute;
    
            relationships.children.forEach( function ( child ) {
    
                var attr = FBXTree.Objects.NodeAttribute[ child.ID ];
    
                if ( attr !== undefined ) {
    
                    lightAttribute = attr;
    
                }
    
            } );
    
            if ( lightAttribute === undefined ) {
    
                model = new THREE.Object3D();
    
            } else {
    
                var type;
    
                // LightType can be undefined for Point lights
                if ( lightAttribute.LightType === undefined ) {
    
                    type = 0;
    
                } else {
    
                    type = lightAttribute.LightType.value;
    
                }
    
                var color = 0xffffff;
    
                if ( lightAttribute.Color !== undefined ) {
    
                    color = new THREE.Color().fromArray( lightAttribute.Color.value );
    
                }
    
                var intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;
    
                // light disabled
                if ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {
    
                    intensity = 0;
    
                }
    
                var distance = 0;
                if ( lightAttribute.FarAttenuationEnd !== undefined ) {
    
                    if ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {
    
                        distance = 0;
    
                    } else {
    
                        distance = lightAttribute.FarAttenuationEnd.value / 1000;
    
                    }
    
                }
    
                // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?
                var decay = 1;
    
                switch ( type ) {
    
                    case 0: // Point
                        model = new THREE.PointLight( color, intensity, distance, decay );
                        break;
    
                    case 1: // Directional
                        model = new THREE.DirectionalLight( color, intensity );
                        break;
    
                    case 2: // Spot
                        var angle = Math.PI / 3;
    
                        if ( lightAttribute.InnerAngle !== undefined ) {
    
                            angle = THREE.Math.degToRad( lightAttribute.InnerAngle.value );
    
                        }
    
                        var penumbra = 0;
                        if ( lightAttribute.OuterAngle !== undefined ) {
    
                            // TODO: this is not correct - FBX calculates outer and inner angle in degrees
                            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI
                            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle
                            penumbra = THREE.Math.degToRad( lightAttribute.OuterAngle.value );
                            penumbra = Math.max( penumbra, 1 );
    
                        }
    
                        model = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );
                        break;
    
                    default:
                        console.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );
                        model = new THREE.PointLight( color, intensity );
                        break;
    
                }
    
                if ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {
    
                    model.castShadow = true;
    
                }
    
            }
    
            return model;
    
        }
    
        function createMesh( FBXTree, relationships, geometryMap, materialMap ) {
    
            var model;
            var geometry = null;
            var material = null;
            var materials = [];
    
            // get geometry and materials(s) from connections
            relationships.children.forEach( function ( child ) {
    
                if ( geometryMap.has( child.ID ) ) {
    
                    geometry = geometryMap.get( child.ID );
    
                }
    
                if ( materialMap.has( child.ID ) ) {
    
                    materials.push( materialMap.get( child.ID ) );
    
                }
    
            } );
    
            if ( materials.length > 1 ) {
    
                material = materials;
    
            } else if ( materials.length > 0 ) {
    
                material = materials[ 0 ];
    
            } else {
    
                material = new THREE.MeshPhongMaterial( { color: 0xcccccc } );
                materials.push( material );
    
            }
    
            if ( 'color' in geometry.attributes ) {
    
                materials.forEach( function ( material ) {
    
                    material.vertexColors = THREE.VertexColors;
    
                } );
    
            }
    
            if ( geometry.FBX_Deformer ) {
    
                materials.forEach( function ( material ) {
    
                    material.skinning = true;
    
                } );
    
                model = new THREE.SkinnedMesh( geometry, material );
    
            } else {
    
                model = new THREE.Mesh( geometry, material );
    
            }
    
            return model;
    
        }
    
        function createCurve( relationships, geometryMap ) {
    
            var geometry = relationships.children.reduce( function ( geo, child ) {
    
                if ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );
    
                return geo;
    
            }, null );
    
            // FBX does not list materials for Nurbs lines, so we'll just put our own in here.
            var material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );
            return new THREE.Line( geometry, material );
    
        }
    
        // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light
        function createAmbientLight( FBXTree, sceneGraph ) {
    
            if ( 'GlobalSettings' in FBXTree && 'AmbientColor' in FBXTree.GlobalSettings ) {
    
                var ambientColor = FBXTree.GlobalSettings.AmbientColor.value;
                var r = ambientColor[ 0 ];
                var g = ambientColor[ 1 ];
                var b = ambientColor[ 2 ];
    
                if ( r !== 0 || g !== 0 || b !== 0 ) {
    
                    var color = new THREE.Color( r, g, b );
                    sceneGraph.add( new THREE.AmbientLight( color, 1 ) );
    
                }
    
            }
    
        }
    
        function setLookAtProperties( FBXTree, model, modelNode, connections, sceneGraph ) {
    
            if ( 'LookAtProperty' in modelNode ) {
    
                var children = connections.get( model.ID ).children;
    
                children.forEach( function ( child ) {
    
                    if ( child.relationship === 'LookAtProperty' ) {
    
                        var lookAtTarget = FBXTree.Objects.Model[ child.ID ];
    
                        if ( 'Lcl_Translation' in lookAtTarget ) {
    
                            var pos = lookAtTarget.Lcl_Translation.value;
    
                            // DirectionalLight, SpotLight
                            if ( model.target !== undefined ) {
    
                                model.target.position.fromArray( pos );
                                sceneGraph.add( model.target );
    
                            } else { // Cameras and other Object3Ds
    
                                model.lookAt( new THREE.Vector3().fromArray( pos ) );
    
                            }
    
                        }
    
                    }
    
                } );
    
            }
    
        }
    
        // parse the model node for transform details and apply them to the model
        function setModelTransforms( FBXTree, model, modelNode ) {
    
            // http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html
            if ( 'RotationOrder' in modelNode ) {
    
                var enums = [
                    'XYZ', // default
                    'XZY',
                    'YZX',
                    'ZXY',
                    'YXZ',
                    'ZYX',
                    'SphericXYZ',
                ];
    
                var value = parseInt( modelNode.RotationOrder.value, 10 );
    
                if ( value > 0 && value < 6 ) {
    
                    // model.rotation.order = enums[ value ];
    
                    // Note: Euler order other than XYZ is currently not supported, so just display a warning for now
                    console.warn( 'THREE.FBXLoader: unsupported Euler Order: %s. Currently only XYZ order is supported. Animations and rotations may be incorrect.', enums[ value ] );
    
                } else if ( value === 6 ) {
    
                    console.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );
    
                }
    
            }
    
            if ( 'Lcl_Translation' in modelNode ) {
    
                model.position.fromArray( modelNode.Lcl_Translation.value );
    
            }
    
            if ( 'Lcl_Rotation' in modelNode ) {
    
                var rotation = modelNode.Lcl_Rotation.value.map( THREE.Math.degToRad );
                rotation.push( 'ZYX' );
                model.rotation.fromArray( rotation );
    
            }
    
            if ( 'Lcl_Scaling' in modelNode ) {
    
                model.scale.fromArray( modelNode.Lcl_Scaling.value );
    
            }
    
            if ( 'PreRotation' in modelNode ) {
    
                var array = modelNode.PreRotation.value.map( THREE.Math.degToRad );
                array[ 3 ] = 'ZYX';
    
                var preRotations = new THREE.Euler().fromArray( array );
    
                preRotations = new THREE.Quaternion().setFromEuler( preRotations );
                var currentRotation = new THREE.Quaternion().setFromEuler( model.rotation );
                preRotations.multiply( currentRotation );
                model.rotation.setFromQuaternion( preRotations, 'ZYX' );
    
            }
    
        }
    
        function bindSkeleton( FBXTree, skeletons, geometryMap, modelMap, connections ) {
    
            var bindMatrices = parsePoseNodes( FBXTree );
    
            for ( var ID in skeletons ) {
    
                var skeleton = skeletons[ ID ];
    
                var parents = connections.get( parseInt( skeleton.ID ) ).parents;
    
                parents.forEach( function ( parent ) {
    
                    if ( geometryMap.has( parent.ID ) ) {
    
                        var geoID = parent.ID;
                        var geoRelationships = connections.get( geoID );
    
                        geoRelationships.parents.forEach( function ( geoConnParent ) {
    
                            if ( modelMap.has( geoConnParent.ID ) ) {
    
                                var model = modelMap.get( geoConnParent.ID );
    
                                model.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );
    
                            }
    
                        } );
    
                    }
    
                } );
    
            }
    
        }
    
        function parsePoseNodes( FBXTree ) {
    
            var bindMatrices = {};
    
            if ( 'Pose' in FBXTree.Objects ) {
    
                var BindPoseNode = FBXTree.Objects.Pose;
    
                for ( var nodeID in BindPoseNode ) {
    
                    if ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {
    
                        var poseNodes = BindPoseNode[ nodeID ].PoseNode;
    
                        if ( Array.isArray( poseNodes ) ) {
    
                            poseNodes.forEach( function ( poseNode ) {
    
                                bindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );
    
                            } );
    
                        } else {
    
                            bindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );
    
                        }
    
                    }
    
                }
    
            }
    
            return bindMatrices;
    
        }
    
        function parseAnimations( FBXTree, connections ) {
    
            // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,
            // if this is undefined we can safely assume there are no animations
            if ( FBXTree.Objects.AnimationCurve === undefined ) return undefined;
    
            var curveNodesMap = parseAnimationCurveNodes( FBXTree );
    
            parseAnimationCurves( FBXTree, connections, curveNodesMap );
    
            var layersMap = parseAnimationLayers( FBXTree, connections, curveNodesMap );
            var rawClips = parseAnimStacks( FBXTree, connections, layersMap );
    
            return rawClips;
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationCurveNode
        // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )
        // and is referenced by an AnimationLayer
        function parseAnimationCurveNodes( FBXTree ) {
    
            var rawCurveNodes = FBXTree.Objects.AnimationCurveNode;
    
            var curveNodesMap = new Map();
    
            for ( var nodeID in rawCurveNodes ) {
    
                var rawCurveNode = rawCurveNodes[ nodeID ];
    
                if ( rawCurveNode.attrName.match( /S|R|T/ ) !== null ) {
    
                    var curveNode = {
    
                        id: rawCurveNode.id,
                        attr: rawCurveNode.attrName,
                        curves: {},
    
                    };
    
                    curveNodesMap.set( curveNode.id, curveNode );
    
                }
    
            }
    
            return curveNodesMap;
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to
        // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated
        // axis ( e.g. times and values of x rotation)
        function parseAnimationCurves( FBXTree, connections, curveNodesMap ) {
    
            var rawCurves = FBXTree.Objects.AnimationCurve;
    
            for ( var nodeID in rawCurves ) {
    
                var animationCurve = {
    
                    id: rawCurves[ nodeID ].id,
                    times: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),
                    values: rawCurves[ nodeID ].KeyValueFloat.a,
    
                };
    
                var relationships = connections.get( animationCurve.id );
    
                if ( relationships !== undefined ) {
    
                    var animationCurveID = relationships.parents[ 0 ].ID;
                    var animationCurveRelationship = relationships.parents[ 0 ].relationship;
                    var axis = '';
    
                    if ( animationCurveRelationship.match( /X/ ) ) {
    
                        axis = 'x';
    
                    } else if ( animationCurveRelationship.match( /Y/ ) ) {
    
                        axis = 'y';
    
                    } else if ( animationCurveRelationship.match( /Z/ ) ) {
    
                        axis = 'z';
    
                    } else {
    
                        continue;
    
                    }
    
                    curveNodesMap.get( animationCurveID ).curves[ axis ] = animationCurve;
    
                }
    
            }
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references
        // to various AnimationCurveNodes and is referenced by an AnimationStack node
        // note: theoretically a stack can multiple layers, however in practice there always seems to be one per stack
        function parseAnimationLayers( FBXTree, connections, curveNodesMap ) {
    
            var rawLayers = FBXTree.Objects.AnimationLayer;
    
            var layersMap = new Map();
    
            for ( var nodeID in rawLayers ) {
    
                var layerCurveNodes = [];
    
                var connection = connections.get( parseInt( nodeID ) );
    
                if ( connection !== undefined ) {
    
                    // all the animationCurveNodes used in the layer
                    var children = connection.children;
    
                    children.forEach( function ( child, i ) {
    
                        if ( curveNodesMap.has( child.ID ) ) {
    
                            var curveNode = curveNodesMap.get( child.ID );
    
                            // check that the curves are defined for at least one axis, otherwise ignore the curveNode
                            if ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {
    
                                if ( layerCurveNodes[ i ] === undefined ) {
    
                                    var modelID;
    
                                    connections.get( child.ID ).parents.forEach( function ( parent ) {
    
                                        if ( parent.relationship !== undefined ) modelID = parent.ID;
    
                                    } );
    
                                    var rawModel = FBXTree.Objects.Model[ modelID.toString() ];
    
                                    var node = {
    
                                        modelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),
                                        initialPosition: [ 0, 0, 0 ],
                                        initialRotation: [ 0, 0, 0 ],
                                        initialScale: [ 1, 1, 1 ],
    
                                    };
    
                                    if ( 'Lcl_Translation' in rawModel ) node.initialPosition = rawModel.Lcl_Translation.value;
    
                                    if ( 'Lcl_Rotation' in rawModel ) node.initialRotation = rawModel.Lcl_Rotation.value;
    
                                    if ( 'Lcl_Scaling' in rawModel ) node.initialScale = rawModel.Lcl_Scaling.value;
    
                                    // if the animated model is pre rotated, we'll have to apply the pre rotations to every
                                    // animation value as well
                                    if ( 'PreRotation' in rawModel ) node.preRotations = rawModel.PreRotation.value;
    
                                    layerCurveNodes[ i ] = node;
    
                                }
    
                                layerCurveNodes[ i ][ curveNode.attr ] = curveNode;
    
                            }
    
    
    
                        }
    
                    } );
    
                    layersMap.set( parseInt( nodeID ), layerCurveNodes );
    
                }
    
            }
    
            return layersMap;
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation
        // hierarchy. Each Stack node will be used to create a THREE.AnimationClip
        function parseAnimStacks( FBXTree, connections, layersMap ) {
    
            var rawStacks = FBXTree.Objects.AnimationStack;
    
            // connect the stacks (clips) up to the layers
            var rawClips = {};
    
            for ( var nodeID in rawStacks ) {
    
                var children = connections.get( parseInt( nodeID ) ).children;
    
                if ( children.length > 1 ) {
    
                    // it seems like stacks will always be associated with a single layer. But just in case there are files
                    // where there are multiple layers per stack, we'll display a warning
                    console.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );
    
                }
    
                var layer = layersMap.get( children[ 0 ].ID );
    
                rawClips[ nodeID ] = {
    
                    name: rawStacks[ nodeID ].attrName,
                    layer: layer,
    
                };
    
            }
    
            return rawClips;
    
        }
    
        // take raw animation data from parseAnimations and connect it up to the loaded models
        function addAnimations( FBXTree, connections, sceneGraph ) {
    
            sceneGraph.animations = [];
    
            var rawClips = parseAnimations( FBXTree, connections );
    
            if ( rawClips === undefined ) return;
    
    
            for ( var key in rawClips ) {
    
                var rawClip = rawClips[ key ];
    
                var clip = addClip( rawClip );
    
                sceneGraph.animations.push( clip );
    
            }
    
        }
    
        function addClip( rawClip ) {
    
            var tracks = [];
    
            rawClip.layer.forEach( function ( rawTracks ) {
    
                tracks = tracks.concat( generateTracks( rawTracks ) );
    
            } );
    
            return new THREE.AnimationClip( rawClip.name, - 1, tracks );
    
        }
    
        function generateTracks( rawTracks ) {
    
            var tracks = [];
    
            if ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {
    
                var positionTrack = generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, rawTracks.initialPosition, 'position' );
                if ( positionTrack !== undefined ) tracks.push( positionTrack );
    
            }
    
            if ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {
    
                var rotationTrack = generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, rawTracks.initialRotation, rawTracks.preRotations );
                if ( rotationTrack !== undefined ) tracks.push( rotationTrack );
    
            }
    
            if ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {
    
                var scaleTrack = generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, rawTracks.initialScale, 'scale' );
                if ( scaleTrack !== undefined ) tracks.push( scaleTrack );
    
            }
    
            return tracks;
    
        }
    
        function generateVectorTrack( modelName, curves, initialValue, type ) {
    
            var times = getTimesForAllAxes( curves );
            var values = getKeyframeTrackValues( times, curves, initialValue );
    
            return new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );
    
        }
    
        function generateRotationTrack( modelName, curves, initialValue, preRotations ) {
    
            if ( curves.x !== undefined ) curves.x.values = curves.x.values.map( THREE.Math.degToRad );
            if ( curves.y !== undefined ) curves.y.values = curves.y.values.map( THREE.Math.degToRad );
            if ( curves.z !== undefined ) curves.z.values = curves.z.values.map( THREE.Math.degToRad );
    
            var times = getTimesForAllAxes( curves );
            var values = getKeyframeTrackValues( times, curves, initialValue );
    
            if ( preRotations !== undefined ) {
    
                preRotations = preRotations.map( THREE.Math.degToRad );
                preRotations.push( 'ZYX' );
    
                preRotations = new THREE.Euler().fromArray( preRotations );
                preRotations = new THREE.Quaternion().setFromEuler( preRotations );
    
            }
    
            var quaternion = new THREE.Quaternion();
            var euler = new THREE.Euler();
    
            var quaternionValues = [];
    
            for ( var i = 0; i < values.length; i += 3 ) {
    
                euler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], 'ZYX' );
    
                quaternion.setFromEuler( euler );
    
                if ( preRotations !== undefined )quaternion.premultiply( preRotations );
    
                quaternion.toArray( quaternionValues, ( i / 3 ) * 4 );
    
            }
    
            return new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );
    
        }
    
        function getKeyframeTrackValues( times, curves, initialValue ) {
    
            var prevValue = initialValue;
    
            var values = [];
    
            var xIndex = - 1;
            var yIndex = - 1;
            var zIndex = - 1;
    
            times.forEach( function ( time ) {
    
                if ( curves.x ) xIndex = curves.x.times.indexOf( time );
                if ( curves.y ) yIndex = curves.y.times.indexOf( time );
                if ( curves.z ) zIndex = curves.z.times.indexOf( time );
    
                // if there is an x value defined for this frame, use that
                if ( xIndex !== - 1 ) {
    
                    var xValue = curves.x.values[ xIndex ];
                    values.push( xValue );
                    prevValue[ 0 ] = xValue;
    
                } else {
    
                    // otherwise use the x value from the previous frame
                    values.push( prevValue[ 0 ] );
    
                }
    
                if ( yIndex !== - 1 ) {
    
                    var yValue = curves.y.values[ yIndex ];
                    values.push( yValue );
                    prevValue[ 1 ] = yValue;
    
                } else {
    
                    values.push( prevValue[ 1 ] );
    
                }
    
                if ( zIndex !== - 1 ) {
    
                    var zValue = curves.z.values[ zIndex ];
                    values.push( zValue );
                    prevValue[ 2 ] = zValue;
    
                } else {
    
                    values.push( prevValue[ 2 ] );
    
                }
    
            } );
    
            return values;
    
        }
    
        // For all animated objects, times are defined separately for each axis
        // Here we'll combine the times into one sorted array without duplicates
        function getTimesForAllAxes( curves ) {
    
            var times = [];
    
            // first join together the times for each axis, if defined
            if ( curves.x !== undefined ) times = times.concat( curves.x.times );
            if ( curves.y !== undefined ) times = times.concat( curves.y.times );
            if ( curves.z !== undefined ) times = times.concat( curves.z.times );
    
            // then sort them and remove duplicates
            times = times.sort( function ( a, b ) {
    
                return a - b;
    
            } ).filter( function ( elem, index, array ) {
    
                return array.indexOf( elem ) == index;
    
            } );
    
            return times;
    
        }
    
        // parse an FBX file in ASCII format
        function TextParser() {}
    
        Object.assign( TextParser.prototype, {
    
            getPrevNode: function () {
    
                return this.nodeStack[ this.currentIndent - 2 ];
    
            },
    
            getCurrentNode: function () {
    
                return this.nodeStack[ this.currentIndent - 1 ];
    
            },
    
            getCurrentProp: function () {
    
                return this.currentProp;
    
            },
    
            pushStack: function ( node ) {
    
                this.nodeStack.push( node );
                this.currentIndent += 1;
    
            },
    
            popStack: function () {
    
                this.nodeStack.pop();
                this.currentIndent -= 1;
    
            },
    
            setCurrentProp: function ( val, name ) {
    
                this.currentProp = val;
                this.currentPropName = name;
    
            },
    
            parse: function ( text ) {
    
                this.currentIndent = 0;
                this.allNodes = new FBXTree();
                this.nodeStack = [];
                this.currentProp = [];
                this.currentPropName = '';
    
                var self = this;
    
                var split = text.split( '\n' );
    
                split.forEach( function ( line, i ) {
    
                    var matchComment = line.match( /^[\s\t]*;/ );
                    var matchEmpty = line.match( /^[\s\t]*$/ );
    
                    if ( matchComment || matchEmpty ) return;
    
                    var matchBeginning = line.match( '^\\t{' + self.currentIndent + '}(\\w+):(.*){', '' );
                    var matchProperty = line.match( '^\\t{' + ( self.currentIndent ) + '}(\\w+):[\\s\\t\\r\\n](.*)' );
                    var matchEnd = line.match( '^\\t{' + ( self.currentIndent - 1 ) + '}}' );
    
                    if ( matchBeginning ) {
    
                        self.parseNodeBegin( line, matchBeginning );
    
                    } else if ( matchProperty ) {
    
                        self.parseNodeProperty( line, matchProperty, split[ ++ i ] );
    
                    } else if ( matchEnd ) {
    
                        self.popStack();
    
                    } else if ( line.match( /^[^\s\t}]/ ) ) {
    
                        // large arrays are split over multiple lines terminated with a ',' character
                        // if this is encountered the line needs to be joined to the previous line
                        self.parseNodePropertyContinued( line );
    
                    }
    
                } );
    
                return this.allNodes;
    
            },
    
            parseNodeBegin: function ( line, property ) {
    
                var nodeName = property[ 1 ].trim().replace( /^"/, '' ).replace( /"$/, '' );
    
                var nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {
    
                    return attr.trim().replace( /^"/, '' ).replace( /"$/, '' );
    
                } );
    
                var node = { name: nodeName };
                var attrs = this.parseNodeAttr( nodeAttrs );
    
                var currentNode = this.getCurrentNode();
    
                // a top node
                if ( this.currentIndent === 0 ) {
    
                    this.allNodes.add( nodeName, node );
    
                } else { // a subnode
    
                    // if the subnode already exists, append it
                    if ( nodeName in currentNode ) {
    
                    // special case Pose needs PoseNodes as an array
                        if ( nodeName === 'PoseNode' ) {
    
                            currentNode.PoseNode.push( node );
    
                        } else if ( currentNode[ nodeName ].id !== undefined ) {
    
                            currentNode[ nodeName ] = {};
                            currentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];
    
                        }
    
                        if ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;
    
                    } else if ( typeof attrs.id === 'number' ) {
    
                        currentNode[ nodeName ] = {};
                        currentNode[ nodeName ][ attrs.id ] = node;
    
                    } else if ( nodeName !== 'Properties70' ) {
    
                        if ( nodeName === 'PoseNode' )	currentNode[ nodeName ] = [ node ];
                        else currentNode[ nodeName ] = node;
    
                    }
    
                }
    
                if ( typeof attrs.id === 'number' ) node.id = attrs.id;
                if ( attrs.name !== '' ) node.attrName = attrs.name;
                if ( attrs.type !== '' ) node.attrType = attrs.type;
    
                this.pushStack( node );
    
            },
    
            parseNodeAttr: function ( attrs ) {
    
                var id = attrs[ 0 ];
    
                if ( attrs[ 0 ] !== '' ) {
    
                    id = parseInt( attrs[ 0 ] );
    
                    if ( isNaN( id ) ) {
    
                        id = attrs[ 0 ];
    
                    }
    
                }
    
                var name = '', type = '';
    
                if ( attrs.length > 1 ) {
    
                    name = attrs[ 1 ].replace( /^(\w+)::/, '' );
                    type = attrs[ 2 ];
    
                }
    
                return { id: id, name: name, type: type };
    
            },
    
            parseNodeProperty: function ( line, property, contentLine ) {
    
                var propName = property[ 1 ].replace( /^"/, '' ).replace( /"$/, '' ).trim();
                var propValue = property[ 2 ].replace( /^"/, '' ).replace( /"$/, '' ).trim();
    
                // for special case: base64 image data follows "Content: ," line
                //	Content: ,
                //	 "/9j/4RDaRXhpZgAATU0A..."
                if ( propName === 'Content' && propValue === ',' ) {
    
                    propValue = contentLine.replace( /"/g, '' ).replace( /,$/, '' ).trim();
    
                }
    
                var currentNode = this.getCurrentNode();
                var parentName = currentNode.name;
    
                if ( parentName === 'Properties70' ) {
    
                    this.parseNodeSpecialProperty( line, propName, propValue );
                    return;
    
                }
    
                // Connections
                if ( propName === 'C' ) {
    
                    var connProps = propValue.split( ',' ).slice( 1 );
                    var from = parseInt( connProps[ 0 ] );
                    var to = parseInt( connProps[ 1 ] );
    
                    var rest = propValue.split( ',' ).slice( 3 );
    
                    rest = rest.map( function ( elem ) {
    
                        return elem.trim().replace( /^"/, '' );
    
                    } );
    
                    propName = 'connections';
                    propValue = [ from, to ];
                    append( propValue, rest );
    
                    if ( currentNode[ propName ] === undefined ) {
    
                        currentNode[ propName ] = [];
    
                    }
    
                }
    
                // Node
                if ( propName === 'Node' ) currentNode.id = propValue;
    
                // connections
                if ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {
    
                    currentNode[ propName ].push( propValue );
    
                } else {
    
                    if ( propName !== 'a' ) currentNode[ propName ] = propValue;
                    else currentNode.a = propValue;
    
                }
    
                this.setCurrentProp( currentNode, propName );
    
                // convert string to array, unless it ends in ',' in which case more will be added to it
                if ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {
    
                    currentNode.a = parseNumberArray( propValue );
    
                }
    
            },
    
            parseNodePropertyContinued: function ( line ) {
    
                var currentNode = this.getCurrentNode();
    
                currentNode.a += line;
    
                // if the line doesn't end in ',' we have reached the end of the property value
                // so convert the string to an array
                if ( line.slice( - 1 ) !== ',' ) {
    
                    currentNode.a = parseNumberArray( currentNode.a );
    
                }
    
            },
    
            // parse "Property70"
            parseNodeSpecialProperty: function ( line, propName, propValue ) {
    
                // split this
                // P: "Lcl Scaling", "Lcl Scaling", "", "A",1,1,1
                // into array like below
                // ["Lcl Scaling", "Lcl Scaling", "", "A", "1,1,1" ]
                var props = propValue.split( '",' ).map( function ( prop ) {
    
                    return prop.trim().replace( /^\"/, '' ).replace( /\s/, '_' );
    
                } );
    
                var innerPropName = props[ 0 ];
                var innerPropType1 = props[ 1 ];
                var innerPropType2 = props[ 2 ];
                var innerPropFlag = props[ 3 ];
                var innerPropValue = props[ 4 ];
    
                // cast values where needed, otherwise leave as strings
                switch ( innerPropType1 ) {
    
                    case 'int':
                    case 'enum':
                    case 'bool':
                    case 'ULongLong':
                    case 'double':
                    case 'Number':
                    case 'FieldOfView':
                        innerPropValue = parseFloat( innerPropValue );
                        break;
    
                    case 'Color':
                    case 'ColorRGB':
                    case 'Vector3D':
                    case 'Lcl_Translation':
                    case 'Lcl_Rotation':
                    case 'Lcl_Scaling':
                        innerPropValue = parseNumberArray( innerPropValue );
                        break;
    
                }
    
                // CAUTION: these props must append to parent's parent
                this.getPrevNode()[ innerPropName ] = {
    
                    'type': innerPropType1,
                    'type2': innerPropType2,
                    'flag': innerPropFlag,
                    'value': innerPropValue
    
                };
    
                this.setCurrentProp( this.getPrevNode(), innerPropName );
    
            },
    
        } );
    
        // Parse an FBX file in Binary format
        function BinaryParser() {}
    
        Object.assign( BinaryParser.prototype, {
    
            parse: function ( buffer ) {
    
                var reader = new BinaryReader( buffer );
                reader.skip( 23 ); // skip magic 23 bytes
    
                var version = reader.getUint32();
    
                console.log( 'THREE.FBXLoader: FBX binary version: ' + version );
    
                var allNodes = new FBXTree();
    
                while ( ! this.endOfContent( reader ) ) {
    
                    var node = this.parseNode( reader, version );
                    if ( node !== null ) allNodes.add( node.name, node );
    
                }
    
                return allNodes;
    
            },
    
            // Check if reader has reached the end of content.
            endOfContent: function ( reader ) {
    
                // footer size: 160bytes + 16-byte alignment padding
                // - 16bytes: magic
                // - padding til 16-byte alignment (at least 1byte?)
                //	(seems like some exporters embed fixed 15 or 16bytes?)
                // - 4bytes: magic
                // - 4bytes: version
                // - 120bytes: zero
                // - 16bytes: magic
                if ( reader.size() % 16 === 0 ) {
    
                    return ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();
    
                } else {
    
                    return reader.getOffset() + 160 + 16 >= reader.size();
    
                }
    
            },
    
            // recursively parse nodes until the end of the file is reached
            parseNode: function ( reader, version ) {
    
                var node = {};
    
                // The first three data sizes depends on version.
                var endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();
                var numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();
    
                // note: do not remove this even if you get a linter warning as it moves the buffer forward
                var propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();
    
                var nameLen = reader.getUint8();
                var name = reader.getString( nameLen );
    
                // Regards this node as NULL-record if endOffset is zero
                if ( endOffset === 0 ) return null;
    
                var propertyList = [];
    
                for ( var i = 0; i < numProperties; i ++ ) {
    
                    propertyList.push( this.parseProperty( reader ) );
    
                }
    
                // Regards the first three elements in propertyList as id, attrName, and attrType
                var id = propertyList.length > 0 ? propertyList[ 0 ] : '';
                var attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';
                var attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';
    
                // check if this node represents just a single property
                // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}
                node.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;
    
                while ( endOffset > reader.getOffset() ) {
    
                    var subNode = this.parseNode( reader, version );
    
                    if ( subNode !== null ) this.parseSubNode( name, node, subNode );
    
                }
    
                node.propertyList = propertyList; // raw property list used by parent
    
                if ( typeof id === 'number' ) node.id = id;
                if ( attrName !== '' ) node.attrName = attrName;
                if ( attrType !== '' ) node.attrType = attrType;
                if ( name !== '' ) node.name = name;
    
                return node;
    
            },
    
            parseSubNode: function ( name, node, subNode ) {
    
                // special case: child node is single property
                if ( subNode.singleProperty === true ) {
    
                    var value = subNode.propertyList[ 0 ];
    
                    if ( Array.isArray( value ) ) {
    
                        node[ subNode.name ] = subNode;
    
                        subNode.a = value;
    
                    } else {
    
                        node[ subNode.name ] = value;
    
                    }
    
                } else if ( name === 'Connections' && subNode.name === 'C' ) {
    
                    var array = [];
    
                    subNode.propertyList.forEach( function ( property, i ) {
    
                        // first Connection is FBX type (OO, OP, etc.). We'll discard these
                        if ( i !== 0 ) array.push( property );
    
                    } );
    
                    if ( node.connections === undefined ) {
    
                        node.connections = [];
    
                    }
    
                    node.connections.push( array );
    
                } else if ( subNode.name === 'Properties70' ) {
    
                    var keys = Object.keys( subNode );
    
                    keys.forEach( function ( key ) {
    
                        node[ key ] = subNode[ key ];
    
                    } );
    
                } else if ( name === 'Properties70' && subNode.name === 'P' ) {
    
                    var innerPropName = subNode.propertyList[ 0 ];
                    var innerPropType1 = subNode.propertyList[ 1 ];
                    var innerPropType2 = subNode.propertyList[ 2 ];
                    var innerPropFlag = subNode.propertyList[ 3 ];
                    var innerPropValue;
    
                    if ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );
                    if ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );
    
                    if ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {
    
                        innerPropValue = [
                            subNode.propertyList[ 4 ],
                            subNode.propertyList[ 5 ],
                            subNode.propertyList[ 6 ]
                        ];
    
                    } else {
    
                        innerPropValue = subNode.propertyList[ 4 ];
    
                    }
    
                    // this will be copied to parent, see above
                    node[ innerPropName ] = {
    
                        'type': innerPropType1,
                        'type2': innerPropType2,
                        'flag': innerPropFlag,
                        'value': innerPropValue
    
                    };
    
                } else if ( node[ subNode.name ] === undefined ) {
    
                    if ( typeof subNode.id === 'number' ) {
    
                        node[ subNode.name ] = {};
                        node[ subNode.name ][ subNode.id ] = subNode;
    
                    } else {
    
                        node[ subNode.name ] = subNode;
    
                    }
    
                } else {
    
                    if ( subNode.name === 'PoseNode' ) {
    
                        if ( ! Array.isArray( node[ subNode.name ] ) ) {
    
                            node[ subNode.name ] = [ node[ subNode.name ] ];
    
                        }
    
                        node[ subNode.name ].push( subNode );
    
                    } else if ( node[ subNode.name ][ subNode.id ] === undefined ) {
    
                        node[ subNode.name ][ subNode.id ] = subNode;
    
                    }
    
                }
    
            },
    
            parseProperty: function ( reader ) {
    
                var type = reader.getString( 1 );
    
                switch ( type ) {
    
                    case 'C':
                        return reader.getBoolean();
    
                    case 'D':
                        return reader.getFloat64();
    
                    case 'F':
                        return reader.getFloat32();
    
                    case 'I':
                        return reader.getInt32();
    
                    case 'L':
                        return reader.getInt64();
    
                    case 'R':
                        var length = reader.getUint32();
                        return reader.getArrayBuffer( length );
    
                    case 'S':
                        var length = reader.getUint32();
                        return reader.getString( length );
    
                    case 'Y':
                        return reader.getInt16();
    
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'f':
                    case 'i':
                    case 'l':
    
                        var arrayLength = reader.getUint32();
                        var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed
                        var compressedLength = reader.getUint32();
    
                        if ( encoding === 0 ) {
    
                            switch ( type ) {
    
                                case 'b':
                                case 'c':
                                    return reader.getBooleanArray( arrayLength );
    
                                case 'd':
                                    return reader.getFloat64Array( arrayLength );
    
                                case 'f':
                                    return reader.getFloat32Array( arrayLength );
    
                                case 'i':
                                    return reader.getInt32Array( arrayLength );
    
                                case 'l':
                                    return reader.getInt64Array( arrayLength );
    
                            }
    
                        }
    
                        if ( window.Zlib === undefined ) {
    
                            console.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );
    
                        }
    
                        var inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef
                        var reader2 = new BinaryReader( inflate.decompress().buffer );
    
                        switch ( type ) {
    
                            case 'b':
                            case 'c':
                                return reader2.getBooleanArray( arrayLength );
    
                            case 'd':
                                return reader2.getFloat64Array( arrayLength );
    
                            case 'f':
                                return reader2.getFloat32Array( arrayLength );
    
                            case 'i':
                                return reader2.getInt32Array( arrayLength );
    
                            case 'l':
                                return reader2.getInt64Array( arrayLength );
    
                        }
    
                    default:
                        throw new Error( 'THREE.FBXLoader: Unknown property type ' + type );
    
                }
    
            }
    
        } );
    
    
        function BinaryReader( buffer, littleEndian ) {
    
            this.dv = new DataView( buffer );
            this.offset = 0;
            this.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;
    
        }
    
        Object.assign( BinaryReader.prototype, {
    
            getOffset: function () {
    
                return this.offset;
    
            },
    
            size: function () {
    
                return this.dv.buffer.byteLength;
    
            },
    
            skip: function ( length ) {
    
                this.offset += length;
    
            },
    
            // seems like true/false representation depends on exporter.
            // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)
            // then sees LSB.
            getBoolean: function () {
    
                return ( this.getUint8() & 1 ) === 1;
    
            },
    
            getBooleanArray: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getBoolean() );
    
                }
    
                return a;
    
            },
    
            getUint8: function () {
    
                var value = this.dv.getUint8( this.offset );
                this.offset += 1;
                return value;
    
            },
    
            getInt16: function () {
    
                var value = this.dv.getInt16( this.offset, this.littleEndian );
                this.offset += 2;
                return value;
    
            },
    
            getInt32: function () {
    
                var value = this.dv.getInt32( this.offset, this.littleEndian );
                this.offset += 4;
                return value;
    
            },
    
            getInt32Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getInt32() );
    
                }
    
                return a;
    
            },
    
            getUint32: function () {
    
                var value = this.dv.getUint32( this.offset, this.littleEndian );
                this.offset += 4;
                return value;
    
            },
    
            // JavaScript doesn't support 64-bit integer so calculate this here
            // 1 << 32 will return 1 so using multiply operation instead here.
            // There's a possibility that this method returns wrong value if the value
            // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.
            // TODO: safely handle 64-bit integer
            getInt64: function () {
    
                var low, high;
    
                if ( this.littleEndian ) {
    
                    low = this.getUint32();
                    high = this.getUint32();
    
                } else {
    
                    high = this.getUint32();
                    low = this.getUint32();
    
                }
    
                // calculate negative value
                if ( high & 0x80000000 ) {
    
                    high = ~ high & 0xFFFFFFFF;
                    low = ~ low & 0xFFFFFFFF;
    
                    if ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;
    
                    low = ( low + 1 ) & 0xFFFFFFFF;
    
                    return - ( high * 0x100000000 + low );
    
                }
    
                return high * 0x100000000 + low;
    
            },
    
            getInt64Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getInt64() );
    
                }
    
                return a;
    
            },
    
            // Note: see getInt64() comment
            getUint64: function () {
    
                var low, high;
    
                if ( this.littleEndian ) {
    
                    low = this.getUint32();
                    high = this.getUint32();
    
                } else {
    
                    high = this.getUint32();
                    low = this.getUint32();
    
                }
    
                return high * 0x100000000 + low;
    
            },
    
            getFloat32: function () {
    
                var value = this.dv.getFloat32( this.offset, this.littleEndian );
                this.offset += 4;
                return value;
    
            },
    
            getFloat32Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getFloat32() );
    
                }
    
                return a;
    
            },
    
            getFloat64: function () {
    
                var value = this.dv.getFloat64( this.offset, this.littleEndian );
                this.offset += 8;
                return value;
    
            },
    
            getFloat64Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getFloat64() );
    
                }
    
                return a;
    
            },
    
            getArrayBuffer: function ( size ) {
    
                var value = this.dv.buffer.slice( this.offset, this.offset + size );
                this.offset += size;
                return value;
    
            },
    
            getString: function ( size ) {
    
                var a = new Uint8Array( size );
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a[ i ] = this.getUint8();
    
                }
    
                var nullByte = a.indexOf( 0 );
                if ( nullByte >= 0 ) a = a.slice( 0, nullByte );
    
                return THREE.LoaderUtils.decodeText( a );
    
            }
    
        } );
    
        // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)
        // and BinaryParser( FBX Binary format)
        function FBXTree() {}
    
        Object.assign( FBXTree.prototype, {
    
            add: function ( key, val ) {
    
                this[ key ] = val;
    
            },
    
        } );
    
        function isFbxFormatBinary( buffer ) {
    
            var CORRECT = 'Kaydara FBX Binary  \0';
    
            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );
    
        }
    
        function isFbxFormatASCII( text ) {
    
            var CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\', 'F', 'B', 'X', '\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\', '\\' ];
    
            var cursor = 0;
    
            function read( offset ) {
    
                var result = text[ offset - 1 ];
                text = text.slice( cursor + offset );
                cursor ++;
                return result;
    
            }
    
            for ( var i = 0; i < CORRECT.length; ++ i ) {
    
                var num = read( 1 );
                if ( num === CORRECT[ i ] ) {
    
                    return false;
    
                }
    
            }
    
            return true;
    
        }
    
        function getFbxVersion( text ) {
    
            var versionRegExp = /FBXVersion: (\d+)/;
            var match = text.match( versionRegExp );
            if ( match ) {
    
                var version = parseInt( match[ 1 ] );
                return version;
    
            }
            throw new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );
    
        }
    
        // Converts FBX ticks into real time seconds.
        function convertFBXTimeToSeconds( time ) {
    
            return time / 46186158000;
    
        }
    
    
        // Parses comma separated list of numbers and returns them an array.
        // Used internally by the TextParser
        function parseNumberArray( value ) {
    
            var array = value.split( ',' ).map( function ( val ) {
    
                return parseFloat( val );
    
            } );
    
            return array;
    
        }
    
        function convertArrayBufferToString( buffer, from, to ) {
    
            if ( from === undefined ) from = 0;
            if ( to === undefined ) to = buffer.byteLength;
    
            return THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );
    
        }
    
        function append( a, b ) {
    
            for ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {
    
                a[ j ] = b[ i ];
    
            }
    
        }
    
        function slice( a, b, from, to ) {
    
            for ( var i = from, j = 0; i < to; i ++, j ++ ) {
    
                a[ j ] = b[ i ];
    
            }
    
            return a;
    
        }
    
    } )();
},{}],"src/lib/GLTFLoader":[function(require,module,exports){
/**
 * @author Rich Tibbett / https://github.com/richtr
 * @author mrdoob / http://mrdoob.com/
 * @author Tony Parisi / http://www.tonyparisi.com/
 * @author Takahiro / https://github.com/takahirox
 * @author Don McCurdy / https://www.donmccurdy.com
 */

THREE.GLTFLoader = ( function () {
    
        function GLTFLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
        }
    
        GLTFLoader.prototype = {
    
            constructor: GLTFLoader,
    
            crossOrigin: 'Anonymous',
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var path = this.path !== undefined ? this.path : THREE.LoaderUtils.extractUrlBase( url );
    
                var loader = new THREE.FileLoader( scope.manager );
    
                loader.setResponseType( 'arraybuffer' );
    
                loader.load( url, function ( data ) {
    
                    try {
    
                        scope.parse( data, path, onLoad, onError );
    
                    } catch ( e ) {
    
                        if ( onError !== undefined ) {
    
                            onError( e );
    
                        } else {
    
                            throw e;
    
                        }
    
                    }
    
                }, onProgress, onError );
    
            },
    
            setCrossOrigin: function ( value ) {
    
                this.crossOrigin = value;
                return this;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            },
    
            parse: function ( data, path, onLoad, onError ) {
    
                var content;
                var extensions = {};
    
                if ( typeof data === 'string' ) {
    
                    content = data;
    
                } else {
    
                    var magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );
    
                    if ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {
    
                        try {
    
                            extensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );
    
                        } catch ( error ) {
    
                            if ( onError ) onError( error );
                            return;
    
                        }
    
                        content = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;
    
                    } else {
    
                        content = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );
    
                    }
    
                }
    
                var json = JSON.parse( content );
    
                if ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {
    
                    if ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead.' ) );
                    return;
    
                }
    
                if ( json.extensionsUsed ) {
    
                    if ( json.extensionsUsed.indexOf( EXTENSIONS.KHR_LIGHTS ) >= 0 ) {
    
                        extensions[ EXTENSIONS.KHR_LIGHTS ] = new GLTFLightsExtension( json );
    
                    }
    
                    if ( json.extensionsUsed.indexOf( EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ) >= 0 ) {
    
                        extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] = new GLTFMaterialsPbrSpecularGlossinessExtension();
    
                    }
    
                }
    
                console.time( 'GLTFLoader' );
    
                var parser = new GLTFParser( json, extensions, {
    
                    path: path || this.path || '',
                    crossOrigin: this.crossOrigin,
                    manager: this.manager
    
                } );
    
                parser.parse( function ( scene, scenes, cameras, animations, asset ) {
    
                    console.timeEnd( 'GLTFLoader' );
    
                    var glTF = {
                        scene: scene,
                        scenes: scenes,
                        cameras: cameras,
                        animations: animations,
                        asset: asset
                    };
    
                    onLoad( glTF );
    
                }, onError );
    
            }
    
        };
    
        /* GLTFREGISTRY */
    
        function GLTFRegistry() {
    
            var objects = {};
    
            return	{
    
                get: function ( key ) {
    
                    return objects[ key ];
    
                },
    
                add: function ( key, object ) {
    
                    objects[ key ] = object;
    
                },
    
                remove: function ( key ) {
    
                    delete objects[ key ];
    
                },
    
                removeAll: function () {
    
                    objects = {};
    
                }
    
            };
    
        }
    
        /*********************************/
        /********** EXTENSIONS ***********/
        /*********************************/
    
        var EXTENSIONS = {
            KHR_BINARY_GLTF: 'KHR_binary_glTF',
            KHR_LIGHTS: 'KHR_lights',
            KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness'
        };
    
        /**
         * Lights Extension
         *
         * Specification: PENDING
         */
        function GLTFLightsExtension( json ) {
    
            this.name = EXTENSIONS.KHR_LIGHTS;
    
            this.lights = {};
    
            var extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS ] ) || {};
            var lights = extension.lights || {};
    
            for ( var lightId in lights ) {
    
                var light = lights[ lightId ];
                var lightNode;
    
                var color = new THREE.Color().fromArray( light.color );
    
                switch ( light.type ) {
    
                    case 'directional':
                        lightNode = new THREE.DirectionalLight( color );
                        lightNode.position.set( 0, 0, 1 );
                        break;
    
                    case 'point':
                        lightNode = new THREE.PointLight( color );
                        break;
    
                    case 'spot':
                        lightNode = new THREE.SpotLight( color );
                        lightNode.position.set( 0, 0, 1 );
                        break;
    
                    case 'ambient':
                        lightNode = new THREE.AmbientLight( color );
                        break;
    
                }
    
                if ( lightNode ) {
    
                    if ( light.constantAttenuation !== undefined ) {
    
                        lightNode.intensity = light.constantAttenuation;
    
                    }
    
                    if ( light.linearAttenuation !== undefined ) {
    
                        lightNode.distance = 1 / light.linearAttenuation;
    
                    }
    
                    if ( light.quadraticAttenuation !== undefined ) {
    
                        lightNode.decay = light.quadraticAttenuation;
    
                    }
    
                    if ( light.fallOffAngle !== undefined ) {
    
                        lightNode.angle = light.fallOffAngle;
    
                    }
    
                    if ( light.fallOffExponent !== undefined ) {
    
                        console.warn( 'THREE.GLTFLoader:: light.fallOffExponent not currently supported.' );
    
                    }
    
                    lightNode.name = light.name || ( 'light_' + lightId );
                    this.lights[ lightId ] = lightNode;
    
                }
    
            }
    
        }
    
        /* BINARY EXTENSION */
    
        var BINARY_EXTENSION_BUFFER_NAME = 'binary_glTF';
        var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
        var BINARY_EXTENSION_HEADER_LENGTH = 12;
        var BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };
    
        function GLTFBinaryExtension( data ) {
    
            this.name = EXTENSIONS.KHR_BINARY_GLTF;
            this.content = null;
            this.body = null;
    
            var headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );
    
            this.header = {
                magic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),
                version: headerView.getUint32( 4, true ),
                length: headerView.getUint32( 8, true )
            };
    
            if ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {
    
                throw new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );
    
            } else if ( this.header.version < 2.0 ) {
    
                throw new Error( 'THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.' );
    
            }
    
            var chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );
            var chunkIndex = 0;
    
            while ( chunkIndex < chunkView.byteLength ) {
    
                var chunkLength = chunkView.getUint32( chunkIndex, true );
                chunkIndex += 4;
    
                var chunkType = chunkView.getUint32( chunkIndex, true );
                chunkIndex += 4;
    
                if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {
    
                    var contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );
                    this.content = THREE.LoaderUtils.decodeText( contentArray );
    
                } else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {
    
                    var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
                    this.body = data.slice( byteOffset, byteOffset + chunkLength );
    
                }
    
                // Clients must ignore chunks with unknown types.
    
                chunkIndex += chunkLength;
    
            }
    
            if ( this.content === null ) {
    
                throw new Error( 'THREE.GLTFLoader: JSON content not found.' );
    
            }
    
        }
    
        /**
         * Specular-Glossiness Extension
         *
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness
         */
        function GLTFMaterialsPbrSpecularGlossinessExtension() {
    
            return {
    
                name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
    
                specularGlossinessParams: [
                    'color',
                    'map',
                    'lightMap',
                    'lightMapIntensity',
                    'aoMap',
                    'aoMapIntensity',
                    'emissive',
                    'emissiveIntensity',
                    'emissiveMap',
                    'bumpMap',
                    'bumpScale',
                    'normalMap',
                    'displacementMap',
                    'displacementScale',
                    'displacementBias',
                    'specularMap',
                    'specular',
                    'glossinessMap',
                    'glossiness',
                    'alphaMap',
                    'envMap',
                    'envMapIntensity',
                    'refractionRatio',
                ],
    
                getMaterialType: function () {
    
                    return THREE.ShaderMaterial;
    
                },
    
                extendParams: function ( params, material, parser ) {
    
                    var pbrSpecularGlossiness = material.extensions[ this.name ];
    
                    var shader = THREE.ShaderLib[ 'standard' ];
    
                    var uniforms = THREE.UniformsUtils.clone( shader.uniforms );
    
                    var specularMapParsFragmentChunk = [
                        '#ifdef USE_SPECULARMAP',
                        '	uniform sampler2D specularMap;',
                        '#endif'
                    ].join( '\n' );
    
                    var glossinessMapParsFragmentChunk = [
                        '#ifdef USE_GLOSSINESSMAP',
                        '	uniform sampler2D glossinessMap;',
                        '#endif'
                    ].join( '\n' );
    
                    var specularMapFragmentChunk = [
                        'vec3 specularFactor = specular;',
                        '#ifdef USE_SPECULARMAP',
                        '	vec4 texelSpecular = texture2D( specularMap, vUv );',
                        '	texelSpecular = sRGBToLinear( texelSpecular );',
                        '	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
                        '	specularFactor *= texelSpecular.rgb;',
                        '#endif'
                    ].join( '\n' );
    
                    var glossinessMapFragmentChunk = [
                        'float glossinessFactor = glossiness;',
                        '#ifdef USE_GLOSSINESSMAP',
                        '	vec4 texelGlossiness = texture2D( glossinessMap, vUv );',
                        '	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
                        '	glossinessFactor *= texelGlossiness.a;',
                        '#endif'
                    ].join( '\n' );
    
                    var lightPhysicalFragmentChunk = [
                        'PhysicalMaterial material;',
                        'material.diffuseColor = diffuseColor.rgb;',
                        'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',
                        'material.specularColor = specularFactor.rgb;',
                    ].join( '\n' );
    
                    var fragmentShader = shader.fragmentShader
                        .replace( '#include <specularmap_fragment>', '' )
                        .replace( 'uniform float roughness;', 'uniform vec3 specular;' )
                        .replace( 'uniform float metalness;', 'uniform float glossiness;' )
                        .replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )
                        .replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )
                        .replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )
                        .replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )
                        .replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );
    
                    delete uniforms.roughness;
                    delete uniforms.metalness;
                    delete uniforms.roughnessMap;
                    delete uniforms.metalnessMap;
    
                    uniforms.specular = { value: new THREE.Color().setHex( 0x111111 ) };
                    uniforms.glossiness = { value: 0.5 };
                    uniforms.specularMap = { value: null };
                    uniforms.glossinessMap = { value: null };
    
                    params.vertexShader = shader.vertexShader;
                    params.fragmentShader = fragmentShader;
                    params.uniforms = uniforms;
                    params.defines = { 'STANDARD': '' };
    
                    params.color = new THREE.Color( 1.0, 1.0, 1.0 );
                    params.opacity = 1.0;
    
                    var pending = [];
    
                    if ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {
    
                        var array = pbrSpecularGlossiness.diffuseFactor;
    
                        params.color.fromArray( array );
                        params.opacity = array[ 3 ];
    
                    }
    
                    if ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {
    
                        pending.push( parser.assignTexture( params, 'map', pbrSpecularGlossiness.diffuseTexture.index ) );
    
                    }
    
                    params.emissive = new THREE.Color( 0.0, 0.0, 0.0 );
                    params.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;
                    params.specular = new THREE.Color( 1.0, 1.0, 1.0 );
    
                    if ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {
    
                        params.specular.fromArray( pbrSpecularGlossiness.specularFactor );
    
                    }
    
                    if ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {
    
                        var specGlossIndex = pbrSpecularGlossiness.specularGlossinessTexture.index;
                        pending.push( parser.assignTexture( params, 'glossinessMap', specGlossIndex ) );
                        pending.push( parser.assignTexture( params, 'specularMap', specGlossIndex ) );
    
                    }
    
                    return Promise.all( pending );
    
                },
    
                createMaterial: function ( params ) {
    
                    // setup material properties based on MeshStandardMaterial for Specular-Glossiness
    
                    var material = new THREE.ShaderMaterial( {
                        defines: params.defines,
                        vertexShader: params.vertexShader,
                        fragmentShader: params.fragmentShader,
                        uniforms: params.uniforms,
                        fog: true,
                        lights: true,
                        opacity: params.opacity,
                        transparent: params.transparent
                    } );
    
                    material.isGLTFSpecularGlossinessMaterial = true;
    
                    material.color = params.color;
    
                    material.map = params.map === undefined ? null : params.map;
    
                    material.lightMap = null;
                    material.lightMapIntensity = 1.0;
    
                    material.aoMap = params.aoMap === undefined ? null : params.aoMap;
                    material.aoMapIntensity = 1.0;
    
                    material.emissive = params.emissive;
                    material.emissiveIntensity = 1.0;
                    material.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;
    
                    material.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;
                    material.bumpScale = 1;
    
                    material.normalMap = params.normalMap === undefined ? null : params.normalMap;
                    if ( params.normalScale ) material.normalScale = params.normalScale;
    
                    material.displacementMap = null;
                    material.displacementScale = 1;
                    material.displacementBias = 0;
    
                    material.specularMap = params.specularMap === undefined ? null : params.specularMap;
                    material.specular = params.specular;
    
                    material.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;
                    material.glossiness = params.glossiness;
    
                    material.alphaMap = null;
    
                    material.envMap = params.envMap === undefined ? null : params.envMap;
                    material.envMapIntensity = 1.0;
    
                    material.refractionRatio = 0.98;
    
                    material.extensions.derivatives = true;
    
                    return material;
    
                },
    
                /**
                 * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can
                 * copy only properties it knows about or inherits, and misses many properties that would
                 * normally be defined by MeshStandardMaterial.
                 *
                 * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of
                 * loading a glTF model, but cloning later (e.g. by the user) would require these changes
                 * AND also updating `.onBeforeRender` on the parent mesh.
                 *
                 * @param  {THREE.ShaderMaterial} source
                 * @return {THREE.ShaderMaterial}
                 */
                cloneMaterial: function ( source ) {
    
                    var target = source.clone();
    
                    target.isGLTFSpecularGlossinessMaterial = true;
    
                    var params = this.specularGlossinessParams;
    
                    for ( var i = 0, il = params.length; i < il; i ++ ) {
    
                        target[ params[ i ] ] = source[ params[ i ] ];
    
                    }
    
                    return target;
    
                },
    
                // Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.
                refreshUniforms: function ( renderer, scene, camera, geometry, material, group ) {
    
                    if ( material.isGLTFSpecularGlossinessMaterial !== true ) {
    
                        return;
    
                    }
    
                    var uniforms = material.uniforms;
                    var defines = material.defines;
    
                    uniforms.opacity.value = material.opacity;
    
                    uniforms.diffuse.value.copy( material.color );
                    uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
    
                    uniforms.map.value = material.map;
                    uniforms.specularMap.value = material.specularMap;
                    uniforms.alphaMap.value = material.alphaMap;
    
                    uniforms.lightMap.value = material.lightMap;
                    uniforms.lightMapIntensity.value = material.lightMapIntensity;
    
                    uniforms.aoMap.value = material.aoMap;
                    uniforms.aoMapIntensity.value = material.aoMapIntensity;
    
                    // uv repeat and offset setting priorities
                    // 1. color map
                    // 2. specular map
                    // 3. normal map
                    // 4. bump map
                    // 5. alpha map
                    // 6. emissive map
    
                    var uvScaleMap;
    
                    if ( material.map ) {
    
                        uvScaleMap = material.map;
    
                    } else if ( material.specularMap ) {
    
                        uvScaleMap = material.specularMap;
    
                    } else if ( material.displacementMap ) {
    
                        uvScaleMap = material.displacementMap;
    
                    } else if ( material.normalMap ) {
    
                        uvScaleMap = material.normalMap;
    
                    } else if ( material.bumpMap ) {
    
                        uvScaleMap = material.bumpMap;
    
                    } else if ( material.glossinessMap ) {
    
                        uvScaleMap = material.glossinessMap;
    
                    } else if ( material.alphaMap ) {
    
                        uvScaleMap = material.alphaMap;
    
                    } else if ( material.emissiveMap ) {
    
                        uvScaleMap = material.emissiveMap;
    
                    }
    
                    if ( uvScaleMap !== undefined ) {
    
                        // backwards compatibility
                        if ( uvScaleMap.isWebGLRenderTarget ) {
    
                            uvScaleMap = uvScaleMap.texture;
    
                        }
    
                        var offset;
                        var repeat;
    
                        if ( uvScaleMap.matrix !== undefined ) {
    
                            // > r88.
    
                            if ( uvScaleMap.matrixAutoUpdate === true ) {
    
                                offset = uvScaleMap.offset;
                                repeat = uvScaleMap.repeat;
                                var rotation = uvScaleMap.rotation;
                                var center = uvScaleMap.center;
    
                                uvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );
    
                            }
    
                            uniforms.uvTransform.value.copy( uvScaleMap.matrix );
    
                        } else {
    
                            // <= r87. Remove when reasonable.
    
                            offset = uvScaleMap.offset;
                            repeat = uvScaleMap.repeat;
    
                            uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );
    
                        }
    
                    }
    
                    uniforms.envMap.value = material.envMap;
                    uniforms.envMapIntensity.value = material.envMapIntensity;
                    uniforms.flipEnvMap.value = ( material.envMap && material.envMap.isCubeTexture ) ? - 1 : 1;
    
                    uniforms.refractionRatio.value = material.refractionRatio;
    
                    uniforms.specular.value.copy( material.specular );
                    uniforms.glossiness.value = material.glossiness;
    
                    uniforms.glossinessMap.value = material.glossinessMap;
    
                    uniforms.emissiveMap.value = material.emissiveMap;
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.normalMap.value = material.normalMap;
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                    if ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {
    
                        defines.USE_GLOSSINESSMAP = '';
                        // set USE_ROUGHNESSMAP to enable vUv
                        defines.USE_ROUGHNESSMAP = '';
    
                    }
    
                    if ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {
    
                        delete defines.USE_GLOSSINESSMAP;
                        delete defines.USE_ROUGHNESSMAP;
    
                    }
    
                }
    
            };
    
        }
    
        /*********************************/
        /********** INTERPOLATION ********/
        /*********************************/
    
        // Spline Interpolation
        // Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation
        function GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
    
            THREE.Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
    
        };
    
        GLTFCubicSplineInterpolant.prototype = Object.create( THREE.Interpolant.prototype );
        GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;
    
        GLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {
    
            var result = this.resultBuffer;
            var values = this.sampleValues;
            var stride = this.valueSize;
    
            var stride2 = stride * 2;
            var stride3 = stride * 3;
    
            var td = t1 - t0;
    
            var p = ( t - t0 ) / td;
            var pp = p * p;
            var ppp = pp * p;
    
            var offset1 = i1 * stride3;
            var offset0 = offset1 - stride3;
    
            var s0 = 2 * ppp - 3 * pp + 1;
            var s1 = ppp - 2 * pp + p;
            var s2 = - 2 * ppp + 3 * pp;
            var s3 = ppp - pp;
    
            // Layout of keyframe output values for CUBICSPLINE animations:
            //   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]
            for ( var i = 0; i !== stride; i ++ ) {
    
                var p0 = values[ offset0 + i + stride ];        // splineVertex_k
                var m0 = values[ offset0 + i + stride2 ] * td;  // outTangent_k * (t_k+1 - t_k)
                var p1 = values[ offset1 + i + stride ];        // splineVertex_k+1
                var m1 = values[ offset1 + i ] * td;            // inTangent_k+1 * (t_k+1 - t_k)
    
                result[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;
    
            }
    
            return result;
    
        };
    
        /*********************************/
        /********** INTERNALS ************/
        /*********************************/
    
        /* CONSTANTS */
    
        var WEBGL_CONSTANTS = {
            FLOAT: 5126,
            //FLOAT_MAT2: 35674,
            FLOAT_MAT3: 35675,
            FLOAT_MAT4: 35676,
            FLOAT_VEC2: 35664,
            FLOAT_VEC3: 35665,
            FLOAT_VEC4: 35666,
            LINEAR: 9729,
            REPEAT: 10497,
            SAMPLER_2D: 35678,
            POINTS: 0,
            LINES: 1,
            LINE_LOOP: 2,
            LINE_STRIP: 3,
            TRIANGLES: 4,
            TRIANGLE_STRIP: 5,
            TRIANGLE_FAN: 6,
            UNSIGNED_BYTE: 5121,
            UNSIGNED_SHORT: 5123
        };
    
        var WEBGL_TYPE = {
            5126: Number,
            //35674: THREE.Matrix2,
            35675: THREE.Matrix3,
            35676: THREE.Matrix4,
            35664: THREE.Vector2,
            35665: THREE.Vector3,
            35666: THREE.Vector4,
            35678: THREE.Texture
        };
    
        var WEBGL_COMPONENT_TYPES = {
            5120: Int8Array,
            5121: Uint8Array,
            5122: Int16Array,
            5123: Uint16Array,
            5125: Uint32Array,
            5126: Float32Array
        };
    
        var WEBGL_FILTERS = {
            9728: THREE.NearestFilter,
            9729: THREE.LinearFilter,
            9984: THREE.NearestMipMapNearestFilter,
            9985: THREE.LinearMipMapNearestFilter,
            9986: THREE.NearestMipMapLinearFilter,
            9987: THREE.LinearMipMapLinearFilter
        };
    
        var WEBGL_WRAPPINGS = {
            33071: THREE.ClampToEdgeWrapping,
            33648: THREE.MirroredRepeatWrapping,
            10497: THREE.RepeatWrapping
        };
    
        var WEBGL_TEXTURE_FORMATS = {
            6406: THREE.AlphaFormat,
            6407: THREE.RGBFormat,
            6408: THREE.RGBAFormat,
            6409: THREE.LuminanceFormat,
            6410: THREE.LuminanceAlphaFormat
        };
    
        var WEBGL_TEXTURE_DATATYPES = {
            5121: THREE.UnsignedByteType,
            32819: THREE.UnsignedShort4444Type,
            32820: THREE.UnsignedShort5551Type,
            33635: THREE.UnsignedShort565Type
        };
    
        var WEBGL_SIDES = {
            1028: THREE.BackSide, // Culling front
            1029: THREE.FrontSide // Culling back
            //1032: THREE.NoSide   // Culling front and back, what to do?
        };
    
        var WEBGL_DEPTH_FUNCS = {
            512: THREE.NeverDepth,
            513: THREE.LessDepth,
            514: THREE.EqualDepth,
            515: THREE.LessEqualDepth,
            516: THREE.GreaterEqualDepth,
            517: THREE.NotEqualDepth,
            518: THREE.GreaterEqualDepth,
            519: THREE.AlwaysDepth
        };
    
        var WEBGL_BLEND_EQUATIONS = {
            32774: THREE.AddEquation,
            32778: THREE.SubtractEquation,
            32779: THREE.ReverseSubtractEquation
        };
    
        var WEBGL_BLEND_FUNCS = {
            0: THREE.ZeroFactor,
            1: THREE.OneFactor,
            768: THREE.SrcColorFactor,
            769: THREE.OneMinusSrcColorFactor,
            770: THREE.SrcAlphaFactor,
            771: THREE.OneMinusSrcAlphaFactor,
            772: THREE.DstAlphaFactor,
            773: THREE.OneMinusDstAlphaFactor,
            774: THREE.DstColorFactor,
            775: THREE.OneMinusDstColorFactor,
            776: THREE.SrcAlphaSaturateFactor
            // The followings are not supported by Three.js yet
            //32769: CONSTANT_COLOR,
            //32770: ONE_MINUS_CONSTANT_COLOR,
            //32771: CONSTANT_ALPHA,
            //32772: ONE_MINUS_CONSTANT_COLOR
        };
    
        var WEBGL_TYPE_SIZES = {
            'SCALAR': 1,
            'VEC2': 2,
            'VEC3': 3,
            'VEC4': 4,
            'MAT2': 4,
            'MAT3': 9,
            'MAT4': 16
        };
    
        var PATH_PROPERTIES = {
            scale: 'scale',
            translation: 'position',
            rotation: 'quaternion',
            weights: 'morphTargetInfluences'
        };
    
        var INTERPOLATION = {
            CUBICSPLINE: THREE.InterpolateSmooth, // We use custom interpolation GLTFCubicSplineInterpolation for CUBICSPLINE.
                                                  // KeyframeTrack.optimize() can't handle glTF Cubic Spline output values layout,
                                                  // using THREE.InterpolateSmooth for KeyframeTrack instantiation to prevent optimization.
                                                  // See KeyframeTrack.optimize() for the detail.
            LINEAR: THREE.InterpolateLinear,
            STEP: THREE.InterpolateDiscrete
        };
    
        var STATES_ENABLES = {
            2884: 'CULL_FACE',
            2929: 'DEPTH_TEST',
            3042: 'BLEND',
            3089: 'SCISSOR_TEST',
            32823: 'POLYGON_OFFSET_FILL',
            32926: 'SAMPLE_ALPHA_TO_COVERAGE'
        };
    
        var ALPHA_MODES = {
            OPAQUE: 'OPAQUE',
            MASK: 'MASK',
            BLEND: 'BLEND'
        };
    
        /* UTILITY FUNCTIONS */
    
        function resolveURL( url, path ) {
    
            // Invalid URL
            if ( typeof url !== 'string' || url === '' ) return '';
    
            // Absolute URL http://,https://,//
            if ( /^(https?:)?\/\//i.test( url ) ) return url;
    
            // Data URI
            if ( /^data:.*,.*$/i.test( url ) ) return url;
    
            // Blob URL
            if ( /^blob:.*$/i.test( url ) ) return url;
    
            // Relative URL
            return path + url;
    
        }
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material
         */
        function createDefaultMaterial() {
    
            return new THREE.MeshStandardMaterial( {
                color: 0xFFFFFF,
                emissive: 0x000000,
                metalness: 1,
                roughness: 1,
                transparent: false,
                depthTest: true,
                side: THREE.FrontSide
            } );
    
        }
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets
         *
         * TODO: Implement support for morph targets on TANGENT attribute.
         *
         * @param {THREE.Mesh} mesh
         * @param {GLTF.Mesh} meshDef
         * @param {GLTF.Primitive} primitiveDef
         * @param {Array<THREE.BufferAttribute>} accessors
         */
        function addMorphTargets( mesh, meshDef, primitiveDef, accessors ) {
    
            var geometry = mesh.geometry;
            var material = mesh.material;
    
            var targets = primitiveDef.targets;
            var morphAttributes = geometry.morphAttributes;
    
            morphAttributes.position = [];
            morphAttributes.normal = [];
    
            material.morphTargets = true;
    
            for ( var i = 0, il = targets.length; i < il; i ++ ) {
    
                var target = targets[ i ];
                var attributeName = 'morphTarget' + i;
    
                var positionAttribute, normalAttribute;
    
                if ( target.POSITION !== undefined ) {
    
                    // Three.js morph formula is
                    //   position
                    //     + weight0 * ( morphTarget0 - position )
                    //     + weight1 * ( morphTarget1 - position )
                    //     ...
                    // while the glTF one is
                    //   position
                    //     + weight0 * morphTarget0
                    //     + weight1 * morphTarget1
                    //     ...
                    // then adding position to morphTarget.
                    // So morphTarget value will depend on mesh's position, then cloning attribute
                    // for the case if attribute is shared among two or more meshes.
    
                    positionAttribute = cloneBufferAttribute( accessors[ target.POSITION ] );
                    var position = geometry.attributes.position;
    
                    for ( var j = 0, jl = positionAttribute.count; j < jl; j ++ ) {
    
                        positionAttribute.setXYZ(
                            j,
                            positionAttribute.getX( j ) + position.getX( j ),
                            positionAttribute.getY( j ) + position.getY( j ),
                            positionAttribute.getZ( j ) + position.getZ( j )
                        );
    
                    }
    
                } else if ( geometry.attributes.position ) {
    
                    // Copying the original position not to affect the final position.
                    // See the formula above.
                    positionAttribute = cloneBufferAttribute( geometry.attributes.position );
    
                }
    
                if ( positionAttribute !== undefined ) {
    
                    positionAttribute.name = attributeName;
                    morphAttributes.position.push( positionAttribute );
    
                }
    
                if ( target.NORMAL !== undefined ) {
    
                    material.morphNormals = true;
    
                    // see target.POSITION's comment
    
                    normalAttribute = cloneBufferAttribute( accessors[ target.NORMAL ] );
                    var normal = geometry.attributes.normal;
    
                    for ( var j = 0, jl = normalAttribute.count; j < jl; j ++ ) {
    
                        normalAttribute.setXYZ(
                            j,
                            normalAttribute.getX( j ) + normal.getX( j ),
                            normalAttribute.getY( j ) + normal.getY( j ),
                            normalAttribute.getZ( j ) + normal.getZ( j )
                        );
    
                    }
    
                } else if ( geometry.attributes.normal !== undefined ) {
    
                    normalAttribute = cloneBufferAttribute( geometry.attributes.normal );
    
                }
    
                if ( normalAttribute !== undefined ) {
    
                    normalAttribute.name = attributeName;
                    morphAttributes.normal.push( normalAttribute );
    
                }
    
            }
    
            mesh.updateMorphTargets();
    
            if ( meshDef.weights !== undefined ) {
    
                for ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {
    
                    mesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];
    
                }
    
            }
    
        }
    
        function isPrimitiveEqual( a, b ) {
    
            if ( a.indices !== b.indices ) {
    
                return false;
    
            }
    
            var attribA = a.attributes || {};
            var attribB = b.attributes || {};
            var keysA = Object.keys( attribA );
            var keysB = Object.keys( attribB );
    
            if ( keysA.length !== keysB.length ) {
    
                return false;
    
            }
    
            for ( var i = 0, il = keysA.length; i < il; i ++ ) {
    
                var key = keysA[ i ];
    
                if ( attribA[ key ] !== attribB[ key ] ) {
    
                    return false;
    
                }
    
            }
    
            return true;
    
        }
    
        function getCachedGeometry( cache, newPrimitive ) {
    
            for ( var i = 0, il = cache.length; i < il; i ++ ) {
    
                var cached = cache[ i ];
    
                if ( isPrimitiveEqual( cached.primitive, newPrimitive ) ) {
    
                    return cached.geometry;
    
                }
    
            }
    
            return null;
    
        }
    
        function cloneBufferAttribute( attribute ) {
    
            if ( attribute.isInterleavedBufferAttribute ) {
    
                var count = attribute.count;
                var itemSize = attribute.itemSize;
                var array = attribute.array.slice( 0, count * itemSize );
    
                for ( var i = 0; i < count; ++ i ) {
    
                    array[ i ] = attribute.getX( i );
                    if ( itemSize >= 2 ) array[ i + 1 ] = attribute.getY( i );
                    if ( itemSize >= 3 ) array[ i + 2 ] = attribute.getZ( i );
                    if ( itemSize >= 4 ) array[ i + 3 ] = attribute.getW( i );
    
                }
    
                return new THREE.BufferAttribute( array, itemSize, attribute.normalized );
    
            }
    
            return attribute.clone();
    
        }
    
        /* GLTF PARSER */
    
        function GLTFParser( json, extensions, options ) {
    
            this.json = json || {};
            this.extensions = extensions || {};
            this.options = options || {};
    
            // loader object cache
            this.cache = new GLTFRegistry();
    
            // BufferGeometry caching
            this.primitiveCache = [];
    
            this.textureLoader = new THREE.TextureLoader( this.options.manager );
            this.textureLoader.setCrossOrigin( this.options.crossOrigin );
    
            this.fileLoader = new THREE.FileLoader( this.options.manager );
            this.fileLoader.setResponseType( 'arraybuffer' );
    
        }
    
        GLTFParser.prototype.parse = function ( onLoad, onError ) {
    
            var json = this.json;
    
            // Clear the loader cache
            this.cache.removeAll();
    
            // Mark the special nodes/meshes in json for efficient parse
            this.markDefs();
    
            // Fire the callback on complete
            this.getMultiDependencies( [
    
                'scene',
                'animation',
                'camera'
    
            ] ).then( function ( dependencies ) {
    
                var scenes = dependencies.scenes || [];
                var scene = scenes[ json.scene || 0 ];
                var animations = dependencies.animations || [];
                var asset = json.asset;
                var cameras = dependencies.cameras || [];
    
                onLoad( scene, scenes, cameras, animations, asset );
    
            } ).catch( onError );
    
        };
    
        /**
         * Marks the special nodes/meshes in json for efficient parse.
         */
        GLTFParser.prototype.markDefs = function () {
    
            var nodeDefs = this.json.nodes || [];
            var skinDefs = this.json.skins || [];
            var meshDefs = this.json.meshes || [];
    
            var meshReferences = {};
            var meshUses = {};
    
            // Nothing in the node definition indicates whether it is a Bone or an
            // Object3D. Use the skins' joint references to mark bones.
            for ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {
    
                var joints = skinDefs[ skinIndex ].joints;
    
                for ( var i = 0, il = joints.length; i < il; i ++ ) {
    
                    nodeDefs[ joints[ i ] ].isBone = true;
    
                }
    
            }
    
            // Meshes can (and should) be reused by multiple nodes in a glTF asset. To
            // avoid having more than one THREE.Mesh with the same name, count
            // references and rename instances below.
            //
            // Example: CesiumMilkTruck sample model reuses "Wheel" meshes.
            for ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {
    
                var nodeDef = nodeDefs[ nodeIndex ];
    
                if ( nodeDef.mesh !== undefined ) {
    
                    if ( meshReferences[ nodeDef.mesh ] === undefined ) {
    
                        meshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;
    
                    }
    
                    meshReferences[ nodeDef.mesh ] ++;
    
                    // Nothing in the mesh definition indicates whether it is
                    // a SkinnedMesh or Mesh. Use the node's mesh reference
                    // to mark SkinnedMesh if node has skin.
                    if ( nodeDef.skin !== undefined ) {
    
                        meshDefs[ nodeDef.mesh ].isSkinnedMesh = true;
    
                    }
    
                }
    
            }
    
            this.json.meshReferences = meshReferences;
            this.json.meshUses = meshUses;
    
        };
    
        /**
         * Requests the specified dependency asynchronously, with caching.
         * @param {string} type
         * @param {number} index
         * @return {Promise<Object>}
         */
        GLTFParser.prototype.getDependency = function ( type, index ) {
    
            var cacheKey = type + ':' + index;
            var dependency = this.cache.get( cacheKey );
    
            if ( ! dependency ) {
    
                var fnName = 'load' + type.charAt( 0 ).toUpperCase() + type.slice( 1 );
                dependency = this[ fnName ]( index );
                this.cache.add( cacheKey, dependency );
    
            }
    
            return dependency;
    
        };
    
        /**
         * Requests all dependencies of the specified type asynchronously, with caching.
         * @param {string} type
         * @return {Promise<Array<Object>>}
         */
        GLTFParser.prototype.getDependencies = function ( type ) {
    
            var dependencies = this.cache.get( type );
    
            if ( ! dependencies ) {
    
                var parser = this;
                var defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];
    
                dependencies = Promise.all( defs.map( function ( def, index ) {
    
                    return parser.getDependency( type, index );
    
                } ) );
    
                this.cache.add( type, dependencies );
    
            }
    
            return dependencies;
    
        };
    
        /**
         * Requests all multiple dependencies of the specified types asynchronously, with caching.
         * @param {Array<string>} types
         * @return {Promise<Object<Array<Object>>>}
         */
        GLTFParser.prototype.getMultiDependencies = function ( types ) {
    
            var results = {};
            var pendings = [];
    
            for ( var i = 0, il = types.length; i < il; i ++ ) {
    
                var type = types[ i ];
                var value = this.getDependencies( type );
    
                value = value.then( function ( key, value ) {
    
                    results[ key ] = value;
    
                }.bind( this, type + ( type === 'mesh' ? 'es' : 's' ) ) );
    
                pendings.push( value );
    
            }
    
            return Promise.all( pendings ).then( function () {
    
                return results;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
         * @param {number} bufferIndex
         * @return {Promise<ArrayBuffer>}
         */
        GLTFParser.prototype.loadBuffer = function ( bufferIndex ) {
    
            var bufferDef = this.json.buffers[ bufferIndex ];
            var loader = this.fileLoader;
    
            if ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {
    
                throw new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );
    
            }
    
            // If present, GLB container is required to be the first buffer.
            if ( bufferDef.uri === undefined && bufferIndex === 0 ) {
    
                return Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );
    
            }
    
            var options = this.options;
    
            return new Promise( function ( resolve, reject ) {
    
                loader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {
    
                    reject( new Error( 'THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".' ) );
    
                } );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
         * @param {number} bufferViewIndex
         * @return {Promise<ArrayBuffer>}
         */
        GLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {
    
            var bufferViewDef = this.json.bufferViews[ bufferViewIndex ];
    
            return this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {
    
                var byteLength = bufferViewDef.byteLength || 0;
                var byteOffset = bufferViewDef.byteOffset || 0;
                return buffer.slice( byteOffset, byteOffset + byteLength );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors
         * @param {number} accessorIndex
         * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}
         */
        GLTFParser.prototype.loadAccessor = function ( accessorIndex ) {
    
            var parser = this;
            var json = this.json;
    
            var accessorDef = this.json.accessors[ accessorIndex ];
    
            var pendingBufferViews = [];
    
            if ( accessorDef.bufferView !== undefined ) {
    
                pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );
    
            } else {
    
                pendingBufferViews.push( null );
    
            }
    
            if ( accessorDef.sparse !== undefined ) {
    
                pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );
                pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );
    
            }
    
            return Promise.all( pendingBufferViews ).then( function ( bufferViews ) {
    
                var bufferView = bufferViews[ 0 ];
    
                var itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];
                var TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];
    
                // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.
                var elementBytes = TypedArray.BYTES_PER_ELEMENT;
                var itemBytes = elementBytes * itemSize;
                var byteOffset = accessorDef.byteOffset || 0;
                var byteStride = json.bufferViews[ accessorDef.bufferView ].byteStride;
                var normalized = accessorDef.normalized === true;
                var array, bufferAttribute;
    
                // The buffer is not interleaved if the stride is the item size in bytes.
                if ( byteStride && byteStride !== itemBytes ) {
    
                    var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType;
                    var ib = parser.cache.get( ibCacheKey );
    
                    if ( ! ib ) {
    
                        // Use the full buffer if it's interleaved.
                        array = new TypedArray( bufferView );
    
                        // Integer parameters to IB/IBA are in array elements, not bytes.
                        ib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );
    
                        parser.cache.add( ibCacheKey, ib );
    
                    }
    
                    bufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, byteOffset / elementBytes, normalized );
    
                } else {
    
                    if ( bufferView === null ) {
    
                        array = new TypedArray( accessorDef.count * itemSize );
    
                    } else {
    
                        array = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );
    
                    }
    
                    bufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );
    
                }
    
                // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors
                if ( accessorDef.sparse !== undefined ) {
    
                    var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
                    var TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];
    
                    var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
                    var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;
    
                    var sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );
                    var sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );
    
                    if ( bufferView !== null ) {
    
                        // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.
                        bufferAttribute.setArray( bufferAttribute.array.slice() );
    
                    }
    
                    for ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {
    
                        var index = sparseIndices[ i ];
    
                        bufferAttribute.setX( index, sparseValues[ i * itemSize ] );
                        if ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );
                        if ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );
                        if ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );
                        if ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );
    
                    }
    
                }
    
                return bufferAttribute;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures
         * @param {number} textureIndex
         * @return {Promise<THREE.Texture>}
         */
        GLTFParser.prototype.loadTexture = function ( textureIndex ) {
    
            var parser = this;
            var json = this.json;
            var options = this.options;
            var textureLoader = this.textureLoader;
    
            var URL = window.URL || window.webkitURL;
    
            var textureDef = json.textures[ textureIndex ];
            var source = json.images[ textureDef.source ];
            var sourceURI = source.uri;
            var isObjectURL = false;
    
            if ( source.bufferView !== undefined ) {
    
                // Load binary image data from bufferView, if provided.
    
                sourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {
    
                    isObjectURL = true;
                    var blob = new Blob( [ bufferView ], { type: source.mimeType } );
                    sourceURI = URL.createObjectURL( blob );
                    return sourceURI;
    
                } );
    
            }
    
            return Promise.resolve( sourceURI ).then( function ( sourceURI ) {
    
                // Load Texture resource.
    
                var loader = THREE.Loader.Handlers.get( sourceURI ) || textureLoader;
    
                return new Promise( function ( resolve, reject ) {
    
                    loader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );
    
                } );
    
            } ).then( function ( texture ) {
    
                // Clean up resources and configure Texture.
    
                if ( isObjectURL === true ) {
    
                    URL.revokeObjectURL( sourceURI );
    
                }
    
                texture.flipY = false;
    
                if ( textureDef.name !== undefined ) texture.name = textureDef.name;
    
                texture.format = textureDef.format !== undefined ? WEBGL_TEXTURE_FORMATS[ textureDef.format ] : THREE.RGBAFormat;
    
                if ( textureDef.internalFormat !== undefined && texture.format !== WEBGL_TEXTURE_FORMATS[ textureDef.internalFormat ] ) {
    
                    console.warn( 'THREE.GLTFLoader: Three.js does not support texture internalFormat which is different from texture format. ' +
                                                'internalFormat will be forced to be the same value as format.' );
    
                }
    
                texture.type = textureDef.type !== undefined ? WEBGL_TEXTURE_DATATYPES[ textureDef.type ] : THREE.UnsignedByteType;
    
                var samplers = json.samplers || {};
                var sampler = samplers[ textureDef.sampler ] || {};
    
                texture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;
                texture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipMapLinearFilter;
                texture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;
                texture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;
    
                return texture;
    
            } );
    
        };
    
        /**
         * Asynchronously assigns a texture to the given material parameters.
         * @param {Object} materialParams
         * @param {string} textureName
         * @param {number} textureIndex
         * @return {Promise}
         */
        GLTFParser.prototype.assignTexture = function ( materialParams, textureName, textureIndex ) {
    
            return this.getDependency( 'texture', textureIndex ).then( function ( texture ) {
    
                materialParams[ textureName ] = texture;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials
         * @param {number} materialIndex
         * @return {Promise<THREE.Material>}
         */
        GLTFParser.prototype.loadMaterial = function ( materialIndex ) {
    
            var parser = this;
            var json = this.json;
            var extensions = this.extensions;
            var materialDef = this.json.materials[ materialIndex ];
    
            var materialType;
            var materialParams = {};
            var materialExtensions = materialDef.extensions || {};
    
            var pending = [];
    
            if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {
    
                var sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
                materialType = sgExtension.getMaterialType( materialDef );
                pending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );
    
            } else if ( materialDef.pbrMetallicRoughness !== undefined ) {
    
                // Specification:
                // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material
    
                materialType = THREE.MeshStandardMaterial;
    
                var metallicRoughness = materialDef.pbrMetallicRoughness;
    
                materialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );
                materialParams.opacity = 1.0;
    
                if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {
    
                    var array = metallicRoughness.baseColorFactor;
    
                    materialParams.color.fromArray( array );
                    materialParams.opacity = array[ 3 ];
    
                }
    
                if ( metallicRoughness.baseColorTexture !== undefined ) {
    
                    pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture.index ) );
    
                }
    
                materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;
                materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;
    
                if ( metallicRoughness.metallicRoughnessTexture !== undefined ) {
    
                    var textureIndex = metallicRoughness.metallicRoughnessTexture.index;
                    pending.push( parser.assignTexture( materialParams, 'metalnessMap', textureIndex ) );
                    pending.push( parser.assignTexture( materialParams, 'roughnessMap', textureIndex ) );
    
                }
    
            } else {
    
                materialType = THREE.MeshPhongMaterial;
    
            }
    
            if ( materialDef.doubleSided === true ) {
    
                materialParams.side = THREE.DoubleSide;
    
            }
    
            var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;
    
            if ( alphaMode === ALPHA_MODES.BLEND ) {
    
                materialParams.transparent = true;
    
            } else {
    
                materialParams.transparent = false;
    
                if ( alphaMode === ALPHA_MODES.MASK ) {
    
                    materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;
    
                }
    
            }
    
            if ( materialDef.normalTexture !== undefined ) {
    
                pending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture.index ) );
    
                materialParams.normalScale = new THREE.Vector2( 1, 1 );
    
                if ( materialDef.normalTexture.scale !== undefined ) {
    
                    materialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );
    
                }
    
            }
    
            if ( materialDef.occlusionTexture !== undefined ) {
    
                pending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture.index ) );
    
                if ( materialDef.occlusionTexture.strength !== undefined ) {
    
                    materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;
    
                }
    
            }
    
            if ( materialDef.emissiveFactor !== undefined ) {
    
                if ( materialType === THREE.MeshBasicMaterial ) {
    
                    materialParams.color = new THREE.Color().fromArray( materialDef.emissiveFactor );
    
                } else {
    
                    materialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );
    
                }
    
            }
    
            if ( materialDef.emissiveTexture !== undefined ) {
    
                if ( materialType === THREE.MeshBasicMaterial ) {
    
                    pending.push( parser.assignTexture( materialParams, 'map', materialDef.emissiveTexture.index ) );
    
                } else {
    
                    pending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture.index ) );
    
                }
    
            }
    
            return Promise.all( pending ).then( function () {
    
                var material;
    
                if ( materialType === THREE.ShaderMaterial ) {
    
                    material = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );
    
                } else {
    
                    material = new materialType( materialParams );
    
                }
    
                if ( materialDef.name !== undefined ) material.name = materialDef.name;
    
                // Normal map textures use OpenGL conventions:
                // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#materialnormaltexture
                if ( material.normalScale ) {
    
                    material.normalScale.x = - material.normalScale.x;
    
                }
    
                // emissiveTexture and baseColorTexture use sRGB encoding.
                if ( material.map ) material.map.encoding = THREE.sRGBEncoding;
                if ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;
    
                if ( materialDef.extras ) material.userData = materialDef.extras;
    
                return material;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry
         * @param {Array<Object>} primitives
         * @return {Promise<Array<THREE.BufferGeometry>>}
         */
        GLTFParser.prototype.loadGeometries = function ( primitives ) {
    
            var cache = this.primitiveCache;
    
            return this.getDependencies( 'accessor' ).then( function ( accessors ) {
    
                var geometries = [];
    
                for ( var i = 0, il = primitives.length; i < il; i ++ ) {
    
                    var primitive = primitives[ i ];
    
                    // See if we've already created this geometry
                    var cached = getCachedGeometry( cache, primitive );
    
                    if ( cached ) {
    
                        // Use the cached geometry if it exists
                        geometries.push( cached );
    
                    } else {
    
                        // Otherwise create a new geometry
                        var geometry = new THREE.BufferGeometry();
    
                        var attributes = primitive.attributes;
    
                        for ( var attributeId in attributes ) {
    
                            var attributeEntry = attributes[ attributeId ];
    
                            var bufferAttribute = accessors[ attributeEntry ];
    
                            switch ( attributeId ) {
    
                                case 'POSITION':
    
                                    geometry.addAttribute( 'position', bufferAttribute );
                                    break;
    
                                case 'NORMAL':
    
                                    geometry.addAttribute( 'normal', bufferAttribute );
                                    break;
    
                                case 'TEXCOORD_0':
                                case 'TEXCOORD0':
                                case 'TEXCOORD':
    
                                    geometry.addAttribute( 'uv', bufferAttribute );
                                    break;
    
                                case 'TEXCOORD_1':
    
                                    geometry.addAttribute( 'uv2', bufferAttribute );
                                    break;
    
                                case 'COLOR_0':
                                case 'COLOR0':
                                case 'COLOR':
    
                                    geometry.addAttribute( 'color', bufferAttribute );
                                    break;
    
                                case 'WEIGHTS_0':
                                case 'WEIGHT': // WEIGHT semantic deprecated.
    
                                    geometry.addAttribute( 'skinWeight', bufferAttribute );
                                    break;
    
                                case 'JOINTS_0':
                                case 'JOINT': // JOINT semantic deprecated.
    
                                    geometry.addAttribute( 'skinIndex', bufferAttribute );
                                    break;
    
                            }
    
                        }
    
                        if ( primitive.indices !== undefined ) {
    
                            geometry.setIndex( accessors[ primitive.indices ] );
    
                        }
    
                        // Cache this geometry
                        cache.push( {
    
                            primitive: primitive,
                            geometry: geometry
    
                        } );
    
                        geometries.push( geometry );
    
                    }
    
                }
    
                return geometries;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes
         * @param {number} meshIndex
         * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}
         */
        GLTFParser.prototype.loadMesh = function ( meshIndex ) {
    
            var scope = this;
            var json = this.json;
            var extensions = this.extensions;
    
            var meshDef = this.json.meshes[ meshIndex ];
    
            return this.getMultiDependencies( [
    
                'accessor',
                'material'
    
            ] ).then( function ( dependencies ) {
    
                var group = new THREE.Group();
    
                var primitives = meshDef.primitives;
    
                return scope.loadGeometries( primitives ).then( function ( geometries ) {
    
                    for ( var i = 0, il = primitives.length; i < il; i ++ ) {
    
                        var primitive = primitives[ i ];
                        var geometry = geometries[ i ];
    
                        var material = primitive.material === undefined
                            ? createDefaultMaterial()
                            : dependencies.materials[ primitive.material ];
    
                        if ( material.aoMap
                                && geometry.attributes.uv2 === undefined
                                && geometry.attributes.uv !== undefined ) {
    
                            console.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );
                            geometry.addAttribute( 'uv2', new THREE.BufferAttribute( geometry.attributes.uv.array, 2 ) );
    
                        }
    
                        // If the material will be modified later on, clone it now.
                        var useVertexColors = geometry.attributes.color !== undefined;
                        var useFlatShading = geometry.attributes.normal === undefined;
                        var useSkinning = meshDef.isSkinnedMesh === true;
                        var useMorphTargets = primitive.targets !== undefined;
    
                        if ( useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {
    
                            if ( material.isGLTFSpecularGlossinessMaterial ) {
    
                                var specGlossExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
                                material = specGlossExtension.cloneMaterial( material );
    
                            } else {
    
                                material = material.clone();
    
                            }
    
                        }
    
                        if ( useVertexColors ) {
    
                            material.vertexColors = THREE.VertexColors;
                            material.needsUpdate = true;
    
                        }
    
                        if ( useFlatShading ) {
    
                            material.flatShading = true;
    
                        }
    
                        var mesh;
    
                        if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||
                            primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||
                            primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||
                            primitive.mode === undefined ) {
    
                            if ( useSkinning ) {
    
                                mesh = new THREE.SkinnedMesh( geometry, material );
                                material.skinning = true;
    
                            } else {
    
                                mesh = new THREE.Mesh( geometry, material );
    
                            }
    
                            if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {
    
                                mesh.drawMode = THREE.TriangleStripDrawMode;
    
                            } else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {
    
                                mesh.drawMode = THREE.TriangleFanDrawMode;
    
                            }
    
                        } else if ( primitive.mode === WEBGL_CONSTANTS.LINES ||
                            primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ||
                            primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {
    
                            var cacheKey = 'LineBasicMaterial:' + material.uuid;
    
                            var lineMaterial = scope.cache.get( cacheKey );
    
                            if ( ! lineMaterial ) {
    
                                lineMaterial = new THREE.LineBasicMaterial();
                                THREE.Material.prototype.copy.call( lineMaterial, material );
                                lineMaterial.color.copy( material.color );
                                lineMaterial.lights = false;  // LineBasicMaterial doesn't support lights yet
    
                                scope.cache.add( cacheKey, lineMaterial );
    
                            }
    
                            material = lineMaterial;
    
                            if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {
    
                                mesh = new THREE.LineSegments( geometry, material );
    
                            } else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {
    
                                mesh = new THREE.Line( geometry, material );
    
                            } else {
    
                                mesh = new THREE.LineLoop( geometry, material );
    
                            }
    
                        } else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {
    
                            var cacheKey = 'PointsMaterial:' + material.uuid;
    
                            var pointsMaterial = scope.cache.get( cacheKey );
    
                            if ( ! pointsMaterial ) {
    
                                pointsMaterial = new THREE.PointsMaterial();
                                THREE.Material.prototype.copy.call( pointsMaterial, material );
                                pointsMaterial.color.copy( material.color );
                                pointsMaterial.map = material.map;
                                pointsMaterial.lights = false;  // PointsMaterial doesn't support lights yet
    
                                scope.cache.add( cacheKey, pointsMaterial );
    
                            }
    
                            material = pointsMaterial;
    
                            mesh = new THREE.Points( geometry, material );
    
                        } else {
    
                            throw new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );
    
                        }
    
                        mesh.name = meshDef.name || ( 'mesh_' + meshIndex );
    
                        if ( useMorphTargets ) {
    
                            addMorphTargets( mesh, meshDef, primitive, dependencies.accessors );
    
                        }
    
                        if ( meshDef.extras !== undefined ) mesh.userData = meshDef.extras;
                        if ( primitive.extras !== undefined ) mesh.geometry.userData = primitive.extras;
    
                        // for Specular-Glossiness.
                        if ( material.isGLTFSpecularGlossinessMaterial === true ) {
    
                            mesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;
    
                        }
    
                        if ( primitives.length > 1 ) {
    
                            mesh.name += '_' + i;
    
                            group.add( mesh );
    
                        } else {
    
                            return mesh;
    
                        }
    
                    }
    
                    return group;
    
                } );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras
         * @param {number} cameraIndex
         * @return {Promise<THREE.Camera>}
         */
        GLTFParser.prototype.loadCamera = function ( cameraIndex ) {
    
            var camera;
            var cameraDef = this.json.cameras[ cameraIndex ];
            var params = cameraDef[ cameraDef.type ];
    
            if ( ! params ) {
    
                console.warn( 'THREE.GLTFLoader: Missing camera parameters.' );
                return;
    
            }
    
            if ( cameraDef.type === 'perspective' ) {
    
                var aspectRatio = params.aspectRatio || 1;
                var xfov = params.yfov * aspectRatio;
    
                camera = new THREE.PerspectiveCamera( THREE.Math.radToDeg( xfov ), aspectRatio, params.znear || 1, params.zfar || 2e6 );
    
            } else if ( cameraDef.type === 'orthographic' ) {
    
                camera = new THREE.OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );
    
            }
    
            if ( cameraDef.name !== undefined ) camera.name = cameraDef.name;
            if ( cameraDef.extras ) camera.userData = cameraDef.extras;
    
            return Promise.resolve( camera );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
         * @param {number} skinIndex
         * @return {Promise<Object>}
         */
        GLTFParser.prototype.loadSkin = function ( skinIndex ) {
    
            var skinDef = this.json.skins[ skinIndex ];
    
            var skinEntry = { joints: skinDef.joints };
    
            if ( skinDef.inverseBindMatrices === undefined ) {
    
                return Promise.resolve( skinEntry );
    
            }
    
            return this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {
    
                skinEntry.inverseBindMatrices = accessor;
    
                return skinEntry;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
         * @param {number} animationIndex
         * @return {Promise<THREE.AnimationClip>}
         */
        GLTFParser.prototype.loadAnimation = function ( animationIndex ) {
    
            var json = this.json;
    
            var animationDef = this.json.animations[ animationIndex ];
    
            return this.getMultiDependencies( [
    
                'accessor',
                'node'
    
            ] ).then( function ( dependencies ) {
    
                var tracks = [];
    
                for ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {
    
                    var channel = animationDef.channels[ i ];
                    var sampler = animationDef.samplers[ channel.sampler ];
    
                    if ( sampler ) {
    
                        var target = channel.target;
                        var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.
                        var input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;
                        var output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;
    
                        var inputAccessor = dependencies.accessors[ input ];
                        var outputAccessor = dependencies.accessors[ output ];
    
                        var node = dependencies.nodes[ name ];
    
                        if ( node ) {
    
                            node.updateMatrix();
                            node.matrixAutoUpdate = true;
    
                            var TypedKeyframeTrack;
    
                            switch ( PATH_PROPERTIES[ target.path ] ) {
    
                                case PATH_PROPERTIES.weights:
    
                                    TypedKeyframeTrack = THREE.NumberKeyframeTrack;
                                    break;
    
                                case PATH_PROPERTIES.rotation:
    
                                    TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;
                                    break;
    
                                case PATH_PROPERTIES.position:
                                case PATH_PROPERTIES.scale:
                                default:
    
                                    TypedKeyframeTrack = THREE.VectorKeyframeTrack;
                                    break;
    
                            }
    
                            var targetName = node.name ? node.name : node.uuid;
    
                            var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;
    
                            var targetNames = [];
    
                            if ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {
    
                                // node should be THREE.Group here but
                                // PATH_PROPERTIES.weights(morphTargetInfluences) should be
                                // the property of a mesh object under node.
                                // So finding targets here.
    
                                node.traverse( function ( object ) {
    
                                    if ( object.isMesh === true && object.material.morphTargets === true ) {
    
                                        targetNames.push( object.name ? object.name : object.uuid );
    
                                    }
    
                                } );
    
                            } else {
    
                                targetNames.push( targetName );
    
                            }
    
                            // KeyframeTrack.optimize() will modify given 'times' and 'values'
                            // buffers before creating a truncated copy to keep. Because buffers may
                            // be reused by other tracks, make copies here.
                            for ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {
    
                                var track = new TypedKeyframeTrack(
                                    targetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],
                                    THREE.AnimationUtils.arraySlice( inputAccessor.array, 0 ),
                                    THREE.AnimationUtils.arraySlice( outputAccessor.array, 0 ),
                                    interpolation
                                );
    
                                // Here is the trick to enable custom interpolation.
                                // Overrides .createInterpolant in a factory method which creates custom interpolation.
                                if ( sampler.interpolation === 'CUBICSPLINE' ) {
    
                                    track.createInterpolant = function ( result ) {
    
                                        // A CUBICSPLINE keyframe in glTF has three output values for each input value,
                                        // representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()
                                        // must be divided by three to get the interpolant's sampleSize argument.
    
                                        return new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );
    
                                    };
    
                                }
    
                                tracks.push( track );
    
                            }
    
                        }
    
                    }
    
                }
    
                var name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;
    
                return new THREE.AnimationClip( name, undefined, tracks );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy
         * @param {number} nodeIndex
         * @return {Promise<THREE.Object3D>}
         */
        GLTFParser.prototype.loadNode = function ( nodeIndex ) {
    
            var json = this.json;
            var extensions = this.extensions;
    
            var meshReferences = this.json.meshReferences;
            var meshUses = this.json.meshUses;
    
            var nodeDef = this.json.nodes[ nodeIndex ];
    
            return this.getMultiDependencies( [
    
                'mesh',
                'skin',
                'camera'
    
            ] ).then( function ( dependencies ) {
    
                var node;
    
                if ( nodeDef.isBone === true ) {
    
                    node = new THREE.Bone();
    
                } else if ( nodeDef.mesh !== undefined ) {
    
                    var mesh = dependencies.meshes[ nodeDef.mesh ];
    
                    node = mesh.clone();
    
                    // for Specular-Glossiness
                    if ( mesh.isGroup === true ) {
    
                        for ( var i = 0, il = mesh.children.length; i < il; i ++ ) {
    
                            var child = mesh.children[ i ];
    
                            if ( child.material && child.material.isGLTFSpecularGlossinessMaterial === true ) {
    
                                node.children[ i ].onBeforeRender = child.onBeforeRender;
    
                            }
    
                        }
    
                    } else {
    
                        if ( mesh.material && mesh.material.isGLTFSpecularGlossinessMaterial === true ) {
    
                            node.onBeforeRender = mesh.onBeforeRender;
    
                        }
    
                    }
    
                    if ( meshReferences[ nodeDef.mesh ] > 1 ) {
    
                        node.name += '_instance_' + meshUses[ nodeDef.mesh ] ++;
    
                    }
    
                } else if ( nodeDef.camera !== undefined ) {
    
                    node = dependencies.cameras[ nodeDef.camera ];
    
                } else if ( nodeDef.extensions
                         && nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ]
                         && nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light !== undefined ) {
    
                    var lights = extensions[ EXTENSIONS.KHR_LIGHTS ].lights;
                    node = lights[ nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light ];
    
                } else {
    
                    node = new THREE.Object3D();
    
                }
    
                if ( nodeDef.name !== undefined ) {
    
                    node.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );
    
                }
    
                if ( nodeDef.extras ) node.userData = nodeDef.extras;
    
                if ( nodeDef.matrix !== undefined ) {
    
                    var matrix = new THREE.Matrix4();
                    matrix.fromArray( nodeDef.matrix );
                    node.applyMatrix( matrix );
    
                } else {
    
                    if ( nodeDef.translation !== undefined ) {
    
                        node.position.fromArray( nodeDef.translation );
    
                    }
    
                    if ( nodeDef.rotation !== undefined ) {
    
                        node.quaternion.fromArray( nodeDef.rotation );
    
                    }
    
                    if ( nodeDef.scale !== undefined ) {
    
                        node.scale.fromArray( nodeDef.scale );
    
                    }
    
                }
    
                return node;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes
         * @param {number} sceneIndex
         * @return {Promise<THREE.Scene>}
         */
        GLTFParser.prototype.loadScene = function () {
    
            // scene node hierachy builder
    
            function buildNodeHierachy( nodeId, parentObject, json, allNodes, skins ) {
    
                var node = allNodes[ nodeId ];
                var nodeDef = json.nodes[ nodeId ];
    
                // build skeleton here as well
    
                if ( nodeDef.skin !== undefined ) {
    
                    var meshes = node.isGroup === true ? node.children : [ node ];
    
                    for ( var i = 0, il = meshes.length; i < il; i ++ ) {
    
                        var mesh = meshes[ i ];
                        var skinEntry = skins[ nodeDef.skin ];
    
                        var bones = [];
                        var boneInverses = [];
    
                        for ( var j = 0, jl = skinEntry.joints.length; j < jl; j ++ ) {
    
                            var jointId = skinEntry.joints[ j ];
                            var jointNode = allNodes[ jointId ];
    
                            if ( jointNode ) {
    
                                bones.push( jointNode );
    
                                var mat = new THREE.Matrix4();
    
                                if ( skinEntry.inverseBindMatrices !== undefined ) {
    
                                    mat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );
    
                                }
    
                                boneInverses.push( mat );
    
                            } else {
    
                                console.warn( 'THREE.GLTFLoader: Joint "%s" could not be found.', jointId );
    
                            }
    
                        }
    
                        mesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );
    
                    }
    
                }
    
                // build node hierachy
    
                parentObject.add( node );
    
                if ( nodeDef.children ) {
    
                    var children = nodeDef.children;
    
                    for ( var i = 0, il = children.length; i < il; i ++ ) {
    
                        var child = children[ i ];
                        buildNodeHierachy( child, node, json, allNodes, skins );
    
                    }
    
                }
    
            }
    
            return function loadScene( sceneIndex ) {
    
                var json = this.json;
                var extensions = this.extensions;
                var sceneDef = this.json.scenes[ sceneIndex ];
    
                return this.getMultiDependencies( [
    
                    'node',
                    'skin'
    
                ] ).then( function ( dependencies ) {
    
                    var scene = new THREE.Scene();
                    if ( sceneDef.name !== undefined ) scene.name = sceneDef.name;
    
                    if ( sceneDef.extras ) scene.userData = sceneDef.extras;
    
                    var nodeIds = sceneDef.nodes || [];
    
                    for ( var i = 0, il = nodeIds.length; i < il; i ++ ) {
    
                        buildNodeHierachy( nodeIds[ i ], scene, json, dependencies.nodes, dependencies.skins );
    
                    }
    
                    // Ambient lighting, if present, is always attached to the scene root.
                    if ( sceneDef.extensions
                             && sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ]
                             && sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light !== undefined ) {
    
                        var lights = extensions[ EXTENSIONS.KHR_LIGHTS ].lights;
                        scene.add( lights[ sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light ] );
    
                    }
    
                    return scene;
    
                } );
    
            };
    
        }();
    
        return GLTFLoader;
    
    } )();
},{}],"src/lib/MTLLoader":[function(require,module,exports){
/**
 * Loads a Wavefront .mtl file specifying materials
 *
 * @author angelxuanchang
 */

THREE.MTLLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.MTLLoader.prototype = {

	constructor: THREE.MTLLoader,

	/**
	 * Loads and parses a MTL asset from a URL.
	 *
	 * @param {String} url - URL to the MTL file.
	 * @param {Function} [onLoad] - Callback invoked with the loaded object.
	 * @param {Function} [onProgress] - Callback for download progress.
	 * @param {Function} [onError] - Callback for download errors.
	 *
	 * @see setPath setTexturePath
	 *
	 * @note In order for relative texture references to resolve correctly
	 * you must call setPath and/or setTexturePath explicitly prior to load.
	 */
	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.FileLoader( this.manager );
		loader.setPath( this.path );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( text ) );

		}, onProgress, onError );

	},

	/**
	 * Set base path for resolving references.
	 * If set this path will be prepended to each loaded and found reference.
	 *
	 * @see setTexturePath
	 * @param {String} path
	 *
	 * @example
	 *     mtlLoader.setPath( 'assets/obj/' );
	 *     mtlLoader.load( 'my.mtl', ... );
	 */
	setPath: function ( path ) {

		this.path = path;

	},

	/**
	 * Set base path for resolving texture references.
	 * If set this path will be prepended found texture reference.
	 * If not set and setPath is, it will be used as texture base path.
	 *
	 * @see setPath
	 * @param {String} path
	 *
	 * @example
	 *     mtlLoader.setPath( 'assets/obj/' );
	 *     mtlLoader.setTexturePath( 'assets/textures/' );
	 *     mtlLoader.load( 'my.mtl', ... );
	 */
	setTexturePath: function ( path ) {

		this.texturePath = path;

	},

	setBaseUrl: function ( path ) {

		console.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );

		this.setTexturePath( path );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	setMaterialOptions: function ( value ) {

		this.materialOptions = value;

	},

	/**
	 * Parses a MTL file.
	 *
	 * @param {String} text - Content of MTL file
	 * @return {THREE.MTLLoader.MaterialCreator}
	 *
	 * @see setPath setTexturePath
	 *
	 * @note In order for relative texture references to resolve correctly
	 * you must call setPath and/or setTexturePath explicitly prior to parse.
	 */
	parse: function ( text ) {

		var lines = text.split( '\n' );
		var info = {};
		var delimiter_pattern = /\s+/;
		var materialsInfo = {};

		for ( var i = 0; i < lines.length; i ++ ) {

			var line = lines[ i ];
			line = line.trim();

			if ( line.length === 0 || line.charAt( 0 ) === '#' ) {

				// Blank line or comment ignore
				continue;

			}

			var pos = line.indexOf( ' ' );

			var key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;
			key = key.toLowerCase();

			var value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';
			value = value.trim();

			if ( key === 'newmtl' ) {

				// New material

				info = { name: value };
				materialsInfo[ value ] = info;

			} else if ( info ) {

				if ( key === 'ka' || key === 'kd' || key === 'ks' ) {

					var ss = value.split( delimiter_pattern, 3 );
					info[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];

				} else {

					info[ key ] = value;

				}

			}

		}

		var materialCreator = new THREE.MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );
		materialCreator.setCrossOrigin( this.crossOrigin );
		materialCreator.setManager( this.manager );
		materialCreator.setMaterials( materialsInfo );
		return materialCreator;

	}

};

/**
 * Create a new THREE-MTLLoader.MaterialCreator
 * @param baseUrl - Url relative to which textures are loaded
 * @param options - Set of options on how to construct the materials
 *                  side: Which side to apply the material
 *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide
 *                  wrap: What type of wrapping to apply for textures
 *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping
 *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255
 *                                Default: false, assumed to be already normalized
 *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's
 *                                  Default: false
 * @constructor
 */

THREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {

	this.baseUrl = baseUrl || '';
	this.options = options;
	this.materialsInfo = {};
	this.materials = {};
	this.materialsArray = [];
	this.nameLookup = {};

	this.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;
	this.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;

};

THREE.MTLLoader.MaterialCreator.prototype = {

	constructor: THREE.MTLLoader.MaterialCreator,

	crossOrigin: 'Anonymous',

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	setManager: function ( value ) {

		this.manager = value;

	},

	setMaterials: function ( materialsInfo ) {

		this.materialsInfo = this.convert( materialsInfo );
		this.materials = {};
		this.materialsArray = [];
		this.nameLookup = {};

	},

	convert: function ( materialsInfo ) {

		if ( ! this.options ) return materialsInfo;

		var converted = {};

		for ( var mn in materialsInfo ) {

			// Convert materials info into normalized form based on options

			var mat = materialsInfo[ mn ];

			var covmat = {};

			converted[ mn ] = covmat;

			for ( var prop in mat ) {

				var save = true;
				var value = mat[ prop ];
				var lprop = prop.toLowerCase();

				switch ( lprop ) {

					case 'kd':
					case 'ka':
					case 'ks':

						// Diffuse color (color under white light) using RGB values

						if ( this.options && this.options.normalizeRGB ) {

							value = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];

						}

						if ( this.options && this.options.ignoreZeroRGBs ) {

							if ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {

								// ignore

								save = false;

							}

						}

						break;

					default:

						break;

				}

				if ( save ) {

					covmat[ lprop ] = value;

				}

			}

		}

		return converted;

	},

	preload: function () {

		for ( var mn in this.materialsInfo ) {

			this.create( mn );

		}

	},

	getIndex: function ( materialName ) {

		return this.nameLookup[ materialName ];

	},

	getAsArray: function () {

		var index = 0;

		for ( var mn in this.materialsInfo ) {

			this.materialsArray[ index ] = this.create( mn );
			this.nameLookup[ mn ] = index;
			index ++;

		}

		return this.materialsArray;

	},

	create: function ( materialName ) {

		if ( this.materials[ materialName ] === undefined ) {

			this.createMaterial_( materialName );

		}

		return this.materials[ materialName ];

	},

	createMaterial_: function ( materialName ) {

		// Create material

		var scope = this;
		var mat = this.materialsInfo[ materialName ];
		var params = {

			name: materialName,
			side: this.side

		};

		function resolveURL( baseUrl, url ) {

			if ( typeof url !== 'string' || url === '' )
				return '';

			// Absolute URL
			if ( /^https?:\/\//i.test( url ) ) return url;

			return baseUrl + url;

		}

		function setMapForType( mapType, value ) {

			if ( params[ mapType ] ) return; // Keep the first encountered texture

			var texParams = scope.getTextureParams( value, params );
			var map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );

			map.repeat.copy( texParams.scale );
			map.offset.copy( texParams.offset );

			map.wrapS = scope.wrap;
			map.wrapT = scope.wrap;

			params[ mapType ] = map;

		}

		for ( var prop in mat ) {

			var value = mat[ prop ];
			var n;

			if ( value === '' ) continue;

			switch ( prop.toLowerCase() ) {

				// Ns is material specular exponent

				case 'kd':

					// Diffuse color (color under white light) using RGB values

					params.color = new THREE.Color().fromArray( value );

					break;

				case 'ks':

					// Specular color (color when light is reflected from shiny surface) using RGB values
					params.specular = new THREE.Color().fromArray( value );

					break;

				case 'map_kd':

					// Diffuse texture map

					setMapForType( "map", value );

					break;

				case 'map_ks':

					// Specular map

					setMapForType( "specularMap", value );

					break;

				case 'norm':

					setMapForType( "normalMap", value );

					break;

				case 'map_bump':
				case 'bump':

					// Bump texture map

					setMapForType( "bumpMap", value );

					break;

				case 'ns':

					// The specular exponent (defines the focus of the specular highlight)
					// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.

					params.shininess = parseFloat( value );

					break;

				case 'd':
					n = parseFloat( value );

					if ( n < 1 ) {

						params.opacity = n;
						params.transparent = true;

					}

					break;

				case 'tr':
					n = parseFloat( value );

					if ( this.options && this.options.invertTrProperty ) n = 1 - n;

					if ( n < 1 ) {

						params.opacity = n;
						params.transparent = true;

					}

					break;

				default:
					break;

			}

		}

		this.materials[ materialName ] = new THREE.MeshPhongMaterial( params );
		return this.materials[ materialName ];

	},

	getTextureParams: function ( value, matParams ) {

		var texParams = {

			scale: new THREE.Vector2( 1, 1 ),
			offset: new THREE.Vector2( 0, 0 )

		 };

		var items = value.split( /\s+/ );
		var pos;

		pos = items.indexOf( '-bm' );

		if ( pos >= 0 ) {

			matParams.bumpScale = parseFloat( items[ pos + 1 ] );
			items.splice( pos, 2 );

		}

		pos = items.indexOf( '-s' );

		if ( pos >= 0 ) {

			texParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );
			items.splice( pos, 4 ); // we expect 3 parameters here!

		}

		pos = items.indexOf( '-o' );

		if ( pos >= 0 ) {

			texParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );
			items.splice( pos, 4 ); // we expect 3 parameters here!

		}

		texParams.url = items.join( ' ' ).trim();
		return texParams;

	},

	loadTexture: function ( url, mapping, onLoad, onProgress, onError ) {

		var texture;
		var loader = THREE.Loader.Handlers.get( url );
		var manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;

		if ( loader === null ) {

			loader = new THREE.TextureLoader( manager );

		}

		if ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );
		texture = loader.load( url, onLoad, onProgress, onError );

		if ( mapping !== undefined ) texture.mapping = mapping;

		return texture;

	}

};

},{}],"src/lib/OBJLoader":[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.OBJLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
        this.materials = null;
    
        this.regexp = {
            // v float float float
            vertex_pattern           : /^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // vn float float float
            normal_pattern           : /^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // vt float float
            uv_pattern               : /^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // f vertex vertex vertex
            face_vertex              : /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
            // f vertex/uv vertex/uv vertex/uv
            face_vertex_uv           : /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
            // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
            face_vertex_uv_normal    : /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
            // f vertex//normal vertex//normal vertex//normal
            face_vertex_normal       : /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
            // o object_name | g group_name
            object_pattern           : /^[og]\s*(.+)?/,
            // s boolean
            smoothing_pattern        : /^s\s+(\d+|on|off)/,
            // mtllib file_reference
            material_library_pattern : /^mtllib /,
            // usemtl material_name
            material_use_pattern     : /^usemtl /
        };
    
    };
    
    THREE.OBJLoader.prototype = {
    
        constructor: THREE.OBJLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var loader = new THREE.FileLoader( scope.manager );
            loader.setPath( this.path );
            loader.load( url, function ( text ) {
    
                onLoad( scope.parse( text ) );
    
            }, onProgress, onError );
    
        },
    
        setPath: function ( value ) {
    
            this.path = value;
    
        },
    
        setMaterials: function ( materials ) {
    
            this.materials = materials;
    
        },
    
        _createParserState : function () {
    
            var state = {
                objects  : [],
                object   : {},
    
                vertices : [],
                normals  : [],
                uvs      : [],
    
                materialLibraries : [],
    
                startObject: function ( name, fromDeclaration ) {
    
                    // If the current object (initial from reset) is not from a g/o declaration in the parsed
                    // file. We need to use it for the first parsed g/o to keep things in sync.
                    if ( this.object && this.object.fromDeclaration === false ) {
    
                        this.object.name = name;
                        this.object.fromDeclaration = ( fromDeclaration !== false );
                        return;
    
                    }
    
                    var previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );
    
                    if ( this.object && typeof this.object._finalize === 'function' ) {
    
                        this.object._finalize( true );
    
                    }
    
                    this.object = {
                        name : name || '',
                        fromDeclaration : ( fromDeclaration !== false ),
    
                        geometry : {
                            vertices : [],
                            normals  : [],
                            uvs      : []
                        },
                        materials : [],
                        smooth : true,
    
                        startMaterial : function( name, libraries ) {
    
                            var previous = this._finalize( false );
    
                            // New usemtl declaration overwrites an inherited material, except if faces were declared
                            // after the material, then it must be preserved for proper MultiMaterial continuation.
                            if ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {
    
                                this.materials.splice( previous.index, 1 );
    
                            }
    
                            var material = {
                                index      : this.materials.length,
                                name       : name || '',
                                mtllib     : ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),
                                smooth     : ( previous !== undefined ? previous.smooth : this.smooth ),
                                groupStart : ( previous !== undefined ? previous.groupEnd : 0 ),
                                groupEnd   : -1,
                                groupCount : -1,
                                inherited  : false,
    
                                clone : function( index ) {
                                    var cloned = {
                                        index      : ( typeof index === 'number' ? index : this.index ),
                                        name       : this.name,
                                        mtllib     : this.mtllib,
                                        smooth     : this.smooth,
                                        groupStart : 0,
                                        groupEnd   : -1,
                                        groupCount : -1,
                                        inherited  : false
                                    };
                                    cloned.clone = this.clone.bind(cloned);
                                    return cloned;
                                }
                            };
    
                            this.materials.push( material );
    
                            return material;
    
                        },
    
                        currentMaterial : function() {
    
                            if ( this.materials.length > 0 ) {
                                return this.materials[ this.materials.length - 1 ];
                            }
    
                            return undefined;
    
                        },
    
                        _finalize : function( end ) {
    
                            var lastMultiMaterial = this.currentMaterial();
                            if ( lastMultiMaterial && lastMultiMaterial.groupEnd === -1 ) {
    
                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
                                lastMultiMaterial.inherited = false;
    
                            }
    
                            // Ignore objects tail materials if no face declarations followed them before a new o/g started.
                            if ( end && this.materials.length > 1 ) {
    
                                for ( var mi = this.materials.length - 1; mi >= 0; mi-- ) {
                                    if ( this.materials[mi].groupCount <= 0 ) {
                                        this.materials.splice( mi, 1 );
                                    }
                                }
    
                            }
    
                            // Guarantee at least one empty material, this makes the creation later more straight forward.
                            if ( end && this.materials.length === 0 ) {
    
                                this.materials.push({
                                    name   : '',
                                    smooth : this.smooth
                                });
    
                            }
    
                            return lastMultiMaterial;
    
                        }
                    };
    
                    // Inherit previous objects material.
                    // Spec tells us that a declared material must be set to all objects until a new material is declared.
                    // If a usemtl declaration is encountered while this new object is being parsed, it will
                    // overwrite the inherited material. Exception being that there was already face declarations
                    // to the inherited material, then it will be preserved for proper MultiMaterial continuation.
    
                    if ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === "function" ) {
    
                        var declared = previousMaterial.clone( 0 );
                        declared.inherited = true;
                        this.object.materials.push( declared );
    
                    }
    
                    this.objects.push( this.object );
    
                },
    
                finalize : function() {
    
                    if ( this.object && typeof this.object._finalize === 'function' ) {
    
                        this.object._finalize( true );
    
                    }
    
                },
    
                parseVertexIndex: function ( value, len ) {
    
                    var index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;
    
                },
    
                parseNormalIndex: function ( value, len ) {
    
                    var index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;
    
                },
    
                parseUVIndex: function ( value, len ) {
    
                    var index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 2 ) * 2;
    
                },
    
                addVertex: function ( a, b, c ) {
    
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ a + 2 ] );
                    dst.push( src[ b + 0 ] );
                    dst.push( src[ b + 1 ] );
                    dst.push( src[ b + 2 ] );
                    dst.push( src[ c + 0 ] );
                    dst.push( src[ c + 1 ] );
                    dst.push( src[ c + 2 ] );
    
                },
    
                addVertexLine: function ( a ) {
    
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ a + 2 ] );
    
                },
    
                addNormal : function ( a, b, c ) {
    
                    var src = this.normals;
                    var dst = this.object.geometry.normals;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ a + 2 ] );
                    dst.push( src[ b + 0 ] );
                    dst.push( src[ b + 1 ] );
                    dst.push( src[ b + 2 ] );
                    dst.push( src[ c + 0 ] );
                    dst.push( src[ c + 1 ] );
                    dst.push( src[ c + 2 ] );
    
                },
    
                addUV: function ( a, b, c ) {
    
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ b + 0 ] );
                    dst.push( src[ b + 1 ] );
                    dst.push( src[ c + 0 ] );
                    dst.push( src[ c + 1 ] );
    
                },
    
                addUVLine: function ( a ) {
    
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
    
                },
    
                addFace: function ( a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd ) {
    
                    var vLen = this.vertices.length;
    
                    var ia = this.parseVertexIndex( a, vLen );
                    var ib = this.parseVertexIndex( b, vLen );
                    var ic = this.parseVertexIndex( c, vLen );
                    var id;
    
                    if ( d === undefined ) {
    
                        this.addVertex( ia, ib, ic );
    
                    } else {
    
                        id = this.parseVertexIndex( d, vLen );
    
                        this.addVertex( ia, ib, id );
                        this.addVertex( ib, ic, id );
    
                    }
    
                    if ( ua !== undefined ) {
    
                        var uvLen = this.uvs.length;
    
                        ia = this.parseUVIndex( ua, uvLen );
                        ib = this.parseUVIndex( ub, uvLen );
                        ic = this.parseUVIndex( uc, uvLen );
    
                        if ( d === undefined ) {
    
                            this.addUV( ia, ib, ic );
    
                        } else {
    
                            id = this.parseUVIndex( ud, uvLen );
    
                            this.addUV( ia, ib, id );
                            this.addUV( ib, ic, id );
    
                        }
    
                    }
    
                    if ( na !== undefined ) {
    
                        // Normals are many times the same. If so, skip function call and parseInt.
                        var nLen = this.normals.length;
                        ia = this.parseNormalIndex( na, nLen );
    
                        ib = na === nb ? ia : this.parseNormalIndex( nb, nLen );
                        ic = na === nc ? ia : this.parseNormalIndex( nc, nLen );
    
                        if ( d === undefined ) {
    
                            this.addNormal( ia, ib, ic );
    
                        } else {
    
                            id = this.parseNormalIndex( nd, nLen );
    
                            this.addNormal( ia, ib, id );
                            this.addNormal( ib, ic, id );
    
                        }
    
                    }
    
                },
    
                addLineGeometry: function ( vertices, uvs ) {
    
                    this.object.geometry.type = 'Line';
    
                    var vLen = this.vertices.length;
                    var uvLen = this.uvs.length;
    
                    for ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {
    
                        this.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );
    
                    }
    
                    for ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {
    
                        this.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );
    
                    }
    
                }
    
            };
    
            state.startObject( '', false );
    
            return state;
    
        },
    
        parse: function ( text ) {
    
            console.time( 'OBJLoader' );
    
            var state = this._createParserState();
    
            if ( text.indexOf( '\r\n' ) !== - 1 ) {
    
                // This is faster than String.split with regex that splits on both
                text = text.replace( /\r\n/g, '\n' );
    
            }
    
            if ( text.indexOf( '\\\n' ) !== - 1) {
    
                // join lines separated by a line continuation character (\)
                text = text.replace( /\\\n/g, '' );
    
            }
    
            var lines = text.split( '\n' );
            var line = '', lineFirstChar = '', lineSecondChar = '';
            var lineLength = 0;
            var result = [];
    
            // Faster to just trim left side of the line. Use if available.
            var trimLeft = ( typeof ''.trimLeft === 'function' );
    
            for ( var i = 0, l = lines.length; i < l; i ++ ) {
    
                line = lines[ i ];
    
                line = trimLeft ? line.trimLeft() : line.trim();
    
                lineLength = line.length;
    
                if ( lineLength === 0 ) continue;
    
                lineFirstChar = line.charAt( 0 );
    
                // @todo invoke passed in handler if any
                if ( lineFirstChar === '#' ) continue;
    
                if ( lineFirstChar === 'v' ) {
    
                    lineSecondChar = line.charAt( 1 );
    
                    if ( lineSecondChar === ' ' && ( result = this.regexp.vertex_pattern.exec( line ) ) !== null ) {
    
                        // 0                  1      2      3
                        // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
    
                        state.vertices.push(
                            parseFloat( result[ 1 ] ),
                            parseFloat( result[ 2 ] ),
                            parseFloat( result[ 3 ] )
                        );
    
                    } else if ( lineSecondChar === 'n' && ( result = this.regexp.normal_pattern.exec( line ) ) !== null ) {
    
                        // 0                   1      2      3
                        // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
    
                        state.normals.push(
                            parseFloat( result[ 1 ] ),
                            parseFloat( result[ 2 ] ),
                            parseFloat( result[ 3 ] )
                        );
    
                    } else if ( lineSecondChar === 't' && ( result = this.regexp.uv_pattern.exec( line ) ) !== null ) {
    
                        // 0               1      2
                        // ["vt 0.1 0.2", "0.1", "0.2"]
    
                        state.uvs.push(
                            parseFloat( result[ 1 ] ),
                            parseFloat( result[ 2 ] )
                        );
    
                    } else {
    
                        throw new Error( "Unexpected vertex/normal/uv line: '" + line  + "'" );
    
                    }
    
                } else if ( lineFirstChar === "f" ) {
    
                    if ( ( result = this.regexp.face_vertex_uv_normal.exec( line ) ) !== null ) {
    
                        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
                        // 0                        1    2    3    4    5    6    7    8    9   10         11         12
                        // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 4 ], result[ 7 ], result[ 10 ],
                            result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],
                            result[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]
                        );
    
                    } else if ( ( result = this.regexp.face_vertex_uv.exec( line ) ) !== null ) {
    
                        // f vertex/uv vertex/uv vertex/uv
                        // 0                  1    2    3    4    5    6   7          8
                        // ["f 1/1 2/2 3/3", "1", "1", "2", "2", "3", "3", undefined, undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 3 ], result[ 5 ], result[ 7 ],
                            result[ 2 ], result[ 4 ], result[ 6 ], result[ 8 ]
                        );
    
                    } else if ( ( result = this.regexp.face_vertex_normal.exec( line ) ) !== null ) {
    
                        // f vertex//normal vertex//normal vertex//normal
                        // 0                     1    2    3    4    5    6   7          8
                        // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 3 ], result[ 5 ], result[ 7 ],
                            undefined, undefined, undefined, undefined,
                            result[ 2 ], result[ 4 ], result[ 6 ], result[ 8 ]
                        );
    
                    } else if ( ( result = this.regexp.face_vertex.exec( line ) ) !== null ) {
    
                        // f vertex vertex vertex
                        // 0            1    2    3   4
                        // ["f 1 2 3", "1", "2", "3", undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 2 ], result[ 3 ], result[ 4 ]
                        );
    
                    } else {
    
                        throw new Error( "Unexpected face line: '" + line  + "'" );
    
                    }
    
                } else if ( lineFirstChar === "l" ) {
    
                    var lineParts = line.substring( 1 ).trim().split( " " );
                    var lineVertices = [], lineUVs = [];
    
                    if ( line.indexOf( "/" ) === - 1 ) {
    
                        lineVertices = lineParts;
    
                    } else {
    
                        for ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {
    
                            var parts = lineParts[ li ].split( "/" );
    
                            if ( parts[ 0 ] !== "" ) lineVertices.push( parts[ 0 ] );
                            if ( parts[ 1 ] !== "" ) lineUVs.push( parts[ 1 ] );
    
                        }
    
                    }
                    state.addLineGeometry( lineVertices, lineUVs );
    
                } else if ( ( result = this.regexp.object_pattern.exec( line ) ) !== null ) {
    
                    // o object_name
                    // or
                    // g group_name
    
                    // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869
                    // var name = result[ 0 ].substr( 1 ).trim();
                    var name = ( " " + result[ 0 ].substr( 1 ).trim() ).substr( 1 );
    
                    state.startObject( name );
    
                } else if ( this.regexp.material_use_pattern.test( line ) ) {
    
                    // material
    
                    state.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );
    
                } else if ( this.regexp.material_library_pattern.test( line ) ) {
    
                    // mtl file
    
                    state.materialLibraries.push( line.substring( 7 ).trim() );
    
                } else if ( ( result = this.regexp.smoothing_pattern.exec( line ) ) !== null ) {
    
                    // smooth shading
    
                    // @todo Handle files that have varying smooth values for a set of faces inside one geometry,
                    // but does not define a usemtl for each face set.
                    // This should be detected and a dummy material created (later MultiMaterial and geometry groups).
                    // This requires some care to not create extra material on each smooth value for "normal" obj files.
                    // where explicit usemtl defines geometry groups.
                    // Example asset: examples/models/obj/cerberus/Cerberus.obj
    
                    var value = result[ 1 ].trim().toLowerCase();
                    state.object.smooth = ( value === '1' || value === 'on' );
    
                    var material = state.object.currentMaterial();
                    if ( material ) {
    
                        material.smooth = state.object.smooth;
    
                    }
    
                } else {
    
                    // Handle null terminated files without exception
                    if ( line === '\0' ) continue;
    
                    throw new Error( "Unexpected line: '" + line  + "'" );
    
                }
    
            }
    
            state.finalize();
    
            var container = new THREE.Group();
            container.materialLibraries = [].concat( state.materialLibraries );
    
            for ( var i = 0, l = state.objects.length; i < l; i ++ ) {
    
                var object = state.objects[ i ];
                var geometry = object.geometry;
                var materials = object.materials;
                var isLine = ( geometry.type === 'Line' );
    
                // Skip o/g line declarations that did not follow with any faces
                if ( geometry.vertices.length === 0 ) continue;
    
                var buffergeometry = new THREE.BufferGeometry();
    
                buffergeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( geometry.vertices ), 3 ) );
    
                if ( geometry.normals.length > 0 ) {
    
                    buffergeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( geometry.normals ), 3 ) );
    
                } else {
    
                    buffergeometry.computeVertexNormals();
    
                }
    
                if ( geometry.uvs.length > 0 ) {
    
                    buffergeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( geometry.uvs ), 2 ) );
    
                }
    
                // Create materials
    
                var createdMaterials = [];
    
                for ( var mi = 0, miLen = materials.length; mi < miLen ; mi++ ) {
    
                    var sourceMaterial = materials[mi];
                    var material = undefined;
    
                    if ( this.materials !== null ) {
    
                        material = this.materials.create( sourceMaterial.name );
    
                        // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.
                        if ( isLine && material && ! ( material instanceof THREE.LineBasicMaterial ) ) {
    
                            var materialLine = new THREE.LineBasicMaterial();
                            materialLine.copy( material );
                            material = materialLine;
    
                        }
    
                    }
    
                    if ( ! material ) {
    
                        material = ( ! isLine ? new THREE.MeshPhongMaterial() : new THREE.LineBasicMaterial() );
                        material.name = sourceMaterial.name;
    
                    }
    
                    material.shading = sourceMaterial.smooth ? THREE.SmoothShading : THREE.FlatShading;
    
                    createdMaterials.push(material);
    
                }
    
                // Create mesh
    
                var mesh;
    
                if ( createdMaterials.length > 1 ) {
    
                    for ( var mi = 0, miLen = materials.length; mi < miLen ; mi++ ) {
    
                        var sourceMaterial = materials[mi];
                        buffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );
    
                    }
    
                    mesh = ( ! isLine ? new THREE.Mesh( buffergeometry, createdMaterials ) : new THREE.LineSegments( buffergeometry, createdMaterials ) );
    
                } else {
    
                    mesh = ( ! isLine ? new THREE.Mesh( buffergeometry, createdMaterials[ 0 ] ) : new THREE.LineSegments( buffergeometry, createdMaterials[ 0 ] ) );
                }
    
                mesh.name = object.name;
    
                container.add( mesh );
    
            }
    
            console.timeEnd( 'OBJLoader' );
    
            return container;
    
        }
    
    };    
},{}],"src/lib/OrbitControls":[function(require,module,exports){
/**
 * @author qiao / https://github.com/qiao
 * @author mrdoob / http://mrdoob.com
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author erich666 / http://erichaines.com
 */

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one finger move
//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
//    Pan - right mouse, or arrow keys / touch: three finger swipe

THREE.OrbitControls = function ( object, domElement ) {

	this.object = object;

	this.domElement = ( domElement !== undefined ) ? domElement : document;

	// Set to false to disable this control
	this.enabled = true;

	// "target" sets the location of focus, where the object orbits around
	this.target = new THREE.Vector3();

	// How far you can dolly in and out ( PerspectiveCamera only )
	this.minDistance = 0;
	this.maxDistance = Infinity;

	// How far you can zoom in and out ( OrthographicCamera only )
	this.minZoom = 0;
	this.maxZoom = Infinity;

	// How far you can orbit vertically, upper and lower limits.
	// Range is 0 to Math.PI radians.
	this.minPolarAngle = 0; // radians
	this.maxPolarAngle = Math.PI; // radians

	// How far you can orbit horizontally, upper and lower limits.
	// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
	this.minAzimuthAngle = - Infinity; // radians
	this.maxAzimuthAngle = Infinity; // radians

	// Set to true to enable damping (inertia)
	// If damping is enabled, you must call controls.update() in your animation loop
	this.enableDamping = false;
	this.dampingFactor = 0.25;

	// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
	// Set to false to disable zooming
	this.enableZoom = true;
	this.zoomSpeed = 1.0;

	// Set to false to disable rotating
	this.enableRotate = true;
	this.rotateSpeed = 1.0;

	// Set to false to disable panning
	this.enablePan = true;
	this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

	// Set to true to automatically rotate around the target
	// If auto-rotate is enabled, you must call controls.update() in your animation loop
	this.autoRotate = false;
	this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

	// Set to false to disable use of the keys
	this.enableKeys = true;

	// The four arrow keys
	this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

	// Mouse buttons
	this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

	// for reset
	this.target0 = this.target.clone();
	this.position0 = this.object.position.clone();
	this.zoom0 = this.object.zoom;

	//
	// public methods
	//

	this.getPolarAngle = function () {

		return spherical.phi;

	};

	this.getAzimuthalAngle = function () {

		return spherical.theta;

	};

	this.saveState = function () {

		scope.target0.copy( scope.target );
		scope.position0.copy( scope.object.position );
		scope.zoom0 = scope.object.zoom;

	};

	this.reset = function () {

		scope.target.copy( scope.target0 );
		scope.object.position.copy( scope.position0 );
		scope.object.zoom = scope.zoom0;

		scope.object.updateProjectionMatrix();
		scope.dispatchEvent( changeEvent );

		scope.update();

		state = STATE.NONE;

	};

	// this method is exposed, but perhaps it would be better if we can make it private...
	this.update = function () {

		var offset = new THREE.Vector3();

		// so camera.up is the orbit axis
		var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
		var quatInverse = quat.clone().inverse();

		var lastPosition = new THREE.Vector3();
		var lastQuaternion = new THREE.Quaternion();

		return function update() {

			var position = scope.object.position;

			offset.copy( position ).sub( scope.target );

			// rotate offset to "y-axis-is-up" space
			offset.applyQuaternion( quat );

			// angle from z-axis around y-axis
			spherical.setFromVector3( offset );

			if ( scope.autoRotate && state === STATE.NONE ) {

				rotateLeft( getAutoRotationAngle() );

			}

			spherical.theta += sphericalDelta.theta;
			spherical.phi += sphericalDelta.phi;

			// restrict theta to be between desired limits
			spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

			// restrict phi to be between desired limits
			spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

			spherical.makeSafe();


			spherical.radius *= scale;

			// restrict radius to be between desired limits
			spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

			// move target to panned location
			scope.target.add( panOffset );

			offset.setFromSpherical( spherical );

			// rotate offset back to "camera-up-vector-is-up" space
			offset.applyQuaternion( quatInverse );

			position.copy( scope.target ).add( offset );

			scope.object.lookAt( scope.target );

			if ( scope.enableDamping === true ) {

				sphericalDelta.theta *= ( 1 - scope.dampingFactor );
				sphericalDelta.phi *= ( 1 - scope.dampingFactor );

			} else {

				sphericalDelta.set( 0, 0, 0 );

			}

			scale = 1;
			panOffset.set( 0, 0, 0 );

			// update condition is:
			// min(camera displacement, camera rotation in radians)^2 > EPS
			// using small-angle approximation cos(x/2) = 1 - x^2 / 8

			if ( zoomChanged ||
				lastPosition.distanceToSquared( scope.object.position ) > EPS ||
				8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

				scope.dispatchEvent( changeEvent );

				lastPosition.copy( scope.object.position );
				lastQuaternion.copy( scope.object.quaternion );
				zoomChanged = false;

				return true;

			}

			return false;

		};

	}();

	this.dispose = function () {

		scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
		scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
		scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

		scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
		scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
		scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );

		window.removeEventListener( 'keydown', onKeyDown, false );

		//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

	};

	//
	// internals
	//

	var scope = this;

	var changeEvent = { type: 'change' };
	var startEvent = { type: 'start' };
	var endEvent = { type: 'end' };

	var STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };

	var state = STATE.NONE;

	var EPS = 0.000001;

	// current position in spherical coordinates
	var spherical = new THREE.Spherical();
	var sphericalDelta = new THREE.Spherical();

	var scale = 1;
	var panOffset = new THREE.Vector3();
	var zoomChanged = false;

	var rotateStart = new THREE.Vector2();
	var rotateEnd = new THREE.Vector2();
	var rotateDelta = new THREE.Vector2();

	var panStart = new THREE.Vector2();
	var panEnd = new THREE.Vector2();
	var panDelta = new THREE.Vector2();

	var dollyStart = new THREE.Vector2();
	var dollyEnd = new THREE.Vector2();
	var dollyDelta = new THREE.Vector2();

	function getAutoRotationAngle() {

		return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

	}

	function getZoomScale() {

		return Math.pow( 0.95, scope.zoomSpeed );

	}

	function rotateLeft( angle ) {

		sphericalDelta.theta -= angle;

	}

	function rotateUp( angle ) {

		sphericalDelta.phi -= angle;

	}

	var panLeft = function () {

		var v = new THREE.Vector3();

		return function panLeft( distance, objectMatrix ) {

			v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
			v.multiplyScalar( - distance );

			panOffset.add( v );

		};

	}();

	var panUp = function () {

		var v = new THREE.Vector3();

		return function panUp( distance, objectMatrix ) {

			v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
			v.multiplyScalar( distance );

			panOffset.add( v );

		};

	}();

	// deltaX and deltaY are in pixels; right and down are positive
	var pan = function () {

		var offset = new THREE.Vector3();

		return function pan( deltaX, deltaY ) {

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			if ( scope.object.isPerspectiveCamera ) {

				// perspective
				var position = scope.object.position;
				offset.copy( position ).sub( scope.target );
				var targetDistance = offset.length();

				// half of the fov is center to top of screen
				targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

				// we actually don't use screenWidth, since perspective camera is fixed to screen height
				panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
				panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

			} else if ( scope.object.isOrthographicCamera ) {

				// orthographic
				panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
				panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

			} else {

				// camera neither orthographic nor perspective
				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
				scope.enablePan = false;

			}

		};

	}();

	function dollyIn( dollyScale ) {

		if ( scope.object.isPerspectiveCamera ) {

			scale /= dollyScale;

		} else if ( scope.object.isOrthographicCamera ) {

			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
			scope.object.updateProjectionMatrix();
			zoomChanged = true;

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
			scope.enableZoom = false;

		}

	}

	function dollyOut( dollyScale ) {

		if ( scope.object.isPerspectiveCamera ) {

			scale *= dollyScale;

		} else if ( scope.object.isOrthographicCamera ) {

			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
			scope.object.updateProjectionMatrix();
			zoomChanged = true;

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
			scope.enableZoom = false;

		}

	}

	//
	// event callbacks - update the object state
	//

	function handleMouseDownRotate( event ) {

		//console.log( 'handleMouseDownRotate' );

		rotateStart.set( event.clientX, event.clientY );

	}

	function handleMouseDownDolly( event ) {

		//console.log( 'handleMouseDownDolly' );

		dollyStart.set( event.clientX, event.clientY );

	}

	function handleMouseDownPan( event ) {

		//console.log( 'handleMouseDownPan' );

		panStart.set( event.clientX, event.clientY );

	}

	function handleMouseMoveRotate( event ) {

		//console.log( 'handleMouseMoveRotate' );

		rotateEnd.set( event.clientX, event.clientY );
		rotateDelta.subVectors( rotateEnd, rotateStart );

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		// rotating across whole screen goes 360 degrees around
		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

		// rotating up and down along whole screen attempts to go 360, but limited to 180
		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

		rotateStart.copy( rotateEnd );

		scope.update();

	}

	function handleMouseMoveDolly( event ) {

		//console.log( 'handleMouseMoveDolly' );

		dollyEnd.set( event.clientX, event.clientY );

		dollyDelta.subVectors( dollyEnd, dollyStart );

		if ( dollyDelta.y > 0 ) {

			dollyIn( getZoomScale() );

		} else if ( dollyDelta.y < 0 ) {

			dollyOut( getZoomScale() );

		}

		dollyStart.copy( dollyEnd );

		scope.update();

	}

	function handleMouseMovePan( event ) {

		//console.log( 'handleMouseMovePan' );

		panEnd.set( event.clientX, event.clientY );

		panDelta.subVectors( panEnd, panStart );

		pan( panDelta.x, panDelta.y );

		panStart.copy( panEnd );

		scope.update();

	}

	function handleMouseUp( event ) {

		// console.log( 'handleMouseUp' );

	}

	function handleMouseWheel( event ) {

		// console.log( 'handleMouseWheel' );

		if ( event.deltaY < 0 ) {

			dollyOut( getZoomScale() );

		} else if ( event.deltaY > 0 ) {

			dollyIn( getZoomScale() );

		}

		scope.update();

	}

	function handleKeyDown( event ) {

		//console.log( 'handleKeyDown' );

		switch ( event.keyCode ) {

			case scope.keys.UP:
				pan( 0, scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.BOTTOM:
				pan( 0, - scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.LEFT:
				pan( scope.keyPanSpeed, 0 );
				scope.update();
				break;

			case scope.keys.RIGHT:
				pan( - scope.keyPanSpeed, 0 );
				scope.update();
				break;

		}

	}

	function handleTouchStartRotate( event ) {

		//console.log( 'handleTouchStartRotate' );

		rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

	}

	function handleTouchStartDolly( event ) {

		//console.log( 'handleTouchStartDolly' );

		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

		var distance = Math.sqrt( dx * dx + dy * dy );

		dollyStart.set( 0, distance );

	}

	function handleTouchStartPan( event ) {

		//console.log( 'handleTouchStartPan' );

		panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

	}

	function handleTouchMoveRotate( event ) {

		//console.log( 'handleTouchMoveRotate' );

		rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
		rotateDelta.subVectors( rotateEnd, rotateStart );

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		// rotating across whole screen goes 360 degrees around
		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

		// rotating up and down along whole screen attempts to go 360, but limited to 180
		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

		rotateStart.copy( rotateEnd );

		scope.update();

	}

	function handleTouchMoveDolly( event ) {

		//console.log( 'handleTouchMoveDolly' );

		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

		var distance = Math.sqrt( dx * dx + dy * dy );

		dollyEnd.set( 0, distance );

		dollyDelta.subVectors( dollyEnd, dollyStart );

		if ( dollyDelta.y > 0 ) {

			dollyOut( getZoomScale() );

		} else if ( dollyDelta.y < 0 ) {

			dollyIn( getZoomScale() );

		}

		dollyStart.copy( dollyEnd );

		scope.update();

	}

	function handleTouchMovePan( event ) {

		//console.log( 'handleTouchMovePan' );

		panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		panDelta.subVectors( panEnd, panStart );

		pan( panDelta.x, panDelta.y );

		panStart.copy( panEnd );

		scope.update();

	}

	function handleTouchEnd( event ) {

		//console.log( 'handleTouchEnd' );

	}

	//
	// event handlers - FSM: listen for events and reset state
	//

	function onMouseDown( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( event.button ) {

			case scope.mouseButtons.ORBIT:

				if ( scope.enableRotate === false ) return;

				handleMouseDownRotate( event );

				state = STATE.ROTATE;

				break;

			case scope.mouseButtons.ZOOM:

				if ( scope.enableZoom === false ) return;

				handleMouseDownDolly( event );

				state = STATE.DOLLY;

				break;

			case scope.mouseButtons.PAN:

				if ( scope.enablePan === false ) return;

				handleMouseDownPan( event );

				state = STATE.PAN;

				break;

		}

		if ( state !== STATE.NONE ) {

			document.addEventListener( 'mousemove', onMouseMove, false );
			document.addEventListener( 'mouseup', onMouseUp, false );

			scope.dispatchEvent( startEvent );

		}

	}

	function onMouseMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( state ) {

			case STATE.ROTATE:

				if ( scope.enableRotate === false ) return;

				handleMouseMoveRotate( event );

				break;

			case STATE.DOLLY:

				if ( scope.enableZoom === false ) return;

				handleMouseMoveDolly( event );

				break;

			case STATE.PAN:

				if ( scope.enablePan === false ) return;

				handleMouseMovePan( event );

				break;

		}

	}

	function onMouseUp( event ) {

		if ( scope.enabled === false ) return;

		handleMouseUp( event );

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );

		scope.dispatchEvent( endEvent );

		state = STATE.NONE;

	}

	function onMouseWheel( event ) {

		if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

		event.preventDefault();

		scope.dispatchEvent( startEvent );

		handleMouseWheel( event );

		scope.dispatchEvent( endEvent );

	}

	function onKeyDown( event ) {

		if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

		handleKeyDown( event );

	}

	function onTouchStart( event ) {

		if ( scope.enabled === false ) return;

		switch ( event.touches.length ) {

			case 1:	// one-fingered touch: rotate

				if ( scope.enableRotate === false ) return;

				handleTouchStartRotate( event );

				state = STATE.TOUCH_ROTATE;

				break;

			case 2:	// two-fingered touch: dolly

				if ( scope.enableZoom === false ) return;

				handleTouchStartDolly( event );

				state = STATE.TOUCH_DOLLY;

				break;

			case 3: // three-fingered touch: pan

				if ( scope.enablePan === false ) return;

				handleTouchStartPan( event );

				state = STATE.TOUCH_PAN;

				break;

			default:

				state = STATE.NONE;

		}

		if ( state !== STATE.NONE ) {

			scope.dispatchEvent( startEvent );

		}

	}

	function onTouchMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( event.touches.length ) {

			case 1: // one-fingered touch: rotate

				if ( scope.enableRotate === false ) return;
				if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

				handleTouchMoveRotate( event );

				break;

			case 2: // two-fingered touch: dolly

				if ( scope.enableZoom === false ) return;
				if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

				handleTouchMoveDolly( event );

				break;

			case 3: // three-fingered touch: pan

				if ( scope.enablePan === false ) return;
				if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

				handleTouchMovePan( event );

				break;

			default:

				state = STATE.NONE;

		}

	}

	function onTouchEnd( event ) {

		if ( scope.enabled === false ) return;

		handleTouchEnd( event );

		scope.dispatchEvent( endEvent );

		state = STATE.NONE;

	}

	function onContextMenu( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

	}

	//

	scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

	scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
	scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

	scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
	scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
	scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

	window.addEventListener( 'keydown', onKeyDown, false );

	// force an update at start

	this.update();

};

THREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;

Object.defineProperties( THREE.OrbitControls.prototype, {

	center: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
			return this.target;

		}

	},

	// backward compatibility

	noZoom: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
			return ! this.enableZoom;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
			this.enableZoom = ! value;

		}

	},

	noRotate: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
			return ! this.enableRotate;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
			this.enableRotate = ! value;

		}

	},

	noPan: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
			return ! this.enablePan;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
			this.enablePan = ! value;

		}

	},

	noKeys: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
			return ! this.enableKeys;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
			this.enableKeys = ! value;

		}

	},

	staticMoving: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
			return ! this.enableDamping;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
			this.enableDamping = ! value;

		}

	},

	dynamicDampingFactor: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
			return this.dampingFactor;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
			this.dampingFactor = value;

		}

	}

} );

},{}],"src/lib/inflate-min":[function(require,module,exports){
/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';var l=void 0,aa=this;function r(c,d){var a=c.split("."),b=aa;!(a[0]in b)&&b.execScript&&b.execScript("var "+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array&&"undefined"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error("invalid inflate mode");
}}var A=0,y=1,B={t:A,s:y};
w.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error("invalid uncompressed block header: LEN");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error("invalid uncompressed block header: NLEN");h=d[a++]|d[a++]<<8;if(g===~h)throw Error("invalid uncompressed block header: length verify");if(a+g>d.length)throw Error("input buffer is broken");switch(this.i){case A:for(;e+
g>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error("invalid inflate mode");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=
C(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error("unknown BTYPE: "+c);}}return this.n()};
var G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,
13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error("input buffer is broken");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}
function E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error("invalid code length: "+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}
w.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};
w.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};
w.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};
w.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&("number"===typeof c.p&&(a=c.p),"number"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};
w.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};
w.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error("unsupported compression method");}if(0!==((a<<8)+b)%31)throw Error("invalid fcheck flag:"+((a<<8)+b)%31);if(b&32)throw Error("fdict flag is not supported");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}
W.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if("string"===typeof b){var e=b.split(""),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error("invalid adler-32 checksum");}return d};var ha=8;r("Zlib.Inflate",W);r("Zlib.Inflate.prototype.decompress",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r("Zlib.Inflate.BufferType."+Z,X[Z]);}).call(this);
},{}],"src/lib/three-min":[function(require,module,exports){
// threejs.org/license
(function(l,za){"object"===typeof exports&&"undefined"!==typeof module?za(exports):"function"===typeof define&&define.amd?define(["exports"],za):za(l.THREE={})})(this,function(l){function za(){}function D(a,b){this.x=a||0;this.y=b||0}function O(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function ha(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1}function p(a,
    b,c){this.x=a||0;this.y=b||0;this.z=c||0}function ma(){this.elements=[1,0,0,0,1,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}function U(a,b,c,d,e,f,g,h,k,m){Object.defineProperty(this,"id",{value:Af++});this.uuid=Q.generateUUID();this.name="";this.image=void 0!==a?a:U.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:U.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:1001;this.wrapT=void 0!==d?d:1001;this.magFilter=void 0!==
    e?e:1006;this.minFilter=void 0!==f?f:1008;this.anisotropy=void 0!==k?k:1;this.format=void 0!==g?g:1023;this.type=void 0!==h?h:1009;this.offset=new D(0,0);this.repeat=new D(1,1);this.center=new D(0,0);this.rotation=0;this.matrixAutoUpdate=!0;this.matrix=new ma;this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==m?m:3E3;this.version=0;this.onUpdate=null}function aa(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1}function kb(a,
    b,c){this.uuid=Q.generateUUID();this.width=a;this.height=b;this.scissor=new aa(0,0,a,b);this.scissorTest=!1;this.viewport=new aa(0,0,a,b);c=c||{};void 0===c.minFilter&&(c.minFilter=1006);this.texture=new U(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy,c.encoding);this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.depthTexture=void 0!==c.depthTexture?c.depthTexture:null}function Jb(a,b,c){kb.call(this,
    a,b,c);this.activeMipMapLevel=this.activeCubeFace=0}function lb(a,b,c,d,e,f,g,h,k,m,q,n){U.call(this,null,f,g,h,k,m,d,e,q,n);this.image={data:a,width:b,height:c};this.magFilter=void 0!==k?k:1003;this.minFilter=void 0!==m?m:1003;this.flipY=this.generateMipmaps=!1;this.unpackAlignment=1}function db(a,b,c,d,e,f,g,h,k,m){a=void 0!==a?a:[];U.call(this,a,void 0!==b?b:301,c,d,e,f,g,h,k,m);this.flipY=!1}function Kb(a,b,c){var d=a[0];if(0>=d||0<d)return a;var e=b*c,f=Ie[e];void 0===f&&(f=new Float32Array(e),
    Ie[e]=f);if(0!==b)for(d.toArray(f,0),d=1,e=0;d!==b;++d)e+=c,a[d].toArray(f,e);return f}function Je(a,b){var c=Ke[b];void 0===c&&(c=new Int32Array(b),Ke[b]=c);for(var d=0;d!==b;++d)c[d]=a.allocTextureUnit();return c}function Bf(a,b){a.uniform1f(this.addr,b)}function Cf(a,b){a.uniform1i(this.addr,b)}function Df(a,b){void 0===b.x?a.uniform2fv(this.addr,b):a.uniform2f(this.addr,b.x,b.y)}function Ef(a,b){void 0!==b.x?a.uniform3f(this.addr,b.x,b.y,b.z):void 0!==b.r?a.uniform3f(this.addr,b.r,b.g,b.b):a.uniform3fv(this.addr,
    b)}function Ff(a,b){void 0===b.x?a.uniform4fv(this.addr,b):a.uniform4f(this.addr,b.x,b.y,b.z,b.w)}function Gf(a,b){a.uniformMatrix2fv(this.addr,!1,b.elements||b)}function Hf(a,b){void 0===b.elements?a.uniformMatrix3fv(this.addr,!1,b):(Le.set(b.elements),a.uniformMatrix3fv(this.addr,!1,Le))}function If(a,b){void 0===b.elements?a.uniformMatrix4fv(this.addr,!1,b):(Me.set(b.elements),a.uniformMatrix4fv(this.addr,!1,Me))}function Jf(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,d);c.setTexture2D(b||
    Ne,d)}function Kf(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,d);c.setTextureCube(b||Oe,d)}function Pe(a,b){a.uniform2iv(this.addr,b)}function Qe(a,b){a.uniform3iv(this.addr,b)}function Re(a,b){a.uniform4iv(this.addr,b)}function Lf(a){switch(a){case 5126:return Bf;case 35664:return Df;case 35665:return Ef;case 35666:return Ff;case 35674:return Gf;case 35675:return Hf;case 35676:return If;case 35678:case 36198:return Jf;case 35680:return Kf;case 5124:case 35670:return Cf;case 35667:case 35671:return Pe;
    case 35668:case 35672:return Qe;case 35669:case 35673:return Re}}function Mf(a,b){a.uniform1fv(this.addr,b)}function Nf(a,b){a.uniform1iv(this.addr,b)}function Of(a,b){a.uniform2fv(this.addr,Kb(b,this.size,2))}function Pf(a,b){a.uniform3fv(this.addr,Kb(b,this.size,3))}function Qf(a,b){a.uniform4fv(this.addr,Kb(b,this.size,4))}function Rf(a,b){a.uniformMatrix2fv(this.addr,!1,Kb(b,this.size,4))}function Sf(a,b){a.uniformMatrix3fv(this.addr,!1,Kb(b,this.size,9))}function Tf(a,b){a.uniformMatrix4fv(this.addr,
    !1,Kb(b,this.size,16))}function Uf(a,b,c){var d=b.length,e=Je(c,d);a.uniform1iv(this.addr,e);for(a=0;a!==d;++a)c.setTexture2D(b[a]||Ne,e[a])}function Vf(a,b,c){var d=b.length,e=Je(c,d);a.uniform1iv(this.addr,e);for(a=0;a!==d;++a)c.setTextureCube(b[a]||Oe,e[a])}function Wf(a){switch(a){case 5126:return Mf;case 35664:return Of;case 35665:return Pf;case 35666:return Qf;case 35674:return Rf;case 35675:return Sf;case 35676:return Tf;case 35678:return Uf;case 35680:return Vf;case 5124:case 35670:return Nf;
    case 35667:case 35671:return Pe;case 35668:case 35672:return Qe;case 35669:case 35673:return Re}}function Xf(a,b,c){this.id=a;this.addr=c;this.setValue=Lf(b.type)}function Yf(a,b,c){this.id=a;this.addr=c;this.size=b.size;this.setValue=Wf(b.type)}function Se(a){this.id=a;this.seq=[];this.map={}}function mb(a,b,c){this.seq=[];this.map={};this.renderer=c;c=a.getProgramParameter(b,a.ACTIVE_UNIFORMS);for(var d=0;d<c;++d){var e=a.getActiveUniform(b,d),f=a.getUniformLocation(b,e.name),g=this,h=e.name,k=
    h.length;for(Vd.lastIndex=0;;){var m=Vd.exec(h),q=Vd.lastIndex,n=m[1],u=m[3];"]"===m[2]&&(n|=0);if(void 0===u||"["===u&&q+2===k){h=g;e=void 0===u?new Xf(n,e,f):new Yf(n,e,f);h.seq.push(e);h.map[e.id]=e;break}else u=g.map[n],void 0===u&&(u=new Se(n),n=g,g=u,n.seq.push(g),n.map[g.id]=g),g=u}}}function H(a,b,c){return void 0===b&&void 0===c?this.set(a):this.setRGB(a,b,c)}function od(a,b){this.min=void 0!==a?a:new D(Infinity,Infinity);this.max=void 0!==b?b:new D(-Infinity,-Infinity)}function Zf(a,b,c,
    d,e){var f,g,h,k,m,q,n,u,r,t,l,w,z,y,I,A;this.render=function(a,v,Da,na){if(0!==a.length){v=new p;var J=na.w/na.z,Ha=.5*na.z,pd=.5*na.w,la=16/na.w,S=new D(la*J,la),va=new p(1,1,0),N=new D(1,1),B=new od;B.min.set(na.x,na.y);B.max.set(na.x+(na.z-16),na.y+(na.w-16));if(void 0===y){var la=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),x=new Uint16Array([0,1,2,0,2,3]);l=b.createBuffer();w=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,l);b.bufferData(b.ARRAY_BUFFER,la,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,
    w);b.bufferData(b.ELEMENT_ARRAY_BUFFER,x,b.STATIC_DRAW);I=b.createTexture();A=b.createTexture();c.bindTexture(b.TEXTURE_2D,I);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);c.bindTexture(b.TEXTURE_2D,A);b.texImage2D(b.TEXTURE_2D,0,
    b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);var la=z={vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvUV = uv;\n\tvec2 pos = position;\n\tif ( renderType == 2 ) {\n\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\t\tvVisibility =        visibility.r / 9.0;\n\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\tvVisibility *=       visibility.b / 9.0;\n\t\tvVisibility *= 1.0 - visibility.a / 9.0;\n\t\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\n\t\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n\t}\n\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
    fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tif ( renderType == 0 ) {\n\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n\t} else if ( renderType == 1 ) {\n\t\tgl_FragColor = texture2D( map, vUV );\n\t} else {\n\t\tvec4 texture = texture2D( map, vUV );\n\t\ttexture.a *= opacity * vVisibility;\n\t\tgl_FragColor = texture;\n\t\tgl_FragColor.rgb *= color;\n\t}\n}"},x=b.createProgram(),
    E=b.createShader(b.FRAGMENT_SHADER),V=b.createShader(b.VERTEX_SHADER),H="precision "+e.precision+" float;\n";b.shaderSource(E,H+la.fragmentShader);b.shaderSource(V,H+la.vertexShader);b.compileShader(E);b.compileShader(V);b.attachShader(x,E);b.attachShader(x,V);b.linkProgram(x);y=x;r=b.getAttribLocation(y,"position");t=b.getAttribLocation(y,"uv");f=b.getUniformLocation(y,"renderType");g=b.getUniformLocation(y,"map");h=b.getUniformLocation(y,"occlusionMap");k=b.getUniformLocation(y,"opacity");m=b.getUniformLocation(y,
    "color");q=b.getUniformLocation(y,"scale");n=b.getUniformLocation(y,"rotation");u=b.getUniformLocation(y,"screenPosition")}c.useProgram(y);c.initAttributes();c.enableAttribute(r);c.enableAttribute(t);c.disableUnusedAttributes();b.uniform1i(h,0);b.uniform1i(g,1);b.bindBuffer(b.ARRAY_BUFFER,l);b.vertexAttribPointer(r,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(t,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,w);c.disable(b.CULL_FACE);c.buffers.depth.setMask(!1);x=0;for(E=a.length;x<E;x++)if(la=
    16/na.w,S.set(la*J,la),V=a[x],v.set(V.matrixWorld.elements[12],V.matrixWorld.elements[13],V.matrixWorld.elements[14]),v.applyMatrix4(Da.matrixWorldInverse),v.applyMatrix4(Da.projectionMatrix),va.copy(v),N.x=na.x+va.x*Ha+Ha-8,N.y=na.y+va.y*pd+pd-8,!0===B.containsPoint(N)){c.activeTexture(b.TEXTURE0);c.bindTexture(b.TEXTURE_2D,null);c.activeTexture(b.TEXTURE1);c.bindTexture(b.TEXTURE_2D,I);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,N.x,N.y,16,16,0);b.uniform1i(f,0);b.uniform2f(q,S.x,S.y);b.uniform3f(u,va.x,
    va.y,va.z);c.disable(b.BLEND);c.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);c.activeTexture(b.TEXTURE0);c.bindTexture(b.TEXTURE_2D,A);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,N.x,N.y,16,16,0);b.uniform1i(f,1);c.disable(b.DEPTH_TEST);c.activeTexture(b.TEXTURE1);c.bindTexture(b.TEXTURE_2D,I);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);V.positionScreen.copy(va);V.customUpdateCallback?V.customUpdateCallback(V):V.updateLensFlares();b.uniform1i(f,2);c.enable(b.BLEND);for(var H=
    0,K=V.lensFlares.length;H<K;H++){var C=V.lensFlares[H];.001<C.opacity&&.001<C.scale&&(va.x=C.x,va.y=C.y,va.z=C.z,la=C.size*C.scale/na.w,S.x=la*J,S.y=la,b.uniform3f(u,va.x,va.y,va.z),b.uniform2f(q,S.x,S.y),b.uniform1f(n,C.rotation),b.uniform1f(k,C.opacity),b.uniform3f(m,C.color.r,C.color.g,C.color.b),c.setBlending(C.blending,C.blendEquation,C.blendSrc,C.blendDst),d.setTexture2D(C.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0))}}c.enable(b.CULL_FACE);c.enable(b.DEPTH_TEST);c.buffers.depth.setMask(!0);
    c.reset()}}}function tc(a,b,c,d,e,f,g,h,k){U.call(this,a,b,c,d,e,f,g,h,k);this.needsUpdate=!0}function $f(a,b,c,d,e){var f,g,h,k,m,q,n,u,r,t,l,w,z,y,I,A,J;function Ha(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:b.id-a.id}var Da,na,oa,Te,pd=new p,la=new ha,S=new p;this.render=function(v,p,D){if(0!==v.length){if(void 0===oa){var x=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),N=new Uint16Array([0,1,2,0,2,3]);Da=b.createBuffer();na=b.createBuffer();
    b.bindBuffer(b.ARRAY_BUFFER,Da);b.bufferData(b.ARRAY_BUFFER,x,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,na);b.bufferData(b.ELEMENT_ARRAY_BUFFER,N,b.STATIC_DRAW);x=b.createProgram();N=b.createShader(b.VERTEX_SHADER);var B=b.createShader(b.FRAGMENT_SHADER);b.shaderSource(N,["precision "+e.precision+" float;","#define SHADER_NAME SpriteMaterial\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float fogDepth;\nvoid main() {\n\tvUV = uvOffset + uv * uvScale;\n\tvec2 alignedPosition = position * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tvec4 mvPosition;\n\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\tfogDepth = - mvPosition.z;\n}"].join("\n"));
    b.shaderSource(B,["precision "+e.precision+" float;","#define SHADER_NAME SpriteMaterial\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvarying float fogDepth;\nvoid main() {\n\tvec4 texture = texture2D( map, vUV );\n\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\n\tif ( gl_FragColor.a < alphaTest ) discard;\n\tif ( fogType > 0 ) {\n\t\tfloat fogFactor = 0.0;\n\t\tif ( fogType == 1 ) {\n\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t\t} else {\n\t\t\tconst float LOG2 = 1.442695;\n\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );\n\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\t\t}\n\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\t}\n}"].join("\n"));
    b.compileShader(N);b.compileShader(B);b.attachShader(x,N);b.attachShader(x,B);b.linkProgram(x);oa=x;A=b.getAttribLocation(oa,"position");J=b.getAttribLocation(oa,"uv");f=b.getUniformLocation(oa,"uvOffset");g=b.getUniformLocation(oa,"uvScale");h=b.getUniformLocation(oa,"rotation");k=b.getUniformLocation(oa,"scale");m=b.getUniformLocation(oa,"color");q=b.getUniformLocation(oa,"map");n=b.getUniformLocation(oa,"opacity");u=b.getUniformLocation(oa,"modelViewMatrix");r=b.getUniformLocation(oa,"projectionMatrix");
    t=b.getUniformLocation(oa,"fogType");l=b.getUniformLocation(oa,"fogDensity");w=b.getUniformLocation(oa,"fogNear");z=b.getUniformLocation(oa,"fogFar");y=b.getUniformLocation(oa,"fogColor");b.getUniformLocation(oa,"fogDepth");I=b.getUniformLocation(oa,"alphaTest");x=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");x.width=8;x.height=8;N=x.getContext("2d");N.fillStyle="white";N.fillRect(0,0,8,8);Te=new tc(x)}c.useProgram(oa);c.initAttributes();c.enableAttribute(A);c.enableAttribute(J);
    c.disableUnusedAttributes();c.disable(b.CULL_FACE);c.enable(b.BLEND);b.bindBuffer(b.ARRAY_BUFFER,Da);b.vertexAttribPointer(A,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(J,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,na);b.uniformMatrix4fv(r,!1,D.projectionMatrix.elements);c.activeTexture(b.TEXTURE0);b.uniform1i(q,0);N=x=0;(B=p.fog)?(b.uniform3f(y,B.color.r,B.color.g,B.color.b),B.isFog?(b.uniform1f(w,B.near),b.uniform1f(z,B.far),b.uniform1i(t,1),N=x=1):B.isFogExp2&&(b.uniform1f(l,B.density),
    b.uniform1i(t,2),N=x=2)):(b.uniform1i(t,0),N=x=0);for(var C=0,E=v.length;C<E;C++)B=v[C],B.modelViewMatrix.multiplyMatrices(D.matrixWorldInverse,B.matrixWorld),B.z=-B.modelViewMatrix.elements[14];v.sort(Ha);for(var va=[],C=0,E=v.length;C<E;C++){B=v[C];var G=B.material;if(!1!==G.visible){B.onBeforeRender(a,p,D,void 0,G,void 0);b.uniform1f(I,G.alphaTest);b.uniformMatrix4fv(u,!1,B.modelViewMatrix.elements);B.matrixWorld.decompose(pd,la,S);va[0]=S.x;va[1]=S.y;var qd=0;p.fog&&G.fog&&(qd=N);x!==qd&&(b.uniform1i(t,
    qd),x=qd);null!==G.map?(b.uniform2f(f,G.map.offset.x,G.map.offset.y),b.uniform2f(g,G.map.repeat.x,G.map.repeat.y)):(b.uniform2f(f,0,0),b.uniform2f(g,1,1));b.uniform1f(n,G.opacity);b.uniform3f(m,G.color.r,G.color.g,G.color.b);b.uniform1f(h,G.rotation);b.uniform2fv(k,va);c.setBlending(G.blending,G.blendEquation,G.blendSrc,G.blendDst,G.blendEquationAlpha,G.blendSrcAlpha,G.blendDstAlpha,G.premultipliedAlpha);c.buffers.depth.setTest(G.depthTest);c.buffers.depth.setMask(G.depthWrite);c.buffers.color.setMask(G.colorWrite);
    d.setTexture2D(G.map||Te,0);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);B.onAfterRender(a,p,D,void 0,G,void 0)}}c.enable(b.CULL_FACE);c.reset()}}}function P(){Object.defineProperty(this,"id",{value:ag++});this.uuid=Q.generateUUID();this.name="";this.type="Material";this.lights=this.fog=!0;this.blending=1;this.side=0;this.flatShading=!1;this.vertexColors=0;this.opacity=1;this.transparent=!1;this.blendSrc=204;this.blendDst=205;this.blendEquation=100;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=
    null;this.depthFunc=3;this.depthWrite=this.depthTest=!0;this.clippingPlanes=null;this.clipShadows=this.clipIntersection=!1;this.colorWrite=!0;this.precision=null;this.polygonOffset=!1;this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.dithering=!1;this.alphaTest=0;this.premultipliedAlpha=!1;this.overdraw=0;this.visible=!0;this.userData={};this.needsUpdate=!0}function eb(a){P.call(this);this.type="MeshDepthMaterial";this.depthPacking=3200;this.morphTargets=this.skinning=!1;this.displacementMap=
    this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.setValues(a)}function fb(a){P.call(this);this.type="MeshDistanceMaterial";this.referencePosition=new p;this.nearDistance=1;this.farDistance=1E3;this.morphTargets=this.skinning=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.lights=this.fog=!1;this.setValues(a)}function Xa(a,b){this.min=void 0!==
    a?a:new p(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new p(-Infinity,-Infinity,-Infinity)}function Ia(a,b){this.center=void 0!==a?a:new p;this.radius=void 0!==b?b:0}function Ea(a,b){this.normal=void 0!==a?a:new p(1,0,0);this.constant=void 0!==b?b:0}function rd(a,b,c,d,e,f){this.planes=[void 0!==a?a:new Ea,void 0!==b?b:new Ea,void 0!==c?c:new Ea,void 0!==d?d:new Ea,void 0!==e?e:new Ea,void 0!==f?f:new Ea]}function Ue(a,b,c){function d(b,c,d,e,f,g){var h=b.geometry;var k=n;var m=b.customDepthMaterial;
    d&&(k=u,m=b.customDistanceMaterial);m?k=m:(m=!1,c.morphTargets&&(h&&h.isBufferGeometry?m=h.morphAttributes&&h.morphAttributes.position&&0<h.morphAttributes.position.length:h&&h.isGeometry&&(m=h.morphTargets&&0<h.morphTargets.length)),b.isSkinnedMesh&&!1===c.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",b),b=b.isSkinnedMesh&&c.skinning,h=0,m&&(h|=1),b&&(h|=2),k=k[h]);a.localClippingEnabled&&!0===c.clipShadows&&0!==c.clippingPlanes.length&&(h=
    k.uuid,m=c.uuid,b=r[h],void 0===b&&(b={},r[h]=b),h=b[m],void 0===h&&(h=k.clone(),b[m]=h),k=h);k.visible=c.visible;k.wireframe=c.wireframe;m=c.side;A.renderSingleSided&&2==m&&(m=0);A.renderReverseSided&&(0===m?m=1:1===m&&(m=0));k.side=m;k.clipShadows=c.clipShadows;k.clippingPlanes=c.clippingPlanes;k.clipIntersection=c.clipIntersection;k.wireframeLinewidth=c.wireframeLinewidth;k.linewidth=c.linewidth;d&&k.isMeshDistanceMaterial&&(k.referencePosition.copy(e),k.nearDistance=f,k.farDistance=g);return k}
    function e(c,h,g,k){var m;if(!1!==c.visible){if(c.layers.test(h.layers)&&(c.isMesh||c.isLine||c.isPoints)&&c.castShadow&&(!c.frustumCulled||f.intersectsObject(c))){c.modelViewMatrix.multiplyMatrices(g.matrixWorldInverse,c.matrixWorld);var n=b.update(c),u=c.material;if(Array.isArray(u))for(var r=n.groups,t=0,l=r.length;t<l;t++){var I=r[t];(m=u[I.materialIndex])&&m.visible&&(m=d(c,m,k,q,g.near,g.far),a.renderBufferDirect(g,null,n,m,c,I))}else u.visible&&(m=d(c,u,k,q,g.near,g.far),a.renderBufferDirect(g,
    null,n,m,c,null))}c=c.children;n=0;for(u=c.length;n<u;n++)e(c[n],h,g,k)}}var f=new rd,g=new O,h=new D,k=new D(c,c),m=new p,q=new p,n=Array(4),u=Array(4),r={},t=[new p(1,0,0),new p(-1,0,0),new p(0,0,1),new p(0,0,-1),new p(0,1,0),new p(0,-1,0)],l=[new p(0,1,0),new p(0,1,0),new p(0,1,0),new p(0,1,0),new p(0,0,1),new p(0,0,-1)],w=[new aa,new aa,new aa,new aa,new aa,new aa];for(c=0;4!==c;++c){var z=0!==(c&1),y=0!==(c&2),I=new eb({depthPacking:3201,morphTargets:z,skinning:y});n[c]=I;z=new fb({morphTargets:z,
    skinning:y});u[c]=z}var A=this;this.enabled=!1;this.autoUpdate=!0;this.needsUpdate=!1;this.type=1;this.renderSingleSided=this.renderReverseSided=!0;this.render=function(b,c,d){if(!1!==A.enabled&&(!1!==A.autoUpdate||!1!==A.needsUpdate)&&0!==b.length){var n=a.state;n.disable(a.context.BLEND);n.buffers.color.setClear(1,1,1,1);n.buffers.depth.setTest(!0);n.setScissorTest(!1);for(var u,r=0,I=b.length;r<I;r++){var v=b[r];u=v.shadow;var p=v&&v.isPointLight;if(void 0===u)console.warn("THREE.WebGLShadowMap:",
    v,"has no shadow.");else{var z=u.camera;h.copy(u.mapSize);h.min(k);if(p){var y=h.x,J=h.y;w[0].set(2*y,J,y,J);w[1].set(0,J,y,J);w[2].set(3*y,J,y,J);w[3].set(y,J,y,J);w[4].set(3*y,0,y,J);w[5].set(y,0,y,J);h.x*=4;h.y*=2}null===u.map&&(u.map=new kb(h.x,h.y,{minFilter:1003,magFilter:1003,format:1023}),u.map.texture.name=v.name+".shadowMap",z.updateProjectionMatrix());u.isSpotLightShadow&&u.update(v);y=u.map;J=u.matrix;q.setFromMatrixPosition(v.matrixWorld);z.position.copy(q);p?(u=6,J.makeTranslation(-q.x,
    -q.y,-q.z)):(u=1,m.setFromMatrixPosition(v.target.matrixWorld),z.lookAt(m),z.updateMatrixWorld(),J.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),J.multiply(z.projectionMatrix),J.multiply(z.matrixWorldInverse));a.setRenderTarget(y);a.clear();for(v=0;v<u;v++)p&&(m.copy(z.position),m.add(t[v]),z.up.copy(l[v]),z.lookAt(m),z.updateMatrixWorld(),n.viewport(w[v])),g.multiplyMatrices(z.projectionMatrix,z.matrixWorldInverse),f.setFromMatrix(g),e(c,d,z,p)}}A.needsUpdate=!1}}}function bg(a){var b={};return{get:function(a){a.isInterleavedBufferAttribute&&
    (a=a.data);return b[a.uuid]},remove:function(c){c.isInterleavedBufferAttribute&&(c=c.data);var d=b[c.uuid];d&&(a.deleteBuffer(d.buffer),delete b[c.uuid])},update:function(c,d){c.isInterleavedBufferAttribute&&(c=c.data);var e=b[c.uuid];if(void 0===e){var e=c.uuid,f=c.array,g=c.dynamic?a.DYNAMIC_DRAW:a.STATIC_DRAW,h=a.createBuffer();a.bindBuffer(d,h);a.bufferData(d,f,g);c.onUploadCallback();d=a.FLOAT;f instanceof Float32Array?d=a.FLOAT:f instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):
    f instanceof Uint16Array?d=a.UNSIGNED_SHORT:f instanceof Int16Array?d=a.SHORT:f instanceof Uint32Array?d=a.UNSIGNED_INT:f instanceof Int32Array?d=a.INT:f instanceof Int8Array?d=a.BYTE:f instanceof Uint8Array&&(d=a.UNSIGNED_BYTE);b[e]={buffer:h,type:d,bytesPerElement:f.BYTES_PER_ELEMENT,version:c.version}}else e.version<c.version&&(f=c,h=f.array,g=f.updateRange,a.bindBuffer(d,e.buffer),!1===f.dynamic?a.bufferData(d,h,a.STATIC_DRAW):-1===g.count?a.bufferSubData(d,0,h):0===g.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):
    (a.bufferSubData(d,g.offset*h.BYTES_PER_ELEMENT,h.subarray(g.offset,g.offset+g.count)),g.count=-1),e.version=c.version)}}}function gb(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||gb.DefaultOrder}function Wd(){this.mask=1}function x(){Object.defineProperty(this,"id",{value:cg++});this.uuid=Q.generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=x.DefaultUp.clone();var a=new p,b=new gb,c=new ha,d=new p(1,1,1);b.onChange(function(){c.setFromEuler(b,
    !1)});c.onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,value:b},quaternion:{enumerable:!0,value:c},scale:{enumerable:!0,value:d},modelViewMatrix:{value:new O},normalMatrix:{value:new ma}});this.matrix=new O;this.matrixWorld=new O;this.matrixAutoUpdate=x.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=!1;this.layers=new Wd;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=
    0;this.userData={}}function Ta(){x.call(this);this.type="Camera";this.matrixWorldInverse=new O;this.projectionMatrix=new O}function Lb(a,b,c,d,e,f){Ta.call(this);this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()}function Ya(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d&&d.isVector3?d:new p;this.vertexNormals=Array.isArray(d)?d:[];this.color=e&&e.isColor?
    e:new H;this.vertexColors=Array.isArray(e)?e:[];this.materialIndex=void 0!==f?f:0}function L(){Object.defineProperty(this,"id",{value:dg+=2});this.uuid=Q.generateUUID();this.name="";this.type="Geometry";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=
    this.uvsNeedUpdate=this.verticesNeedUpdate=this.elementsNeedUpdate=!1}function M(a,b,c){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.uuid=Q.generateUUID();this.name="";this.array=a;this.itemSize=b;this.count=void 0!==a?a.length/b:0;this.normalized=!0===c;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.onUploadCallback=function(){};this.version=0}function uc(a,b,c){M.call(this,new Int8Array(a),b,c)}function vc(a,b,c){M.call(this,new Uint8Array(a),
    b,c)}function wc(a,b,c){M.call(this,new Uint8ClampedArray(a),b,c)}function xc(a,b,c){M.call(this,new Int16Array(a),b,c)}function ob(a,b,c){M.call(this,new Uint16Array(a),b,c)}function yc(a,b,c){M.call(this,new Int32Array(a),b,c)}function pb(a,b,c){M.call(this,new Uint32Array(a),b,c)}function B(a,b,c){M.call(this,new Float32Array(a),b,c)}function zc(a,b,c){M.call(this,new Float64Array(a),b,c)}function Ve(){this.indices=[];this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=
    [];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.uvsNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.verticesNeedUpdate=!1}function Xd(a){if(0===a.length)return-Infinity;for(var b=a[0],c=1,d=a.length;c<d;++c)a[c]>b&&(b=a[c]);return b}function E(){Object.defineProperty(this,"id",{value:eg+=2});this.uuid=Q.generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes=
    {};this.groups=[];this.boundingSphere=this.boundingBox=null;this.drawRange={start:0,count:Infinity}}function Mb(a,b,c,d,e,f){L.call(this);this.type="BoxGeometry";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};this.fromBufferGeometry(new qb(a,b,c,d,e,f));this.mergeVertices()}function qb(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,l,Ha,Da,na){var t=f/Ha,v=g/Da,I=f/2,A=g/2,w=l/2;g=Ha+1;var z=Da+1,y=f=0,J,x,B=new p;for(x=0;x<z;x++){var D=x*v-A;for(J=0;J<g;J++)B[a]=
    (J*t-I)*d,B[b]=D*e,B[c]=w,m.push(B.x,B.y,B.z),B[a]=0,B[b]=0,B[c]=0<l?1:-1,q.push(B.x,B.y,B.z),n.push(J/Ha),n.push(1-x/Da),f+=1}for(x=0;x<Da;x++)for(J=0;J<Ha;J++)a=u+J+g*(x+1),b=u+(J+1)+g*(x+1),c=u+(J+1)+g*x,k.push(u+J+g*x,a,c),k.push(a,b,c),y+=6;h.addGroup(r,y,na);r+=y;u+=f}E.call(this);this.type="BoxBufferGeometry";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};var h=this;a=a||1;b=b||1;c=c||1;d=Math.floor(d)||1;e=Math.floor(e)||1;f=Math.floor(f)||1;var k=
    [],m=[],q=[],n=[],u=0,r=0;g("z","y","x",-1,-1,c,b,a,f,e,0);g("z","y","x",1,-1,c,b,-a,f,e,1);g("x","z","y",1,1,a,c,b,d,f,2);g("x","z","y",1,-1,a,c,-b,d,f,3);g("x","y","z",1,-1,a,b,c,d,e,4);g("x","y","z",-1,-1,a,b,-c,d,e,5);this.setIndex(k);this.addAttribute("position",new B(m,3));this.addAttribute("normal",new B(q,3));this.addAttribute("uv",new B(n,2))}function Ac(a,b,c,d){L.call(this);this.type="PlaneGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};this.fromBufferGeometry(new rb(a,
    b,c,d));this.mergeVertices()}function rb(a,b,c,d){E.call(this);this.type="PlaneBufferGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};a=a||1;b=b||1;var e=a/2,f=b/2;c=Math.floor(c)||1;d=Math.floor(d)||1;var g=c+1,h=d+1,k=a/c,m=b/d,q=[],n=[],u=[],r=[];for(a=0;a<h;a++){var t=a*m-f;for(b=0;b<g;b++)n.push(b*k-e,-t,0),u.push(0,0,1),r.push(b/c),r.push(1-a/d)}for(a=0;a<d;a++)for(b=0;b<c;b++)e=b+g*(a+1),f=b+1+g*(a+1),h=b+1+g*a,q.push(b+g*a,e,h),q.push(e,f,h);this.setIndex(q);this.addAttribute("position",
    new B(n,3));this.addAttribute("normal",new B(u,3));this.addAttribute("uv",new B(r,2))}function Aa(a){P.call(this);this.type="MeshBasicMaterial";this.color=new H(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.lights=this.morphTargets=this.skinning=
    !1;this.setValues(a)}function Fa(a){P.call(this);this.type="ShaderMaterial";this.defines={};this.uniforms={};this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.clipping=this.lights=this.fog=!1;this.extensions={derivatives:!1,fragDepth:!1,
    drawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;void 0!==a&&(void 0!==a.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(a))}function sb(a,b){this.origin=void 0!==a?a:new p;this.direction=void 0!==b?b:new p}function Nb(a,b){this.start=void 0!==a?a:new p;this.end=void 0!==b?b:new p}function Za(a,b,c){this.a=void 0!==a?a:new p;this.b=void 0!==
    b?b:new p;this.c=void 0!==c?c:new p}function ra(a,b){x.call(this);this.type="Mesh";this.geometry=void 0!==a?a:new E;this.material=void 0!==b?b:new Aa({color:16777215*Math.random()});this.drawMode=0;this.updateMorphTargets()}function fg(a,b,c,d){function e(a,c){b.buffers.color.setClear(a.r,a.g,a.b,c,d)}var f=new H(0),g=0,h,k,m;return{getClearColor:function(){return f},setClearColor:function(a,b){f.set(a);g=void 0!==b?b:1;e(f,g)},getClearAlpha:function(){return g},setClearAlpha:function(a){g=a;e(f,
    g)},render:function(b,d,u,r){d=d.background;null===d?e(f,g):d&&d.isColor&&(e(d,1),r=!0);(a.autoClear||r)&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil);d&&d.isCubeTexture?(void 0===m&&(m=new ra(new qb(1,1,1),new Fa({uniforms:tb.cube.uniforms,vertexShader:tb.cube.vertexShader,fragmentShader:tb.cube.fragmentShader,side:1,depthTest:!0,depthWrite:!1,fog:!1})),m.geometry.removeAttribute("normal"),m.geometry.removeAttribute("uv"),m.onBeforeRender=function(a,b,c){this.matrixWorld.copyPosition(c.matrixWorld)},
    c.update(m.geometry)),m.material.uniforms.tCube.value=d,b.push(m,m.geometry,m.material,0,null)):d&&d.isTexture&&(void 0===h&&(h=new Lb(-1,1,1,-1,0,1),k=new ra(new rb(2,2),new Aa({depthTest:!1,depthWrite:!1,fog:!1})),c.update(k.geometry)),k.material.map=d,a.renderBufferDirect(h,null,k.geometry,k.material,k,null))}}}function gg(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.program&&b.program&&a.program!==b.program?a.program.id-b.program.id:a.material.id!==b.material.id?a.material.id-
    b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function hg(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function ig(){var a=[],b=0,c=[],d=[];return{opaque:c,transparent:d,init:function(){b=0;c.length=0;d.length=0},push:function(e,f,g,h,k){var m=a[b];void 0===m?(m={id:e.id,object:e,geometry:f,material:g,program:g.program,renderOrder:e.renderOrder,z:h,group:k},a[b]=m):(m.id=e.id,m.object=e,m.geometry=f,m.material=g,m.program=g.program,m.renderOrder=e.renderOrder,
    m.z=h,m.group=k);(!0===g.transparent?d:c).push(m);b++},sort:function(){1<c.length&&c.sort(gg);1<d.length&&d.sort(hg)}}}function jg(){var a={};return{get:function(b,c){b=b.id+","+c.id;c=a[b];void 0===c&&(c=new ig,a[b]=c);return c},dispose:function(){a={}}}}function kg(a,b){return Math.abs(b[1])-Math.abs(a[1])}function lg(a){var b={},c=new Float32Array(8);return{update:function(d,e,f,g){var h=d.morphTargetInfluences,k=h.length;d=b[e.id];if(void 0===d){d=[];for(var m=0;m<k;m++)d[m]=[m,0];b[e.id]=d}var q=
    f.morphTargets&&e.morphAttributes.position;f=f.morphNormals&&e.morphAttributes.normal;for(m=0;m<k;m++){var n=d[m];0!==n[1]&&(q&&e.removeAttribute("morphTarget"+m),f&&e.removeAttribute("morphNormal"+m))}for(m=0;m<k;m++)n=d[m],n[0]=m,n[1]=h[m];d.sort(kg);for(m=0;8>m;m++){if(n=d[m])if(h=n[0],n=n[1]){q&&e.addAttribute("morphTarget"+m,q[h]);f&&e.addAttribute("morphNormal"+m,f[h]);c[m]=n;continue}c[m]=0}g.getUniforms().setValue(a,"morphTargetInfluences",c)}}}function mg(a,b,c){var d,e,f;this.setMode=function(a){d=
    a};this.setIndex=function(a){e=a.type;f=a.bytesPerElement};this.render=function(b,h){a.drawElements(d,h,e,b*f);c.calls++;c.vertices+=h;d===a.TRIANGLES?c.faces+=h/3:d===a.POINTS&&(c.points+=h)};this.renderInstances=function(g,h,k){var m=b.get("ANGLE_instanced_arrays");null===m?console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):(m.drawElementsInstancedANGLE(d,k,e,h*f,g.maxInstancedCount),c.calls++,c.vertices+=
    k*g.maxInstancedCount,d===a.TRIANGLES?c.faces+=g.maxInstancedCount*k/3:d===a.POINTS&&(c.points+=g.maxInstancedCount*k))}}function ng(a,b,c){var d;this.setMode=function(a){d=a};this.render=function(b,f){a.drawArrays(d,b,f);c.calls++;c.vertices+=f;d===a.TRIANGLES?c.faces+=f/3:d===a.POINTS&&(c.points+=f)};this.renderInstances=function(e,f,g){var h=b.get("ANGLE_instanced_arrays");if(null===h)console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
    else{var k=e.attributes.position;k.isInterleavedBufferAttribute?(g=k.data.count,h.drawArraysInstancedANGLE(d,0,g,e.maxInstancedCount)):h.drawArraysInstancedANGLE(d,f,g,e.maxInstancedCount);c.calls++;c.vertices+=g*e.maxInstancedCount;d===a.TRIANGLES?c.faces+=e.maxInstancedCount*g/3:d===a.POINTS&&(c.points+=e.maxInstancedCount*g)}}}function og(a,b,c){function d(a){a=a.target;var h=e[a.id];null!==h.index&&b.remove(h.index);for(var g in h.attributes)b.remove(h.attributes[g]);a.removeEventListener("dispose",
    d);delete e[a.id];if(g=f[a.id])b.remove(g),delete f[a.id];if(g=f[h.id])b.remove(g),delete f[h.id];c.geometries--}var e={},f={};return{get:function(a,b){var f=e[b.id];if(f)return f;b.addEventListener("dispose",d);b.isBufferGeometry?f=b:b.isGeometry&&(void 0===b._bufferGeometry&&(b._bufferGeometry=(new E).setFromObject(a)),f=b._bufferGeometry);e[b.id]=f;c.geometries++;return f},update:function(c){var d=c.index,e=c.attributes;null!==d&&b.update(d,a.ELEMENT_ARRAY_BUFFER);for(var f in e)b.update(e[f],
    a.ARRAY_BUFFER);c=c.morphAttributes;for(f in c)for(var d=c[f],e=0,g=d.length;e<g;e++)b.update(d[e],a.ARRAY_BUFFER)},getWireframeAttribute:function(c){var d=f[c.id];if(d)return d;d=[];var e=c.index;var g=c.attributes;if(null!==e){var q=e.array;for(var n=0,u=q.length;n<u;n+=3){var r=q[n+0];g=q[n+1];e=q[n+2];d.push(r,g,g,e,e,r)}}else for(q=g.position.array,n=0,u=q.length/3-1;n<u;n+=3)r=n+0,g=n+1,e=n+2,d.push(r,g,g,e,e,r);d=new (65535<Xd(d)?pb:ob)(d,1);b.update(d,a.ELEMENT_ARRAY_BUFFER);return f[c.id]=
    d}}}function pg(){var a={};return{get:function(b){if(void 0!==a[b.id])return a[b.id];switch(b.type){case "DirectionalLight":var c={direction:new p,color:new H,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new D};break;case "SpotLight":c={position:new p,direction:new p,color:new H,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new D};break;case "PointLight":c={position:new p,color:new H,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new D,
    shadowCameraNear:1,shadowCameraFar:1E3};break;case "HemisphereLight":c={direction:new p,skyColor:new H,groundColor:new H};break;case "RectAreaLight":c={color:new H,position:new p,halfWidth:new p,halfHeight:new p}}return a[b.id]=c}}}function qg(){var a=new pg,b={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},c=new p,d=new O,e=new O;return{setup:function(f,
    g,h){for(var k,m=0,q=0,n=0,u=0,r=0,t=0,l=0,w=0,p=h.matrixWorldInverse,y=0,I=f.length;y<I;y++){var A=f[y];k=A.color;var J=A.intensity,Ha=A.distance,Da=A.shadow&&A.shadow.map?A.shadow.map.texture:null;if(A.isAmbientLight)m+=k.r*J,q+=k.g*J,n+=k.b*J;else if(A.isDirectionalLight){h=a.get(A);h.color.copy(A.color).multiplyScalar(A.intensity);h.direction.setFromMatrixPosition(A.matrixWorld);c.setFromMatrixPosition(A.target.matrixWorld);h.direction.sub(c);h.direction.transformDirection(p);if(h.shadow=A.castShadow)k=
    A.shadow,h.shadowBias=k.bias,h.shadowRadius=k.radius,h.shadowMapSize=k.mapSize;b.directionalShadowMap[u]=Da;b.directionalShadowMatrix[u]=A.shadow.matrix;b.directional[u]=h;u++}else if(A.isSpotLight){h=a.get(A);h.position.setFromMatrixPosition(A.matrixWorld);h.position.applyMatrix4(p);h.color.copy(k).multiplyScalar(J);h.distance=Ha;h.direction.setFromMatrixPosition(A.matrixWorld);c.setFromMatrixPosition(A.target.matrixWorld);h.direction.sub(c);h.direction.transformDirection(p);h.coneCos=Math.cos(A.angle);
    h.penumbraCos=Math.cos(A.angle*(1-A.penumbra));h.decay=0===A.distance?0:A.decay;if(h.shadow=A.castShadow)k=A.shadow,h.shadowBias=k.bias,h.shadowRadius=k.radius,h.shadowMapSize=k.mapSize;b.spotShadowMap[t]=Da;b.spotShadowMatrix[t]=A.shadow.matrix;b.spot[t]=h;t++}else if(A.isRectAreaLight)h=a.get(A),h.color.copy(k).multiplyScalar(J/(A.width*A.height)),h.position.setFromMatrixPosition(A.matrixWorld),h.position.applyMatrix4(p),e.identity(),d.copy(A.matrixWorld),d.premultiply(p),e.extractRotation(d),h.halfWidth.set(.5*
    A.width,0,0),h.halfHeight.set(0,.5*A.height,0),h.halfWidth.applyMatrix4(e),h.halfHeight.applyMatrix4(e),b.rectArea[l]=h,l++;else if(A.isPointLight){h=a.get(A);h.position.setFromMatrixPosition(A.matrixWorld);h.position.applyMatrix4(p);h.color.copy(A.color).multiplyScalar(A.intensity);h.distance=A.distance;h.decay=0===A.distance?0:A.decay;if(h.shadow=A.castShadow)k=A.shadow,h.shadowBias=k.bias,h.shadowRadius=k.radius,h.shadowMapSize=k.mapSize,h.shadowCameraNear=k.camera.near,h.shadowCameraFar=k.camera.far;
    b.pointShadowMap[r]=Da;b.pointShadowMatrix[r]=A.shadow.matrix;b.point[r]=h;r++}else A.isHemisphereLight&&(h=a.get(A),h.direction.setFromMatrixPosition(A.matrixWorld),h.direction.transformDirection(p),h.direction.normalize(),h.skyColor.copy(A.color).multiplyScalar(J),h.groundColor.copy(A.groundColor).multiplyScalar(J),b.hemi[w]=h,w++)}b.ambient[0]=m;b.ambient[1]=q;b.ambient[2]=n;b.directional.length=u;b.spot.length=t;b.rectArea.length=l;b.point.length=r;b.hemi.length=w;b.hash=u+","+r+","+t+","+l+","+
    w+","+g.length},state:b}}function rg(a,b){var c={};return{update:function(d){var e=b.frame,f=d.geometry,g=a.get(d,f);c[g.id]!==e&&(f.isGeometry&&g.updateFromObject(d),a.update(g),c[g.id]=e);return g},clear:function(){c={}}}}function sg(a){a=a.split("\n");for(var b=0;b<a.length;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function We(a,b,c){var d=a.createShader(b);a.shaderSource(d,c);a.compileShader(d);!1===a.getShaderParameter(d,a.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile.");
    ""!==a.getShaderInfoLog(d)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",b===a.VERTEX_SHADER?"vertex":"fragment",a.getShaderInfoLog(d),sg(c));return d}function Xe(a){switch(a){case 3E3:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw Error("unsupported encoding: "+
    a);}}function Yd(a,b){b=Xe(b);return"vec4 "+a+"( vec4 value ) { return "+b[0]+"ToLinear"+b[1]+"; }"}function tg(a,b){b=Xe(b);return"vec4 "+a+"( vec4 value ) { return LinearTo"+b[0]+b[1]+"; }"}function ug(a,b){switch(b){case 1:b="Linear";break;case 2:b="Reinhard";break;case 3:b="Uncharted2";break;case 4:b="OptimizedCineon";break;default:throw Error("unsupported toneMapping: "+b);}return"vec3 "+a+"( vec3 color ) { return "+b+"ToneMapping( color ); }"}function vg(a,b,c){a=a||{};return[a.derivatives||
    b.envMapCubeUV||b.bumpMap||b.normalMap||b.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(a.fragDepth||b.logarithmicDepthBuffer)&&c.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",a.drawBuffers&&c.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(a.shaderTextureLOD||b.envMap)&&c.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Bc).join("\n")}function wg(a){var b=[],c;for(c in a){var d=a[c];!1!==d&&b.push("#define "+
    c+" "+d)}return b.join("\n")}function Bc(a){return""!==a}function Ye(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights)}function Zd(a){return a.replace(/^[ \t]*#include +<([\w\d.]+)>/gm,function(a,c){a=R[c];if(void 0===a)throw Error("Can not resolve #include <"+c+">");return Zd(a)})}function Ze(a){return a.replace(/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
    function(a,c,d,e){a="";for(c=parseInt(c);c<parseInt(d);c++)a+=e.replace(/\[ i \]/g,"[ "+c+" ]");return a})}function xg(a,b,c,d,e,f){var g=a.context,h=d.defines,k=e.vertexShader,m=e.fragmentShader,q="SHADOWMAP_TYPE_BASIC";1===f.shadowMapType?q="SHADOWMAP_TYPE_PCF":2===f.shadowMapType&&(q="SHADOWMAP_TYPE_PCF_SOFT");var n="ENVMAP_TYPE_CUBE",u="ENVMAP_MODE_REFLECTION",r="ENVMAP_BLENDING_MULTIPLY";if(f.envMap){switch(d.envMap.mapping){case 301:case 302:n="ENVMAP_TYPE_CUBE";break;case 306:case 307:n="ENVMAP_TYPE_CUBE_UV";
    break;case 303:case 304:n="ENVMAP_TYPE_EQUIREC";break;case 305:n="ENVMAP_TYPE_SPHERE"}switch(d.envMap.mapping){case 302:case 304:u="ENVMAP_MODE_REFRACTION"}switch(d.combine){case 0:r="ENVMAP_BLENDING_MULTIPLY";break;case 1:r="ENVMAP_BLENDING_MIX";break;case 2:r="ENVMAP_BLENDING_ADD"}}var t=0<a.gammaFactor?a.gammaFactor:1,l=vg(d.extensions,f,b),p=wg(h),z=g.createProgram();d.isRawShaderMaterial?(h=[p].filter(Bc).join("\n"),0<h.length&&(h+="\n"),b=[l,p].filter(Bc).join("\n"),0<b.length&&(b+="\n")):(h=
    ["precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+e.name,p,f.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+t,"#define MAX_BONES "+f.maxBones,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+u:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":
    "",f.normalMap?"#define USE_NORMALMAP":"",f.displacementMap&&f.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.flatShading?"#define FLAT_SHADED":"",f.skinning?"#define USE_SKINNING":"",f.useVertexTexture?"#define BONE_TEXTURE":"",f.morphTargets?"#define USE_MORPHTARGETS":"",f.morphNormals&&
    !1===f.flatShading?"#define USE_MORPHNORMALS":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+q:"",f.sizeAttenuation?"#define USE_SIZEATTENUATION":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&b.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;",
    "\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Bc).join("\n"),b=[l,"precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+e.name,p,f.alphaTest?"#define ALPHATEST "+f.alphaTest:
    "","#define GAMMA_FACTOR "+t,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+n:"",f.envMap?"#define "+u:"",f.envMap?"#define "+r:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":
    "",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.gradientMap?"#define USE_GRADIENTMAP":"",f.flatShading?"#define FLAT_SHADED":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,"#define UNION_CLIPPING_PLANES "+(f.numClippingPlanes-f.numClipIntersection),f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+q:"",f.premultipliedAlpha?
    "#define PREMULTIPLIED_ALPHA":"",f.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&b.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",f.envMap&&b.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",0!==f.toneMapping?"#define TONE_MAPPING":"",0!==f.toneMapping?R.tonemapping_pars_fragment:"",0!==f.toneMapping?ug("toneMapping",f.toneMapping):
    "",f.dithering?"#define DITHERING":"",f.outputEncoding||f.mapEncoding||f.envMapEncoding||f.emissiveMapEncoding?R.encodings_pars_fragment:"",f.mapEncoding?Yd("mapTexelToLinear",f.mapEncoding):"",f.envMapEncoding?Yd("envMapTexelToLinear",f.envMapEncoding):"",f.emissiveMapEncoding?Yd("emissiveMapTexelToLinear",f.emissiveMapEncoding):"",f.outputEncoding?tg("linearToOutputTexel",f.outputEncoding):"",f.depthPacking?"#define DEPTH_PACKING "+d.depthPacking:"","\n"].filter(Bc).join("\n"));k=Zd(k);k=Ye(k,f);
    m=Zd(m);m=Ye(m,f);d.isShaderMaterial||(k=Ze(k),m=Ze(m));m=b+m;k=We(g,g.VERTEX_SHADER,h+k);m=We(g,g.FRAGMENT_SHADER,m);g.attachShader(z,k);g.attachShader(z,m);void 0!==d.index0AttributeName?g.bindAttribLocation(z,0,d.index0AttributeName):!0===f.morphTargets&&g.bindAttribLocation(z,0,"position");g.linkProgram(z);f=g.getProgramInfoLog(z);e=g.getShaderInfoLog(k);q=g.getShaderInfoLog(m);u=n=!0;if(!1===g.getProgramParameter(z,g.LINK_STATUS))n=!1,console.error("THREE.WebGLProgram: shader error: ",g.getError(),
    "gl.VALIDATE_STATUS",g.getProgramParameter(z,g.VALIDATE_STATUS),"gl.getProgramInfoLog",f,e,q);else if(""!==f)console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",f);else if(""===e||""===q)u=!1;u&&(this.diagnostics={runnable:n,material:d,programLog:f,vertexShader:{log:e,prefix:h},fragmentShader:{log:q,prefix:b}});g.deleteShader(k);g.deleteShader(m);var y;this.getUniforms=function(){void 0===y&&(y=new mb(g,z,a));return y};var I;this.getAttributes=function(){if(void 0===I){for(var a={},b=g.getProgramParameter(z,
    g.ACTIVE_ATTRIBUTES),c=0;c<b;c++){var d=g.getActiveAttrib(z,c).name;a[d]=g.getAttribLocation(z,d)}I=a}return I};this.destroy=function(){g.deleteProgram(z);this.program=void 0};Object.defineProperties(this,{uniforms:{get:function(){console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");return this.getUniforms()}},attributes:{get:function(){console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");return this.getAttributes()}}});this.id=yg++;this.code=c;this.usedTimes=1;
    this.program=z;this.vertexShader=k;this.fragmentShader=m;return this}function zg(a,b,c){function d(a,b){if(a)a.isTexture?c=a.encoding:a.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),c=a.texture.encoding);else var c=3E3;3E3===c&&b&&(c=3007);return c}var e=[],f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",
    MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow"},g="precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering".split(" ");
    this.getParameters=function(b,e,g,q,n,u,r){var h=f[b.type];if(r.isSkinnedMesh){var k=r.skeleton.bones;if(c.floatVertexTextures)k=1024;else{var m=Math.min(Math.floor((c.maxVertexUniforms-20)/4),k.length);m<k.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+k.length+" bones. This GPU supports "+m+"."),k=0):k=m}}else k=0;m=c.precision;null!==b.precision&&(m=c.getMaxPrecision(b.precision),m!==b.precision&&console.warn("THREE.WebGLProgram.getParameters:",b.precision,"not supported, using",m,"instead."));
    var l=a.getRenderTarget();return{shaderID:h,precision:m,supportsVertexTextures:c.vertexTextures,outputEncoding:d(l?l.texture:null,a.gammaOutput),map:!!b.map,mapEncoding:d(b.map,a.gammaInput),envMap:!!b.envMap,envMapMode:b.envMap&&b.envMap.mapping,envMapEncoding:d(b.envMap,a.gammaInput),envMapCubeUV:!!b.envMap&&(306===b.envMap.mapping||307===b.envMap.mapping),lightMap:!!b.lightMap,aoMap:!!b.aoMap,emissiveMap:!!b.emissiveMap,emissiveMapEncoding:d(b.emissiveMap,a.gammaInput),bumpMap:!!b.bumpMap,normalMap:!!b.normalMap,
    displacementMap:!!b.displacementMap,roughnessMap:!!b.roughnessMap,metalnessMap:!!b.metalnessMap,specularMap:!!b.specularMap,alphaMap:!!b.alphaMap,gradientMap:!!b.gradientMap,combine:b.combine,vertexColors:b.vertexColors,fog:!!q,useFog:b.fog,fogExp:q&&q.isFogExp2,flatShading:b.flatShading,sizeAttenuation:b.sizeAttenuation,logarithmicDepthBuffer:c.logarithmicDepthBuffer,skinning:b.skinning&&0<k,maxBones:k,useVertexTexture:c.floatVertexTextures,morphTargets:b.morphTargets,morphNormals:b.morphNormals,
    maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:e.directional.length,numPointLights:e.point.length,numSpotLights:e.spot.length,numRectAreaLights:e.rectArea.length,numHemiLights:e.hemi.length,numClippingPlanes:n,numClipIntersection:u,dithering:b.dithering,shadowMapEnabled:a.shadowMap.enabled&&r.receiveShadow&&0<g.length,shadowMapType:a.shadowMap.type,toneMapping:a.toneMapping,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:b.premultipliedAlpha,
    alphaTest:b.alphaTest,doubleSided:2===b.side,flipSided:1===b.side,depthPacking:void 0!==b.depthPacking?b.depthPacking:!1}};this.getProgramCode=function(b,c){var d=[];c.shaderID?d.push(c.shaderID):(d.push(b.fragmentShader),d.push(b.vertexShader));if(void 0!==b.defines)for(var e in b.defines)d.push(e),d.push(b.defines[e]);for(e=0;e<g.length;e++)d.push(c[g[e]]);d.push(b.onBeforeCompile.toString());d.push(a.gammaOutput);return d.join()};this.acquireProgram=function(c,d,f,g){for(var h,k=0,m=e.length;k<
    m;k++){var q=e[k];if(q.code===g){h=q;++h.usedTimes;break}}void 0===h&&(h=new xg(a,b,g,c,d,f),e.push(h));return h};this.releaseProgram=function(a){if(0===--a.usedTimes){var b=e.indexOf(a);e[b]=e[e.length-1];e.pop();a.destroy()}};this.programs=e}function Ag(a,b,c,d,e,f,g){function h(a,b){if(a.width>b||a.height>b){b/=Math.max(a.width,a.height);var c=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");c.width=Math.floor(a.width*b);c.height=Math.floor(a.height*b);c.getContext("2d").drawImage(a,
    0,0,a.width,a.height,0,0,c.width,c.height);console.warn("THREE.WebGLRenderer: image is too big ("+a.width+"x"+a.height+"). Resized to "+c.width+"x"+c.height,a);return c}return a}function k(a){return Q.isPowerOfTwo(a.width)&&Q.isPowerOfTwo(a.height)}function m(a,b){return a.generateMipmaps&&b&&1003!==a.minFilter&&1006!==a.minFilter}function q(b){return 1003===b||1004===b||1005===b?a.NEAREST:a.LINEAR}function n(b){b=b.target;b.removeEventListener("dispose",n);a:{var c=d.get(b);if(b.image&&c.__image__webglTextureCube)a.deleteTexture(c.__image__webglTextureCube);
    else{if(void 0===c.__webglInit)break a;a.deleteTexture(c.__webglTexture)}d.remove(b)}b.isVideoTexture&&delete y[b.id];g.textures--}function u(b){b=b.target;b.removeEventListener("dispose",u);var c=d.get(b),e=d.get(b.texture);if(b){void 0!==e.__webglTexture&&a.deleteTexture(e.__webglTexture);b.depthTexture&&b.depthTexture.dispose();if(b.isWebGLRenderTargetCube)for(e=0;6>e;e++)a.deleteFramebuffer(c.__webglFramebuffer[e]),c.__webglDepthbuffer&&a.deleteRenderbuffer(c.__webglDepthbuffer[e]);else a.deleteFramebuffer(c.__webglFramebuffer),
    c.__webglDepthbuffer&&a.deleteRenderbuffer(c.__webglDepthbuffer);d.remove(b.texture);d.remove(b)}g.textures--}function r(b,q){var u=d.get(b);if(0<b.version&&u.__version!==b.version){var r=b.image;if(void 0===r)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",b);else if(!1===r.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",b);else{void 0===u.__webglInit&&(u.__webglInit=!0,b.addEventListener("dispose",n),u.__webglTexture=
    a.createTexture(),b.isVideoTexture&&(y[b.id]=b),g.textures++);c.activeTexture(a.TEXTURE0+q);c.bindTexture(a.TEXTURE_2D,u.__webglTexture);a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,b.flipY);a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha);a.pixelStorei(a.UNPACK_ALIGNMENT,b.unpackAlignment);var l=h(b.image,e.maxTextureSize);(1001!==b.wrapS||1001!==b.wrapT||1003!==b.minFilter&&1006!==b.minFilter)&&!1===k(l)&&(q=l,q instanceof HTMLImageElement||q instanceof HTMLCanvasElement||q instanceof ImageBitmap?
    (r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),r.width=Q.floorPowerOfTwo(q.width),r.height=Q.floorPowerOfTwo(q.height),r.getContext("2d").drawImage(q,0,0,r.width,r.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+q.width+"x"+q.height+"). Resized to "+r.width+"x"+r.height,q),l=r):l=q);q=k(l);var r=f.convert(b.format),v=f.convert(b.type);t(a.TEXTURE_2D,b,q);var p=b.mipmaps;if(b.isDepthTexture){p=a.DEPTH_COMPONENT;if(1015===b.type){if(!z)throw Error("Float Depth Texture only supported in WebGL2.0");
    p=a.DEPTH_COMPONENT32F}else z&&(p=a.DEPTH_COMPONENT16);1026===b.format&&p===a.DEPTH_COMPONENT&&1012!==b.type&&1014!==b.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),b.type=1012,v=f.convert(b.type));1027===b.format&&(p=a.DEPTH_STENCIL,1020!==b.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),b.type=1020,v=f.convert(b.type)));c.texImage2D(a.TEXTURE_2D,0,p,l.width,l.height,0,r,
    v,null)}else if(b.isDataTexture)if(0<p.length&&q){for(var A=0,w=p.length;A<w;A++)l=p[A],c.texImage2D(a.TEXTURE_2D,A,r,l.width,l.height,0,r,v,l.data);b.generateMipmaps=!1}else c.texImage2D(a.TEXTURE_2D,0,r,l.width,l.height,0,r,v,l.data);else if(b.isCompressedTexture)for(A=0,w=p.length;A<w;A++)l=p[A],1023!==b.format&&1022!==b.format?-1<c.getCompressedTextureFormats().indexOf(r)?c.compressedTexImage2D(a.TEXTURE_2D,A,r,l.width,l.height,0,l.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):
    c.texImage2D(a.TEXTURE_2D,A,r,l.width,l.height,0,r,v,l.data);else if(0<p.length&&q){A=0;for(w=p.length;A<w;A++)l=p[A],c.texImage2D(a.TEXTURE_2D,A,r,r,v,l);b.generateMipmaps=!1}else c.texImage2D(a.TEXTURE_2D,0,r,r,v,l);m(b,q)&&a.generateMipmap(a.TEXTURE_2D);u.__version=b.version;if(b.onUpdate)b.onUpdate(b);return}}c.activeTexture(a.TEXTURE0+q);c.bindTexture(a.TEXTURE_2D,u.__webglTexture)}function t(c,g,h){h?(a.texParameteri(c,a.TEXTURE_WRAP_S,f.convert(g.wrapS)),a.texParameteri(c,a.TEXTURE_WRAP_T,
    f.convert(g.wrapT)),a.texParameteri(c,a.TEXTURE_MAG_FILTER,f.convert(g.magFilter)),a.texParameteri(c,a.TEXTURE_MIN_FILTER,f.convert(g.minFilter))):(a.texParameteri(c,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(c,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),1001===g.wrapS&&1001===g.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",g),a.texParameteri(c,a.TEXTURE_MAG_FILTER,q(g.magFilter)),a.texParameteri(c,
    a.TEXTURE_MIN_FILTER,q(g.minFilter)),1003!==g.minFilter&&1006!==g.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",g));!(h=b.get("EXT_texture_filter_anisotropic"))||1015===g.type&&null===b.get("OES_texture_float_linear")||1016===g.type&&null===b.get("OES_texture_half_float_linear")||!(1<g.anisotropy||d.get(g).__currentAnisotropy)||(a.texParameterf(c,h.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(g.anisotropy,
    e.getMaxAnisotropy())),d.get(g).__currentAnisotropy=g.anisotropy)}function l(b,e,g,h){var k=f.convert(e.texture.format),m=f.convert(e.texture.type);c.texImage2D(h,0,k,e.width,e.height,0,k,m,null);a.bindFramebuffer(a.FRAMEBUFFER,b);a.framebufferTexture2D(a.FRAMEBUFFER,g,h,d.get(e.texture).__webglTexture,0);a.bindFramebuffer(a.FRAMEBUFFER,null)}function p(b,c){a.bindRenderbuffer(a.RENDERBUFFER,b);c.depthBuffer&&!c.stencilBuffer?(a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_COMPONENT16,c.width,c.height),
    a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.RENDERBUFFER,b)):c.depthBuffer&&c.stencilBuffer?(a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_STENCIL,c.width,c.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.RENDERBUFFER,b)):a.renderbufferStorage(a.RENDERBUFFER,a.RGBA4,c.width,c.height);a.bindRenderbuffer(a.RENDERBUFFER,null)}var z="undefined"!==typeof WebGL2RenderingContext&&a instanceof window.WebGL2RenderingContext,y={};this.setTexture2D=r;this.setTextureCube=
    function(b,q){var u=d.get(b);if(6===b.image.length)if(0<b.version&&u.__version!==b.version){u.__image__webglTextureCube||(b.addEventListener("dispose",n),u.__image__webglTextureCube=a.createTexture(),g.textures++);c.activeTexture(a.TEXTURE0+q);c.bindTexture(a.TEXTURE_CUBE_MAP,u.__image__webglTextureCube);a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,b.flipY);q=b&&b.isCompressedTexture;for(var r=b.image[0]&&b.image[0].isDataTexture,l=[],v=0;6>v;v++)l[v]=q||r?r?b.image[v].image:b.image[v]:h(b.image[v],e.maxCubemapSize);
    var p=k(l[0]),w=f.convert(b.format),A=f.convert(b.type);t(a.TEXTURE_CUBE_MAP,b,p);for(v=0;6>v;v++)if(q)for(var y,I=l[v].mipmaps,z=0,x=I.length;z<x;z++)y=I[z],1023!==b.format&&1022!==b.format?-1<c.getCompressedTextureFormats().indexOf(w)?c.compressedTexImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,z,w,y.width,y.height,0,y.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,z,w,y.width,y.height,
    0,w,A,y.data);else r?c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,w,l[v].width,l[v].height,0,w,A,l[v].data):c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,w,w,A,l[v]);m(b,p)&&a.generateMipmap(a.TEXTURE_CUBE_MAP);u.__version=b.version;if(b.onUpdate)b.onUpdate(b)}else c.activeTexture(a.TEXTURE0+q),c.bindTexture(a.TEXTURE_CUBE_MAP,u.__image__webglTextureCube)};this.setTextureCubeDynamic=function(b,e){c.activeTexture(a.TEXTURE0+e);c.bindTexture(a.TEXTURE_CUBE_MAP,d.get(b).__webglTexture)};this.setupRenderTarget=
    function(b){var e=d.get(b),f=d.get(b.texture);b.addEventListener("dispose",u);f.__webglTexture=a.createTexture();g.textures++;var h=!0===b.isWebGLRenderTargetCube,n=k(b);if(h){e.__webglFramebuffer=[];for(var q=0;6>q;q++)e.__webglFramebuffer[q]=a.createFramebuffer()}else e.__webglFramebuffer=a.createFramebuffer();if(h){c.bindTexture(a.TEXTURE_CUBE_MAP,f.__webglTexture);t(a.TEXTURE_CUBE_MAP,b.texture,n);for(q=0;6>q;q++)l(e.__webglFramebuffer[q],b,a.COLOR_ATTACHMENT0,a.TEXTURE_CUBE_MAP_POSITIVE_X+q);
    m(b.texture,n)&&a.generateMipmap(a.TEXTURE_CUBE_MAP);c.bindTexture(a.TEXTURE_CUBE_MAP,null)}else c.bindTexture(a.TEXTURE_2D,f.__webglTexture),t(a.TEXTURE_2D,b.texture,n),l(e.__webglFramebuffer,b,a.COLOR_ATTACHMENT0,a.TEXTURE_2D),m(b.texture,n)&&a.generateMipmap(a.TEXTURE_2D),c.bindTexture(a.TEXTURE_2D,null);if(b.depthBuffer){e=d.get(b);f=!0===b.isWebGLRenderTargetCube;if(b.depthTexture){if(f)throw Error("target.depthTexture not supported in Cube render targets");if(b&&b.isWebGLRenderTargetCube)throw Error("Depth Texture with cube render targets is not supported");
    a.bindFramebuffer(a.FRAMEBUFFER,e.__webglFramebuffer);if(!b.depthTexture||!b.depthTexture.isDepthTexture)throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");d.get(b.depthTexture).__webglTexture&&b.depthTexture.image.width===b.width&&b.depthTexture.image.height===b.height||(b.depthTexture.image.width=b.width,b.depthTexture.image.height=b.height,b.depthTexture.needsUpdate=!0);r(b.depthTexture,0);e=d.get(b.depthTexture).__webglTexture;if(1026===b.depthTexture.format)a.framebufferTexture2D(a.FRAMEBUFFER,
    a.DEPTH_ATTACHMENT,a.TEXTURE_2D,e,0);else if(1027===b.depthTexture.format)a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.TEXTURE_2D,e,0);else throw Error("Unknown depthTexture format");}else if(f)for(e.__webglDepthbuffer=[],f=0;6>f;f++)a.bindFramebuffer(a.FRAMEBUFFER,e.__webglFramebuffer[f]),e.__webglDepthbuffer[f]=a.createRenderbuffer(),p(e.__webglDepthbuffer[f],b);else a.bindFramebuffer(a.FRAMEBUFFER,e.__webglFramebuffer),e.__webglDepthbuffer=a.createRenderbuffer(),p(e.__webglDepthbuffer,
    b);a.bindFramebuffer(a.FRAMEBUFFER,null)}};this.updateRenderTargetMipmap=function(b){var e=b.texture,f=k(b);m(e,f)&&(b=b.isWebGLRenderTargetCube?a.TEXTURE_CUBE_MAP:a.TEXTURE_2D,e=d.get(e).__webglTexture,c.bindTexture(b,e),a.generateMipmap(b),c.bindTexture(b,null))};this.updateVideoTextures=function(){for(var a in y)y[a].update()}}function Bg(){var a={};return{get:function(b){b=b.uuid;var c=a[b];void 0===c&&(c={},a[b]=c);return c},remove:function(b){delete a[b.uuid]},clear:function(){a={}}}}function Cg(a,
    b,c){function d(b,c,d){var e=new Uint8Array(4),f=a.createTexture();a.bindTexture(b,f);a.texParameteri(b,a.TEXTURE_MIN_FILTER,a.NEAREST);a.texParameteri(b,a.TEXTURE_MAG_FILTER,a.NEAREST);for(b=0;b<d;b++)a.texImage2D(c+b,0,a.RGBA,1,1,0,a.RGBA,a.UNSIGNED_BYTE,e);return f}function e(b){!0!==y[b]&&(a.enable(b),y[b]=!0)}function f(b){!1!==y[b]&&(a.disable(b),y[b]=!1)}function g(b,d,g,h,k,m,q,n){0!==b?e(a.BLEND):f(a.BLEND);if(5!==b){if(b!==J||n!==la)switch(b){case 2:n?(a.blendEquationSeparate(a.FUNC_ADD,
    a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE,a.ONE,a.ONE)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE));break;case 3:n?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR));break;case 4:n?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.SRC_COLOR,a.ZERO,a.SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,
    a.SRC_COLOR));break;default:n?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA))}H=E=C=D=B=x=null}else{k=k||d;m=m||g;q=q||h;if(d!==x||k!==C)a.blendEquationSeparate(c.convert(d),c.convert(k)),x=d,C=k;if(g!==B||h!==D||m!==E||q!==H)a.blendFuncSeparate(c.convert(g),c.convert(h),c.convert(m),c.convert(q)),
    B=g,D=h,E=m,H=q}J=b;la=n}function h(b){S!==b&&(b?a.frontFace(a.CW):a.frontFace(a.CCW),S=b)}function k(b){0!==b?(e(a.CULL_FACE),b!==K&&(1===b?a.cullFace(a.BACK):2===b?a.cullFace(a.FRONT):a.cullFace(a.FRONT_AND_BACK))):f(a.CULL_FACE);K=b}function m(b,c,d){if(b){if(e(a.POLYGON_OFFSET_FILL),L!==c||O!==d)a.polygonOffset(c,d),L=c,O=d}else f(a.POLYGON_OFFSET_FILL)}function q(b){void 0===b&&(b=a.TEXTURE0+Q-1);M!==b&&(a.activeTexture(b),M=b)}var n=new function(){var b=!1,c=new aa,d=null,e=new aa(0,0,0,0);
    return{setMask:function(c){d===c||b||(a.colorMask(c,c,c,c),d=c)},setLocked:function(a){b=a},setClear:function(b,d,f,g,h){!0===h&&(b*=g,d*=g,f*=g);c.set(b,d,f,g);!1===e.equals(c)&&(a.clearColor(b,d,f,g),e.copy(c))},reset:function(){b=!1;d=null;e.set(-1,0,0,0)}}},u=new function(){var b=!1,c=null,d=null,g=null;return{setTest:function(b){b?e(a.DEPTH_TEST):f(a.DEPTH_TEST)},setMask:function(d){c===d||b||(a.depthMask(d),c=d)},setFunc:function(b){if(d!==b){if(b)switch(b){case 0:a.depthFunc(a.NEVER);break;
    case 1:a.depthFunc(a.ALWAYS);break;case 2:a.depthFunc(a.LESS);break;case 3:a.depthFunc(a.LEQUAL);break;case 4:a.depthFunc(a.EQUAL);break;case 5:a.depthFunc(a.GEQUAL);break;case 6:a.depthFunc(a.GREATER);break;case 7:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}else a.depthFunc(a.LEQUAL);d=b}},setLocked:function(a){b=a},setClear:function(b){g!==b&&(a.clearDepth(b),g=b)},reset:function(){b=!1;g=d=c=null}}},r=new function(){var b=!1,c=null,d=null,g=null,h=null,k=null,m=null,n=null,q=null;
    return{setTest:function(b){b?e(a.STENCIL_TEST):f(a.STENCIL_TEST)},setMask:function(d){c===d||b||(a.stencilMask(d),c=d)},setFunc:function(b,c,e){if(d!==b||g!==c||h!==e)a.stencilFunc(b,c,e),d=b,g=c,h=e},setOp:function(b,c,d){if(k!==b||m!==c||n!==d)a.stencilOp(b,c,d),k=b,m=c,n=d},setLocked:function(a){b=a},setClear:function(b){q!==b&&(a.clearStencil(b),q=b)},reset:function(){b=!1;q=n=m=k=h=g=d=c=null}}},l=a.getParameter(a.MAX_VERTEX_ATTRIBS),v=new Uint8Array(l),p=new Uint8Array(l),z=new Uint8Array(l),
    y={},I=null,A=null,J=null,x=null,B=null,D=null,C=null,E=null,H=null,la=!1,S=null,K=null,N=null,L=null,O=null,Q=a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS),l=parseFloat(/^WebGL\ ([0-9])/.exec(a.getParameter(a.VERSION))[1]),V=1<=parseFloat(l),M=null,P={},R=new aa,G=new aa,Y={};Y[a.TEXTURE_2D]=d(a.TEXTURE_2D,a.TEXTURE_2D,1);Y[a.TEXTURE_CUBE_MAP]=d(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,6);n.setClear(0,0,0,1);u.setClear(1);r.setClear(0);e(a.DEPTH_TEST);u.setFunc(3);h(!1);k(1);e(a.CULL_FACE);
    e(a.BLEND);g(1);return{buffers:{color:n,depth:u,stencil:r},initAttributes:function(){for(var a=0,b=v.length;a<b;a++)v[a]=0},enableAttribute:function(c){v[c]=1;0===p[c]&&(a.enableVertexAttribArray(c),p[c]=1);0!==z[c]&&(b.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c,0),z[c]=0)},enableAttributeAndDivisor:function(c,d){v[c]=1;0===p[c]&&(a.enableVertexAttribArray(c),p[c]=1);z[c]!==d&&(b.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c,d),z[c]=d)},disableUnusedAttributes:function(){for(var b=
    0,c=p.length;b!==c;++b)p[b]!==v[b]&&(a.disableVertexAttribArray(b),p[b]=0)},enable:e,disable:f,getCompressedTextureFormats:function(){if(null===I&&(I=[],b.get("WEBGL_compressed_texture_pvrtc")||b.get("WEBGL_compressed_texture_s3tc")||b.get("WEBGL_compressed_texture_etc1")))for(var c=a.getParameter(a.COMPRESSED_TEXTURE_FORMATS),d=0;d<c.length;d++)I.push(c[d]);return I},useProgram:function(b){return A!==b?(a.useProgram(b),A=b,!0):!1},setBlending:g,setMaterial:function(b,c){2===b.side?f(a.CULL_FACE):
    e(a.CULL_FACE);var d=1===b.side;c&&(d=!d);h(d);!0===b.transparent?g(b.blending,b.blendEquation,b.blendSrc,b.blendDst,b.blendEquationAlpha,b.blendSrcAlpha,b.blendDstAlpha,b.premultipliedAlpha):g(0);u.setFunc(b.depthFunc);u.setTest(b.depthTest);u.setMask(b.depthWrite);n.setMask(b.colorWrite);m(b.polygonOffset,b.polygonOffsetFactor,b.polygonOffsetUnits)},setFlipSided:h,setCullFace:k,setLineWidth:function(b){b!==N&&(V&&a.lineWidth(b),N=b)},setPolygonOffset:m,setScissorTest:function(b){b?e(a.SCISSOR_TEST):
    f(a.SCISSOR_TEST)},activeTexture:q,bindTexture:function(b,c){null===M&&q();var d=P[M];void 0===d&&(d={type:void 0,texture:void 0},P[M]=d);if(d.type!==b||d.texture!==c)a.bindTexture(b,c||Y[b]),d.type=b,d.texture=c},compressedTexImage2D:function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(ea){console.error("THREE.WebGLState:",ea)}},texImage2D:function(){try{a.texImage2D.apply(a,arguments)}catch(ea){console.error("THREE.WebGLState:",ea)}},scissor:function(b){!1===R.equals(b)&&(a.scissor(b.x,
    b.y,b.z,b.w),R.copy(b))},viewport:function(b){!1===G.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),G.copy(b))},reset:function(){for(var b=0;b<p.length;b++)1===p[b]&&(a.disableVertexAttribArray(b),p[b]=0);y={};M=I=null;P={};K=S=J=A=null;n.reset();u.reset();r.reset()}}}function Dg(a,b,c){function d(b){if("highp"===b){if(0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision)return"highp";b="mediump"}return"mediump"===b&&
    0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision?"mediump":"lowp"}var e,f=void 0!==c.precision?c.precision:"highp",g=d(f);g!==f&&(console.warn("THREE.WebGLRenderer:",f,"not supported, using",g,"instead."),f=g);c=!0===c.logarithmicDepthBuffer;var g=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),h=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS),k=a.getParameter(a.MAX_TEXTURE_SIZE),m=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE),
    q=a.getParameter(a.MAX_VERTEX_ATTRIBS),n=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS),u=a.getParameter(a.MAX_VARYING_VECTORS),r=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS),l=0<h,v=!!b.get("OES_texture_float");return{getMaxAnisotropy:function(){if(void 0!==e)return e;var c=b.get("EXT_texture_filter_anisotropic");return e=null!==c?a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:d,precision:f,logarithmicDepthBuffer:c,maxTextures:g,maxVertexTextures:h,maxTextureSize:k,maxCubemapSize:m,
    maxAttributes:q,maxVertexUniforms:n,maxVaryings:u,maxFragmentUniforms:r,vertexTextures:l,floatFragmentTextures:v,floatVertexTextures:l&&v}}function ba(a,b,c,d){Ta.call(this);this.type="PerspectiveCamera";this.fov=void 0!==a?a:50;this.zoom=1;this.near=void 0!==c?c:.1;this.far=void 0!==d?d:2E3;this.focus=10;this.aspect=void 0!==b?b:1;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}function ud(a){ba.call(this);this.cameras=a||[]}function be(a){function b(){if(null!==
    d&&d.isPresenting){var b=d.getEyeParameters("left"),e=b.renderWidth,b=b.renderHeight;n=a.getPixelRatio();q=a.getSize();a.setDrawingBufferSize(2*e,b,1)}else c.enabled&&a.setDrawingBufferSize(q.width,q.height,n)}var c=this,d=null,e=null,f=null;"undefined"!==typeof window&&"VRFrameData"in window&&(e=new window.VRFrameData);var g=new O,h=new ba;h.bounds=new aa(0,0,.5,1);h.layers.enable(1);var k=new ba;k.bounds=new aa(.5,0,.5,1);k.layers.enable(2);var m=new ud([h,k]);m.layers.enable(1);m.layers.enable(2);
    var q,n;"undefined"!==typeof window&&window.addEventListener("vrdisplaypresentchange",b,!1);this.enabled=!1;this.getDevice=function(){return d};this.setDevice=function(a){void 0!==a&&(d=a)};this.setPoseTarget=function(a){void 0!==a&&(f=a)};this.getCamera=function(a){if(null===d)return a;d.depthNear=a.near;d.depthFar=a.far;d.getFrameData(e);var b=e.pose,c=null!==f?f:a;null!==b.position?c.position.fromArray(b.position):c.position.set(0,0,0);null!==b.orientation&&c.quaternion.fromArray(b.orientation);
    c.updateMatrixWorld();if(!1===d.isPresenting)return a;h.near=a.near;k.near=a.near;h.far=a.far;k.far=a.far;m.matrixWorld.copy(a.matrixWorld);m.matrixWorldInverse.copy(a.matrixWorldInverse);h.matrixWorldInverse.fromArray(e.leftViewMatrix);k.matrixWorldInverse.fromArray(e.rightViewMatrix);a=c.parent;null!==a&&(g.getInverse(a.matrixWorld),h.matrixWorldInverse.multiply(g),k.matrixWorldInverse.multiply(g));h.matrixWorld.getInverse(h.matrixWorldInverse);k.matrixWorld.getInverse(k.matrixWorldInverse);h.projectionMatrix.fromArray(e.leftProjectionMatrix);
    k.projectionMatrix.fromArray(e.rightProjectionMatrix);m.projectionMatrix.copy(h.projectionMatrix);a=d.getLayers();a.length&&(a=a[0],null!==a.leftBounds&&4===a.leftBounds.length&&h.bounds.fromArray(a.leftBounds),null!==a.rightBounds&&4===a.rightBounds.length&&k.bounds.fromArray(a.rightBounds));return m};this.submitFrame=function(){d&&d.isPresenting&&d.submitFrame()};this.dispose=function(){"undefined"!==typeof window&&window.removeEventListener("vrdisplaypresentchange",b)}}function Eg(a){var b={};
    return{get:function(c){if(void 0!==b[c])return b[c];switch(c){case "WEBGL_depth_texture":var d=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case "EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||
    a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case "WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case "WEBGL_compressed_texture_etc1":d=a.getExtension("WEBGL_compressed_texture_etc1");break;default:d=a.getExtension(c)}null===d&&console.warn("THREE.WebGLRenderer: "+c+" extension not supported.");return b[c]=d}}}function Fg(){function a(){m.value!==
    d&&(m.value=d,m.needsUpdate=0<e);c.numPlanes=e;c.numIntersection=0}function b(a,b,d,e){var f=null!==a?a.length:0,g=null;if(0!==f){g=m.value;if(!0!==e||null===g){e=d+4*f;b=b.matrixWorldInverse;k.getNormalMatrix(b);if(null===g||g.length<e)g=new Float32Array(e);for(e=0;e!==f;++e,d+=4)h.copy(a[e]).applyMatrix4(b,k),h.normal.toArray(g,d),g[d+3]=h.constant}m.value=g;m.needsUpdate=!0}c.numPlanes=f;return g}var c=this,d=null,e=0,f=!1,g=!1,h=new Ea,k=new ma,m={value:null,needsUpdate:!1};this.uniform=m;this.numIntersection=
    this.numPlanes=0;this.init=function(a,c,g){var h=0!==a.length||c||0!==e||f;f=c;d=b(a,g,0);e=a.length;return h};this.beginShadows=function(){g=!0;b(null)};this.endShadows=function(){g=!1;a()};this.setState=function(c,h,k,l,t,v){if(!f||null===c||0===c.length||g&&!k)g?b(null):a();else{k=g?0:e;var n=4*k,q=t.clippingState||null;m.value=q;q=b(c,l,n,v);for(c=0;c!==n;++c)q[c]=d[c];t.clippingState=q;this.numIntersection=h?this.numPlanes:0;this.numPlanes+=k}}}function af(a,b){return{convert:function(c){if(1E3===
    c)return a.REPEAT;if(1001===c)return a.CLAMP_TO_EDGE;if(1002===c)return a.MIRRORED_REPEAT;if(1003===c)return a.NEAREST;if(1004===c)return a.NEAREST_MIPMAP_NEAREST;if(1005===c)return a.NEAREST_MIPMAP_LINEAR;if(1006===c)return a.LINEAR;if(1007===c)return a.LINEAR_MIPMAP_NEAREST;if(1008===c)return a.LINEAR_MIPMAP_LINEAR;if(1009===c)return a.UNSIGNED_BYTE;if(1017===c)return a.UNSIGNED_SHORT_4_4_4_4;if(1018===c)return a.UNSIGNED_SHORT_5_5_5_1;if(1019===c)return a.UNSIGNED_SHORT_5_6_5;if(1010===c)return a.BYTE;
    if(1011===c)return a.SHORT;if(1012===c)return a.UNSIGNED_SHORT;if(1013===c)return a.INT;if(1014===c)return a.UNSIGNED_INT;if(1015===c)return a.FLOAT;if(1016===c){var d=b.get("OES_texture_half_float");if(null!==d)return d.HALF_FLOAT_OES}if(1021===c)return a.ALPHA;if(1022===c)return a.RGB;if(1023===c)return a.RGBA;if(1024===c)return a.LUMINANCE;if(1025===c)return a.LUMINANCE_ALPHA;if(1026===c)return a.DEPTH_COMPONENT;if(1027===c)return a.DEPTH_STENCIL;if(100===c)return a.FUNC_ADD;if(101===c)return a.FUNC_SUBTRACT;
    if(102===c)return a.FUNC_REVERSE_SUBTRACT;if(200===c)return a.ZERO;if(201===c)return a.ONE;if(202===c)return a.SRC_COLOR;if(203===c)return a.ONE_MINUS_SRC_COLOR;if(204===c)return a.SRC_ALPHA;if(205===c)return a.ONE_MINUS_SRC_ALPHA;if(206===c)return a.DST_ALPHA;if(207===c)return a.ONE_MINUS_DST_ALPHA;if(208===c)return a.DST_COLOR;if(209===c)return a.ONE_MINUS_DST_COLOR;if(210===c)return a.SRC_ALPHA_SATURATE;if(2001===c||2002===c||2003===c||2004===c)if(d=b.get("WEBGL_compressed_texture_s3tc"),null!==
    d){if(2001===c)return d.COMPRESSED_RGB_S3TC_DXT1_EXT;if(2002===c)return d.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(2003===c)return d.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(2004===c)return d.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(2100===c||2101===c||2102===c||2103===c)if(d=b.get("WEBGL_compressed_texture_pvrtc"),null!==d){if(2100===c)return d.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(2101===c)return d.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(2102===c)return d.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(2103===c)return d.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(2151===
    c&&(d=b.get("WEBGL_compressed_texture_etc1"),null!==d))return d.COMPRESSED_RGB_ETC1_WEBGL;if(103===c||104===c)if(d=b.get("EXT_blend_minmax"),null!==d){if(103===c)return d.MIN_EXT;if(104===c)return d.MAX_EXT}return 1020===c&&(d=b.get("WEBGL_depth_texture"),null!==d)?d.UNSIGNED_INT_24_8_WEBGL:0}}}function ce(a){function b(){ia=new Eg(F);ia.get("WEBGL_depth_texture");ia.get("OES_texture_float");ia.get("OES_texture_float_linear");ia.get("OES_texture_half_float");ia.get("OES_texture_half_float_linear");
    ia.get("OES_standard_derivatives");ia.get("OES_element_index_uint");ia.get("ANGLE_instanced_arrays");pa=new af(F,ia);T=new Dg(F,ia,a);Z=new Cg(F,ia,pa);Z.scissor(X.copy(fa).multiplyScalar(wa));Z.viewport(nb.copy(da).multiplyScalar(wa));ca=new Bg;ga=new Ag(F,ia,Z,ca,T,pa,ha);qa=new bg(F);ra=new og(F,qa,ha);ta=new rg(ra,ba);xa=new lg(F);ma=new zg(S,ia,T);ua=new qg;sa=new jg;ja=new fg(S,Z,ra,J);ya=new ng(F,ia,ba);za=new mg(F,ia,ba);Aa=new Zf(S,F,Z,ga,T);Ba=new $f(S,F,Z,ga,T);S.info.programs=ma.programs;
    S.context=F;S.capabilities=T;S.extensions=ia;S.properties=ca;S.renderLists=sa;S.state=Z}function c(a){a.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");L=!0}function d(){console.log("THREE.WebGLRenderer: Context Restored.");L=!1;b()}function e(a){a=a.target;a.removeEventListener("dispose",e);f(a);ca.remove(a)}function f(a){var b=ca.get(a).program;a.program=void 0;void 0!==b&&ma.releaseProgram(b)}function g(a,b,c){a.render(function(a){S.renderBufferImmediate(a,b,c)})}function h(a){null!==
    Ca&&Ca(a);(a=ka.getDevice())&&a.isPresenting?a.requestAnimationFrame(h):window.requestAnimationFrame(h)}function k(a,b,c){if(!1!==a.visible){if(a.layers.test(b.layers))if(a.isLight)D.push(a),a.castShadow&&C.push(a);else if(a.isSprite)a.frustumCulled&&!$d.intersectsSprite(a)||H.push(a);else if(a.isLensFlare)la.push(a);else if(a.isImmediateRenderObject)c&&Ob.setFromMatrixPosition(a.matrixWorld).applyMatrix4(td),E.push(a,null,a.material,Ob.z,null);else if(a.isMesh||a.isLine||a.isPoints)if(a.isSkinnedMesh&&
    a.skeleton.update(),!a.frustumCulled||$d.intersectsObject(a)){c&&Ob.setFromMatrixPosition(a.matrixWorld).applyMatrix4(td);var d=ta.update(a),e=a.material;if(Array.isArray(e))for(var f=d.groups,g=0,h=f.length;g<h;g++){var m=f[g],n=e[m.materialIndex];n&&n.visible&&E.push(a,d,n,Ob.z,m)}else e.visible&&E.push(a,d,e,Ob.z,null)}a=a.children;g=0;for(h=a.length;g<h;g++)k(a[g],b,c)}}function m(a,b,c,d){for(var e=0,f=a.length;e<f;e++){var g=a[e],h=g.object,k=g.geometry,m=void 0===d?g.material:d,g=g.group;if(c.isArrayCamera){W=
    c;for(var n=c.cameras,u=0,l=n.length;u<l;u++){var r=n[u];if(h.layers.test(r.layers)){var t=r.bounds;Z.viewport(nb.set(t.x*ea,t.y*U,t.z*ea,t.w*U).multiplyScalar(wa));q(h,b,r,k,m,g)}}}else W=null,q(h,b,c,k,m,g)}}function q(a,b,c,d,e,f){a.onBeforeRender(S,b,c,d,e,f);a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,a.matrixWorld);a.normalMatrix.getNormalMatrix(a.modelViewMatrix);if(a.isImmediateRenderObject){var h=a.isMesh&&0>a.matrixWorld.determinant();Z.setMaterial(e,h);h=u(c,b.fog,e,a);R="";
    g(a,h,e)}else S.renderBufferDirect(c,b.fog,d,e,a,f);a.onAfterRender(S,b,c,d,e,f)}function n(a,b,c){var d=ca.get(a);c=ma.getParameters(a,ua.state,C,b,Ja.numPlanes,Ja.numIntersection,c);var g=ma.getProgramCode(a,c),h=d.program,k=!0;if(void 0===h)a.addEventListener("dispose",e);else if(h.code!==g)f(a);else{if(void 0!==c.shaderID)return;k=!1}k&&(c.shaderID?(h=tb[c.shaderID],d.shader={name:a.type,uniforms:Ga.clone(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader}):d.shader={name:a.type,
    uniforms:a.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader},a.onBeforeCompile(d.shader),h=ma.acquireProgram(a,d.shader,c,g),d.program=h,a.program=h);c=h.getAttributes();if(a.morphTargets)for(g=a.numSupportedMorphTargets=0;g<S.maxMorphTargets;g++)0<=c["morphTarget"+g]&&a.numSupportedMorphTargets++;if(a.morphNormals)for(g=a.numSupportedMorphNormals=0;g<S.maxMorphNormals;g++)0<=c["morphNormal"+g]&&a.numSupportedMorphNormals++;c=d.shader.uniforms;if(!a.isShaderMaterial&&!a.isRawShaderMaterial||
    !0===a.clipping)d.numClippingPlanes=Ja.numPlanes,d.numIntersection=Ja.numIntersection,c.clippingPlanes=Ja.uniform;d.fog=b;d.lightsHash=ua.state.hash;a.lights&&(c.ambientLightColor.value=ua.state.ambient,c.directionalLights.value=ua.state.directional,c.spotLights.value=ua.state.spot,c.rectAreaLights.value=ua.state.rectArea,c.pointLights.value=ua.state.point,c.hemisphereLights.value=ua.state.hemi,c.directionalShadowMap.value=ua.state.directionalShadowMap,c.directionalShadowMatrix.value=ua.state.directionalShadowMatrix,
    c.spotShadowMap.value=ua.state.spotShadowMap,c.spotShadowMatrix.value=ua.state.spotShadowMatrix,c.pointShadowMap.value=ua.state.pointShadowMap,c.pointShadowMatrix.value=ua.state.pointShadowMatrix);a=d.program.getUniforms();a=mb.seqWithValue(a.seq,c);d.uniformsList=a}function u(a,b,c,d){Y=0;var e=ca.get(c);sd&&(ae||a!==V)&&Ja.setState(c.clippingPlanes,c.clipIntersection,c.clipShadows,a,e,a===V&&c.id===P);!1===c.needsUpdate&&(void 0===e.program?c.needsUpdate=!0:c.fog&&e.fog!==b?c.needsUpdate=!0:c.lights&&
    e.lightsHash!==ua.state.hash?c.needsUpdate=!0:void 0===e.numClippingPlanes||e.numClippingPlanes===Ja.numPlanes&&e.numIntersection===Ja.numIntersection||(c.needsUpdate=!0));c.needsUpdate&&(n(c,b,d),c.needsUpdate=!1);var f=!1,g=!1,h=!1,k=e.program,m=k.getUniforms(),q=e.shader.uniforms;Z.useProgram(k.program)&&(h=g=f=!0);c.id!==P&&(P=c.id,g=!0);if(f||a!==V){m.setValue(F,"projectionMatrix",a.projectionMatrix);T.logarithmicDepthBuffer&&m.setValue(F,"logDepthBufFC",2/(Math.log(a.far+1)/Math.LN2));V!==(W||
    a)&&(V=W||a,h=g=!0);if(c.isShaderMaterial||c.isMeshPhongMaterial||c.isMeshStandardMaterial||c.envMap)f=m.map.cameraPosition,void 0!==f&&f.setValue(F,Ob.setFromMatrixPosition(a.matrixWorld));(c.isMeshPhongMaterial||c.isMeshLambertMaterial||c.isMeshBasicMaterial||c.isMeshStandardMaterial||c.isShaderMaterial||c.skinning)&&m.setValue(F,"viewMatrix",a.matrixWorldInverse)}if(c.skinning&&(m.setOptional(F,d,"bindMatrix"),m.setOptional(F,d,"bindMatrixInverse"),a=d.skeleton))if(f=a.bones,T.floatVertexTextures){if(void 0===
    a.boneTexture){var f=Math.sqrt(4*f.length),f=Q.ceilPowerOfTwo(f),f=Math.max(f,4),u=new Float32Array(f*f*4);u.set(a.boneMatrices);var r=new lb(u,f,f,1023,1015);a.boneMatrices=u;a.boneTexture=r;a.boneTextureSize=f}m.setValue(F,"boneTexture",a.boneTexture);m.setValue(F,"boneTextureSize",a.boneTextureSize)}else m.setOptional(F,a,"boneMatrices");g&&(m.setValue(F,"toneMappingExposure",S.toneMappingExposure),m.setValue(F,"toneMappingWhitePoint",S.toneMappingWhitePoint),c.lights&&(g=h,q.ambientLightColor.needsUpdate=
    g,q.directionalLights.needsUpdate=g,q.pointLights.needsUpdate=g,q.spotLights.needsUpdate=g,q.rectAreaLights.needsUpdate=g,q.hemisphereLights.needsUpdate=g),b&&c.fog&&(q.fogColor.value=b.color,b.isFog?(q.fogNear.value=b.near,q.fogFar.value=b.far):b.isFogExp2&&(q.fogDensity.value=b.density)),c.isMeshBasicMaterial?l(q,c):c.isMeshLambertMaterial?(l(q,c),c.emissiveMap&&(q.emissiveMap.value=c.emissiveMap)):c.isMeshPhongMaterial?(l(q,c),c.isMeshToonMaterial?(t(q,c),c.gradientMap&&(q.gradientMap.value=c.gradientMap)):
    t(q,c)):c.isMeshStandardMaterial?(l(q,c),c.isMeshPhysicalMaterial&&(q.clearCoat.value=c.clearCoat,q.clearCoatRoughness.value=c.clearCoatRoughness),q.roughness.value=c.roughness,q.metalness.value=c.metalness,c.roughnessMap&&(q.roughnessMap.value=c.roughnessMap),c.metalnessMap&&(q.metalnessMap.value=c.metalnessMap),c.emissiveMap&&(q.emissiveMap.value=c.emissiveMap),c.bumpMap&&(q.bumpMap.value=c.bumpMap,q.bumpScale.value=c.bumpScale),c.normalMap&&(q.normalMap.value=c.normalMap,q.normalScale.value.copy(c.normalScale)),
    c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=c.displacementScale,q.displacementBias.value=c.displacementBias),c.envMap&&(q.envMapIntensity.value=c.envMapIntensity)):c.isMeshDepthMaterial?(l(q,c),c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=c.displacementScale,q.displacementBias.value=c.displacementBias)):c.isMeshDistanceMaterial?(l(q,c),c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=
    c.displacementScale,q.displacementBias.value=c.displacementBias),q.referencePosition.value.copy(c.referencePosition),q.nearDistance.value=c.nearDistance,q.farDistance.value=c.farDistance):c.isMeshNormalMaterial?(l(q,c),c.bumpMap&&(q.bumpMap.value=c.bumpMap,q.bumpScale.value=c.bumpScale),c.normalMap&&(q.normalMap.value=c.normalMap,q.normalScale.value.copy(c.normalScale)),c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=c.displacementScale,q.displacementBias.value=
    c.displacementBias)):c.isLineBasicMaterial?(q.diffuse.value=c.color,q.opacity.value=c.opacity,c.isLineDashedMaterial&&(q.dashSize.value=c.dashSize,q.totalSize.value=c.dashSize+c.gapSize,q.scale.value=c.scale)):c.isPointsMaterial?(q.diffuse.value=c.color,q.opacity.value=c.opacity,q.size.value=c.size*wa,q.scale.value=.5*U,q.map.value=c.map,null!==c.map&&(!0===c.map.matrixAutoUpdate&&(b=c.map.offset,g=c.map.repeat,h=c.map.center,c.map.matrix.setUvTransform(b.x,b.y,g.x,g.y,c.map.rotation,h.x,h.y)),q.uvTransform.value.copy(c.map.matrix))):
    c.isShadowMaterial&&(q.color.value=c.color,q.opacity.value=c.opacity),void 0!==q.ltcMat&&(q.ltcMat.value=K.LTC_MAT_TEXTURE),void 0!==q.ltcMag&&(q.ltcMag.value=K.LTC_MAG_TEXTURE),mb.upload(F,e.uniformsList,q,S));m.setValue(F,"modelViewMatrix",d.modelViewMatrix);m.setValue(F,"normalMatrix",d.normalMatrix);m.setValue(F,"modelMatrix",d.matrixWorld);return k}function l(a,b){a.opacity.value=b.opacity;b.color&&(a.diffuse.value=b.color);b.emissive&&a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity);
    b.map&&(a.map.value=b.map);b.alphaMap&&(a.alphaMap.value=b.alphaMap);b.specularMap&&(a.specularMap.value=b.specularMap);b.envMap&&(a.envMap.value=b.envMap,a.flipEnvMap.value=b.envMap&&b.envMap.isCubeTexture?-1:1,a.reflectivity.value=b.reflectivity,a.refractionRatio.value=b.refractionRatio);b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity);b.aoMap&&(a.aoMap.value=b.aoMap,a.aoMapIntensity.value=b.aoMapIntensity);if(b.map)var c=b.map;else b.specularMap?c=b.specularMap:
    b.displacementMap?c=b.displacementMap:b.normalMap?c=b.normalMap:b.bumpMap?c=b.bumpMap:b.roughnessMap?c=b.roughnessMap:b.metalnessMap?c=b.metalnessMap:b.alphaMap?c=b.alphaMap:b.emissiveMap&&(c=b.emissiveMap);if(void 0!==c){c.isWebGLRenderTarget&&(c=c.texture);if(!0===c.matrixAutoUpdate){b=c.offset;var d=c.repeat,e=c.center;c.matrix.setUvTransform(b.x,b.y,d.x,d.y,c.rotation,e.x,e.y)}a.uvTransform.value.copy(c.matrix)}}function t(a,b){a.specular.value=b.specular;a.shininess.value=Math.max(b.shininess,
    1E-4);b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap);b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale);b.normalMap&&(a.normalMap.value=b.normalMap,a.normalScale.value.copy(b.normalScale));b.displacementMap&&(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias)}console.log("THREE.WebGLRenderer","89");a=a||{};var v=void 0!==a.canvas?a.canvas:document.createElementNS("http://www.w3.org/1999/xhtml",
    "canvas"),w=void 0!==a.context?a.context:null,z=void 0!==a.alpha?a.alpha:!1,y=void 0!==a.depth?a.depth:!0,I=void 0!==a.stencil?a.stencil:!0,A=void 0!==a.antialias?a.antialias:!1,J=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,x=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,B=void 0!==a.powerPreference?a.powerPreference:"default",D=[],C=[],E=null,H=[],la=[];this.domElement=v;this.context=null;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=
    !0;this.clippingPlanes=[];this.localClippingEnabled=!1;this.gammaFactor=2;this.physicallyCorrectLights=this.gammaOutput=this.gammaInput=!1;this.toneMappingWhitePoint=this.toneMappingExposure=this.toneMapping=1;this.maxMorphTargets=8;this.maxMorphNormals=4;var S=this,L=!1,N=null,M=null,P=-1,R="",V=null,W=null,nb=new aa,X=new aa,G=null,Y=0,ea=v.width,U=v.height,wa=1,da=new aa(0,0,ea,U),fa=new aa(0,0,ea,U),$e=!1,$d=new rd,Ja=new Fg,sd=!1,ae=!1,td=new O,Ob=new p,ha={geometries:0,textures:0},ba={frame:0,
    calls:0,vertices:0,faces:0,points:0};this.info={render:ba,memory:ha,programs:null};try{z={alpha:z,depth:y,stencil:I,antialias:A,premultipliedAlpha:J,preserveDrawingBuffer:x,powerPreference:B};v.addEventListener("webglcontextlost",c,!1);v.addEventListener("webglcontextrestored",d,!1);var F=w||v.getContext("webgl",z)||v.getContext("experimental-webgl",z);if(null===F){if(null!==v.getContext("webgl"))throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.");
    }void 0===F.getShaderPrecisionFormat&&(F.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(Gg){console.error("THREE.WebGLRenderer: "+Gg.message)}var ia,T,Z,ca,ga,qa,ra,ta,ua,ma,sa,ja,xa,ya,za,Aa,Ba,pa;b();var ka=new be(S);this.vr=ka;var Ea=new Ue(S,ta,T.maxTextureSize);this.shadowMap=Ea;this.getContext=function(){return F};this.getContextAttributes=function(){return F.getContextAttributes()};this.forceContextLoss=function(){var a=ia.get("WEBGL_lose_context");a&&
    a.loseContext()};this.forceContextRestore=function(){var a=ia.get("WEBGL_lose_context");a&&a.restoreContext()};this.getPixelRatio=function(){return wa};this.setPixelRatio=function(a){void 0!==a&&(wa=a,this.setSize(ea,U,!1))};this.getSize=function(){return{width:ea,height:U}};this.setSize=function(a,b,c){var d=ka.getDevice();d&&d.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(ea=a,U=b,v.width=a*wa,v.height=b*wa,!1!==c&&(v.style.width=a+"px",v.style.height=
    b+"px"),this.setViewport(0,0,a,b))};this.getDrawingBufferSize=function(){return{width:ea*wa,height:U*wa}};this.setDrawingBufferSize=function(a,b,c){ea=a;U=b;wa=c;v.width=a*c;v.height=b*c;this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){da.set(a,U-b-d,c,d);Z.viewport(nb.copy(da).multiplyScalar(wa))};this.setScissor=function(a,b,c,d){fa.set(a,U-b-d,c,d);Z.scissor(X.copy(fa).multiplyScalar(wa))};this.setScissorTest=function(a){Z.setScissorTest($e=a)};this.getClearColor=function(){return ja.getClearColor()};
    this.setClearColor=function(){ja.setClearColor.apply(ja,arguments)};this.getClearAlpha=function(){return ja.getClearAlpha()};this.setClearAlpha=function(){ja.setClearAlpha.apply(ja,arguments)};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=F.COLOR_BUFFER_BIT;if(void 0===b||b)d|=F.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=F.STENCIL_BUFFER_BIT;F.clear(d)};this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,!1,
    !0)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.dispose=function(){v.removeEventListener("webglcontextlost",c,!1);v.removeEventListener("webglcontextrestored",d,!1);sa.dispose();ka.dispose()};this.renderBufferImmediate=function(a,b,c){Z.initAttributes();var d=ca.get(a);a.hasPositions&&!d.position&&(d.position=F.createBuffer());a.hasNormals&&!d.normal&&(d.normal=F.createBuffer());a.hasUvs&&!d.uv&&(d.uv=F.createBuffer());a.hasColors&&!d.color&&(d.color=F.createBuffer());
    b=b.getAttributes();a.hasPositions&&(F.bindBuffer(F.ARRAY_BUFFER,d.position),F.bufferData(F.ARRAY_BUFFER,a.positionArray,F.DYNAMIC_DRAW),Z.enableAttribute(b.position),F.vertexAttribPointer(b.position,3,F.FLOAT,!1,0,0));if(a.hasNormals){F.bindBuffer(F.ARRAY_BUFFER,d.normal);if(!c.isMeshPhongMaterial&&!c.isMeshStandardMaterial&&!c.isMeshNormalMaterial&&!0===c.flatShading)for(var e=0,f=3*a.count;e<f;e+=9){var g=a.normalArray,h=(g[e+0]+g[e+3]+g[e+6])/3,k=(g[e+1]+g[e+4]+g[e+7])/3,m=(g[e+2]+g[e+5]+g[e+
    8])/3;g[e+0]=h;g[e+1]=k;g[e+2]=m;g[e+3]=h;g[e+4]=k;g[e+5]=m;g[e+6]=h;g[e+7]=k;g[e+8]=m}F.bufferData(F.ARRAY_BUFFER,a.normalArray,F.DYNAMIC_DRAW);Z.enableAttribute(b.normal);F.vertexAttribPointer(b.normal,3,F.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(F.bindBuffer(F.ARRAY_BUFFER,d.uv),F.bufferData(F.ARRAY_BUFFER,a.uvArray,F.DYNAMIC_DRAW),Z.enableAttribute(b.uv),F.vertexAttribPointer(b.uv,2,F.FLOAT,!1,0,0));a.hasColors&&0!==c.vertexColors&&(F.bindBuffer(F.ARRAY_BUFFER,d.color),F.bufferData(F.ARRAY_BUFFER,a.colorArray,
    F.DYNAMIC_DRAW),Z.enableAttribute(b.color),F.vertexAttribPointer(b.color,3,F.FLOAT,!1,0,0));Z.disableUnusedAttributes();F.drawArrays(F.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){var g=e.isMesh&&0>e.matrixWorld.determinant();Z.setMaterial(d,g);var h=u(a,b,d,e);a=c.id+"_"+h.id+"_"+(!0===d.wireframe);var k=!1;a!==R&&(R=a,k=!0);e.morphTargetInfluences&&(xa.update(e,c,d,h),k=!0);var g=c.index,m=c.attributes.position;b=1;!0===d.wireframe&&(g=ra.getWireframeAttribute(c),
    b=2);a=ya;if(null!==g){var q=qa.get(g);a=za;a.setIndex(q)}if(k){k=void 0;if(c&&c.isInstancedBufferGeometry&&null===ia.get("ANGLE_instanced_arrays"))console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else{void 0===k&&(k=0);Z.initAttributes();var n=c.attributes,h=h.getAttributes(),l=d.defaultAttributeValues;for(J in h){var r=h[J];if(0<=r){var t=n[J];if(void 0!==t){var v=t.normalized,p=t.itemSize,
    w=qa.get(t);if(void 0!==w){var A=w.buffer,y=w.type,w=w.bytesPerElement;if(t.isInterleavedBufferAttribute){var z=t.data,I=z.stride,t=t.offset;z&&z.isInstancedInterleavedBuffer?(Z.enableAttributeAndDivisor(r,z.meshPerAttribute),void 0===c.maxInstancedCount&&(c.maxInstancedCount=z.meshPerAttribute*z.count)):Z.enableAttribute(r);F.bindBuffer(F.ARRAY_BUFFER,A);F.vertexAttribPointer(r,p,y,v,I*w,(k*I+t)*w)}else t.isInstancedBufferAttribute?(Z.enableAttributeAndDivisor(r,t.meshPerAttribute),void 0===c.maxInstancedCount&&
    (c.maxInstancedCount=t.meshPerAttribute*t.count)):Z.enableAttribute(r),F.bindBuffer(F.ARRAY_BUFFER,A),F.vertexAttribPointer(r,p,y,v,0,k*p*w)}}else if(void 0!==l&&(v=l[J],void 0!==v))switch(v.length){case 2:F.vertexAttrib2fv(r,v);break;case 3:F.vertexAttrib3fv(r,v);break;case 4:F.vertexAttrib4fv(r,v);break;default:F.vertexAttrib1fv(r,v)}}}Z.disableUnusedAttributes()}null!==g&&F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,q.buffer)}q=0;null!==g?q=g.count:void 0!==m&&(q=m.count);g=c.drawRange.start*b;m=null!==
    f?f.start*b:0;var J=Math.max(g,m);f=Math.max(0,Math.min(q,g+c.drawRange.count*b,m+(null!==f?f.count*b:Infinity))-1-J+1);if(0!==f){if(e.isMesh)if(!0===d.wireframe)Z.setLineWidth(d.wireframeLinewidth*(null===N?wa:1)),a.setMode(F.LINES);else switch(e.drawMode){case 0:a.setMode(F.TRIANGLES);break;case 1:a.setMode(F.TRIANGLE_STRIP);break;case 2:a.setMode(F.TRIANGLE_FAN)}else e.isLine?(d=d.linewidth,void 0===d&&(d=1),Z.setLineWidth(d*(null===N?wa:1)),e.isLineSegments?a.setMode(F.LINES):e.isLineLoop?a.setMode(F.LINE_LOOP):
    a.setMode(F.LINE_STRIP)):e.isPoints&&a.setMode(F.POINTS);c&&c.isInstancedBufferGeometry?0<c.maxInstancedCount&&a.renderInstances(c,J,f):a.render(J,f)}};this.compile=function(a,b){D.length=0;C.length=0;a.traverse(function(a){a.isLight&&(D.push(a),a.castShadow&&C.push(a))});ua.setup(D,C,b);a.traverse(function(b){if(b.material)if(Array.isArray(b.material))for(var c=0;c<b.material.length;c++)n(b.material[c],a.fog,b);else n(b.material,a.fog,b)})};var Fa=!1,Ca=null;this.animate=function(a){Ca=a;Fa||((a=
    ka.getDevice())&&a.isPresenting?a.requestAnimationFrame(h):window.requestAnimationFrame(h),Fa=!0)};this.render=function(a,b,c,d){if(!b||!b.isCamera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else if(!L){R="";P=-1;V=null;!0===a.autoUpdate&&a.updateMatrixWorld();null===b.parent&&b.updateMatrixWorld();ka.enabled&&(b=ka.getCamera(b));td.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);$d.setFromMatrix(td);D.length=0;C.length=0;H.length=0;la.length=
    0;ae=this.localClippingEnabled;sd=Ja.init(this.clippingPlanes,ae,b);E=sa.get(a,b);E.init();k(a,b,S.sortObjects);!0===S.sortObjects&&E.sort();ga.updateVideoTextures();sd&&Ja.beginShadows();Ea.render(C,a,b);ua.setup(D,C,b);sd&&Ja.endShadows();ba.frame++;ba.calls=0;ba.vertices=0;ba.faces=0;ba.points=0;void 0===c&&(c=null);this.setRenderTarget(c);ja.render(E,a,b,d);d=E.opaque;var e=E.transparent;if(a.overrideMaterial){var f=a.overrideMaterial;d.length&&m(d,a,b,f);e.length&&m(e,a,b,f)}else d.length&&m(d,
    a,b),e.length&&m(e,a,b);Ba.render(H,a,b);Aa.render(la,a,b,nb);c&&ga.updateRenderTargetMipmap(c);Z.buffers.depth.setTest(!0);Z.buffers.depth.setMask(!0);Z.buffers.color.setMask(!0);Z.setPolygonOffset(!1);ka.enabled&&ka.submitFrame()}};this.setFaceCulling=function(a,b){Z.setCullFace(a);Z.setFlipSided(0===b)};this.allocTextureUnit=function(){var a=Y;a>=T.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+a+" texture units while this GPU supports only "+T.maxTextures);Y+=1;return a};this.setTexture2D=
    function(){var a=!1;return function(b,c){b&&b.isWebGLRenderTarget&&(a||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),a=!0),b=b.texture);ga.setTexture2D(b,c)}}();this.setTexture=function(){var a=!1;return function(b,c){a||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),a=!0);ga.setTexture2D(b,c)}}();this.setTextureCube=function(){var a=!1;return function(b,c){b&&b.isWebGLRenderTargetCube&&
    (a||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),a=!0),b=b.texture);b&&b.isCubeTexture||Array.isArray(b.image)&&6===b.image.length?ga.setTextureCube(b,c):ga.setTextureCubeDynamic(b,c)}}();this.getRenderTarget=function(){return N};this.setRenderTarget=function(a){(N=a)&&void 0===ca.get(a).__webglFramebuffer&&ga.setupRenderTarget(a);var b=null,c=!1;a?(b=ca.get(a).__webglFramebuffer,a.isWebGLRenderTargetCube&&(b=
    b[a.activeCubeFace],c=!0),nb.copy(a.viewport),X.copy(a.scissor),G=a.scissorTest):(nb.copy(da).multiplyScalar(wa),X.copy(fa).multiplyScalar(wa),G=$e);M!==b&&(F.bindFramebuffer(F.FRAMEBUFFER,b),M=b);Z.viewport(nb);Z.scissor(X);Z.setScissorTest(G);c&&(c=ca.get(a.texture),F.framebufferTexture2D(F.FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_CUBE_MAP_POSITIVE_X+a.activeCubeFace,c.__webglTexture,a.activeMipMapLevel))};this.readRenderTargetPixels=function(a,b,c,d,e,f){if(a&&a.isWebGLRenderTarget){var g=ca.get(a).__webglFramebuffer;
    if(g){var h=!1;g!==M&&(F.bindFramebuffer(F.FRAMEBUFFER,g),h=!0);try{var k=a.texture,m=k.format,q=k.type;1023!==m&&pa.convert(m)!==F.getParameter(F.IMPLEMENTATION_COLOR_READ_FORMAT)?console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."):1009===q||pa.convert(q)===F.getParameter(F.IMPLEMENTATION_COLOR_READ_TYPE)||1015===q&&(ia.get("OES_texture_float")||ia.get("WEBGL_color_buffer_float"))||1016===q&&ia.get("EXT_color_buffer_half_float")?
    F.checkFramebufferStatus(F.FRAMEBUFFER)===F.FRAMEBUFFER_COMPLETE?0<=b&&b<=a.width-d&&0<=c&&c<=a.height-e&&F.readPixels(b,c,d,e,pa.convert(m),pa.convert(q),f):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete."):console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.")}finally{h&&F.bindFramebuffer(F.FRAMEBUFFER,M)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")}}
    function Pb(a,b){this.name="";this.color=new H(a);this.density=void 0!==b?b:2.5E-4}function Qb(a,b,c){this.name="";this.color=new H(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3}function vd(){x.call(this);this.type="Scene";this.overrideMaterial=this.fog=this.background=null;this.autoUpdate=!0}function de(a,b,c,d,e){x.call(this);this.lensFlares=[];this.positionScreen=new p;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)}function hb(a){P.call(this);this.type="SpriteMaterial";
    this.color=new H(16777215);this.map=null;this.rotation=0;this.lights=this.fog=!1;this.setValues(a)}function Cc(a){x.call(this);this.type="Sprite";this.material=void 0!==a?a:new hb}function Dc(){x.call(this);this.type="LOD";Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Ec(a,b){a=a||[];this.bones=a.slice(0);this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(console.warn("THREE.Skeleton boneInverses is the wrong length."),
    this.boneInverses=[],a=0,b=this.bones.length;a<b;a++)this.boneInverses.push(new O)}function wd(){x.call(this);this.type="Bone"}function xd(a,b){ra.call(this,a,b);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new O;this.bindMatrixInverse=new O;a=this.initBones();a=new Ec(a);this.bind(a,this.matrixWorld);this.normalizeSkinWeights()}function W(a){P.call(this);this.type="LineBasicMaterial";this.color=new H(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.lights=!1;
    this.setValues(a)}function sa(a,b,c){if(1===c)return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new X(a,b);x.call(this);this.type="Line";this.geometry=void 0!==a?a:new E;this.material=void 0!==b?b:new W({color:16777215*Math.random()})}function X(a,b){sa.call(this,a,b);this.type="LineSegments"}function yd(a,b){sa.call(this,a,b);this.type="LineLoop"}function Ka(a){P.call(this);this.type="PointsMaterial";this.color=new H(16777215);
    this.map=null;this.size=1;this.sizeAttenuation=!0;this.lights=!1;this.setValues(a)}function Rb(a,b){x.call(this);this.type="Points";this.geometry=void 0!==a?a:new E;this.material=void 0!==b?b:new Ka({color:16777215*Math.random()})}function Fc(){x.call(this);this.type="Group"}function ee(a,b,c,d,e,f,g,h,k){function m(){a.removeEventListener("loadeddata",m,!1);q.needsUpdate=!0}U.call(this,a,b,c,d,e,f,g,h,k);this.generateMipmaps=!1;var q=this;a.addEventListener("loadeddata",m,!1)}function Sb(a,b,c,d,
    e,f,g,h,k,m,q,n){U.call(this,null,f,g,h,k,m,d,e,q,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=this.flipY=!1}function Gc(a,b,c,d,e,f,g,h,k,m){m=void 0!==m?m:1026;if(1026!==m&&1027!==m)throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===c&&1026===m&&(c=1012);void 0===c&&1027===m&&(c=1020);U.call(this,null,d,e,f,g,h,m,c,k);this.image={width:a,height:b};this.magFilter=void 0!==g?g:1003;this.minFilter=void 0!==h?h:1003;this.generateMipmaps=
    this.flipY=!1}function Tb(a){E.call(this);this.type="WireframeGeometry";var b=[],c,d,e,f=[0,0],g={},h=["a","b","c"];if(a&&a.isGeometry){var k=a.faces;var m=0;for(d=k.length;m<d;m++){var q=k[m];for(c=0;3>c;c++){var n=q[h[c]];var u=q[h[(c+1)%3]];f[0]=Math.min(n,u);f[1]=Math.max(n,u);n=f[0]+","+f[1];void 0===g[n]&&(g[n]={index1:f[0],index2:f[1]})}}for(n in g)m=g[n],h=a.vertices[m.index1],b.push(h.x,h.y,h.z),h=a.vertices[m.index2],b.push(h.x,h.y,h.z)}else if(a&&a.isBufferGeometry){var h=new p;if(null!==
    a.index){k=a.attributes.position;q=a.index;var l=a.groups;0===l.length&&(l=[{start:0,count:q.count,materialIndex:0}]);a=0;for(e=l.length;a<e;++a)for(m=l[a],c=m.start,d=m.count,m=c,d=c+d;m<d;m+=3)for(c=0;3>c;c++)n=q.getX(m+c),u=q.getX(m+(c+1)%3),f[0]=Math.min(n,u),f[1]=Math.max(n,u),n=f[0]+","+f[1],void 0===g[n]&&(g[n]={index1:f[0],index2:f[1]});for(n in g)m=g[n],h.fromBufferAttribute(k,m.index1),b.push(h.x,h.y,h.z),h.fromBufferAttribute(k,m.index2),b.push(h.x,h.y,h.z)}else for(k=a.attributes.position,
    m=0,d=k.count/3;m<d;m++)for(c=0;3>c;c++)g=3*m+c,h.fromBufferAttribute(k,g),b.push(h.x,h.y,h.z),g=3*m+(c+1)%3,h.fromBufferAttribute(k,g),b.push(h.x,h.y,h.z)}this.addAttribute("position",new B(b,3))}function Hc(a,b,c){L.call(this);this.type="ParametricGeometry";this.parameters={func:a,slices:b,stacks:c};this.fromBufferGeometry(new Ub(a,b,c));this.mergeVertices()}function Ub(a,b,c){E.call(this);this.type="ParametricBufferGeometry";this.parameters={func:a,slices:b,stacks:c};var d=[],e=[],f=[],g=[],h=
    new p,k=new p,m=new p,q=new p,n=new p,u,l,t=b+1;for(u=0;u<=c;u++){var v=u/c;for(l=0;l<=b;l++){var w=l/b,k=a(w,v,k);e.push(k.x,k.y,k.z);0<=w-1E-5?(m=a(w-1E-5,v,m),q.subVectors(k,m)):(m=a(w+1E-5,v,m),q.subVectors(m,k));0<=v-1E-5?(m=a(w,v-1E-5,m),n.subVectors(k,m)):(m=a(w,v+1E-5,m),n.subVectors(m,k));h.crossVectors(q,n).normalize();f.push(h.x,h.y,h.z);g.push(w,v)}}for(u=0;u<c;u++)for(l=0;l<b;l++)a=u*t+l+1,h=(u+1)*t+l+1,k=(u+1)*t+l,d.push(u*t+l,a,k),d.push(a,h,k);this.setIndex(d);this.addAttribute("position",
    new B(e,3));this.addAttribute("normal",new B(f,3));this.addAttribute("uv",new B(g,2))}function Ic(a,b,c,d){L.call(this);this.type="PolyhedronGeometry";this.parameters={vertices:a,indices:b,radius:c,detail:d};this.fromBufferGeometry(new ja(a,b,c,d));this.mergeVertices()}function ja(a,b,c,d){function e(a){h.push(a.x,a.y,a.z)}function f(b,c){b*=3;c.x=a[b+0];c.y=a[b+1];c.z=a[b+2]}function g(a,b,c,d){0>d&&1===a.x&&(k[b]=a.x-1);0===c.x&&0===c.z&&(k[b]=d/2/Math.PI+.5)}E.call(this);this.type="PolyhedronBufferGeometry";
    this.parameters={vertices:a,indices:b,radius:c,detail:d};c=c||1;d=d||0;var h=[],k=[];(function(a){for(var c=new p,d=new p,g=new p,h=0;h<b.length;h+=3){f(b[h+0],c);f(b[h+1],d);f(b[h+2],g);var k,m,l=c,z=d,y=g,I=Math.pow(2,a),A=[];for(m=0;m<=I;m++){A[m]=[];var J=l.clone().lerp(y,m/I),x=z.clone().lerp(y,m/I),B=I-m;for(k=0;k<=B;k++)A[m][k]=0===k&&m===I?J:J.clone().lerp(x,k/B)}for(m=0;m<I;m++)for(k=0;k<2*(I-m)-1;k++)l=Math.floor(k/2),0===k%2?(e(A[m][l+1]),e(A[m+1][l]),e(A[m][l])):(e(A[m][l+1]),e(A[m+1][l+
    1]),e(A[m+1][l]))}})(d);(function(a){for(var b=new p,c=0;c<h.length;c+=3)b.x=h[c+0],b.y=h[c+1],b.z=h[c+2],b.normalize().multiplyScalar(a),h[c+0]=b.x,h[c+1]=b.y,h[c+2]=b.z})(c);(function(){for(var a=new p,b=0;b<h.length;b+=3)a.x=h[b+0],a.y=h[b+1],a.z=h[b+2],k.push(Math.atan2(a.z,-a.x)/2/Math.PI+.5,1-(Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5));for(var a=new p,b=new p,c=new p,d=new p,e=new D,f=new D,l=new D,w=0,z=0;w<h.length;w+=9,z+=6){a.set(h[w+0],h[w+1],h[w+2]);b.set(h[w+3],h[w+4],h[w+
    5]);c.set(h[w+6],h[w+7],h[w+8]);e.set(k[z+0],k[z+1]);f.set(k[z+2],k[z+3]);l.set(k[z+4],k[z+5]);d.copy(a).add(b).add(c).divideScalar(3);var y=Math.atan2(d.z,-d.x);g(e,z+0,a,y);g(f,z+2,b,y);g(l,z+4,c,y)}for(a=0;a<k.length;a+=6)b=k[a+0],c=k[a+2],d=k[a+4],e=Math.min(b,c,d),.9<Math.max(b,c,d)&&.1>e&&(.2>b&&(k[a+0]+=1),.2>c&&(k[a+2]+=1),.2>d&&(k[a+4]+=1))})();this.addAttribute("position",new B(h,3));this.addAttribute("normal",new B(h.slice(),3));this.addAttribute("uv",new B(k,2));0===d?this.computeVertexNormals():
    this.normalizeNormals()}function Jc(a,b){L.call(this);this.type="TetrahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Vb(a,b));this.mergeVertices()}function Vb(a,b){ja.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b);this.type="TetrahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Kc(a,b){L.call(this);this.type="OctahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new ub(a,b));this.mergeVertices()}
    function ub(a,b){ja.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b);this.type="OctahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Lc(a,b){L.call(this);this.type="IcosahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Wb(a,b));this.mergeVertices()}function Wb(a,b){var c=(1+Math.sqrt(5))/2;ja.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,
    5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b);this.type="IcosahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Mc(a,b){L.call(this);this.type="DodecahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Xb(a,b));this.mergeVertices()}function Xb(a,b){var c=(1+Math.sqrt(5))/2,d=1/c;ja.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,
    d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],a,b);this.type="DodecahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Nc(a,b,c,d,e,f){L.call(this);this.type="TubeGeometry";this.parameters={path:a,
    tubularSegments:b,radius:c,radialSegments:d,closed:e};void 0!==f&&console.warn("THREE.TubeGeometry: taper has been removed.");a=new Yb(a,b,c,d,e);this.tangents=a.tangents;this.normals=a.normals;this.binormals=a.binormals;this.fromBufferGeometry(a);this.mergeVertices()}function Yb(a,b,c,d,e){function f(e){q=a.getPointAt(e/b,q);var f=g.normals[e];e=g.binormals[e];for(l=0;l<=d;l++){var m=l/d*Math.PI*2,n=Math.sin(m),m=-Math.cos(m);k.x=m*f.x+n*e.x;k.y=m*f.y+n*e.y;k.z=m*f.z+n*e.z;k.normalize();t.push(k.x,
    k.y,k.z);h.x=q.x+c*k.x;h.y=q.y+c*k.y;h.z=q.z+c*k.z;r.push(h.x,h.y,h.z)}}E.call(this);this.type="TubeBufferGeometry";this.parameters={path:a,tubularSegments:b,radius:c,radialSegments:d,closed:e};b=b||64;c=c||1;d=d||8;e=e||!1;var g=a.computeFrenetFrames(b,e);this.tangents=g.tangents;this.normals=g.normals;this.binormals=g.binormals;var h=new p,k=new p,m=new D,q=new p,n,l,r=[],t=[],v=[],w=[];for(n=0;n<b;n++)f(n);f(!1===e?b:0);for(n=0;n<=b;n++)for(l=0;l<=d;l++)m.x=n/b,m.y=l/d,v.push(m.x,m.y);(function(){for(l=
    1;l<=b;l++)for(n=1;n<=d;n++){var a=(d+1)*l+(n-1),c=(d+1)*l+n,e=(d+1)*(l-1)+n;w.push((d+1)*(l-1)+(n-1),a,e);w.push(a,c,e)}})();this.setIndex(w);this.addAttribute("position",new B(r,3));this.addAttribute("normal",new B(t,3));this.addAttribute("uv",new B(v,2))}function Oc(a,b,c,d,e,f,g){L.call(this);this.type="TorusKnotGeometry";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};void 0!==g&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new Zb(a,b,c,d,e,f));this.mergeVertices()}function Zb(a,b,c,d,e,f){function g(a,b,c,d,e){var f=Math.sin(a);b=c/b*a;c=Math.cos(b);e.x=d*(2+c)*.5*Math.cos(a);e.y=d*(2+c)*f*.5;e.z=d*Math.sin(b)*.5}E.call(this);this.type="TorusKnotBufferGeometry";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};a=a||1;b=b||.4;c=Math.floor(c)||64;d=Math.floor(d)||8;e=e||2;f=f||3;var h=[],k=[],m=[],q=[],n,l=new p,r=new p,t=new p,v=new p,w=new p,z=new p,y=new p;for(n=0;n<=
    c;++n){var I=n/c*e*Math.PI*2;g(I,e,f,a,t);g(I+.01,e,f,a,v);z.subVectors(v,t);y.addVectors(v,t);w.crossVectors(z,y);y.crossVectors(w,z);w.normalize();y.normalize();for(I=0;I<=d;++I){var A=I/d*Math.PI*2,J=-b*Math.cos(A),A=b*Math.sin(A);l.x=t.x+(J*y.x+A*w.x);l.y=t.y+(J*y.y+A*w.y);l.z=t.z+(J*y.z+A*w.z);k.push(l.x,l.y,l.z);r.subVectors(l,t).normalize();m.push(r.x,r.y,r.z);q.push(n/c);q.push(I/d)}}for(I=1;I<=c;I++)for(n=1;n<=d;n++)a=(d+1)*I+(n-1),b=(d+1)*I+n,e=(d+1)*(I-1)+n,h.push((d+1)*(I-1)+(n-1),a,e),
    h.push(a,b,e);this.setIndex(h);this.addAttribute("position",new B(k,3));this.addAttribute("normal",new B(m,3));this.addAttribute("uv",new B(q,2))}function Pc(a,b,c,d,e){L.call(this);this.type="TorusGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};this.fromBufferGeometry(new $b(a,b,c,d,e));this.mergeVertices()}function $b(a,b,c,d,e){E.call(this);this.type="TorusBufferGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||1;b=b||
    .4;c=Math.floor(c)||8;d=Math.floor(d)||6;e=e||2*Math.PI;var f=[],g=[],h=[],k=[],m=new p,q=new p,n=new p,l,r;for(l=0;l<=c;l++)for(r=0;r<=d;r++){var t=r/d*e,v=l/c*Math.PI*2;q.x=(a+b*Math.cos(v))*Math.cos(t);q.y=(a+b*Math.cos(v))*Math.sin(t);q.z=b*Math.sin(v);g.push(q.x,q.y,q.z);m.x=a*Math.cos(t);m.y=a*Math.sin(t);n.subVectors(q,m).normalize();h.push(n.x,n.y,n.z);k.push(r/d);k.push(l/c)}for(l=1;l<=c;l++)for(r=1;r<=d;r++)a=(d+1)*(l-1)+r-1,b=(d+1)*(l-1)+r,e=(d+1)*l+r,f.push((d+1)*l+r-1,a,e),f.push(a,b,
    e);this.setIndex(f);this.addAttribute("position",new B(g,3));this.addAttribute("normal",new B(h,3));this.addAttribute("uv",new B(k,2))}function bf(a,b,c,d,e){for(var f,g=0,h=b,k=c-d;h<c;h+=d)g+=(a[k]-a[h])*(a[h+1]+a[k+1]),k=h;if(e===0<g)for(e=b;e<c;e+=d)f=cf(e,a[e],a[e+1],f);else for(e=c-d;e>=b;e-=d)f=cf(e,a[e],a[e+1],f);f&&vb(f,f.next)&&(Qc(f),f=f.next);return f}function Rc(a,b){if(!a)return a;b||(b=a);do{var c=!1;if(a.steiner||!vb(a,a.next)&&0!==ta(a.prev,a,a.next))a=a.next;else{Qc(a);a=b=a.prev;
    if(a===a.next)break;c=!0}}while(c||a!==b);return b}function Sc(a,b,c,d,e,f,g){if(a){if(!g&&f){var h=a,k=h;do null===k.z&&(k.z=fe(k.x,k.y,d,e,f)),k.prevZ=k.prev,k=k.nextZ=k.next;while(k!==h);k.prevZ.nextZ=null;k.prevZ=null;var h=k,m,q,n,l,r=1;do{k=h;var t=h=null;for(q=0;k;){q++;var p=k;for(m=n=0;m<r&&(n++,p=p.nextZ,p);m++);for(l=r;0<n||0<l&&p;)0!==n&&(0===l||!p||k.z<=p.z)?(m=k,k=k.nextZ,n--):(m=p,p=p.nextZ,l--),t?t.nextZ=m:h=m,m.prevZ=t,t=m;k=p}t.nextZ=null;r*=2}while(1<q)}for(h=a;a.prev!==a.next;){k=
    a.prev;p=a.next;if(f)a:{t=a;l=d;var w=e,z=f;q=t.prev;n=t;r=t.next;if(0<=ta(q,n,r))t=!1;else{var y=q.x>n.x?q.x>r.x?q.x:r.x:n.x>r.x?n.x:r.x,I=q.y>n.y?q.y>r.y?q.y:r.y:n.y>r.y?n.y:r.y;m=fe(q.x<n.x?q.x<r.x?q.x:r.x:n.x<r.x?n.x:r.x,q.y<n.y?q.y<r.y?q.y:r.y:n.y<r.y?n.y:r.y,l,w,z);l=fe(y,I,l,w,z);for(w=t.nextZ;w&&w.z<=l;){if(w!==t.prev&&w!==t.next&&zd(q.x,q.y,n.x,n.y,r.x,r.y,w.x,w.y)&&0<=ta(w.prev,w,w.next)){t=!1;break a}w=w.nextZ}for(w=t.prevZ;w&&w.z>=m;){if(w!==t.prev&&w!==t.next&&zd(q.x,q.y,n.x,n.y,r.x,
    r.y,w.x,w.y)&&0<=ta(w.prev,w,w.next)){t=!1;break a}w=w.prevZ}t=!0}}else a:if(t=a,q=t.prev,n=t,r=t.next,0<=ta(q,n,r))t=!1;else{for(m=t.next.next;m!==t.prev;){if(zd(q.x,q.y,n.x,n.y,r.x,r.y,m.x,m.y)&&0<=ta(m.prev,m,m.next)){t=!1;break a}m=m.next}t=!0}if(t)b.push(k.i/c),b.push(a.i/c),b.push(p.i/c),Qc(a),h=a=p.next;else if(a=p,a===h){if(!g)Sc(Rc(a),b,c,d,e,f,1);else if(1===g){g=b;h=c;k=a;do p=k.prev,t=k.next.next,!vb(p,t)&&df(p,k,k.next,t)&&Tc(p,t)&&Tc(t,p)&&(g.push(p.i/h),g.push(k.i/h),g.push(t.i/h),
    Qc(k),Qc(k.next),k=a=t),k=k.next;while(k!==a);a=k;Sc(a,b,c,d,e,f,2)}else if(2===g)a:{g=a;do{for(h=g.next.next;h!==g.prev;){if(k=g.i!==h.i){k=g;p=h;if(t=k.next.i!==p.i&&k.prev.i!==p.i){b:{t=k;do{if(t.i!==k.i&&t.next.i!==k.i&&t.i!==p.i&&t.next.i!==p.i&&df(t,t.next,k,p)){t=!0;break b}t=t.next}while(t!==k);t=!1}t=!t}if(t=t&&Tc(k,p)&&Tc(p,k)){t=k;q=!1;n=(k.x+p.x)/2;p=(k.y+p.y)/2;do t.y>p!==t.next.y>p&&t.next.y!==t.y&&n<(t.next.x-t.x)*(p-t.y)/(t.next.y-t.y)+t.x&&(q=!q),t=t.next;while(t!==k);t=q}k=t}if(k){a=
    ef(g,h);g=Rc(g,g.next);a=Rc(a,a.next);Sc(g,b,c,d,e,f);Sc(a,b,c,d,e,f);break a}h=h.next}g=g.next}while(g!==a)}break}}}}function Hg(a,b){return a.x-b.x}function Ig(a,b){var c=b,d=a.x,e=a.y,f=-Infinity;do{if(e<=c.y&&e>=c.next.y&&c.next.y!==c.y){var g=c.x+(e-c.y)*(c.next.x-c.x)/(c.next.y-c.y);if(g<=d&&g>f){f=g;if(g===d){if(e===c.y)return c;if(e===c.next.y)return c.next}var h=c.x<c.next.x?c:c.next}}c=c.next}while(c!==b);if(!h)return null;if(d===f)return h.prev;b=h;for(var g=h.x,k=h.y,m=Infinity,q,c=h.next;c!==
    b;)d>=c.x&&c.x>=g&&d!==c.x&&zd(e<k?d:f,e,g,k,e<k?f:d,e,c.x,c.y)&&(q=Math.abs(e-c.y)/(d-c.x),(q<m||q===m&&c.x>h.x)&&Tc(c,a)&&(h=c,m=q)),c=c.next;return h}function fe(a,b,c,d,e){a=32767*(a-c)*e;b=32767*(b-d)*e;a=(a|a<<8)&16711935;a=(a|a<<4)&252645135;a=(a|a<<2)&858993459;b=(b|b<<8)&16711935;b=(b|b<<4)&252645135;b=(b|b<<2)&858993459;return(a|a<<1)&1431655765|((b|b<<1)&1431655765)<<1}function Jg(a){var b=a,c=a;do b.x<c.x&&(c=b),b=b.next;while(b!==a);return c}function zd(a,b,c,d,e,f,g,h){return 0<=(e-
    g)*(b-h)-(a-g)*(f-h)&&0<=(a-g)*(d-h)-(c-g)*(b-h)&&0<=(c-g)*(f-h)-(e-g)*(d-h)}function ta(a,b,c){return(b.y-a.y)*(c.x-b.x)-(b.x-a.x)*(c.y-b.y)}function vb(a,b){return a.x===b.x&&a.y===b.y}function df(a,b,c,d){return vb(a,b)&&vb(c,d)||vb(a,d)&&vb(c,b)?!0:0<ta(a,b,c)!==0<ta(a,b,d)&&0<ta(c,d,a)!==0<ta(c,d,b)}function Tc(a,b){return 0>ta(a.prev,a,a.next)?0<=ta(a,b,a.next)&&0<=ta(a,a.prev,b):0>ta(a,b,a.prev)||0>ta(a,a.next,b)}function ef(a,b){var c=new ge(a.i,a.x,a.y),d=new ge(b.i,b.x,b.y),e=a.next,f=b.prev;
    a.next=b;b.prev=a;c.next=e;e.prev=c;d.next=c;c.prev=d;f.next=d;d.prev=f;return d}function cf(a,b,c,d){a=new ge(a,b,c);d?(a.next=d.next,a.prev=d,d.next.prev=a,d.next=a):(a.prev=a,a.next=a);return a}function Qc(a){a.next.prev=a.prev;a.prev.next=a.next;a.prevZ&&(a.prevZ.nextZ=a.nextZ);a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function ge(a,b,c){this.i=a;this.x=b;this.y=c;this.nextZ=this.prevZ=this.z=this.next=this.prev=null;this.steiner=!1}function ib(a,b){L.call(this);this.type="ExtrudeGeometry";this.parameters=
    {shapes:a,options:b};this.fromBufferGeometry(new La(a,b));this.mergeVertices()}function La(a,b){"undefined"!==typeof a&&(E.call(this),this.type="ExtrudeBufferGeometry",a=Array.isArray(a)?a:[a],this.addShapeList(a,b),this.computeVertexNormals())}function Uc(a,b){L.call(this);this.type="TextGeometry";this.parameters={text:a,parameters:b};this.fromBufferGeometry(new ac(a,b));this.mergeVertices()}function ac(a,b){b=b||{};var c=b.font;if(!c||!c.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),
    new L;a=c.generateShapes(a,b.size,b.curveSegments);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);La.call(this,a,b);this.type="TextBufferGeometry"}function Vc(a,b,c,d,e,f,g){L.call(this);this.type="SphereGeometry";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};this.fromBufferGeometry(new wb(a,b,c,d,e,f,g));this.mergeVertices()}
    function wb(a,b,c,d,e,f,g){E.call(this);this.type="SphereBufferGeometry";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||1;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;var h=f+g,k,m,q=0,n=[],l=new p,r=new p,t=[],v=[],w=[],z=[];for(m=0;m<=c;m++){var y=[],I=m/c;for(k=0;k<=b;k++){var A=k/b;l.x=-a*Math.cos(d+A*e)*Math.sin(f+I*g);l.y=a*Math.cos(f+
    I*g);l.z=a*Math.sin(d+A*e)*Math.sin(f+I*g);v.push(l.x,l.y,l.z);r.set(l.x,l.y,l.z).normalize();w.push(r.x,r.y,r.z);z.push(A,1-I);y.push(q++)}n.push(y)}for(m=0;m<c;m++)for(k=0;k<b;k++)a=n[m][k+1],d=n[m][k],e=n[m+1][k],g=n[m+1][k+1],(0!==m||0<f)&&t.push(a,d,g),(m!==c-1||h<Math.PI)&&t.push(d,e,g);this.setIndex(t);this.addAttribute("position",new B(v,3));this.addAttribute("normal",new B(w,3));this.addAttribute("uv",new B(z,2))}function Wc(a,b,c,d,e,f){L.call(this);this.type="RingGeometry";this.parameters=
    {innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};this.fromBufferGeometry(new bc(a,b,c,d,e,f));this.mergeVertices()}function bc(a,b,c,d,e,f){E.call(this);this.type="RingBufferGeometry";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};a=a||.5;b=b||1;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):1;var g=[],h=[],k=[],m=[],q=a,n=(b-a)/d,l=new p,r=new D,t,v;for(t=
    0;t<=d;t++){for(v=0;v<=c;v++)a=e+v/c*f,l.x=q*Math.cos(a),l.y=q*Math.sin(a),h.push(l.x,l.y,l.z),k.push(0,0,1),r.x=(l.x/b+1)/2,r.y=(l.y/b+1)/2,m.push(r.x,r.y);q+=n}for(t=0;t<d;t++)for(b=t*(c+1),v=0;v<c;v++)a=v+b,e=a+c+1,f=a+c+2,q=a+1,g.push(a,e,q),g.push(e,f,q);this.setIndex(g);this.addAttribute("position",new B(h,3));this.addAttribute("normal",new B(k,3));this.addAttribute("uv",new B(m,2))}function Xc(a,b,c,d){L.call(this);this.type="LatheGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};
    this.fromBufferGeometry(new cc(a,b,c,d));this.mergeVertices()}function cc(a,b,c,d){E.call(this);this.type="LatheBufferGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};b=Math.floor(b)||12;c=c||0;d=d||2*Math.PI;d=Q.clamp(d,0,2*Math.PI);var e=[],f=[],g=[],h=1/b,k=new p,m=new D,q;for(q=0;q<=b;q++){var n=c+q*h*d;var l=Math.sin(n),r=Math.cos(n);for(n=0;n<=a.length-1;n++)k.x=a[n].x*l,k.y=a[n].y,k.z=a[n].x*r,f.push(k.x,k.y,k.z),m.x=q/b,m.y=n/(a.length-1),g.push(m.x,m.y)}for(q=0;q<b;q++)for(n=
    0;n<a.length-1;n++)c=n+q*a.length,h=c+a.length,k=c+a.length+1,m=c+1,e.push(c,h,m),e.push(h,k,m);this.setIndex(e);this.addAttribute("position",new B(f,3));this.addAttribute("uv",new B(g,2));this.computeVertexNormals();if(d===2*Math.PI)for(d=this.attributes.normal.array,e=new p,f=new p,g=new p,c=b*a.length*3,n=q=0;q<a.length;q++,n+=3)e.x=d[n+0],e.y=d[n+1],e.z=d[n+2],f.x=d[c+n+0],f.y=d[c+n+1],f.z=d[c+n+2],g.addVectors(e,f).normalize(),d[n+0]=d[c+n+0]=g.x,d[n+1]=d[c+n+1]=g.y,d[n+2]=d[c+n+2]=g.z}function xb(a,
    b){L.call(this);this.type="ShapeGeometry";"object"===typeof b&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),b=b.curveSegments);this.parameters={shapes:a,curveSegments:b};this.fromBufferGeometry(new yb(a,b));this.mergeVertices()}function yb(a,b){function c(a){var c,h=e.length/3;a=a.extractPoints(b);var m=a.shape,q=a.holes;if(!1===$a.isClockWise(m))for(m=m.reverse(),a=0,c=q.length;a<c;a++){var l=q[a];!0===$a.isClockWise(l)&&(q[a]=l.reverse())}var p=$a.triangulateShape(m,
    q);a=0;for(c=q.length;a<c;a++)l=q[a],m=m.concat(l);a=0;for(c=m.length;a<c;a++)l=m[a],e.push(l.x,l.y,0),f.push(0,0,1),g.push(l.x,l.y);a=0;for(c=p.length;a<c;a++)m=p[a],d.push(m[0]+h,m[1]+h,m[2]+h),k+=3}E.call(this);this.type="ShapeBufferGeometry";this.parameters={shapes:a,curveSegments:b};b=b||12;var d=[],e=[],f=[],g=[],h=0,k=0;if(!1===Array.isArray(a))c(a);else for(var m=0;m<a.length;m++)c(a[m]),this.addGroup(h,k,m),h+=k,k=0;this.setIndex(d);this.addAttribute("position",new B(e,3));this.addAttribute("normal",
    new B(f,3));this.addAttribute("uv",new B(g,2))}function ff(a,b){b.shapes=[];if(Array.isArray(a))for(var c=0,d=a.length;c<d;c++)b.shapes.push(a[c].uuid);else b.shapes.push(a.uuid);return b}function dc(a,b){E.call(this);this.type="EdgesGeometry";this.parameters={thresholdAngle:b};var c=[];b=Math.cos(Q.DEG2RAD*(void 0!==b?b:1));var d=[0,0],e={},f=["a","b","c"];if(a.isBufferGeometry){var g=new L;g.fromBufferGeometry(a)}else g=a.clone();g.mergeVertices();g.computeFaceNormals();a=g.vertices;g=g.faces;for(var h=
    0,k=g.length;h<k;h++)for(var m=g[h],q=0;3>q;q++){var n=m[f[q]];var l=m[f[(q+1)%3]];d[0]=Math.min(n,l);d[1]=Math.max(n,l);n=d[0]+","+d[1];void 0===e[n]?e[n]={index1:d[0],index2:d[1],face1:h,face2:void 0}:e[n].face2=h}for(n in e)if(d=e[n],void 0===d.face2||g[d.face1].normal.dot(g[d.face2].normal)<=b)f=a[d.index1],c.push(f.x,f.y,f.z),f=a[d.index2],c.push(f.x,f.y,f.z);this.addAttribute("position",new B(c,3))}function zb(a,b,c,d,e,f,g,h){L.call(this);this.type="CylinderGeometry";this.parameters={radiusTop:a,
    radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};this.fromBufferGeometry(new ab(a,b,c,d,e,f,g,h));this.mergeVertices()}function ab(a,b,c,d,e,f,g,h){function k(c){var e,f=new D,k=new p,u=0,v=!0===c?a:b,y=!0===c?1:-1;var x=t;for(e=1;e<=d;e++)n.push(0,w*y,0),l.push(0,y,0),r.push(.5,.5),t++;var B=t;for(e=0;e<=d;e++){var C=e/d*h+g,E=Math.cos(C),C=Math.sin(C);k.x=v*C;k.y=w*y;k.z=v*E;n.push(k.x,k.y,k.z);l.push(0,y,0);f.x=.5*E+.5;f.y=.5*C*y+.5;r.push(f.x,f.y);
    t++}for(e=0;e<d;e++)f=x+e,k=B+e,!0===c?q.push(k,k+1,f):q.push(k+1,k,f),u+=3;m.addGroup(z,u,!0===c?1:2);z+=u}E.call(this);this.type="CylinderBufferGeometry";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};var m=this;a=void 0!==a?a:1;b=void 0!==b?b:1;c=c||1;d=Math.floor(d)||8;e=Math.floor(e)||1;f=void 0!==f?f:!1;g=void 0!==g?g:0;h=void 0!==h?h:2*Math.PI;var q=[],n=[],l=[],r=[],t=0,v=[],w=c/2,z=0;(function(){var f,k,u=new p,
    J=new p,x=0,B=(b-a)/c;for(k=0;k<=e;k++){var D=[],C=k/e,E=C*(b-a)+a;for(f=0;f<=d;f++){var H=f/d,K=H*h+g,S=Math.sin(K),K=Math.cos(K);J.x=E*S;J.y=-C*c+w;J.z=E*K;n.push(J.x,J.y,J.z);u.set(S,B,K).normalize();l.push(u.x,u.y,u.z);r.push(H,1-C);D.push(t++)}v.push(D)}for(f=0;f<d;f++)for(k=0;k<e;k++)u=v[k+1][f],J=v[k+1][f+1],B=v[k][f+1],q.push(v[k][f],u,B),q.push(u,J,B),x+=6;m.addGroup(z,x,0);z+=x})();!1===f&&(0<a&&k(!0),0<b&&k(!1));this.setIndex(q);this.addAttribute("position",new B(n,3));this.addAttribute("normal",
    new B(l,3));this.addAttribute("uv",new B(r,2))}function Yc(a,b,c,d,e,f,g){zb.call(this,0,a,b,c,d,e,f,g);this.type="ConeGeometry";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}}function Zc(a,b,c,d,e,f,g){ab.call(this,0,a,b,c,d,e,f,g);this.type="ConeBufferGeometry";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}}function $c(a,b,c,d){L.call(this);this.type="CircleGeometry";this.parameters=
    {radius:a,segments:b,thetaStart:c,thetaLength:d};this.fromBufferGeometry(new ec(a,b,c,d));this.mergeVertices()}function ec(a,b,c,d){E.call(this);this.type="CircleBufferGeometry";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||1;b=void 0!==b?Math.max(3,b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e=[],f=[],g=[],h=[],k,m=new p,q=new D;f.push(0,0,0);g.push(0,0,1);h.push(.5,.5);var n=0;for(k=3;n<=b;n++,k+=3){var l=c+n/b*d;m.x=a*Math.cos(l);m.y=a*Math.sin(l);f.push(m.x,m.y,
    m.z);g.push(0,0,1);q.x=(f[k]/a+1)/2;q.y=(f[k+1]/a+1)/2;h.push(q.x,q.y)}for(k=1;k<=b;k++)e.push(k,k+1,0);this.setIndex(e);this.addAttribute("position",new B(f,3));this.addAttribute("normal",new B(g,3));this.addAttribute("uv",new B(h,2))}function fc(a){P.call(this);this.type="ShadowMaterial";this.color=new H(0);this.opacity=1;this.transparent=this.lights=!0;this.setValues(a)}function gc(a){Fa.call(this,a);this.type="RawShaderMaterial"}function Ua(a){P.call(this);this.defines={STANDARD:""};this.type=
    "MeshStandardMaterial";this.color=new H(16777215);this.metalness=this.roughness=.5;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new H(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new D(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.metalnessMap=this.roughnessMap=null;this.envMapIntensity=1;this.refractionRatio=
    .98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)}function Ab(a){Ua.call(this);this.defines={PHYSICAL:""};this.type="MeshPhysicalMaterial";this.reflectivity=.5;this.clearCoatRoughness=this.clearCoat=0;this.setValues(a)}function Ma(a){P.call(this);this.type="MeshPhongMaterial";this.color=new H(16777215);this.specular=new H(1118481);this.shininess=30;this.lightMap=this.map=null;
    this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new H(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new D(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=
    this.morphTargets=this.skinning=!1;this.setValues(a)}function Bb(a){Ma.call(this);this.defines={TOON:""};this.type="MeshToonMaterial";this.gradientMap=null;this.setValues(a)}function Cb(a){P.call(this);this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new D(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.lights=this.fog=
    !1;this.setValues(a)}function Db(a){P.call(this);this.type="MeshLambertMaterial";this.color=new H(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new H(0);this.emissiveIntensity=1;this.envMap=this.alphaMap=this.specularMap=this.emissiveMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=
    this.skinning=!1;this.setValues(a)}function Eb(a){W.call(this);this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(a)}function he(a,b,c){var d=this,e=!1,f=0,g=0,h=void 0;this.onStart=void 0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){g++;if(!1===e&&void 0!==d.onStart)d.onStart(a,f,g);e=!0};this.itemEnd=function(a){f++;if(void 0!==d.onProgress)d.onProgress(a,f,g);if(f===g&&(e=!1,void 0!==d.onLoad))d.onLoad()};this.itemError=function(a){if(void 0!==
    d.onError)d.onError(a)};this.resolveURL=function(a){return h?h(a):a};this.setURLModifier=function(a){h=a;return this}}function Na(a){this.manager=void 0!==a?a:xa}function gf(a){this.manager=void 0!==a?a:xa;this._parser=null}function ie(a){this.manager=void 0!==a?a:xa;this._parser=null}function ad(a){this.manager=void 0!==a?a:xa}function je(a){this.manager=void 0!==a?a:xa}function Ad(a){this.manager=void 0!==a?a:xa}function C(){this.type="Curve";this.arcLengthDivisions=200}function Ba(a,b,c,d,e,f,
    g,h){C.call(this);this.type="EllipseCurve";this.aX=a||0;this.aY=b||0;this.xRadius=c||1;this.yRadius=d||1;this.aStartAngle=e||0;this.aEndAngle=f||2*Math.PI;this.aClockwise=g||!1;this.aRotation=h||0}function hc(a,b,c,d,e,f){Ba.call(this,a,b,c,c,d,e,f);this.type="ArcCurve"}function ke(){var a=0,b=0,c=0,d=0;return{initCatmullRom:function(e,f,g,h,k){e=k*(g-e);h=k*(h-f);a=f;b=e;c=-3*f+3*g-2*e-h;d=2*f-2*g+e+h},initNonuniformCatmullRom:function(e,f,g,h,k,m,q){e=((f-e)/k-(g-e)/(k+m)+(g-f)/m)*m;h=((g-f)/m-
    (h-f)/(m+q)+(h-g)/q)*m;a=f;b=e;c=-3*f+3*g-2*e-h;d=2*f-2*g+e+h},calc:function(e){var f=e*e;return a+b*e+c*f+d*f*e}}}function ca(a,b,c,d){C.call(this);this.type="CatmullRomCurve3";this.points=a||[];this.closed=b||!1;this.curveType=c||"centripetal";this.tension=d||.5}function hf(a,b,c,d,e){b=.5*(d-b);e=.5*(e-c);var f=a*a;return(2*c-2*d+b+e)*a*f+(-3*c+3*d-2*b-e)*f+b*a+c}function bd(a,b,c,d){var e=1-a;return e*e*b+2*(1-a)*a*c+a*a*d}function cd(a,b,c,d,e){var f=1-a,g=1-a;return f*f*f*b+3*g*g*a*c+3*(1-a)*
    a*a*d+a*a*a*e}function Oa(a,b,c,d){C.call(this);this.type="CubicBezierCurve";this.v0=a||new D;this.v1=b||new D;this.v2=c||new D;this.v3=d||new D}function Va(a,b,c,d){C.call(this);this.type="CubicBezierCurve3";this.v0=a||new p;this.v1=b||new p;this.v2=c||new p;this.v3=d||new p}function ya(a,b){C.call(this);this.type="LineCurve";this.v1=a||new D;this.v2=b||new D}function Pa(a,b){C.call(this);this.type="LineCurve3";this.v1=a||new p;this.v2=b||new p}function Qa(a,b,c){C.call(this);this.type="QuadraticBezierCurve";
    this.v0=a||new D;this.v1=b||new D;this.v2=c||new D}function Wa(a,b,c){C.call(this);this.type="QuadraticBezierCurve3";this.v0=a||new p;this.v1=b||new p;this.v2=c||new p}function Ra(a){C.call(this);this.type="SplineCurve";this.points=a||[]}function bb(){C.call(this);this.type="CurvePath";this.curves=[];this.autoClose=!1}function Sa(a){bb.call(this);this.type="Path";this.currentPoint=new D;a&&this.setFromPoints(a)}function jb(a){Sa.call(this,a);this.uuid=Q.generateUUID();this.type="Shape";this.holes=
    []}function da(a,b){x.call(this);this.type="Light";this.color=new H(a);this.intensity=void 0!==b?b:1;this.receiveShadow=void 0}function Bd(a,b,c){da.call(this,a,c);this.type="HemisphereLight";this.castShadow=void 0;this.position.copy(x.DefaultUp);this.updateMatrix();this.groundColor=new H(b)}function Fb(a){this.camera=a;this.bias=0;this.radius=1;this.mapSize=new D(512,512);this.map=null;this.matrix=new O}function Cd(){Fb.call(this,new ba(50,1,.5,500))}function Dd(a,b,c,d,e,f){da.call(this,a,b);this.type=
    "SpotLight";this.position.copy(x.DefaultUp);this.updateMatrix();this.target=new x;Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(a){this.intensity=a/Math.PI}});this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.penumbra=void 0!==e?e:0;this.decay=void 0!==f?f:1;this.shadow=new Cd}function Ed(a,b,c,d){da.call(this,a,b);this.type="PointLight";Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(a){this.intensity=
    a/(4*Math.PI)}});this.distance=void 0!==c?c:0;this.decay=void 0!==d?d:1;this.shadow=new Fb(new ba(90,1,.5,500))}function Fd(){Fb.call(this,new Lb(-5,5,5,-5,.5,500))}function Gd(a,b){da.call(this,a,b);this.type="DirectionalLight";this.position.copy(x.DefaultUp);this.updateMatrix();this.target=new x;this.shadow=new Fd}function Hd(a,b){da.call(this,a,b);this.type="AmbientLight";this.castShadow=void 0}function Id(a,b,c,d){da.call(this,a,b);this.type="RectAreaLight";this.position.set(0,1,0);this.updateMatrix();
    this.width=void 0!==c?c:10;this.height=void 0!==d?d:10}function Jd(a,b,c,d){T.call(this,a,b,c,d)}function Kd(a,b,c){T.call(this,a,b,c)}function pa(a,b,c,d){this.parameterPositions=a;this._cachedIndex=0;this.resultBuffer=void 0!==d?d:new b.constructor(c);this.sampleValues=b;this.valueSize=c}function Ld(a,b,c,d){pa.call(this,a,b,c,d)}function dd(a,b,c,d){T.call(this,a,b,c,d)}function Md(a,b,c,d){T.call(this,a,b,c,d)}function ic(a,b,c,d){T.call(this,a,b,c,d)}function Nd(a,b,c,d){pa.call(this,a,b,c,d);
    this._offsetNext=this._weightNext=this._offsetPrev=this._weightPrev=-0}function ed(a,b,c,d){pa.call(this,a,b,c,d)}function Od(a,b,c,d){pa.call(this,a,b,c,d)}function T(a,b,c,d){if(void 0===a)throw Error("THREE.KeyframeTrack: track name is undefined");if(void 0===b||0===b.length)throw Error("THREE.KeyframeTrack: no keyframes in track named "+a);this.name=a;this.times=ga.convertArray(b,this.TimeBufferType);this.values=ga.convertArray(c,this.ValueBufferType);this.setInterpolation(d||this.DefaultInterpolation);
    this.validate();this.optimize()}function jc(a,b,c,d){T.call(this,a,b,c,d)}function Ca(a,b,c){this.name=a;this.tracks=c;this.duration=void 0!==b?b:-1;this.uuid=Q.generateUUID();0>this.duration&&this.resetDuration();this.optimize()}function Pd(a){this.manager=void 0!==a?a:xa;this.textures={}}function le(a){this.manager=void 0!==a?a:xa}function kc(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}}function me(a){"boolean"===typeof a&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),
    a=void 0);this.manager=void 0!==a?a:xa;this.withCredentials=!1}function jf(a){this.manager=void 0!==a?a:xa;this.texturePath=""}function ne(a){"undefined"===typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");"undefined"===typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported.");this.manager=void 0!==a?a:xa;this.options=void 0}function oe(){this.type="ShapePath";this.subPaths=[];this.currentPath=null}function pe(a){this.type="Font";
    this.data=a}function kf(a){this.manager=void 0!==a?a:xa}function qe(a){this.manager=void 0!==a?a:xa}function lf(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new ba;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=!1;this.cameraR=new ba;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=!1}function fd(a,b,c){x.call(this);this.type="CubeCamera";var d=new ba(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new p(1,0,0));this.add(d);var e=new ba(90,1,a,b);e.up.set(0,-1,
    0);e.lookAt(new p(-1,0,0));this.add(e);var f=new ba(90,1,a,b);f.up.set(0,0,1);f.lookAt(new p(0,1,0));this.add(f);var g=new ba(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new p(0,-1,0));this.add(g);var h=new ba(90,1,a,b);h.up.set(0,-1,0);h.lookAt(new p(0,0,1));this.add(h);var k=new ba(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new p(0,0,-1));this.add(k);this.renderTarget=new Jb(c,c,{format:1022,magFilter:1006,minFilter:1006});this.renderTarget.texture.name="CubeCamera";this.update=function(a,b){null===this.parent&&
    this.updateMatrixWorld();var c=this.renderTarget,m=c.texture.generateMipmaps;c.texture.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.texture.generateMipmaps=m;c.activeCubeFace=5;a.render(b,k,c);a.setRenderTarget(null)};this.clear=function(a,b,c,d){for(var e=this.renderTarget,f=0;6>f;f++)e.activeCubeFace=f,a.setRenderTarget(e),a.clear(b,c,d);a.setRenderTarget(null)}}
    function re(){x.call(this);this.type="AudioListener";this.context=se.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null}function lc(a){x.call(this);this.type="Audio";this.context=a.context;this.gain=this.context.createGain();this.gain.connect(a.getInput());this.autoplay=!1;this.buffer=null;this.loop=!1;this.offset=this.startTime=0;this.playbackRate=1;this.isPlaying=!1;this.hasPlaybackControl=!0;this.sourceType="empty";this.filters=[]}function te(a){lc.call(this,
    a);this.panner=this.context.createPanner();this.panner.connect(this.gain)}function ue(a,b){this.analyser=a.context.createAnalyser();this.analyser.fftSize=void 0!==b?b:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);a.getOutput().connect(this.analyser)}function ve(a,b,c){this.binding=a;this.valueSize=c;a=Float64Array;switch(b){case "quaternion":b=this._slerp;break;case "string":case "bool":a=Array;b=this._select;break;default:b=this._lerp}this.buffer=new a(4*c);this._mixBufferRegion=
    b;this.referenceCount=this.useCount=this.cumulativeWeight=0}function mf(a,b,c){c=c||qa.parseTrackName(b);this._targetGroup=a;this._bindings=a.subscribe_(b,c)}function qa(a,b,c){this.path=b;this.parsedPath=c||qa.parseTrackName(b);this.node=qa.findNode(a,this.parsedPath.nodeName)||a;this.rootNode=a}function nf(){this.uuid=Q.generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;var a={};this._indicesByUUID=a;for(var b=0,c=arguments.length;b!==c;++b)a[arguments[b].uuid]=
    b;this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};var d=this;this.stats={objects:{get total(){return d._objects.length},get inUse(){return this.total-d.nCachedObjects_}},get bindingsPerObject(){return d._bindings.length}}}function of(a,b,c){this._mixer=a;this._clip=b;this._localRoot=c||null;a=b.tracks;b=a.length;c=Array(b);for(var d={endingStart:2400,endingEnd:2400},e=0;e!==b;++e){var f=a[e].createInterpolant(null);c[e]=f;f.settings=d}this._interpolantSettings=
    d;this._interpolants=c;this._propertyBindings=Array(b);this._weightInterpolant=this._timeScaleInterpolant=this._byClipCacheIndex=this._cacheIndex=null;this.loop=2201;this._loopCount=-1;this._startTime=null;this.time=0;this._effectiveWeight=this.weight=this._effectiveTimeScale=this.timeScale=1;this.repetitions=Infinity;this.paused=!1;this.enabled=!0;this.clampWhenFinished=!1;this.zeroSlopeAtEnd=this.zeroSlopeAtStart=!0}function we(a){this._root=a;this._initMemoryManager();this.time=this._accuIndex=
    0;this.timeScale=1}function Qd(a,b){"string"===typeof a&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),a=b);this.value=a}function xe(){E.call(this);this.type="InstancedBufferGeometry";this.maxInstancedCount=void 0}function ye(a,b,c,d){this.uuid=Q.generateUUID();this.data=a;this.itemSize=b;this.offset=c;this.normalized=!0===d}function mc(a,b){this.uuid=Q.generateUUID();this.array=a;this.stride=b;this.count=void 0!==a?a.length/b:0;this.dynamic=!1;this.updateRange={offset:0,count:-1};
    this.onUploadCallback=function(){};this.version=0}function ze(a,b,c){mc.call(this,a,b);this.meshPerAttribute=c||1}function Ae(a,b,c){M.call(this,a,b);this.meshPerAttribute=c||1}function pf(a,b,c,d){this.ray=new sb(a,b);this.near=c||0;this.far=d||Infinity;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points}}})}function qf(a,
    b){return a.distance-b.distance}function Be(a,b,c,d){if(!1!==a.visible&&(a.raycast(b,c),!0===d)){a=a.children;d=0;for(var e=a.length;d<e;d++)Be(a[d],b,c,!0)}}function rf(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1}function sf(a,b,c){this.radius=void 0!==a?a:1;this.phi=void 0!==b?b:0;this.theta=void 0!==c?c:0;return this}function tf(a,b,c){this.radius=void 0!==a?a:1;this.theta=void 0!==b?b:0;this.y=void 0!==c?c:0;return this}function gd(a){x.call(this);
    this.material=a;this.render=function(){}}function hd(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16711680;d=void 0!==d?d:1;b=0;(c=this.object.geometry)&&c.isGeometry?b=3*c.faces.length:c&&c.isBufferGeometry&&(b=c.attributes.normal.count);c=new E;b=new B(6*b,3);c.addAttribute("position",b);X.call(this,c,new W({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()}function nc(a,b){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=
    !1;this.color=b;a=new E;b=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(var c=0,d=1;32>c;c++,d++){var e=c/32*Math.PI*2,f=d/32*Math.PI*2;b.push(Math.cos(e),Math.sin(e),1,Math.cos(f),Math.sin(f),1)}a.addAttribute("position",new B(b,3));b=new W({fog:!1});this.cone=new X(a,b);this.add(this.cone);this.update()}function uf(a){var b=[];a&&a.isBone&&b.push(a);for(var c=0;c<a.children.length;c++)b.push.apply(b,uf(a.children[c]));return b}function oc(a){for(var b=uf(a),c=new E,d=[],e=
    [],f=new H(0,0,1),g=new H(0,1,0),h=0;h<b.length;h++){var k=b[h];k.parent&&k.parent.isBone&&(d.push(0,0,0),d.push(0,0,0),e.push(f.r,f.g,f.b),e.push(g.r,g.g,g.b))}c.addAttribute("position",new B(d,3));c.addAttribute("color",new B(e,3));d=new W({vertexColors:2,depthTest:!1,depthWrite:!1,transparent:!0});X.call(this,c,d);this.root=a;this.bones=b;this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1}function pc(a,b,c){this.light=a;this.light.updateMatrixWorld();this.color=c;a=new wb(b,4,2);b=new Aa({wireframe:!0,
    fog:!1});ra.call(this,a,b);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1;this.update()}function qc(a,b){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.color=b;a=new W({fog:!1});b=new E;b.addAttribute("position",new M(new Float32Array(15),3));this.line=new sa(b,a);this.add(this.line);this.update()}function rc(a,b,c){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=
    !1;this.color=c;a=new ub(b);a.rotateY(.5*Math.PI);this.material=new Aa({wireframe:!0,fog:!1});void 0===this.color&&(this.material.vertexColors=2);b=a.getAttribute("position");b=new Float32Array(3*b.count);a.addAttribute("color",new M(b,3));this.add(new ra(a,this.material));this.update()}function id(a,b,c,d){a=a||10;b=b||10;c=new H(void 0!==c?c:4473924);d=new H(void 0!==d?d:8947848);var e=b/2,f=a/b,g=a/2;a=[];for(var h=[],k=0,m=0,q=-g;k<=b;k++,q+=f){a.push(-g,0,q,g,0,q);a.push(q,0,-g,q,0,g);var n=
    k===e?c:d;n.toArray(h,m);m+=3;n.toArray(h,m);m+=3;n.toArray(h,m);m+=3;n.toArray(h,m);m+=3}b=new E;b.addAttribute("position",new B(a,3));b.addAttribute("color",new B(h,3));c=new W({vertexColors:2});X.call(this,b,c)}function Rd(a,b,c,d,e,f){a=a||10;b=b||16;c=c||8;d=d||64;e=new H(void 0!==e?e:4473924);f=new H(void 0!==f?f:8947848);var g=[],h=[],k;for(k=0;k<=b;k++){var m=k/b*2*Math.PI;var q=Math.sin(m)*a;m=Math.cos(m)*a;g.push(0,0,0);g.push(q,0,m);var n=k&1?e:f;h.push(n.r,n.g,n.b);h.push(n.r,n.g,n.b)}for(k=
    0;k<=c;k++){n=k&1?e:f;var l=a-a/c*k;for(b=0;b<d;b++)m=b/d*2*Math.PI,q=Math.sin(m)*l,m=Math.cos(m)*l,g.push(q,0,m),h.push(n.r,n.g,n.b),m=(b+1)/d*2*Math.PI,q=Math.sin(m)*l,m=Math.cos(m)*l,g.push(q,0,m),h.push(n.r,n.g,n.b)}a=new E;a.addAttribute("position",new B(g,3));a.addAttribute("color",new B(h,3));g=new W({vertexColors:2});X.call(this,a,g)}function jd(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=0;(c=this.object.geometry)&&c.isGeometry?b=c.faces.length:
    console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");c=new E;b=new B(6*b,3);c.addAttribute("position",b);X.call(this,c,new W({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()}function sc(a,b,c){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.color=c;void 0===b&&(b=1);a=new E;a.addAttribute("position",new B([-b,b,0,b,b,0,b,-b,0,-b,-b,0,-b,b,0],3));b=new W({fog:!1});
    this.lightPlane=new sa(a,b);this.add(this.lightPlane);a=new E;a.addAttribute("position",new B([0,0,0,0,0,1],3));this.targetLine=new sa(a,b);this.add(this.targetLine);this.update()}function kd(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){f.push(0,0,0);g.push(b.r,b.g,b.b);void 0===h[a]&&(h[a]=[]);h[a].push(f.length/3-1)}var d=new E,e=new W({color:16777215,vertexColors:1}),f=[],g=[],h={},k=new H(16755200),m=new H(16711680),q=new H(43775),l=new H(16777215),u=new H(3355443);b("n1","n2",k);b("n2",
    "n4",k);b("n4","n3",k);b("n3","n1",k);b("f1","f2",k);b("f2","f4",k);b("f4","f3",k);b("f3","f1",k);b("n1","f1",k);b("n2","f2",k);b("n3","f3",k);b("n4","f4",k);b("p","n1",m);b("p","n2",m);b("p","n3",m);b("p","n4",m);b("u1","u2",q);b("u2","u3",q);b("u3","u1",q);b("c","t",l);b("p","c",u);b("cn1","cn2",u);b("cn3","cn4",u);b("cf1","cf2",u);b("cf3","cf4",u);d.addAttribute("position",new B(f,3));d.addAttribute("color",new B(g,3));X.call(this,d,e);this.camera=a;this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix();
    this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=h;this.update()}function Gb(a,b){this.object=a;void 0===b&&(b=16776960);a=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var c=new Float32Array(24),d=new E;d.setIndex(new M(a,1));d.addAttribute("position",new M(c,3));X.call(this,d,new W({color:b}));this.matrixAutoUpdate=!1;this.update()}function ld(a,b){this.type="Box3Helper";this.box=a;a=void 0!==b?b:16776960;b=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,
    4,1,5,2,6,3,7]);var c=new E;c.setIndex(new M(b,1));c.addAttribute("position",new B([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3));X.call(this,c,new W({color:a}));this.geometry.computeBoundingSphere()}function md(a,b,c){this.type="PlaneHelper";this.plane=a;this.size=void 0===b?1:b;a=void 0!==c?c:16776960;b=new E;b.addAttribute("position",new B([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3));b.computeBoundingSphere();sa.call(this,b,new W({color:a}));b=new E;
    b.addAttribute("position",new B([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3));b.computeBoundingSphere();this.add(new ra(b,new Aa({color:a,opacity:.2,transparent:!0,depthWrite:!1})))}function Hb(a,b,c,d,e,f){x.call(this);void 0===d&&(d=16776960);void 0===c&&(c=1);void 0===e&&(e=.2*c);void 0===f&&(f=.2*e);void 0===Sd&&(Sd=new E,Sd.addAttribute("position",new B([0,0,0,0,1,0],3)),Ce=new ab(0,.5,1,5,1),Ce.translate(0,-.5,0));this.position.copy(b);this.line=new sa(Sd,new W({color:d}));this.line.matrixAutoUpdate=
    !1;this.add(this.line);this.cone=new ra(Ce,new Aa({color:d}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(a);this.setLength(c,e,f)}function nd(a){a=a||1;var b=[0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a];a=new E;a.addAttribute("position",new B(b,3));a.addAttribute("color",new B([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));b=new W({vertexColors:2});X.call(this,a,b)}function vf(a){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");ca.call(this,
    a);this.type="catmullrom";this.closed=!0}function wf(a){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");ca.call(this,a);this.type="catmullrom"}function De(a){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");ca.call(this,a);this.type="catmullrom"}void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52));void 0===Number.isInteger&&(Number.isInteger=function(a){return"number"===typeof a&&isFinite(a)&&Math.floor(a)===a});void 0===
    Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});!1==="name"in Function.prototype&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}});void 0===Object.assign&&function(){Object.assign=function(a){if(void 0===a||null===a)throw new TypeError("Cannot convert undefined or null to object");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e in d)Object.prototype.hasOwnProperty.call(d,
    e)&&(b[e]=d[e])}return b}}();Object.assign(za.prototype,{addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)},removeEventListener:function(a,b){void 0!==this._listeners&&(a=this._listeners[a],void 0!==a&&(b=a.indexOf(b),-1!==b&&a.splice(b,1)))},dispatchEvent:function(a){if(void 0!==
    this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var b=b.slice(0),c=0,d=b.length;c<d;c++)b[c].call(this,a)}}}});var Q={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var a=[],b=0;256>b;b++)a[b]=(16>b?"0":"")+b.toString(16).toUpperCase();return function(){var b=4294967295*Math.random()|0,d=4294967295*Math.random()|0,e=4294967295*Math.random()|0,f=4294967295*Math.random()|0;return a[b&255]+a[b>>8&255]+a[b>>16&255]+a[b>>24&255]+"-"+a[d&255]+a[d>>8&
    255]+"-"+a[d>>16&15|64]+a[d>>24&255]+"-"+a[e&63|128]+a[e>>8&255]+"-"+a[e>>16&255]+a[e>>24&255]+a[f&255]+a[f>>8&255]+a[f>>16&255]+a[f>>24&255]}}(),clamp:function(a,b,c){return Math.max(b,Math.min(c,a))},euclideanModulo:function(a,b){return(a%b+b)%b},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},lerp:function(a,b,c){return(1-c)*a+c*b},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;
    a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(.5-Math.random())},degToRad:function(a){return a*Q.DEG2RAD},radToDeg:function(a){return a*Q.RAD2DEG},isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},ceilPowerOfTwo:function(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))},floorPowerOfTwo:function(a){return Math.pow(2,Math.floor(Math.log(a)/
    Math.LN2))}};Object.defineProperties(D.prototype,{width:{get:function(){return this.x},set:function(a){this.x=a}},height:{get:function(){return this.y},set:function(a){this.y=a}}});Object.assign(D.prototype,{isVector2:!0,set:function(a,b){this.x=a;this.y=b;return this},setScalar:function(a){this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+
    a);}return this},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},
    addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},subScalar:function(a){this.x-=a;this.y-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=
    a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},applyMatrix3:function(a){var b=this.x,c=this.y;a=a.elements;this.x=a[0]*b+a[3]*c+a[6];this.y=a[1]*b+a[4]*c+a[7];return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);return this},clamp:function(a,
    b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));return this},clampScalar:function(){var a=new D,b=new D;return function(c,d){a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=
    Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||
    1)},angle:function(){var a=Math.atan2(this.y,this.x);0>a&&(a+=2*Math.PI);return a},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},manhattanDistanceTo:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,
    a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;return a},fromBufferAttribute:function(a,b,c){void 0!==c&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);return this},rotateAround:function(a,b){var c=Math.cos(b);b=Math.sin(b);var d=
    this.x-a.x,e=this.y-a.y;this.x=d*c-e*b+a.x;this.y=d*b+e*c+a.y;return this}});Object.assign(O.prototype,{isMatrix4:!0,set:function(a,b,c,d,e,f,g,h,k,m,q,l,u,r,t,p){var n=this.elements;n[0]=a;n[4]=b;n[8]=c;n[12]=d;n[1]=e;n[5]=f;n[9]=g;n[13]=h;n[2]=k;n[6]=m;n[10]=q;n[14]=l;n[3]=u;n[7]=r;n[11]=t;n[15]=p;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},clone:function(){return(new O).fromArray(this.elements)},copy:function(a){var b=this.elements;a=a.elements;b[0]=
    a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return this},copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){a.setFromMatrixColumn(this,0);b.setFromMatrixColumn(this,1);c.setFromMatrixColumn(this,2);return this},makeBasis:function(a,b,c){this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,
    1);return this},extractRotation:function(){var a=new p;return function(b){var c=this.elements,d=b.elements,e=1/a.setFromMatrixColumn(b,0).length(),f=1/a.setFromMatrixColumn(b,1).length();b=1/a.setFromMatrixColumn(b,2).length();c[0]=d[0]*e;c[1]=d[1]*e;c[2]=d[2]*e;c[4]=d[4]*f;c[5]=d[5]*f;c[6]=d[6]*f;c[8]=d[8]*b;c[9]=d[9]*b;c[10]=d[10]*b;return this}}(),makeRotationFromEuler:function(a){a&&a.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){var k=f*h;var m=f*e;var q=c*h;a=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=m+q*d;b[5]=k-a*d;b[9]=-c*g;b[2]=a-k*d;b[6]=q+m*d;b[10]=f*g}else"YXZ"===a.order?(k=g*h,m=g*e,q=d*h,a=d*e,b[0]=k+a*c,b[4]=q*c-m,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=m*c-q,b[6]=a+k*c,b[10]=f*g):"ZXY"===a.order?(k=g*h,m=g*e,q=d*h,a=d*e,b[0]=k-a*c,b[4]=-f*e,b[8]=q+m*c,b[1]=m+q*c,b[5]=f*h,b[9]=
    a-k*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(k=f*h,m=f*e,q=c*h,a=c*e,b[0]=g*h,b[4]=q*d-m,b[8]=k*d+a,b[1]=g*e,b[5]=a*d+k,b[9]=m*d-q,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===a.order?(k=f*g,m=f*d,q=c*g,a=c*d,b[0]=g*h,b[4]=a-k*e,b[8]=q*e+m,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=m*e+q,b[10]=k-a*e):"XZY"===a.order&&(k=f*g,m=f*d,q=c*g,a=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=k*e+a,b[5]=f*h,b[9]=m*e-q,b[2]=q*e-m,b[6]=c*h,b[10]=a*e+k);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},makeRotationFromQuaternion:function(a){var b=
    this.elements,c=a._x,d=a._y,e=a._z,f=a._w,g=c+c,h=d+d,k=e+e;a=c*g;var m=c*h,c=c*k,q=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(q+e);b[4]=m-f;b[8]=c+h;b[1]=m+f;b[5]=1-(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+q);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new p,b=new p,c=new p;return function(d,e,f){var g=this.elements;c.subVectors(d,e);0===c.lengthSq()&&(c.z=1);c.normalize();a.crossVectors(f,c);0===a.lengthSq()&&(1===Math.abs(f.z)?c.x+=1E-4:c.z+=1E-4,
    c.normalize(),a.crossVectors(f,c));a.normalize();b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;g[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements;
    b=this.elements;a=c[0];var e=c[4],f=c[8],g=c[12],h=c[1],k=c[5],m=c[9],q=c[13],n=c[2],l=c[6],r=c[10],t=c[14],p=c[3],w=c[7],z=c[11],c=c[15],y=d[0],I=d[4],A=d[8],J=d[12],x=d[1],B=d[5],D=d[9],C=d[13],E=d[2],H=d[6],K=d[10],S=d[14],L=d[3],N=d[7],M=d[11],d=d[15];b[0]=a*y+e*x+f*E+g*L;b[4]=a*I+e*B+f*H+g*N;b[8]=a*A+e*D+f*K+g*M;b[12]=a*J+e*C+f*S+g*d;b[1]=h*y+k*x+m*E+q*L;b[5]=h*I+k*B+m*H+q*N;b[9]=h*A+k*D+m*K+q*M;b[13]=h*J+k*C+m*S+q*d;b[2]=n*y+l*x+r*E+t*L;b[6]=n*I+l*B+r*H+t*N;b[10]=n*A+l*D+r*K+t*M;b[14]=n*J+l*
    C+r*S+t*d;b[3]=p*y+w*x+z*E+c*L;b[7]=p*I+w*B+z*H+c*N;b[11]=p*A+w*D+z*K+c*M;b[15]=p*J+w*C+z*S+c*d;return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},applyToBufferAttribute:function(){var a=new p;return function(b){for(var c=0,d=b.count;c<d;c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix4(this),b.setXYZ(c,a.x,a.y,a.z);return b}}(),determinant:function(){var a=
    this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],k=a[13],m=a[2],q=a[6],n=a[10],l=a[14];return a[3]*(+e*h*q-d*k*q-e*g*n+c*k*n+d*g*l-c*h*l)+a[7]*(+b*h*l-b*k*n+e*f*n-d*f*l+d*k*m-e*h*m)+a[11]*(+b*k*q-b*g*l-e*f*q+c*f*l+e*g*m-c*k*m)+a[15]*(-d*g*m-b*h*q+b*g*n+d*f*q-c*f*n+c*h*m)},transpose:function(){var a=this.elements;var b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},setPosition:function(a){var b=
    this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements;a=d[0];var e=d[1],f=d[2],g=d[3],h=d[4],k=d[5],m=d[6],q=d[7],l=d[8],u=d[9],r=d[10],t=d[11],p=d[12],w=d[13],z=d[14],d=d[15],y=u*z*q-w*r*q+w*m*t-k*z*t-u*m*d+k*r*d,x=p*r*q-l*z*q-p*m*t+h*z*t+l*m*d-h*r*d,A=l*w*q-p*u*q+p*k*t-h*w*t-l*k*d+h*u*d,J=p*u*m-l*w*m-p*k*r+h*w*r+l*k*z-h*u*z,B=a*y+e*x+f*A+g*J;if(0===B){if(!0===b)throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
    console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");return this.identity()}b=1/B;c[0]=y*b;c[1]=(w*r*g-u*z*g-w*f*t+e*z*t+u*f*d-e*r*d)*b;c[2]=(k*z*g-w*m*g+w*f*q-e*z*q-k*f*d+e*m*d)*b;c[3]=(u*m*g-k*r*g-u*f*q+e*r*q+k*f*t-e*m*t)*b;c[4]=x*b;c[5]=(l*z*g-p*r*g+p*f*t-a*z*t-l*f*d+a*r*d)*b;c[6]=(p*m*g-h*z*g-p*f*q+a*z*q+h*f*d-a*m*d)*b;c[7]=(h*r*g-l*m*g+l*f*q-a*r*q-h*f*t+a*m*t)*b;c[8]=A*b;c[9]=(p*u*g-l*w*g-p*e*t+a*w*t+l*e*d-a*u*d)*b;c[10]=(h*w*g-p*k*g+p*e*q-a*w*q-h*e*d+a*k*d)*b;c[11]=
    (l*k*g-h*u*g-l*e*q+a*u*q+h*e*t-a*k*t)*b;c[12]=J*b;c[13]=(l*w*f-p*u*f+p*e*r-a*w*r-l*e*z+a*u*z)*b;c[14]=(p*k*f-h*w*f-p*e*m+a*w*m+h*e*z-a*k*z)*b;c[15]=(h*u*f-l*k*f+l*e*m-a*u*m-h*e*r+a*k*r)*b;return this},scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],a[4]*a[4]+a[5]*a[5]+a[6]*a[6],
    a[8]*a[8]+a[9]*a[9]+a[10]*a[10]))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=
    Math.cos(b);b=Math.sin(b);var d=1-c,e=a.x,f=a.y;a=a.z;var g=d*e,h=d*f;this.set(g*e+c,g*f-b*a,g*a+b*f,0,g*f+b*a,h*f+c,h*a-b*e,0,g*a-b*f,h*a+b*e,d*a*a+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeShear:function(a,b,c){this.set(1,b,c,0,a,1,c,0,a,b,1,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new p,b=new O;return function(c,
    d,e){var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(g=-g);c.x=f[12];c.y=f[13];c.z=f[14];b.copy(this);c=1/g;var f=1/h,m=1/k;b.elements[0]*=c;b.elements[1]*=c;b.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=m;b.elements[9]*=m;b.elements[10]*=m;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makePerspective:function(a,b,c,d,e,f){void 0===f&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(c-d);g[9]=(c+d)/(c-d);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;g[11]=-1;g[15]=0;return this},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=1/(b-a),k=1/(c-d),m=1/(f-e);g[0]=2*h;g[4]=0;g[8]=0;g[12]=-((b+a)*h);g[1]=0;g[5]=2*k;g[9]=0;g[13]=-((c+d)*k);g[2]=0;g[6]=0;g[10]=-2*m;g[14]=-((f+e)*m);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},equals:function(a){var b=this.elements;
    a=a.elements;for(var c=0;16>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a,b){void 0===b&&(b=0);for(var c=0;16>c;c++)this.elements[c]=a[c+b];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a}});Object.assign(ha,{slerp:function(a,b,c,d){return c.copy(a).slerp(b,
    d)},slerpFlat:function(a,b,c,d,e,f,g){var h=c[d+0],k=c[d+1],m=c[d+2];c=c[d+3];d=e[f+0];var q=e[f+1],l=e[f+2];e=e[f+3];if(c!==e||h!==d||k!==q||m!==l){f=1-g;var u=h*d+k*q+m*l+c*e,r=0<=u?1:-1,p=1-u*u;p>Number.EPSILON&&(p=Math.sqrt(p),u=Math.atan2(p,u*r),f=Math.sin(f*u)/p,g=Math.sin(g*u)/p);r*=g;h=h*f+d*r;k=k*f+q*r;m=m*f+l*r;c=c*f+e*r;f===1-g&&(g=1/Math.sqrt(h*h+k*k+m*m+c*c),h*=g,k*=g,m*=g,c*=g)}a[b]=h;a[b+1]=k;a[b+2]=m;a[b+3]=c}});Object.defineProperties(ha.prototype,{x:{get:function(){return this._x},
    set:function(a){this._x=a;this.onChangeCallback()}},y:{get:function(){return this._y},set:function(a){this._y=a;this.onChangeCallback()}},z:{get:function(){return this._z},set:function(a){this._z=a;this.onChangeCallback()}},w:{get:function(){return this._w},set:function(a){this._w=a;this.onChangeCallback()}}});Object.assign(ha.prototype,{set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,
    this._w)},copy:function(a){this._x=a.x;this._y=a.y;this._z=a.z;this._w=a.w;this.onChangeCallback();return this},setFromEuler:function(a,b){if(!a||!a.isEuler)throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var c=a._x,d=a._y,e=a._z;a=a.order;var f=Math.cos,g=Math.sin,h=f(c/2),k=f(d/2),f=f(e/2),c=g(c/2),d=g(d/2),e=g(e/2);"XYZ"===a?(this._x=c*k*f+h*d*e,this._y=h*d*f-c*k*e,this._z=h*k*e+c*d*f,this._w=h*k*f-c*d*e):"YXZ"===a?(this._x=c*k*f+
    h*d*e,this._y=h*d*f-c*k*e,this._z=h*k*e-c*d*f,this._w=h*k*f+c*d*e):"ZXY"===a?(this._x=c*k*f-h*d*e,this._y=h*d*f+c*k*e,this._z=h*k*e+c*d*f,this._w=h*k*f-c*d*e):"ZYX"===a?(this._x=c*k*f-h*d*e,this._y=h*d*f+c*k*e,this._z=h*k*e-c*d*f,this._w=h*k*f+c*d*e):"YZX"===a?(this._x=c*k*f+h*d*e,this._y=h*d*f+c*k*e,this._z=h*k*e-c*d*f,this._w=h*k*f-c*d*e):"XZY"===a&&(this._x=c*k*f-h*d*e,this._y=h*d*f-c*k*e,this._z=h*k*e+c*d*f,this._w=h*k*f+c*d*e);if(!1!==b)this.onChangeCallback();return this},setFromAxisAngle:function(a,
    b){b/=2;var c=Math.sin(b);this._x=a.x*c;this._y=a.y*c;this._z=a.z*c;this._w=Math.cos(b);this.onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],m=c+f+b;0<m?(c=.5/Math.sqrt(m+1),this._w=.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=
    .25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=.25*c);this.onChangeCallback();return this},setFromUnitVectors:function(){var a=new p,b;return function(c,d){void 0===a&&(a=new p);b=c.dot(d)+1;1E-6>b?(b=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d);this._x=a.x;this._y=a.y;this._z=a.z;this._w=b;return this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){this._x*=
    -1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this.onChangeCallback();return this},
    multiply:function(a,b){return void 0!==b?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},premultiply:function(a){return this.multiplyQuaternions(a,this)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z;a=a._w;var f=b._x,g=b._y,h=b._z;b=b._w;this._x=c*b+a*f+d*h-e*g;this._y=d*b+a*g+e*f-c*h;this._z=e*b+a*h+c*g-d*f;this._w=a*b-c*f-d*g-e*h;this.onChangeCallback();
    return this},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;a=Math.sqrt(1-g*g);if(.001>Math.abs(a))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;var h=Math.atan2(a,g),g=Math.sin((1-b)*h)/a;b=Math.sin(b*h)/a;
    this._w=f*g+this._w*b;this._x=c*g+this._x*b;this._y=d*g+this._y*b;this._z=e*g+this._z*b;this.onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){void 0===b&&(b=0);this._x=a[b];this._y=a[b+1];this._z=a[b+2];this._w=a[b+3];this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._w;return a},onChange:function(a){this.onChangeCallback=
    a;return this},onChangeCallback:function(){}});Object.assign(p.prototype,{isVector3:!0,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setScalar:function(a){this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}return this},getComponent:function(a){switch(a){case 0:return this.x;
    case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},
    addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=
    a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a=new ha;return function(b){b&&b.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
    return this.applyQuaternion(a.setFromEuler(b))}}(),applyAxisAngle:function(){var a=new ha;return function(b,c){return this.applyQuaternion(a.setFromAxisAngle(b,c))}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+
    a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,m=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-m*-f;this.y=k*a+b*-f+m*-e-h*-g;this.z=m*a+b*-g+h*-f-k*-e;return this},project:function(){var a=new O;return function(b){a.multiplyMatrices(b.projectionMatrix,a.getInverse(b.matrixWorld));return this.applyMatrix4(a)}}(),unproject:function(){var a=new O;return function(b){a.multiplyMatrices(b.matrixWorld,
    a.getInverse(b.projectionMatrix));return this.applyMatrix4(a)}}(),transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;return this.normalize()},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);return this},max:function(a){this.x=
    Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));return this},clampScalar:function(){var a=new p,b=new p;return function(c,d){a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=
    Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=
    -this.x;this.y=-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=(a.x-
    this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},cross:function(a,b){return void 0!==b?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b)):this.crossVectors(this,a)},crossVectors:function(a,b){var c=a.x,d=a.y;a=a.z;var e=b.x,f=b.y;b=b.z;this.x=d*b-a*f;this.y=a*e-c*b;this.z=c*f-d*e;return this},projectOnVector:function(a){var b=
    a.dot(this)/a.lengthSq();return this.copy(a).multiplyScalar(b)},projectOnPlane:function(){var a=new p;return function(b){a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a=new p;return function(b){return this.sub(a.copy(b).multiplyScalar(2*this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/Math.sqrt(this.lengthSq()*a.lengthSq());return Math.acos(Q.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-
    a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},manhattanDistanceTo:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)+Math.abs(this.z-a.z)},setFromSpherical:function(a){var b=Math.sin(a.phi)*a.radius;this.x=b*Math.sin(a.theta);this.y=Math.cos(a.phi)*a.radius;this.z=b*Math.cos(a.theta);return this},setFromCylindrical:function(a){this.x=a.radius*Math.sin(a.theta);this.y=a.y;this.z=a.radius*Math.cos(a.theta);return this},setFromMatrixPosition:function(a){a=a.elements;this.x=a[12];this.y=
    a[13];this.z=a[14];return this},setFromMatrixScale:function(a){var b=this.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length();a=this.setFromMatrixColumn(a,2).length();this.x=b;this.y=c;this.z=a;return this},setFromMatrixColumn:function(a,b){return this.fromArray(a.elements,4*b)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=
    []);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a},fromBufferAttribute:function(a,b,c){void 0!==c&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);this.z=a.getZ(b);return this}});Object.assign(ma.prototype,{isMatrix3:!0,set:function(a,b,c,d,e,f,g,h,k){var m=this.elements;m[0]=a;m[1]=d;m[2]=g;m[3]=b;m[4]=e;m[5]=h;m[6]=c;m[7]=f;m[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},clone:function(){return(new this.constructor).fromArray(this.elements)},
    copy:function(a){var b=this.elements;a=a.elements;b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return this},setFromMatrix4:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[1],a[5],a[9],a[2],a[6],a[10]);return this},applyToBufferAttribute:function(){var a=new p;return function(b){for(var c=0,d=b.count;c<d;c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix3(this),b.setXYZ(c,a.x,a.y,a.z);return b}}(),multiply:function(a){return this.multiplyMatrices(this,
    a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements;b=this.elements;a=c[0];var e=c[3],f=c[6],g=c[1],h=c[4],k=c[7],m=c[2],q=c[5],c=c[8],l=d[0],p=d[3],r=d[6],t=d[1],v=d[4],w=d[7],z=d[2],y=d[5],d=d[8];b[0]=a*l+e*t+f*z;b[3]=a*p+e*v+f*y;b[6]=a*r+e*w+f*d;b[1]=g*l+h*t+k*z;b[4]=g*p+h*v+k*y;b[7]=g*r+h*w+k*d;b[2]=m*l+q*t+c*z;b[5]=m*p+q*v+c*y;b[8]=m*r+q*w+c*d;return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;
    b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,b){a&&a.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var c=a.elements;a=this.elements;var d=c[0],e=c[1],f=c[2],g=c[3],h=c[4],k=c[5],m=c[6],q=c[7],c=c[8],l=c*h-k*q,p=k*m-c*g,r=q*g-h*m,t=d*l+e*p+f*r;if(0===t){if(!0===
    b)throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");return this.identity()}b=1/t;a[0]=l*b;a[1]=(f*q-c*e)*b;a[2]=(k*e-f*h)*b;a[3]=p*b;a[4]=(c*d-f*m)*b;a[5]=(f*g-k*d)*b;a[6]=r*b;a[7]=(e*m-q*d)*b;a[8]=(h*d-e*g)*b;return this},transpose:function(){var a=this.elements;var b=a[1];a[1]=a[3];a[3]=b;b=a[2];a[2]=a[6];a[6]=b;b=a[5];a[5]=a[7];a[7]=b;return this},getNormalMatrix:function(a){return this.setFromMatrix4(a).getInverse(this).transpose()},
    transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},setUvTransform:function(a,b,c,d,e,f,g){var h=Math.cos(e);e=Math.sin(e);this.set(c*h,c*e,-c*(h*f+e*g)+f+a,-d*e,d*h,-d*(-e*f+h*g)+g+b,0,0,1)},scale:function(a,b){var c=this.elements;c[0]*=a;c[3]*=a;c[6]*=a;c[1]*=b;c[4]*=b;c[7]*=b;return this},rotate:function(a){var b=Math.cos(a);a=Math.sin(a);var c=this.elements,d=c[0],e=c[3],f=c[6],g=c[1],h=c[4],
    k=c[7];c[0]=b*d+a*g;c[3]=b*e+a*h;c[6]=b*f+a*k;c[1]=-a*d+b*g;c[4]=-a*e+b*h;c[7]=-a*f+b*k;return this},translate:function(a,b){var c=this.elements;c[0]+=a*c[2];c[3]+=a*c[5];c[6]+=a*c[8];c[1]+=b*c[2];c[4]+=b*c[5];c[7]+=b*c[8];return this},equals:function(a){var b=this.elements;a=a.elements;for(var c=0;9>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a,b){void 0===b&&(b=0);for(var c=0;9>c;c++)this.elements[c]=a[c+b];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);var c=
    this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a}});var Af=0;U.DEFAULT_IMAGE=void 0;U.DEFAULT_MAPPING=300;U.prototype=Object.assign(Object.create(za.prototype),{constructor:U,isTexture:!0,clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.name=a.name;this.image=a.image;this.mipmaps=a.mipmaps.slice(0);this.mapping=a.mapping;this.wrapS=a.wrapS;this.wrapT=a.wrapT;this.magFilter=a.magFilter;this.minFilter=
    a.minFilter;this.anisotropy=a.anisotropy;this.format=a.format;this.type=a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.center.copy(a.center);this.rotation=a.rotation;this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrix.copy(a.matrix);this.generateMipmaps=a.generateMipmaps;this.premultiplyAlpha=a.premultiplyAlpha;this.flipY=a.flipY;this.unpackAlignment=a.unpackAlignment;this.encoding=a.encoding;return this},toJSON:function(a){var b=void 0===a||"string"===typeof a;if(!b&&void 0!==
    a.textures[this.uuid])return a.textures[this.uuid];var c={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var d=this.image;void 0===d.uuid&&(d.uuid=Q.generateUUID());
    if(!b&&void 0===a.images[d.uuid]){var e=a.images,f=d.uuid,g=d.uuid;if(d instanceof HTMLCanvasElement)var h=d;else{h=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");h.width=d.width;h.height=d.height;var k=h.getContext("2d");d instanceof ImageData?k.putImageData(d,0,0):k.drawImage(d,0,0,d.width,d.height)}h=2048<h.width||2048<h.height?h.toDataURL("image/jpeg",.6):h.toDataURL("image/png");e[f]={uuid:g,url:h}}c.image=d.uuid}b||(a.textures[this.uuid]=c);return c},dispose:function(){this.dispatchEvent({type:"dispose"})},
    transformUv:function(a){if(300===this.mapping){a.applyMatrix3(this.matrix);if(0>a.x||1<a.x)switch(this.wrapS){case 1E3:a.x-=Math.floor(a.x);break;case 1001:a.x=0>a.x?0:1;break;case 1002:a.x=1===Math.abs(Math.floor(a.x)%2)?Math.ceil(a.x)-a.x:a.x-Math.floor(a.x)}if(0>a.y||1<a.y)switch(this.wrapT){case 1E3:a.y-=Math.floor(a.y);break;case 1001:a.y=0>a.y?0:1;break;case 1002:a.y=1===Math.abs(Math.floor(a.y)%2)?Math.ceil(a.y)-a.y:a.y-Math.floor(a.y)}this.flipY&&(a.y=1-a.y)}}});Object.defineProperty(U.prototype,
    "needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(aa.prototype,{isVector4:!0,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setScalar:function(a){this.w=this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=
    b;break;default:throw Error("index is out of range: "+a);}return this},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
    this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;this.w+=a.w*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,
    b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;this.w-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*
    e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){a=a.elements;var b=a[0];var c=a[4];var d=a[8],e=a[1],f=a[5],g=a[9];var h=a[2];var k=a[6];var m=a[10];if(.01>Math.abs(c-e)&&.01>Math.abs(d-h)&&.01>Math.abs(g-k)){if(.1>Math.abs(c+
    e)&&.1>Math.abs(d+h)&&.1>Math.abs(g+k)&&.1>Math.abs(b+f+m-3))return this.set(1,0,0,0),this;a=Math.PI;b=(b+1)/2;f=(f+1)/2;m=(m+1)/2;c=(c+e)/4;d=(d+h)/4;g=(g+k)/4;b>f&&b>m?.01>b?(k=0,c=h=.707106781):(k=Math.sqrt(b),h=c/k,c=d/k):f>m?.01>f?(k=.707106781,h=0,c=.707106781):(h=Math.sqrt(f),k=c/h,c=g/h):.01>m?(h=k=.707106781,c=0):(c=Math.sqrt(m),k=d/c,h=g/c);this.set(k,h,c,a);return this}a=Math.sqrt((k-g)*(k-g)+(d-h)*(d-h)+(e-c)*(e-c));.001>Math.abs(a)&&(a=1);this.x=(k-g)/a;this.y=(d-h)/a;this.z=(e-c)/a;
    this.w=Math.acos((b+f+m-1)/2);return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);this.w=Math.min(this.w,a.w);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);this.w=Math.max(this.w,a.w);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));this.w=Math.max(a.w,Math.min(b.w,
    this.w));return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new aa,b=new aa);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);
    this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},
    dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=
    (a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=this.w;return a},fromBufferAttribute:function(a,
    b,c){void 0!==c&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);this.z=a.getZ(b);this.w=a.getW(b);return this}});kb.prototype=Object.assign(Object.create(za.prototype),{constructor:kb,isWebGLRenderTarget:!0,setSize:function(a,b){if(this.width!==a||this.height!==b)this.width=a,this.height=b,this.dispose();this.viewport.set(0,0,a,b);this.scissor.set(0,0,a,b)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.width=
    a.width;this.height=a.height;this.viewport.copy(a.viewport);this.texture=a.texture.clone();this.depthBuffer=a.depthBuffer;this.stencilBuffer=a.stencilBuffer;this.depthTexture=a.depthTexture;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Jb.prototype=Object.create(kb.prototype);Jb.prototype.constructor=Jb;Jb.prototype.isWebGLRenderTargetCube=!0;lb.prototype=Object.create(U.prototype);lb.prototype.constructor=lb;lb.prototype.isDataTexture=!0;db.prototype=Object.create(U.prototype);
    db.prototype.constructor=db;db.prototype.isCubeTexture=!0;Object.defineProperty(db.prototype,"images",{get:function(){return this.image},set:function(a){this.image=a}});var Ne=new U,Oe=new db,Ie=[],Ke=[],Me=new Float32Array(16),Le=new Float32Array(9);Se.prototype.setValue=function(a,b){for(var c=this.seq,d=0,e=c.length;d!==e;++d){var f=c[d];f.setValue(a,b[f.id])}};var Vd=/([\w\d_]+)(\])?(\[|\.)?/g;mb.prototype.setValue=function(a,b,c){b=this.map[b];void 0!==b&&b.setValue(a,c,this.renderer)};mb.prototype.setOptional=
    function(a,b,c){b=b[c];void 0!==b&&this.setValue(a,c,b)};mb.upload=function(a,b,c,d){for(var e=0,f=b.length;e!==f;++e){var g=b[e],h=c[g.id];!1!==h.needsUpdate&&g.setValue(a,h.value,d)}};mb.seqWithValue=function(a,b){for(var c=[],d=0,e=a.length;d!==e;++d){var f=a[d];f.id in b&&c.push(f)}return c};var Kg={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,
    cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,
    deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,
    lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,
    mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,
    royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object.assign(H.prototype,{isColor:!0,r:1,g:1,b:1,set:function(a){a&&
    a.isColor?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setScalar:function(a){this.b=this.g=this.r=a;return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(){function a(a,c,d){0>d&&(d+=1);1<d&&--d;return d<1/6?a+6*(c-a)*d:.5>d?c:d<2/3?a+6*(c-a)*(2/3-d):a}return function(b,c,d){b=Q.euclideanModulo(b,
    1);c=Q.clamp(c,0,1);d=Q.clamp(d,0,1);0===c?this.r=this.g=this.b=d:(c=.5>=d?d*(1+c):d+c-d*c,d=2*d-c,this.r=a(d,c,b+1/3),this.g=a(d,c,b),this.b=a(d,c,b-1/3));return this}}(),setStyle:function(a){function b(b){void 0!==b&&1>parseFloat(b)&&console.warn("THREE.Color: Alpha component of "+a+" will be ignored.")}var c;if(c=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)){var d=c[2];switch(c[1]){case "rgb":case "rgba":if(c=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(255,
    parseInt(c[1],10))/255,this.g=Math.min(255,parseInt(c[2],10))/255,this.b=Math.min(255,parseInt(c[3],10))/255,b(c[5]),this;if(c=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(100,parseInt(c[1],10))/100,this.g=Math.min(100,parseInt(c[2],10))/100,this.b=Math.min(100,parseInt(c[3],10))/100,b(c[5]),this;break;case "hsl":case "hsla":if(c=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)){var d=parseFloat(c[1])/360,
    e=parseInt(c[2],10)/100,f=parseInt(c[3],10)/100;b(c[5]);return this.setHSL(d,e,f)}}}else if(c=/^\#([A-Fa-f0-9]+)$/.exec(a)){c=c[1];d=c.length;if(3===d)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===d)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}a&&0<a.length&&(c=Kg[a],void 0!==
    c?this.setHex(c):console.warn("THREE.Color: Unknown color "+a));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a,b){void 0===b&&(b=2);this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);b=0<b?1/b:1;this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},convertGammaToLinear:function(){var a=
    this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=.5>=h?k/(e+f):
    k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=
    a;this.g+=a;this.b+=a;return this},sub:function(a){this.r=Math.max(0,this.r-a.r);this.g=Math.max(0,this.g-a.g);this.b=Math.max(0,this.b-a.b);return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a,b){void 0===b&&(b=
    0);this.r=a[b];this.g=a[b+1];this.b=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a},toJSON:function(){return this.getHex()}});var K={common:{diffuse:{value:new H(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new ma},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},
    aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new D(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:2.5E-4},fogNear:{value:1},
    fogFar:{value:2E3},fogColor:{value:new H(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},
    pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new H(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new ma}}},
    Ga={merge:function(a){for(var b={},c=0;c<a.length;c++){var d=this.clone(a[c]),e;for(e in d)b[e]=d[e]}return b},clone:function(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture)?b[c][d]=e.clone():Array.isArray(e)?b[c][d]=e.slice():b[c][d]=e}}return b}},R={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",
    alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",
    aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n",bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",
    bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",
    clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n",
    clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",
    color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",
    cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",
    defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",
    emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",
    envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
    envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",
    envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",
    fog_vertex:"\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",
    gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",
    lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",
    lights_pars:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
    lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",
    lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",
    lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",
    lights_template:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",
    logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",
    map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",
    metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",
    morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",
    normal_fragment:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",
    normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",
    packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
    premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",
    roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
    shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",
    shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",
    shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",
    skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",
    skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",
    specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",
    uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",
    uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
    uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",
    cube_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",
    depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
    distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",
    distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",
    equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",equirect_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
    linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",
    meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",
    normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",
    points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n"},
    tb={basic:{uniforms:Ga.merge([K.common,K.specularmap,K.envmap,K.aomap,K.lightmap,K.fog]),vertexShader:R.meshbasic_vert,fragmentShader:R.meshbasic_frag},lambert:{uniforms:Ga.merge([K.common,K.specularmap,K.envmap,K.aomap,K.lightmap,K.emissivemap,K.fog,K.lights,{emissive:{value:new H(0)}}]),vertexShader:R.meshlambert_vert,fragmentShader:R.meshlambert_frag},phong:{uniforms:Ga.merge([K.common,K.specularmap,K.envmap,K.aomap,K.lightmap,K.emissivemap,K.bumpmap,K.normalmap,K.displacementmap,K.gradientmap,
    K.fog,K.lights,{emissive:{value:new H(0)},specular:{value:new H(1118481)},shininess:{value:30}}]),vertexShader:R.meshphong_vert,fragmentShader:R.meshphong_frag},standard:{uniforms:Ga.merge([K.common,K.envmap,K.aomap,K.lightmap,K.emissivemap,K.bumpmap,K.normalmap,K.displacementmap,K.roughnessmap,K.metalnessmap,K.fog,K.lights,{emissive:{value:new H(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:R.meshphysical_vert,fragmentShader:R.meshphysical_frag},points:{uniforms:Ga.merge([K.points,
    K.fog]),vertexShader:R.points_vert,fragmentShader:R.points_frag},dashed:{uniforms:Ga.merge([K.common,K.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:R.linedashed_vert,fragmentShader:R.linedashed_frag},depth:{uniforms:Ga.merge([K.common,K.displacementmap]),vertexShader:R.depth_vert,fragmentShader:R.depth_frag},normal:{uniforms:Ga.merge([K.common,K.bumpmap,K.normalmap,K.displacementmap,{opacity:{value:1}}]),vertexShader:R.normal_vert,fragmentShader:R.normal_frag},cube:{uniforms:{tCube:{value:null},
    tFlip:{value:-1},opacity:{value:1}},vertexShader:R.cube_vert,fragmentShader:R.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:R.equirect_vert,fragmentShader:R.equirect_frag},distanceRGBA:{uniforms:Ga.merge([K.common,K.displacementmap,{referencePosition:{value:new p},nearDistance:{value:1},farDistance:{value:1E3}}]),vertexShader:R.distanceRGBA_vert,fragmentShader:R.distanceRGBA_frag},shadow:{uniforms:Ga.merge([K.lights,K.fog,{color:{value:new H(0)},opacity:{value:1}}]),vertexShader:R.shadow_vert,
    fragmentShader:R.shadow_frag}};tb.physical={uniforms:Ga.merge([tb.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:R.meshphysical_vert,fragmentShader:R.meshphysical_frag};Object.assign(od.prototype,{set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new D;return function(b,c){c=a.copy(c).multiplyScalar(.5);
    this.min.copy(b).sub(c);this.max.copy(b).add(c);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(a){a=a||new D;return this.isEmpty()?a.set(0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(a){a=
    a||new D;return this.isEmpty()?a.set(0,0):a.subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=
    this.max.y},getParameter:function(a,b){return(b||new D).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new D).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new D;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);
    this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}});tc.prototype=Object.create(U.prototype);tc.prototype.constructor=tc;var ag=0;P.prototype=Object.assign(Object.create(za.prototype),{constructor:P,isMaterial:!0,onBeforeCompile:function(){},setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===
    c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if("shading"===b)console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===c?!0:!1;else{var d=this[b];void 0===d?console.warn("THREE."+this.type+": '"+b+"' is not a property of this material."):d&&d.isColor?d.set(c):d&&d.isVector3&&c&&c.isVector3?d.copy(c):this[b]="overdraw"===b?Number(c):c}}},toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;
    b.push(d)}return b}var c=void 0===a||"string"===typeof a;c&&(a={textures:{},images:{}});var d={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};d.uuid=this.uuid;d.type=this.type;""!==this.name&&(d.name=this.name);this.color&&this.color.isColor&&(d.color=this.color.getHex());void 0!==this.roughness&&(d.roughness=this.roughness);void 0!==this.metalness&&(d.metalness=this.metalness);this.emissive&&this.emissive.isColor&&(d.emissive=this.emissive.getHex());1!==this.emissiveIntensity&&
    (d.emissiveIntensity=this.emissiveIntensity);this.specular&&this.specular.isColor&&(d.specular=this.specular.getHex());void 0!==this.shininess&&(d.shininess=this.shininess);void 0!==this.clearCoat&&(d.clearCoat=this.clearCoat);void 0!==this.clearCoatRoughness&&(d.clearCoatRoughness=this.clearCoatRoughness);this.map&&this.map.isTexture&&(d.map=this.map.toJSON(a).uuid);this.alphaMap&&this.alphaMap.isTexture&&(d.alphaMap=this.alphaMap.toJSON(a).uuid);this.lightMap&&this.lightMap.isTexture&&(d.lightMap=
    this.lightMap.toJSON(a).uuid);this.bumpMap&&this.bumpMap.isTexture&&(d.bumpMap=this.bumpMap.toJSON(a).uuid,d.bumpScale=this.bumpScale);this.normalMap&&this.normalMap.isTexture&&(d.normalMap=this.normalMap.toJSON(a).uuid,d.normalScale=this.normalScale.toArray());this.displacementMap&&this.displacementMap.isTexture&&(d.displacementMap=this.displacementMap.toJSON(a).uuid,d.displacementScale=this.displacementScale,d.displacementBias=this.displacementBias);this.roughnessMap&&this.roughnessMap.isTexture&&
    (d.roughnessMap=this.roughnessMap.toJSON(a).uuid);this.metalnessMap&&this.metalnessMap.isTexture&&(d.metalnessMap=this.metalnessMap.toJSON(a).uuid);this.emissiveMap&&this.emissiveMap.isTexture&&(d.emissiveMap=this.emissiveMap.toJSON(a).uuid);this.specularMap&&this.specularMap.isTexture&&(d.specularMap=this.specularMap.toJSON(a).uuid);this.envMap&&this.envMap.isTexture&&(d.envMap=this.envMap.toJSON(a).uuid,d.reflectivity=this.reflectivity);this.gradientMap&&this.gradientMap.isTexture&&(d.gradientMap=
    this.gradientMap.toJSON(a).uuid);void 0!==this.size&&(d.size=this.size);void 0!==this.sizeAttenuation&&(d.sizeAttenuation=this.sizeAttenuation);1!==this.blending&&(d.blending=this.blending);!0===this.flatShading&&(d.flatShading=this.flatShading);0!==this.side&&(d.side=this.side);0!==this.vertexColors&&(d.vertexColors=this.vertexColors);1>this.opacity&&(d.opacity=this.opacity);!0===this.transparent&&(d.transparent=this.transparent);d.depthFunc=this.depthFunc;d.depthTest=this.depthTest;d.depthWrite=
    this.depthWrite;0!==this.rotation&&(d.rotation=this.rotation);1!==this.linewidth&&(d.linewidth=this.linewidth);void 0!==this.dashSize&&(d.dashSize=this.dashSize);void 0!==this.gapSize&&(d.gapSize=this.gapSize);void 0!==this.scale&&(d.scale=this.scale);!0===this.dithering&&(d.dithering=!0);0<this.alphaTest&&(d.alphaTest=this.alphaTest);!0===this.premultipliedAlpha&&(d.premultipliedAlpha=this.premultipliedAlpha);!0===this.wireframe&&(d.wireframe=this.wireframe);1<this.wireframeLinewidth&&(d.wireframeLinewidth=
    this.wireframeLinewidth);"round"!==this.wireframeLinecap&&(d.wireframeLinecap=this.wireframeLinecap);"round"!==this.wireframeLinejoin&&(d.wireframeLinejoin=this.wireframeLinejoin);!0===this.morphTargets&&(d.morphTargets=!0);!0===this.skinning&&(d.skinning=!0);!1===this.visible&&(d.visible=!1);"{}"!==JSON.stringify(this.userData)&&(d.userData=this.userData);c&&(c=b(a.textures),a=b(a.images),0<c.length&&(d.textures=c),0<a.length&&(d.images=a));return d},clone:function(){return(new this.constructor).copy(this)},
    copy:function(a){this.name=a.name;this.fog=a.fog;this.lights=a.lights;this.blending=a.blending;this.side=a.side;this.flatShading=a.flatShading;this.vertexColors=a.vertexColors;this.opacity=a.opacity;this.transparent=a.transparent;this.blendSrc=a.blendSrc;this.blendDst=a.blendDst;this.blendEquation=a.blendEquation;this.blendSrcAlpha=a.blendSrcAlpha;this.blendDstAlpha=a.blendDstAlpha;this.blendEquationAlpha=a.blendEquationAlpha;this.depthFunc=a.depthFunc;this.depthTest=a.depthTest;this.depthWrite=a.depthWrite;
    this.colorWrite=a.colorWrite;this.precision=a.precision;this.polygonOffset=a.polygonOffset;this.polygonOffsetFactor=a.polygonOffsetFactor;this.polygonOffsetUnits=a.polygonOffsetUnits;this.dithering=a.dithering;this.alphaTest=a.alphaTest;this.premultipliedAlpha=a.premultipliedAlpha;this.overdraw=a.overdraw;this.visible=a.visible;this.userData=JSON.parse(JSON.stringify(a.userData));this.clipShadows=a.clipShadows;this.clipIntersection=a.clipIntersection;a=a.clippingPlanes;var b=null;if(null!==a)for(var c=
    a.length,b=Array(c),d=0;d!==c;++d)b[d]=a[d].clone();this.clippingPlanes=b;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});eb.prototype=Object.create(P.prototype);eb.prototype.constructor=eb;eb.prototype.isMeshDepthMaterial=!0;eb.prototype.copy=function(a){P.prototype.copy.call(this,a);this.depthPacking=a.depthPacking;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=
    a.displacementScale;this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;return this};fb.prototype=Object.create(P.prototype);fb.prototype.constructor=fb;fb.prototype.isMeshDistanceMaterial=!0;fb.prototype.copy=function(a){P.prototype.copy.call(this,a);this.referencePosition.copy(a.referencePosition);this.nearDistance=a.nearDistance;this.farDistance=a.farDistance;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.map=a.map;this.alphaMap=
    a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;return this};Object.assign(Xa.prototype,{isBox3:!0,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromArray:function(a){for(var b=Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,k=a.length;h<k;h+=3){var m=a[h],q=a[h+1],l=a[h+2];m<b&&(b=m);q<c&&(c=q);l<d&&(d=l);m>e&&(e=m);q>f&&(f=q);l>g&&(g=l)}this.min.set(b,c,d);this.max.set(e,
    f,g);return this},setFromBufferAttribute:function(a){for(var b=Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,k=a.count;h<k;h++){var m=a.getX(h),q=a.getY(h),l=a.getZ(h);m<b&&(b=m);q<c&&(c=q);l<d&&(d=l);m>e&&(e=m);q>f&&(f=q);l>g&&(g=l)}this.min.set(b,c,d);this.max.set(e,f,g);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new p;return function(b,c){c=a.copy(c).multiplyScalar(.5);
    this.min.copy(b).sub(c);this.max.copy(b).add(c);return this}}(),setFromObject:function(a){this.makeEmpty();return this.expandByObject(a)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(a){a=
    a||new p;return this.isEmpty()?a.set(0,0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(a){a=a||new p;return this.isEmpty()?a.set(0,0,0):a.subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},expandByObject:function(){function a(a){var f=a.geometry;if(void 0!==f)if(f.isGeometry)for(f=
    f.vertices,c=0,d=f.length;c<d;c++)e.copy(f[c]),e.applyMatrix4(a.matrixWorld),b.expandByPoint(e);else if(f.isBufferGeometry&&(f=f.attributes.position,void 0!==f))for(c=0,d=f.count;c<d;c++)e.fromBufferAttribute(f,c).applyMatrix4(a.matrixWorld),b.expandByPoint(e)}var b,c,d,e=new p;return function(c){b=this;c.updateMatrixWorld(!0);c.traverse(a);return this}}(),containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=
    a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z},getParameter:function(a,b){return(b||new p).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},intersectsSphere:function(){var a=new p;return function(b){this.clampPoint(b.center,
    a);return a.distanceToSquared(b.center)<=b.radius*b.radius}}(),intersectsPlane:function(a){if(0<a.normal.x){var b=a.normal.x*this.min.x;var c=a.normal.x*this.max.x}else b=a.normal.x*this.max.x,c=a.normal.x*this.min.x;0<a.normal.y?(b+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(b+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y);0<a.normal.z?(b+=a.normal.z*this.min.z,c+=a.normal.z*this.max.z):(b+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z);return b<=a.constant&&c>=a.constant},clampPoint:function(a,
    b){return(b||new p).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new p;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new p;return function(b){b=b||new Ia;this.getCenter(b.center);b.radius=.5*this.getSize(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);this.isEmpty()&&this.makeEmpty();return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=
    [new p,new p,new p,new p,new p,new p,new p,new p];return function(b){if(this.isEmpty())return this;a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);
    a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}});Object.assign(Ia.prototype,{set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new Xa;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).getCenter(d);for(var e=c=0,f=b.length;e<f;e++)c=Math.max(c,
    d.distanceToSquared(b[e]));this.radius=Math.sqrt(c);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=
    b*b},intersectsBox:function(a){return a.intersectsSphere(this)},intersectsPlane:function(a){return Math.abs(a.distanceToPoint(this.center))<=this.radius},clampPoint:function(a,b){var c=this.center.distanceToSquared(a);b=b||new p;b.copy(a);c>this.radius*this.radius&&(b.sub(this.center).normalize(),b.multiplyScalar(this.radius).add(this.center));return b},getBoundingBox:function(a){a=a||new Xa;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);
    this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius}});Object.assign(Ea.prototype,{set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=
    new p,b=new p;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,c);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+
    this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return(b||new p).copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a)},intersectLine:function(){var a=new p;return function(b,c){c=c||new p;var d=b.delta(a),e=this.normal.dot(d);if(0===e){if(0===this.distanceToPoint(b.start))return c.copy(b.start)}else if(e=-(b.start.dot(this.normal)+this.constant)/e,!(0>e||1<e))return c.copy(d).multiplyScalar(e).add(b.start)}}(),intersectsLine:function(a){var b=
    this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){return(a||new p).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new p,b=new ma;return function(c,d){d=d||b.getNormalMatrix(c);c=this.coplanarPoint(a).applyMatrix4(c);d=this.normal.applyMatrix3(d).normalize();this.constant=-c.dot(d);return this}}(),
    translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}});Object.assign(rd.prototype,{set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,
    c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],m=c[7],q=c[8],l=c[9],p=c[10],r=c[11],t=c[12],v=c[13],w=c[14],c=c[15];b[0].setComponents(f-a,m-g,r-q,c-t).normalize();b[1].setComponents(f+a,m+g,r+q,c+t).normalize();b[2].setComponents(f+d,m+h,r+l,c+v).normalize();b[3].setComponents(f-d,m-h,r-l,c-v).normalize();b[4].setComponents(f-e,m-k,r-p,c-w).normalize();b[5].setComponents(f+e,m+k,r+p,c+w).normalize();return this},intersectsObject:function(){var a=new Ia;return function(b){var c=
    b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSprite:function(){var a=new Ia;return function(b){a.center.set(0,0,0);a.radius=.7071067811865476;a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new p,b=
    new p;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0}});gb.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");
    gb.DefaultOrder="XYZ";Object.defineProperties(gb.prototype,{x:{get:function(){return this._x},set:function(a){this._x=a;this.onChangeCallback()}},y:{get:function(){return this._y},set:function(a){this._y=a;this.onChangeCallback()}},z:{get:function(){return this._z},set:function(a){this._z=a;this.onChangeCallback()}},order:{get:function(){return this._order},set:function(a){this._order=a;this.onChangeCallback()}}});Object.assign(gb.prototype,{isEuler:!0,set:function(a,b,c,d){this._x=a;this._y=b;this._z=
    c;this._order=d||this._order;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this.onChangeCallback();return this},setFromRotationMatrix:function(a,b,c){var d=Q.clamp,e=a.elements;a=e[0];var f=e[4],g=e[8],h=e[1],k=e[5],m=e[9],l=e[2],n=e[6],e=e[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(d(g,-1,1)),.99999>Math.abs(g)?(this._x=Math.atan2(-m,e),this._z=
    Math.atan2(-f,a)):(this._x=Math.atan2(n,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-d(m,-1,1)),.99999>Math.abs(m)?(this._y=Math.atan2(g,e),this._z=Math.atan2(h,k)):(this._y=Math.atan2(-l,a),this._z=0)):"ZXY"===b?(this._x=Math.asin(d(n,-1,1)),.99999>Math.abs(n)?(this._y=Math.atan2(-l,e),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,a))):"ZYX"===b?(this._y=Math.asin(-d(l,-1,1)),.99999>Math.abs(l)?(this._x=Math.atan2(n,e),this._z=Math.atan2(h,a)):(this._x=0,this._z=Math.atan2(-f,k))):"YZX"===
    b?(this._z=Math.asin(d(h,-1,1)),.99999>Math.abs(h)?(this._x=Math.atan2(-m,k),this._y=Math.atan2(-l,a)):(this._x=0,this._y=Math.atan2(g,e))):"XZY"===b?(this._z=Math.asin(-d(f,-1,1)),.99999>Math.abs(f)?(this._x=Math.atan2(n,k),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-m,e),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+b);this._order=b;if(!1!==c)this.onChangeCallback();return this},setFromQuaternion:function(){var a=new O;return function(b,c,d){a.makeRotationFromQuaternion(b);
    return this.setFromRotationMatrix(a,c,d)}}(),setFromVector3:function(a,b){return this.set(a.x,a.y,a.z,b||this._order)},reorder:function(){var a=new ha;return function(b){a.setFromEuler(this);return this.setFromQuaternion(a,b)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);
    void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._order;return a},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new p(this._x,this._y,this._z)},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){}});Object.assign(Wd.prototype,{set:function(a){this.mask=1<<a|0},enable:function(a){this.mask=this.mask|1<<a|0},toggle:function(a){this.mask^=1<<a|0},disable:function(a){this.mask&=~(1<<a|0)},test:function(a){return 0!==(this.mask&
    a.mask)}});var cg=0;x.DefaultUp=new p(0,1,0);x.DefaultMatrixAutoUpdate=!0;x.prototype=Object.assign(Object.create(za.prototype),{constructor:x,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(a){this.quaternion.premultiply(a);return this},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,
    !0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new ha;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.multiply(a);return this}}(),rotateOnWorldAxis:function(){var a=new ha;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.premultiply(a);return this}}(),rotateX:function(){var a=new p(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=
    new p(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new p(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new p;return function(b,c){a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));return this}}(),translateX:function(){var a=new p(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new p(0,1,0);return function(b){return this.translateOnAxis(a,
    b)}}(),translateZ:function(){var a=new p(0,0,1);return function(b){return this.translateOnAxis(a,b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new O;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new O,b=new p;return function(c,d,e){c.isVector3?b.copy(c):b.set(c,d,e);this.isCamera?a.lookAt(this.position,b,this.up):a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),
    add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return console.error("THREE.Object3D.add: object can't be added as a child of itself.",a),this;a&&a.isObject3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:"added"}),this.children.push(a)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a);return this},remove:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);
    return this}b=this.children.indexOf(a);-1!==b&&(a.parent=null,a.dispatchEvent({type:"removed"}),this.children.splice(b,1));return this},getObjectById:function(a){return this.getObjectByProperty("id",a)},getObjectByName:function(a){return this.getObjectByProperty("name",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c].getObjectByProperty(a,b);if(void 0!==e)return e}},getWorldPosition:function(a){a=a||new p;this.updateMatrixWorld(!0);
    return a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=new p,b=new p;return function(c){c=c||new ha;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,c,b);return c}}(),getWorldRotation:function(){var a=new ha;return function(b){b=b||new gb;this.getWorldQuaternion(a);return b.setFromQuaternion(a,this.rotation.order,!1)}}(),getWorldScale:function(){var a=new p,b=new ha;return function(c){c=c||new p;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,b,c);return c}}(),
    getWorldDirection:function(){var a=new ha;return function(b){b=b||new p;this.getWorldQuaternion(a);return b.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverse(a)},traverseVisible:function(a){if(!1!==this.visible){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverseVisible(a)}},traverseAncestors:function(a){var b=this.parent;null!==b&&(a(b),b.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,
    this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].updateMatrixWorld(a)},toJSON:function(a){function b(b,c){void 0===b[c.uuid]&&(b[c.uuid]=c.toJSON(a));return c.uuid}function c(a){var b=
    [],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var d=void 0===a||"string"===typeof a,e={};d&&(a={geometries:{},materials:{},textures:{},images:{},shapes:{}},e.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var f={};f.uuid=this.uuid;f.type=this.type;""!==this.name&&(f.name=this.name);!0===this.castShadow&&(f.castShadow=!0);!0===this.receiveShadow&&(f.receiveShadow=!0);!1===this.visible&&(f.visible=!1);"{}"!==JSON.stringify(this.userData)&&(f.userData=this.userData);
    f.matrix=this.matrix.toArray();if(void 0!==this.geometry){f.geometry=b(a.geometries,this.geometry);var g=this.geometry.parameters;if(void 0!==g&&void 0!==g.shapes)if(g=g.shapes,Array.isArray(g))for(var h=0,k=g.length;h<k;h++)b(a.shapes,g[h]);else b(a.shapes,g)}if(void 0!==this.material)if(Array.isArray(this.material)){g=[];h=0;for(k=this.material.length;h<k;h++)g.push(b(a.materials,this.material[h]));f.material=g}else f.material=b(a.materials,this.material);if(0<this.children.length)for(f.children=
    [],h=0;h<this.children.length;h++)f.children.push(this.children[h].toJSON(a).object);if(d){var d=c(a.geometries),h=c(a.materials),k=c(a.textures),m=c(a.images);g=c(a.shapes);0<d.length&&(e.geometries=d);0<h.length&&(e.materials=h);0<k.length&&(e.textures=k);0<m.length&&(e.images=m);0<g.length&&(e.shapes=g)}e.object=f;return e},clone:function(a){return(new this.constructor).copy(this,a)},copy:function(a,b){void 0===b&&(b=!0);this.name=a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);
    this.scale.copy(a.scale);this.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate;this.layers.mask=a.layers.mask;this.visible=a.visible;this.castShadow=a.castShadow;this.receiveShadow=a.receiveShadow;this.frustumCulled=a.frustumCulled;this.renderOrder=a.renderOrder;this.userData=JSON.parse(JSON.stringify(a.userData));if(!0===b)for(b=0;b<a.children.length;b++)this.add(a.children[b].clone());return this}});
    Ta.prototype=Object.assign(Object.create(x.prototype),{constructor:Ta,isCamera:!0,copy:function(a,b){x.prototype.copy.call(this,a,b);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);return this},getWorldDirection:function(){var a=new ha;return function(b){b=b||new p;this.getWorldQuaternion(a);return b.set(0,0,-1).applyQuaternion(a)}}(),updateMatrixWorld:function(a){x.prototype.updateMatrixWorld.call(this,a);this.matrixWorldInverse.getInverse(this.matrixWorld)},
    clone:function(){return(new this.constructor).copy(this)}});Lb.prototype=Object.assign(Object.create(Ta.prototype),{constructor:Lb,isOrthographicCamera:!0,copy:function(a,b){Ta.prototype.copy.call(this,a,b);this.left=a.left;this.right=a.right;this.top=a.top;this.bottom=a.bottom;this.near=a.near;this.far=a.far;this.zoom=a.zoom;this.view=null===a.view?null:Object.assign({},a.view);return this},setViewOffset:function(a,b,c,d,e,f){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,
    offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=a;this.view.fullHeight=b;this.view.offsetX=c;this.view.offsetY=d;this.view.width=e;this.view.height=f;this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2,e=c-a,c=c+a,a=d+b,b=d-b;if(null!==
    this.view&&this.view.enabled)var c=this.zoom/(this.view.width/this.view.fullWidth),b=this.zoom/(this.view.height/this.view.fullHeight),f=(this.right-this.left)/this.view.width,d=(this.top-this.bottom)/this.view.height,e=e+this.view.offsetX/c*f,c=e+this.view.width/c*f,a=a-this.view.offsetY/b*d,b=a-this.view.height/b*d;this.projectionMatrix.makeOrthographic(e,c,a,b,this.near,this.far)},toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.zoom=this.zoom;a.object.left=this.left;a.object.right=
    this.right;a.object.top=this.top;a.object.bottom=this.bottom;a.object.near=this.near;a.object.far=this.far;null!==this.view&&(a.object.view=Object.assign({},this.view));return a}});Object.assign(Ya.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a=a.a;this.b=a.b;this.c=a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex=a.materialIndex;for(var b=0,c=a.vertexNormals.length;b<c;b++)this.vertexNormals[b]=a.vertexNormals[b].clone();b=0;
    for(c=a.vertexColors.length;b<c;b++)this.vertexColors[b]=a.vertexColors[b].clone();return this}});var dg=0;L.prototype=Object.assign(Object.create(za.prototype),{constructor:L,isGeometry:!0,applyMatrix:function(a){for(var b=(new ma).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}null!==
    this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();this.normalsNeedUpdate=this.verticesNeedUpdate=!0;return this},rotateX:function(){var a=new O;return function(b){a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a=new O;return function(b){a.makeRotationY(b);this.applyMatrix(a);return this}}(),rotateZ:function(){var a=new O;return function(b){a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a=
    new O;return function(b,c,d){a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a=new O;return function(b,c,d){a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a=new x;return function(b){a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),fromBufferGeometry:function(a){function b(a,b,d,e){var f=void 0!==g?[l[a].clone(),l[b].clone(),l[d].clone()]:[],q=void 0!==h?[c.colors[a].clone(),c.colors[b].clone(),c.colors[d].clone()]:[];e=new Ya(a,
    b,d,f,q,e);c.faces.push(e);void 0!==k&&c.faceVertexUvs[0].push([n[a].clone(),n[b].clone(),n[d].clone()]);void 0!==m&&c.faceVertexUvs[1].push([u[a].clone(),u[b].clone(),u[d].clone()])}var c=this,d=null!==a.index?a.index.array:void 0,e=a.attributes,f=e.position.array,g=void 0!==e.normal?e.normal.array:void 0,h=void 0!==e.color?e.color.array:void 0,k=void 0!==e.uv?e.uv.array:void 0,m=void 0!==e.uv2?e.uv2.array:void 0;void 0!==m&&(this.faceVertexUvs[1]=[]);for(var l=[],n=[],u=[],r=e=0;e<f.length;e+=3,
    r+=2)c.vertices.push(new p(f[e],f[e+1],f[e+2])),void 0!==g&&l.push(new p(g[e],g[e+1],g[e+2])),void 0!==h&&c.colors.push(new H(h[e],h[e+1],h[e+2])),void 0!==k&&n.push(new D(k[r],k[r+1])),void 0!==m&&u.push(new D(m[r],m[r+1]));var t=a.groups;if(0<t.length)for(e=0;e<t.length;e++)for(var f=t[e],v=f.start,w=f.count,r=v,v=v+w;r<v;r+=3)void 0!==d?b(d[r],d[r+1],d[r+2],f.materialIndex):b(r,r+1,r+2,f.materialIndex);else if(void 0!==d)for(e=0;e<d.length;e+=3)b(d[e],d[e+1],d[e+2]);else for(e=0;e<f.length/3;e+=
    3)b(e,e+1,e+2);this.computeFaceNormals();null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();var a=this.boundingBox.getCenter().negate();this.translate(a.x,a.y,a.z);return a},normalize:function(){this.computeBoundingSphere();var a=this.boundingSphere.center,b=this.boundingSphere.radius,b=0===b?1:1/b,c=new O;c.set(b,0,0,-b*a.x,0,b,0,-b*a.y,0,0,b,-b*a.z,0,0,0,1);
    this.applyMatrix(c);return this},computeFaceNormals:function(){for(var a=new p,b=new p,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){void 0===a&&(a=!0);var b;var c=Array(this.vertices.length);var d=0;for(b=this.vertices.length;d<b;d++)c[d]=new p;if(a){var e=new p,f=new p;a=0;for(d=this.faces.length;a<d;a++){b=this.faces[a];
    var g=this.vertices[b.a];var h=this.vertices[b.b];var k=this.vertices[b.c];e.subVectors(k,h);f.subVectors(g,h);e.cross(f);c[b.a].add(e);c[b.b].add(e);c[b.c].add(e)}}else for(this.computeFaceNormals(),a=0,d=this.faces.length;a<d;a++)b=this.faces[a],c[b.a].add(b.normal),c[b.b].add(b.normal),c[b.c].add(b.normal);d=0;for(b=this.vertices.length;d<b;d++)c[d].normalize();a=0;for(d=this.faces.length;a<d;a++)b=this.faces[a],g=b.vertexNormals,3===g.length?(g[0].copy(c[b.a]),g[1].copy(c[b.b]),g[2].copy(c[b.c])):
    (g[0]=c[b.a].clone(),g[1]=c[b.b].clone(),g[2]=c[b.c].clone());0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var a;this.computeFaceNormals();var b=0;for(a=this.faces.length;b<a;b++){var c=this.faces[b];var d=c.vertexNormals;3===d.length?(d[0].copy(c.normal),d[1].copy(c.normal),d[2].copy(c.normal)):(d[0]=c.normal.clone(),d[1]=c.normal.clone(),d[2]=c.normal.clone())}0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var a,b;var c=
    0;for(b=this.faces.length;c<b;c++){var d=this.faces[c];d.__originalFaceNormal?d.__originalFaceNormal.copy(d.normal):d.__originalFaceNormal=d.normal.clone();d.__originalVertexNormals||(d.__originalVertexNormals=[]);var e=0;for(a=d.vertexNormals.length;e<a;e++)d.__originalVertexNormals[e]?d.__originalVertexNormals[e].copy(d.vertexNormals[e]):d.__originalVertexNormals[e]=d.vertexNormals[e].clone()}var f=new L;f.faces=this.faces;e=0;for(a=this.morphTargets.length;e<a;e++){if(!this.morphNormals[e]){this.morphNormals[e]=
    {};this.morphNormals[e].faceNormals=[];this.morphNormals[e].vertexNormals=[];d=this.morphNormals[e].faceNormals;var g=this.morphNormals[e].vertexNormals;c=0;for(b=this.faces.length;c<b;c++){var h=new p;var k={a:new p,b:new p,c:new p};d.push(h);g.push(k)}}g=this.morphNormals[e];f.vertices=this.morphTargets[e].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(b=this.faces.length;c<b;c++)d=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(d.normal),k.a.copy(d.vertexNormals[0]),
    k.b.copy(d.vertexNormals[1]),k.c.copy(d.vertexNormals[2])}c=0;for(b=this.faces.length;c<b;c++)d=this.faces[c],d.normal=d.__originalFaceNormal,d.vertexNormals=d.__originalVertexNormals},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Xa);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&
    (this.boundingSphere=new Ia);this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,c){if(a&&a.isGeometry){var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,k=a.faces,m=this.faceVertexUvs[0],l=a.faceVertexUvs[0],n=this.colors,p=a.colors;void 0===c&&(c=0);void 0!==b&&(d=(new ma).getNormalMatrix(b));a=0;for(var r=g.length;a<r;a++){var t=g[a].clone();void 0!==b&&t.applyMatrix4(b);f.push(t)}a=0;for(r=p.length;a<r;a++)n.push(p[a].clone());a=0;for(r=k.length;a<r;a++){var g=
    k[a],v=g.vertexNormals,p=g.vertexColors,n=new Ya(g.a+e,g.b+e,g.c+e);n.normal.copy(g.normal);void 0!==d&&n.normal.applyMatrix3(d).normalize();b=0;for(f=v.length;b<f;b++)t=v[b].clone(),void 0!==d&&t.applyMatrix3(d).normalize(),n.vertexNormals.push(t);n.color.copy(g.color);b=0;for(f=p.length;b<f;b++)t=p[b],n.vertexColors.push(t.clone());n.materialIndex=g.materialIndex+c;h.push(n)}a=0;for(r=l.length;a<r;a++)if(c=l[a],d=[],void 0!==c){b=0;for(f=c.length;b<f;b++)d.push(c[b].clone());m.push(d)}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",
    a)},mergeMesh:function(a){a&&a.isMesh?(a.matrixAutoUpdate&&a.updateMatrix(),this.merge(a.geometry,a.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",a)},mergeVertices:function(){var a={},b=[],c=[],d=Math.pow(10,4),e;var f=0;for(e=this.vertices.length;f<e;f++){var g=this.vertices[f];g=Math.round(g.x*d)+"_"+Math.round(g.y*d)+"_"+Math.round(g.z*d);void 0===a[g]?(a[g]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[g]]}a=[];f=0;for(e=this.faces.length;f<e;f++)for(d=
    this.faces[f],d.a=c[d.a],d.b=c[d.b],d.c=c[d.c],d=[d.a,d.b,d.c],g=0;3>g;g++)if(d[g]===d[(g+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(d=a[f],this.faces.splice(d,1),c=0,e=this.faceVertexUvs.length;c<e;c++)this.faceVertexUvs[c].splice(d,1);f=this.vertices.length-b.length;this.vertices=b;return f},setFromPoints:function(a){this.vertices=[];for(var b=0,c=a.length;b<c;b++){var d=a[b];this.vertices.push(new p(d.x,d.y,d.z||0))}return this},sortFacesByMaterialIndex:function(){for(var a=this.faces,
    b=a.length,c=0;c<b;c++)a[c]._id=c;a.sort(function(a,b){return a.materialIndex-b.materialIndex});var d=this.faceVertexUvs[0],e=this.faceVertexUvs[1],f,g;d&&d.length===b&&(f=[]);e&&e.length===b&&(g=[]);for(c=0;c<b;c++){var h=a[c]._id;f&&f.push(d[h]);g&&g.push(e[h])}f&&(this.faceVertexUvs[0]=f);g&&(this.faceVertexUvs[1]=g)},toJSON:function(){function a(a,b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==m[b])return m[b];m[b]=k.length/3;k.push(a.x,
    a.y,a.z);return m[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==n[b])return n[b];n[b]=l.length;l.push(a.getHex());return n[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==r[b])return r[b];r[b]=p.length/2;p.push(a.x,a.y);return r[b]}var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};e.uuid=this.uuid;e.type=this.type;""!==this.name&&(e.name=this.name);if(void 0!==this.parameters){var f=this.parameters,g;for(g in f)void 0!==f[g]&&
    (e[g]=f[g]);return e}f=[];for(g=0;g<this.vertices.length;g++){var h=this.vertices[g];f.push(h.x,h.y,h.z)}var h=[],k=[],m={},l=[],n={},p=[],r={};for(g=0;g<this.faces.length;g++){var t=this.faces[g],v=void 0!==this.faceVertexUvs[0][g],w=0<t.normal.length(),z=0<t.vertexNormals.length,y=1!==t.color.r||1!==t.color.g||1!==t.color.b,x=0<t.vertexColors.length,A=0,A=a(A,0,0),A=a(A,1,!0),A=a(A,2,!1),A=a(A,3,v),A=a(A,4,w),A=a(A,5,z),A=a(A,6,y),A=a(A,7,x);h.push(A);h.push(t.a,t.b,t.c);h.push(t.materialIndex);
    v&&(v=this.faceVertexUvs[0][g],h.push(d(v[0]),d(v[1]),d(v[2])));w&&h.push(b(t.normal));z&&(w=t.vertexNormals,h.push(b(w[0]),b(w[1]),b(w[2])));y&&h.push(c(t.color));x&&(t=t.vertexColors,h.push(c(t[0]),c(t[1]),c(t[2])))}e.data={};e.data.vertices=f;e.data.normals=k;0<l.length&&(e.data.colors=l);0<p.length&&(e.data.uvs=[p]);e.data.faces=h;return e},clone:function(){return(new L).copy(this)},copy:function(a){var b,c,d;this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=
    [];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.name=a.name;var e=a.vertices;var f=0;for(b=e.length;f<b;f++)this.vertices.push(e[f].clone());e=a.colors;f=0;for(b=e.length;f<b;f++)this.colors.push(e[f].clone());e=a.faces;f=0;for(b=e.length;f<b;f++)this.faces.push(e[f].clone());f=0;for(b=a.faceVertexUvs.length;f<b;f++){var g=a.faceVertexUvs[f];void 0===this.faceVertexUvs[f]&&(this.faceVertexUvs[f]=[]);e=0;for(c=g.length;e<
    c;e++){var h=g[e],k=[];var m=0;for(d=h.length;m<d;m++)k.push(h[m].clone());this.faceVertexUvs[f].push(k)}}m=a.morphTargets;f=0;for(b=m.length;f<b;f++){d={};d.name=m[f].name;if(void 0!==m[f].vertices)for(d.vertices=[],e=0,c=m[f].vertices.length;e<c;e++)d.vertices.push(m[f].vertices[e].clone());if(void 0!==m[f].normals)for(d.normals=[],e=0,c=m[f].normals.length;e<c;e++)d.normals.push(m[f].normals[e].clone());this.morphTargets.push(d)}m=a.morphNormals;f=0;for(b=m.length;f<b;f++){d={};if(void 0!==m[f].vertexNormals)for(d.vertexNormals=
    [],e=0,c=m[f].vertexNormals.length;e<c;e++)g=m[f].vertexNormals[e],h={},h.a=g.a.clone(),h.b=g.b.clone(),h.c=g.c.clone(),d.vertexNormals.push(h);if(void 0!==m[f].faceNormals)for(d.faceNormals=[],e=0,c=m[f].faceNormals.length;e<c;e++)d.faceNormals.push(m[f].faceNormals[e].clone());this.morphNormals.push(d)}e=a.skinWeights;f=0;for(b=e.length;f<b;f++)this.skinWeights.push(e[f].clone());e=a.skinIndices;f=0;for(b=e.length;f<b;f++)this.skinIndices.push(e[f].clone());e=a.lineDistances;f=0;for(b=e.length;f<
    b;f++)this.lineDistances.push(e[f]);f=a.boundingBox;null!==f&&(this.boundingBox=f.clone());f=a.boundingSphere;null!==f&&(this.boundingSphere=f.clone());this.elementsNeedUpdate=a.elementsNeedUpdate;this.verticesNeedUpdate=a.verticesNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.normalsNeedUpdate=a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.lineDistancesNeedUpdate=a.lineDistancesNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});
    Object.defineProperty(M.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(M.prototype,{isBufferAttribute:!0,setArray:function(a){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==a?a.length/this.itemSize:0;this.array=a},setDynamic:function(a){this.dynamic=a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.itemSize=a.itemSize;this.count=a.count;this.normalized=a.normalized;
    this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.itemSize;c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},copyArray:function(a){this.array.set(a);return this},copyColorsArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",d),f=new H);b[c++]=f.r;b[c++]=f.g;b[c++]=f.b}return this},copyIndicesArray:function(a){for(var b=this.array,
    c=0,d=0,e=a.length;d<e;d++){var f=a[d];b[c++]=f.a;b[c++]=f.b;b[c++]=f.c}return this},copyVector2sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",d),f=new D);b[c++]=f.x;b[c++]=f.y}return this},copyVector3sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",d),f=new p);
    b[c++]=f.x;b[c++]=f.y;b[c++]=f.z}return this},copyVector4sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",d),f=new aa);b[c++]=f.x;b[c++]=f.y;b[c++]=f.z;b[c++]=f.w}return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},getX:function(a){return this.array[a*this.itemSize]},setX:function(a,b){this.array[a*this.itemSize]=b;return this},getY:function(a){return this.array[a*
    this.itemSize+1]},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},getZ:function(a){return this.array[a*this.itemSize+2]},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},getW:function(a){return this.array[a*this.itemSize+3]},setW:function(a,b){this.array[a*this.itemSize+3]=b;return this},setXY:function(a,b,c){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=
    d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this},onUpload:function(a){this.onUploadCallback=a;return this},clone:function(){return(new this.constructor(this.array,this.itemSize)).copy(this)}});uc.prototype=Object.create(M.prototype);uc.prototype.constructor=uc;vc.prototype=Object.create(M.prototype);vc.prototype.constructor=vc;wc.prototype=Object.create(M.prototype);wc.prototype.constructor=wc;xc.prototype=
    Object.create(M.prototype);xc.prototype.constructor=xc;ob.prototype=Object.create(M.prototype);ob.prototype.constructor=ob;yc.prototype=Object.create(M.prototype);yc.prototype.constructor=yc;pb.prototype=Object.create(M.prototype);pb.prototype.constructor=pb;B.prototype=Object.create(M.prototype);B.prototype.constructor=B;zc.prototype=Object.create(M.prototype);zc.prototype.constructor=zc;Object.assign(Ve.prototype,{computeGroups:function(a){var b=[],c=void 0;a=a.faces;for(var d=0;d<a.length;d++){var e=
    a[d];if(e.materialIndex!==c){c=e.materialIndex;void 0!==f&&(f.count=3*d-f.start,b.push(f));var f={start:3*d,materialIndex:c}}}void 0!==f&&(f.count=3*d-f.start,b.push(f));this.groups=b},fromGeometry:function(a){var b=a.faces,c=a.vertices,d=a.faceVertexUvs,e=d[0]&&0<d[0].length,f=d[1]&&0<d[1].length,g=a.morphTargets,h=g.length;if(0<h){var k=[];for(var m=0;m<h;m++)k[m]=[];this.morphTargets.position=k}var l=a.morphNormals,n=l.length;if(0<n){var p=[];for(m=0;m<n;m++)p[m]=[];this.morphTargets.normal=p}for(var r=
    a.skinIndices,t=a.skinWeights,v=r.length===c.length,w=t.length===c.length,m=0;m<b.length;m++){var z=b[m];this.vertices.push(c[z.a],c[z.b],c[z.c]);var y=z.vertexNormals;3===y.length?this.normals.push(y[0],y[1],y[2]):(y=z.normal,this.normals.push(y,y,y));y=z.vertexColors;3===y.length?this.colors.push(y[0],y[1],y[2]):(y=z.color,this.colors.push(y,y,y));!0===e&&(y=d[0][m],void 0!==y?this.uvs.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",m),this.uvs.push(new D,
    new D,new D)));!0===f&&(y=d[1][m],void 0!==y?this.uvs2.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",m),this.uvs2.push(new D,new D,new D)));for(y=0;y<h;y++){var x=g[y].vertices;k[y].push(x[z.a],x[z.b],x[z.c])}for(y=0;y<n;y++)x=l[y].vertexNormals[m],p[y].push(x.a,x.b,x.c);v&&this.skinIndices.push(r[z.a],r[z.b],r[z.c]);w&&this.skinWeights.push(t[z.a],t[z.b],t[z.c])}this.computeGroups(a);this.verticesNeedUpdate=a.verticesNeedUpdate;this.normalsNeedUpdate=
    a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;return this}});var eg=1;E.prototype=Object.assign(Object.create(za.prototype),{constructor:E,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(a){Array.isArray(a)?this.index=new (65535<Xd(a)?pb:ob)(a,1):this.index=a},addAttribute:function(a,b,c){if(b&&b.isBufferAttribute||b&&b.isInterleavedBufferAttribute)if("index"===a)console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),
    this.setIndex(b);else return this.attributes[a]=b,this;else console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(a,new M(b,c))},getAttribute:function(a){return this.attributes[a]},removeAttribute:function(a){delete this.attributes[a];return this},addGroup:function(a,b,c){this.groups.push({start:a,count:b,materialIndex:void 0!==c?c:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(a,b){this.drawRange.start=a;this.drawRange.count=b},
    applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.applyToBufferAttribute(b),b.needsUpdate=!0);b=this.attributes.normal;void 0!==b&&((new ma).getNormalMatrix(a).applyToBufferAttribute(b),b.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();return this},rotateX:function(){var a=new O;return function(b){a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a=new O;return function(b){a.makeRotationY(b);
    this.applyMatrix(a);return this}}(),rotateZ:function(){var a=new O;return function(b){a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a=new O;return function(b,c,d){a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a=new O;return function(b,c,d){a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a=new x;return function(b){a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),center:function(){this.computeBoundingBox();
    var a=this.boundingBox.getCenter().negate();this.translate(a.x,a.y,a.z);return a},setFromObject:function(a){var b=a.geometry;if(a.isPoints||a.isLine){a=new B(3*b.vertices.length,3);var c=new B(3*b.colors.length,3);this.addAttribute("position",a.copyVector3sArray(b.vertices));this.addAttribute("color",c.copyColorsArray(b.colors));b.lineDistances&&b.lineDistances.length===b.vertices.length&&(a=new B(b.lineDistances.length,1),this.addAttribute("lineDistance",a.copyArray(b.lineDistances)));null!==b.boundingSphere&&
    (this.boundingSphere=b.boundingSphere.clone());null!==b.boundingBox&&(this.boundingBox=b.boundingBox.clone())}else a.isMesh&&b&&b.isGeometry&&this.fromGeometry(b);return this},setFromPoints:function(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c];b.push(e.x,e.y,e.z||0)}this.addAttribute("position",new B(b,3));return this},updateFromObject:function(a){var b=a.geometry;if(a.isMesh){var c=b.__directGeometry;!0===b.elementsNeedUpdate&&(c=void 0,b.elementsNeedUpdate=!1);if(void 0===c)return this.fromGeometry(b);
    c.verticesNeedUpdate=b.verticesNeedUpdate;c.normalsNeedUpdate=b.normalsNeedUpdate;c.colorsNeedUpdate=b.colorsNeedUpdate;c.uvsNeedUpdate=b.uvsNeedUpdate;c.groupsNeedUpdate=b.groupsNeedUpdate;b.verticesNeedUpdate=!1;b.normalsNeedUpdate=!1;b.colorsNeedUpdate=!1;b.uvsNeedUpdate=!1;b.groupsNeedUpdate=!1;b=c}!0===b.verticesNeedUpdate&&(c=this.attributes.position,void 0!==c&&(c.copyVector3sArray(b.vertices),c.needsUpdate=!0),b.verticesNeedUpdate=!1);!0===b.normalsNeedUpdate&&(c=this.attributes.normal,void 0!==
    c&&(c.copyVector3sArray(b.normals),c.needsUpdate=!0),b.normalsNeedUpdate=!1);!0===b.colorsNeedUpdate&&(c=this.attributes.color,void 0!==c&&(c.copyColorsArray(b.colors),c.needsUpdate=!0),b.colorsNeedUpdate=!1);b.uvsNeedUpdate&&(c=this.attributes.uv,void 0!==c&&(c.copyVector2sArray(b.uvs),c.needsUpdate=!0),b.uvsNeedUpdate=!1);b.lineDistancesNeedUpdate&&(c=this.attributes.lineDistance,void 0!==c&&(c.copyArray(b.lineDistances),c.needsUpdate=!0),b.lineDistancesNeedUpdate=!1);b.groupsNeedUpdate&&(b.computeGroups(a.geometry),
    this.groups=b.groups,b.groupsNeedUpdate=!1);return this},fromGeometry:function(a){a.__directGeometry=(new Ve).fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry)},fromDirectGeometry:function(a){var b=new Float32Array(3*a.vertices.length);this.addAttribute("position",(new M(b,3)).copyVector3sArray(a.vertices));0<a.normals.length&&(b=new Float32Array(3*a.normals.length),this.addAttribute("normal",(new M(b,3)).copyVector3sArray(a.normals)));0<a.colors.length&&(b=new Float32Array(3*a.colors.length),
    this.addAttribute("color",(new M(b,3)).copyColorsArray(a.colors)));0<a.uvs.length&&(b=new Float32Array(2*a.uvs.length),this.addAttribute("uv",(new M(b,2)).copyVector2sArray(a.uvs)));0<a.uvs2.length&&(b=new Float32Array(2*a.uvs2.length),this.addAttribute("uv2",(new M(b,2)).copyVector2sArray(a.uvs2)));0<a.indices.length&&(b=new (65535<Xd(a.indices)?Uint32Array:Uint16Array)(3*a.indices.length),this.setIndex((new M(b,1)).copyIndicesArray(a.indices)));this.groups=a.groups;for(var c in a.morphTargets){for(var b=
    [],d=a.morphTargets[c],e=0,f=d.length;e<f;e++){var g=d[e],h=new B(3*g.length,3);b.push(h.copyVector3sArray(g))}this.morphAttributes[c]=b}0<a.skinIndices.length&&(c=new B(4*a.skinIndices.length,4),this.addAttribute("skinIndex",c.copyVector4sArray(a.skinIndices)));0<a.skinWeights.length&&(c=new B(4*a.skinWeights.length,4),this.addAttribute("skinWeight",c.copyVector4sArray(a.skinWeights)));null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());null!==a.boundingBox&&(this.boundingBox=
    a.boundingBox.clone());return this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Xa);var a=this.attributes.position;void 0!==a?this.boundingBox.setFromBufferAttribute(a):this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var a=
    new Xa,b=new p;return function(){null===this.boundingSphere&&(this.boundingSphere=new Ia);var c=this.attributes.position;if(c){var d=this.boundingSphere.center;a.setFromBufferAttribute(c);a.getCenter(d);for(var e=0,f=0,g=c.count;f<g;f++)b.x=c.getX(f),b.y=c.getY(f),b.z=c.getZ(f),e=Math.max(e,d.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(e);isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
    this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.index,b=this.attributes,c=this.groups;if(b.position){var d=b.position.array;if(void 0===b.normal)this.addAttribute("normal",new M(new Float32Array(d.length),3));else for(var e=b.normal.array,f=0,g=e.length;f<g;f++)e[f]=0;var e=b.normal.array,h=new p,k=new p,m=new p,l=new p,n=new p;if(a){a=a.array;0===c.length&&this.addGroup(0,a.length);for(var u=0,r=c.length;u<r;++u){f=c[u];g=f.start;var t=f.count;f=g;for(g+=t;f<
    g;f+=3){t=3*a[f+0];var v=3*a[f+1];var w=3*a[f+2];h.fromArray(d,t);k.fromArray(d,v);m.fromArray(d,w);l.subVectors(m,k);n.subVectors(h,k);l.cross(n);e[t]+=l.x;e[t+1]+=l.y;e[t+2]+=l.z;e[v]+=l.x;e[v+1]+=l.y;e[v+2]+=l.z;e[w]+=l.x;e[w+1]+=l.y;e[w+2]+=l.z}}}else for(f=0,g=d.length;f<g;f+=9)h.fromArray(d,f),k.fromArray(d,f+3),m.fromArray(d,f+6),l.subVectors(m,k),n.subVectors(h,k),l.cross(n),e[f]=l.x,e[f+1]=l.y,e[f+2]=l.z,e[f+3]=l.x,e[f+4]=l.y,e[f+5]=l.z,e[f+6]=l.x,e[f+7]=l.y,e[f+8]=l.z;this.normalizeNormals();
    b.normal.needsUpdate=!0}},merge:function(a,b){if(a&&a.isBufferGeometry){void 0===b&&(b=0);var c=this.attributes,d;for(d in c)if(void 0!==a.attributes[d])for(var e=c[d].array,f=a.attributes[d],g=f.array,h=0,f=f.itemSize*b;h<g.length;h++,f++)e[f]=g[h];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",a)},normalizeNormals:function(){var a=new p;return function(){for(var b=this.attributes.normal,c=0,d=b.count;c<d;c++)a.x=b.getX(c),a.y=b.getY(c),
    a.z=b.getZ(c),a.normalize(),b.setXYZ(c,a.x,a.y,a.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var a=new E,b=this.index.array,c=this.attributes,d;for(d in c){for(var e=c[d],f=e.array,e=e.itemSize,g=new f.constructor(b.length*e),h,k=0,m=0,l=b.length;m<l;m++){h=b[m]*e;for(var n=0;n<e;n++)g[k++]=f[h++]}a.addAttribute(d,new M(g,e))}return a},toJSON:function(){var a={metadata:{version:4.5,type:"BufferGeometry",
    generator:"BufferGeometry.toJSON"}};a.uuid=this.uuid;a.type=this.type;""!==this.name&&(a.name=this.name);if(void 0!==this.parameters){var b=this.parameters;for(var c in b)void 0!==b[c]&&(a[c]=b[c]);return a}a.data={attributes:{}};var d=this.index;null!==d&&(b=Array.prototype.slice.call(d.array),a.data.index={type:d.array.constructor.name,array:b});d=this.attributes;for(c in d){var e=d[c];b=Array.prototype.slice.call(e.array);a.data.attributes[c]={itemSize:e.itemSize,type:e.array.constructor.name,
    array:b,normalized:e.normalized}}c=this.groups;0<c.length&&(a.data.groups=JSON.parse(JSON.stringify(c)));c=this.boundingSphere;null!==c&&(a.data.boundingSphere={center:c.center.toArray(),radius:c.radius});return a},clone:function(){return(new E).copy(this)},copy:function(a){var b;this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;this.name=a.name;var c=a.index;null!==c&&this.setIndex(c.clone());c=a.attributes;for(g in c)this.addAttribute(g,
    c[g].clone());var d=a.morphAttributes;for(g in d){var e=[],f=d[g];c=0;for(b=f.length;c<b;c++)e.push(f[c].clone());this.morphAttributes[g]=e}var g=a.groups;c=0;for(b=g.length;c<b;c++)d=g[c],this.addGroup(d.start,d.count,d.materialIndex);g=a.boundingBox;null!==g&&(this.boundingBox=g.clone());g=a.boundingSphere;null!==g&&(this.boundingSphere=g.clone());this.drawRange.start=a.drawRange.start;this.drawRange.count=a.drawRange.count;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});
    Mb.prototype=Object.create(L.prototype);Mb.prototype.constructor=Mb;qb.prototype=Object.create(E.prototype);qb.prototype.constructor=qb;Ac.prototype=Object.create(L.prototype);Ac.prototype.constructor=Ac;rb.prototype=Object.create(E.prototype);rb.prototype.constructor=rb;Aa.prototype=Object.create(P.prototype);Aa.prototype.constructor=Aa;Aa.prototype.isMeshBasicMaterial=!0;Aa.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;
    this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;return this};Fa.prototype=
    Object.create(P.prototype);Fa.prototype.constructor=Fa;Fa.prototype.isShaderMaterial=!0;Fa.prototype.copy=function(a){P.prototype.copy.call(this,a);this.fragmentShader=a.fragmentShader;this.vertexShader=a.vertexShader;this.uniforms=Ga.clone(a.uniforms);this.defines=a.defines;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.lights=a.lights;this.clipping=a.clipping;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;this.extensions=
    a.extensions;return this};Fa.prototype.toJSON=function(a){a=P.prototype.toJSON.call(this,a);a.uniforms=this.uniforms;a.vertexShader=this.vertexShader;a.fragmentShader=this.fragmentShader;return a};Object.assign(sb.prototype,{set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new p).copy(this.direction).multiplyScalar(a).add(this.origin)},
    lookAt:function(a){this.direction.copy(a).sub(this.origin).normalize();return this},recast:function(){var a=new p;return function(b){this.origin.copy(this.at(b,a));return this}}(),closestPointToPoint:function(a,b){b=b||new p;b.subVectors(a,this.origin);a=b.dot(this.direction);return 0>a?b.copy(this.origin):b.copy(this.direction).multiplyScalar(a).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(){var a=new p;return function(b){var c=
    a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceToSquared(b)}}(),distanceSqToSegment:function(){var a=new p,b=new p,c=new p;return function(d,e,f,g){a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h=.5*d.distanceTo(e),k=-this.direction.dot(b),m=c.dot(this.direction),l=-c.dot(b),n=c.lengthSq(),p=Math.abs(1-k*k);if(0<p){d=k*l-m;e=k*
    m-l;var r=h*p;0<=d?e>=-r?e<=r?(h=1/p,d*=h,e*=h,k=d*(d+k*e+2*m)+e*(k*d+e+2*l)+n):(e=h,d=Math.max(0,-(k*e+m)),k=-d*d+e*(e+2*l)+n):(e=-h,d=Math.max(0,-(k*e+m)),k=-d*d+e*(e+2*l)+n):e<=-r?(d=Math.max(0,-(-k*h+m)),e=0<d?-h:Math.min(Math.max(-h,-l),h),k=-d*d+e*(e+2*l)+n):e<=r?(d=0,e=Math.min(Math.max(-h,-l),h),k=e*(e+2*l)+n):(d=Math.max(0,-(k*h+m)),e=0<d?h:Math.min(Math.max(-h,-l),h),k=-d*d+e*(e+2*l)+n)}else e=0<k?-h:h,d=Math.max(0,-(k*e+m)),k=-d*d+e*(e+2*l)+n;f&&f.copy(this.direction).multiplyScalar(d).add(this.origin);
    g&&g.copy(b).multiplyScalar(e).add(a);return k}}(),intersectSphere:function(){var a=new p;return function(b,c){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d;b=b.radius*b.radius;if(e>b)return null;b=Math.sqrt(b-e);e=d-b;d+=b;return 0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c)}}(),intersectsSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?
    0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){a=this.distanceToPlane(a);return null===a?null:this.at(a,b)},intersectsPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},intersectBox:function(a,b){var c=1/this.direction.x;var d=1/this.direction.y;var e=1/this.direction.z,f=this.origin;if(0<=c){var g=(a.min.x-f.x)*c;c*=a.max.x-f.x}else g=(a.max.x-f.x)*c,c*=a.min.x-f.x;if(0<=d){var h=(a.min.y-
    f.y)*d;d*=a.max.y-f.y}else h=(a.max.y-f.y)*d,d*=a.min.y-f.y;if(g>d||h>c)return null;if(h>g||g!==g)g=h;if(d<c||c!==c)c=d;0<=e?(h=(a.min.z-f.z)*e,a=(a.max.z-f.z)*e):(h=(a.max.z-f.z)*e,a=(a.min.z-f.z)*e);if(g>a||h>c)return null;if(h>g||g!==g)g=h;if(a<c||c!==c)c=a;return 0>c?null:this.at(0<=g?g:c,b)},intersectsBox:function(){var a=new p;return function(b){return null!==this.intersectBox(b,a)}}(),intersectTriangle:function(){var a=new p,b=new p,c=new p,d=new p;return function(e,f,g,h,k){b.subVectors(f,
    e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);if(0<f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));if(0>g||e+g>f)return null;e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.origin.applyMatrix4(a);this.direction.transformDirection(a);return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}});
    Object.assign(Nb.prototype,{set:function(a,b){this.start.copy(a);this.end.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},getCenter:function(a){return(a||new p).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new p).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},
    at:function(a,b){b=b||new p;return this.delta(b).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new p,b=new p;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);c=b.dot(b);c=b.dot(a)/c;d&&(c=Q.clamp(c,0,1));return c}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new p;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);this.end.applyMatrix4(a);
    return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}});Object.assign(Za,{normal:function(){var a=new p;return function(b,c,d,e){e=e||new p;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}(),barycoordFromPoint:function(){var a=new p,b=new p,c=new p;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var m=
    d*k-e*e;h=h||new p;if(0===m)return h.set(-2,-1,-1);m=1/m;k=(k*f-e*g)*m;d=(d*g-e*f)*m;return h.set(1-k-d,d,k)}}(),containsPoint:function(){var a=new p;return function(b,c,d,e){b=Za.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}()});Object.assign(Za.prototype,{set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},clone:function(){return(new this.constructor).copy(this)},
    copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new p,b=new p;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return.5*a.cross(b).length()}}(),midpoint:function(a){return(a||new p).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return Za.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new Ea).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return Za.barycoordFromPoint(a,
    this.a,this.b,this.c,b)},containsPoint:function(a){return Za.containsPoint(a,this.a,this.b,this.c)},closestPointToPoint:function(){var a=new Ea,b=[new Nb,new Nb,new Nb],c=new p,d=new p;return function(e,f){f=f||new p;var g=Infinity;a.setFromCoplanarPoints(this.a,this.b,this.c);a.projectPoint(e,c);if(!0===this.containsPoint(c))f.copy(c);else for(b[0].set(this.a,this.b),b[1].set(this.b,this.c),b[2].set(this.c,this.a),e=0;e<b.length;e++){b[e].closestPointToPoint(c,!0,d);var h=c.distanceToSquared(d);
    h<g&&(g=h,f.copy(d))}return f}}(),equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}});ra.prototype=Object.assign(Object.create(x.prototype),{constructor:ra,isMesh:!0,setDrawMode:function(a){this.drawMode=a},copy:function(a){x.prototype.copy.call(this,a);this.drawMode=a.drawMode;void 0!==a.morphTargetInfluences&&(this.morphTargetInfluences=a.morphTargetInfluences.slice());void 0!==a.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},a.morphTargetDictionary));
    return this},updateMorphTargets:function(){var a=this.geometry;if(a.isBufferGeometry){a=a.morphAttributes;var b=Object.keys(a);if(0<b.length){var c=a[b[0]];if(void 0!==c)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},a=0,b=c.length;a<b;a++){var d=c[a].name||String(a);this.morphTargetInfluences.push(0);this.morphTargetDictionary[d]=a}}}else if(c=a.morphTargets,void 0!==c&&0<c.length)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},a=0,b=c.length;a<b;a++)d=c[a].name||
    String(a),this.morphTargetInfluences.push(0),this.morphTargetDictionary[d]=a},raycast:function(){function a(a,b,c,d,e,f,g){Za.barycoordFromPoint(a,b,c,d,v);e.multiplyScalar(v.x);f.multiplyScalar(v.y);g.multiplyScalar(v.z);e.add(f).add(g);return e.clone()}function b(a,b,c,d,e,f,g,h){if(null===(1===b.side?d.intersectTriangle(g,f,e,!0,h):d.intersectTriangle(e,f,g,2!==b.side,h)))return null;z.copy(h);z.applyMatrix4(a.matrixWorld);b=c.ray.origin.distanceTo(z);return b<c.near||b>c.far?null:{distance:b,
    point:z.clone(),object:a}}function c(c,d,e,f,m,l,q,n){g.fromBufferAttribute(f,l);h.fromBufferAttribute(f,q);k.fromBufferAttribute(f,n);if(c=b(c,c.material,d,e,g,h,k,w))m&&(u.fromBufferAttribute(m,l),r.fromBufferAttribute(m,q),t.fromBufferAttribute(m,n),c.uv=a(w,g,h,k,u,r,t)),c.face=new Ya(l,q,n,Za.normal(g,h,k)),c.faceIndex=l;return c}var d=new O,e=new sb,f=new Ia,g=new p,h=new p,k=new p,m=new p,l=new p,n=new p,u=new D,r=new D,t=new D,v=new p,w=new p,z=new p;return function(q,p){var v=this.geometry,
    z=this.material,y=this.matrixWorld;if(void 0!==z&&(null===v.boundingSphere&&v.computeBoundingSphere(),f.copy(v.boundingSphere),f.applyMatrix4(y),!1!==q.ray.intersectsSphere(f)&&(d.getInverse(y),e.copy(q.ray).applyMatrix4(d),null===v.boundingBox||!1!==e.intersectsBox(v.boundingBox)))){var x;if(v.isBufferGeometry){var z=v.index,B=v.attributes.position,y=v.attributes.uv,D;if(null!==z){var C=0;for(D=z.count;C<D;C+=3){v=z.getX(C);var I=z.getX(C+1);var E=z.getX(C+2);if(x=c(this,q,e,B,y,v,I,E))x.faceIndex=
    Math.floor(C/3),p.push(x)}}else if(void 0!==B)for(C=0,D=B.count;C<D;C+=3)if(v=C,I=C+1,E=C+2,x=c(this,q,e,B,y,v,I,E))x.index=v,p.push(x)}else if(v.isGeometry){var y=Array.isArray(z);C=v.vertices;D=v.faces;I=v.faceVertexUvs[0];0<I.length&&(B=I);for(var H=0,K=D.length;H<K;H++){var N=D[H];x=y?z[N.materialIndex]:z;if(void 0!==x){I=C[N.a];E=C[N.b];var L=C[N.c];if(!0===x.morphTargets){var M=v.morphTargets,O=this.morphTargetInfluences;g.set(0,0,0);h.set(0,0,0);k.set(0,0,0);for(var P=0,Q=M.length;P<Q;P++){var R=
    O[P];if(0!==R){var U=M[P].vertices;g.addScaledVector(m.subVectors(U[N.a],I),R);h.addScaledVector(l.subVectors(U[N.b],E),R);k.addScaledVector(n.subVectors(U[N.c],L),R)}}g.add(I);h.add(E);k.add(L);I=g;E=h;L=k}if(x=b(this,x,q,e,I,E,L,w))B&&B[H]&&(M=B[H],u.copy(M[0]),r.copy(M[1]),t.copy(M[2]),x.uv=a(w,I,E,L,u,r,t)),x.face=N,x.faceIndex=H,p.push(x)}}}}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});var yg=0;ba.prototype=Object.assign(Object.create(Ta.prototype),
    {constructor:ba,isPerspectiveCamera:!0,copy:function(a,b){Ta.prototype.copy.call(this,a,b);this.fov=a.fov;this.zoom=a.zoom;this.near=a.near;this.far=a.far;this.focus=a.focus;this.aspect=a.aspect;this.view=null===a.view?null:Object.assign({},a.view);this.filmGauge=a.filmGauge;this.filmOffset=a.filmOffset;return this},setFocalLength:function(a){a=.5*this.getFilmHeight()/a;this.fov=2*Q.RAD2DEG*Math.atan(a);this.updateProjectionMatrix()},getFocalLength:function(){var a=Math.tan(.5*Q.DEG2RAD*this.fov);
    return.5*this.getFilmHeight()/a},getEffectiveFOV:function(){return 2*Q.RAD2DEG*Math.atan(Math.tan(.5*Q.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(a,b,c,d,e,f){this.aspect=a/b;null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=a;this.view.fullHeight=b;this.view.offsetX=
    c;this.view.offsetY=d;this.view.width=e;this.view.height=f;this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=this.near,b=a*Math.tan(.5*Q.DEG2RAD*this.fov)/this.zoom,c=2*b,d=this.aspect*c,e=-.5*d,f=this.view;if(null!==this.view&&this.view.enabled)var g=f.fullWidth,h=f.fullHeight,e=e+f.offsetX*d/g,b=b-f.offsetY*c/h,d=f.width/g*d,c=f.height/h*c;f=this.filmOffset;0!==f&&(e+=a*f/this.getFilmWidth());
    this.projectionMatrix.makePerspective(e,e+d,b,b-c,a,this.far)},toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.fov=this.fov;a.object.zoom=this.zoom;a.object.near=this.near;a.object.far=this.far;a.object.focus=this.focus;a.object.aspect=this.aspect;null!==this.view&&(a.object.view=Object.assign({},this.view));a.object.filmGauge=this.filmGauge;a.object.filmOffset=this.filmOffset;return a}});ud.prototype=Object.assign(Object.create(ba.prototype),{constructor:ud,isArrayCamera:!0});Pb.prototype.isFogExp2=
    !0;Pb.prototype.clone=function(){return new Pb(this.color.getHex(),this.density)};Pb.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}};Qb.prototype.isFog=!0;Qb.prototype.clone=function(){return new Qb(this.color.getHex(),this.near,this.far)};Qb.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}};vd.prototype=Object.assign(Object.create(x.prototype),{constructor:vd,copy:function(a,b){x.prototype.copy.call(this,
    a,b);null!==a.background&&(this.background=a.background.clone());null!==a.fog&&(this.fog=a.fog.clone());null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone());this.autoUpdate=a.autoUpdate;this.matrixAutoUpdate=a.matrixAutoUpdate;return this},toJSON:function(a){var b=x.prototype.toJSON.call(this,a);null!==this.background&&(b.object.background=this.background.toJSON(a));null!==this.fog&&(b.object.fog=this.fog.toJSON());return b}});de.prototype=Object.assign(Object.create(x.prototype),
    {constructor:de,isLensFlare:!0,copy:function(a){x.prototype.copy.call(this,a);this.positionScreen.copy(a.positionScreen);this.customUpdateCallback=a.customUpdateCallback;for(var b=0,c=a.lensFlares.length;b<c;b++)this.lensFlares.push(a.lensFlares[b]);return this},add:function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new H(16777215));void 0===d&&(d=1);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:0,
    opacity:f,color:e,blending:d})},updateLensFlares:function(){var a,b=this.lensFlares.length,c=2*-this.positionScreen.x,d=2*-this.positionScreen.y;for(a=0;a<b;a++){var e=this.lensFlares[a];e.x=this.positionScreen.x+c*e.distance;e.y=this.positionScreen.y+d*e.distance;e.wantedRotation=e.x*Math.PI*.25;e.rotation+=.25*(e.wantedRotation-e.rotation)}}});hb.prototype=Object.create(P.prototype);hb.prototype.constructor=hb;hb.prototype.isSpriteMaterial=!0;hb.prototype.copy=function(a){P.prototype.copy.call(this,
    a);this.color.copy(a.color);this.map=a.map;this.rotation=a.rotation;return this};Cc.prototype=Object.assign(Object.create(x.prototype),{constructor:Cc,isSprite:!0,raycast:function(){var a=new p,b=new p,c=new p;return function(d,e){b.setFromMatrixPosition(this.matrixWorld);d.ray.closestPointToPoint(b,a);c.setFromMatrixScale(this.matrixWorld);var f=c.x*c.y/4;b.distanceToSquared(a)>f||(f=d.ray.origin.distanceTo(a),f<d.near||f>d.far||e.push({distance:f,point:a.clone(),face:null,object:this}))}}(),clone:function(){return(new this.constructor(this.material)).copy(this)}});
    Dc.prototype=Object.assign(Object.create(x.prototype),{constructor:Dc,copy:function(a){x.prototype.copy.call(this,a,!1);a=a.levels;for(var b=0,c=a.length;b<c;b++){var d=a[b];this.addLevel(d.object.clone(),d.distance)}return this},addLevel:function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=this.levels,d=0;d<c.length&&!(b<c[d].distance);d++);c.splice(d,0,{distance:b,object:a});this.add(a)},getObjectForDistance:function(a){for(var b=this.levels,c=1,d=b.length;c<d&&!(a<b[c].distance);c++);return b[c-
    1].object},raycast:function(){var a=new p;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b,c)}}(),update:function(){var a=new p,b=new p;return function(c){var d=this.levels;if(1<d.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);d[0].object.visible=!0;for(var e=1,f=d.length;e<f;e++)if(c>=d[e].distance)d[e-1].object.visible=!1,d[e].object.visible=!0;else break;
    for(;e<f;e++)d[e].object.visible=!1}}}(),toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.levels=[];for(var b=this.levels,c=0,d=b.length;c<d;c++){var e=b[c];a.object.levels.push({object:e.object.uuid,distance:e.distance})}return a}});Object.assign(Ec.prototype,{calculateInverses:function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new O;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}},pose:function(){var a,b;var c=0;for(b=this.bones.length;c<
    b;c++)(a=this.bones[c])&&a.matrixWorld.getInverse(this.boneInverses[c]);c=0;for(b=this.bones.length;c<b;c++)if(a=this.bones[c])a.parent&&a.parent.isBone?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)},update:function(){var a=new O,b=new O;return function(){for(var c=this.bones,d=this.boneInverses,e=this.boneMatrices,f=this.boneTexture,g=0,h=c.length;g<h;g++)a.multiplyMatrices(c[g]?c[g].matrixWorld:
    b,d[g]),a.toArray(e,16*g);void 0!==f&&(f.needsUpdate=!0)}}(),clone:function(){return new Ec(this.bones,this.boneInverses)}});wd.prototype=Object.assign(Object.create(x.prototype),{constructor:wd,isBone:!0});xd.prototype=Object.assign(Object.create(ra.prototype),{constructor:xd,isSkinnedMesh:!0,initBones:function(){var a=[],b;if(this.geometry&&void 0!==this.geometry.bones){var c=0;for(b=this.geometry.bones.length;c<b;c++){var d=this.geometry.bones[c];var e=new wd;a.push(e);e.name=d.name;e.position.fromArray(d.pos);
    e.quaternion.fromArray(d.rotq);void 0!==d.scl&&e.scale.fromArray(d.scl)}c=0;for(b=this.geometry.bones.length;c<b;c++)d=this.geometry.bones[c],-1!==d.parent&&null!==d.parent&&void 0!==a[d.parent]?a[d.parent].add(a[c]):this.add(a[c])}this.updateMatrixWorld(!0);return a},bind:function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var a;
    if(this.geometry&&this.geometry.isGeometry)for(a=0;a<this.geometry.skinWeights.length;a++){var b=this.geometry.skinWeights[a];var c=1/b.manhattanLength();Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var b=new aa,d=this.geometry.attributes.skinWeight;for(a=0;a<d.count;a++)b.x=d.getX(a),b.y=d.getY(a),b.z=d.getZ(a),b.w=d.getW(a),c=1/b.manhattanLength(),Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0),d.setXYZW(a,b.x,b.y,b.z,b.w)}},updateMatrixWorld:function(a){ra.prototype.updateMatrixWorld.call(this,
    a);"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});W.prototype=Object.create(P.prototype);W.prototype.constructor=W;W.prototype.isLineBasicMaterial=!0;W.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);
    this.linewidth=a.linewidth;this.linecap=a.linecap;this.linejoin=a.linejoin;return this};sa.prototype=Object.assign(Object.create(x.prototype),{constructor:sa,isLine:!0,raycast:function(){var a=new O,b=new sb,c=new Ia;return function(d,e){var f=d.linePrecision,f=f*f,g=this.geometry,h=this.matrixWorld;null===g.boundingSphere&&g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(h);if(!1!==d.ray.intersectsSphere(c)){a.getInverse(h);b.copy(d.ray).applyMatrix4(a);var k=new p,m=new p,h=new p,
    l=new p,n=this&&this.isLineSegments?2:1;if(g.isBufferGeometry){var u=g.index;var r=g.attributes.position.array;if(null!==u)for(var t=u.array,g=0,v=t.length-1;g<v;g+=n)u=t[g+1],k.fromArray(r,3*t[g]),m.fromArray(r,3*u),u=b.distanceSqToSegment(k,m,l,h),u>f||(l.applyMatrix4(this.matrixWorld),u=d.ray.origin.distanceTo(l),u<d.near||u>d.far||e.push({distance:u,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}));else for(g=0,v=r.length/3-1;g<v;g+=n)k.fromArray(r,
    3*g),m.fromArray(r,3*g+3),u=b.distanceSqToSegment(k,m,l,h),u>f||(l.applyMatrix4(this.matrixWorld),u=d.ray.origin.distanceTo(l),u<d.near||u>d.far||e.push({distance:u,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else if(g.isGeometry)for(k=g.vertices,m=k.length,g=0;g<m-1;g+=n)u=b.distanceSqToSegment(k[g],k[g+1],l,h),u>f||(l.applyMatrix4(this.matrixWorld),u=d.ray.origin.distanceTo(l),u<d.near||u>d.far||e.push({distance:u,point:h.clone().applyMatrix4(this.matrixWorld),
    index:g,face:null,faceIndex:null,object:this}))}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});X.prototype=Object.assign(Object.create(sa.prototype),{constructor:X,isLineSegments:!0});yd.prototype=Object.assign(Object.create(sa.prototype),{constructor:yd,isLineLoop:!0});Ka.prototype=Object.create(P.prototype);Ka.prototype.constructor=Ka;Ka.prototype.isPointsMaterial=!0;Ka.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);
    this.map=a.map;this.size=a.size;this.sizeAttenuation=a.sizeAttenuation;return this};Rb.prototype=Object.assign(Object.create(x.prototype),{constructor:Rb,isPoints:!0,raycast:function(){var a=new O,b=new sb,c=new Ia;return function(d,e){function f(a,c){var f=b.distanceSqToPoint(a);if(f<l){a=b.closestPointToPoint(a);a.applyMatrix4(k);var h=d.ray.origin.distanceTo(a);h<d.near||h>d.far||e.push({distance:h,distanceToRay:Math.sqrt(f),point:a.clone(),index:c,face:null,object:g})}}var g=this,h=this.geometry,
    k=this.matrixWorld,m=d.params.Points.threshold;null===h.boundingSphere&&h.computeBoundingSphere();c.copy(h.boundingSphere);c.applyMatrix4(k);c.radius+=m;if(!1!==d.ray.intersectsSphere(c)){a.getInverse(k);b.copy(d.ray).applyMatrix4(a);var m=m/((this.scale.x+this.scale.y+this.scale.z)/3),l=m*m,m=new p;if(h.isBufferGeometry){var n=h.index,h=h.attributes.position.array;if(null!==n)for(var u=n.array,n=0,r=u.length;n<r;n++){var t=u[n];m.fromArray(h,3*t);f(m,t)}else for(n=0,u=h.length/3;n<u;n++)m.fromArray(h,
    3*n),f(m,n)}else for(m=h.vertices,n=0,u=m.length;n<u;n++)f(m[n],n)}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});Fc.prototype=Object.assign(Object.create(x.prototype),{constructor:Fc,isGroup:!0});ee.prototype=Object.assign(Object.create(U.prototype),{constructor:ee,isVideoTexture:!0,update:function(){var a=this.image;a.readyState>=a.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}});Sb.prototype=Object.create(U.prototype);Sb.prototype.constructor=Sb;Sb.prototype.isCompressedTexture=
    !0;Gc.prototype=Object.create(U.prototype);Gc.prototype.constructor=Gc;Gc.prototype.isDepthTexture=!0;Tb.prototype=Object.create(E.prototype);Tb.prototype.constructor=Tb;Hc.prototype=Object.create(L.prototype);Hc.prototype.constructor=Hc;Ub.prototype=Object.create(E.prototype);Ub.prototype.constructor=Ub;Ic.prototype=Object.create(L.prototype);Ic.prototype.constructor=Ic;ja.prototype=Object.create(E.prototype);ja.prototype.constructor=ja;Jc.prototype=Object.create(L.prototype);Jc.prototype.constructor=
    Jc;Vb.prototype=Object.create(ja.prototype);Vb.prototype.constructor=Vb;Kc.prototype=Object.create(L.prototype);Kc.prototype.constructor=Kc;ub.prototype=Object.create(ja.prototype);ub.prototype.constructor=ub;Lc.prototype=Object.create(L.prototype);Lc.prototype.constructor=Lc;Wb.prototype=Object.create(ja.prototype);Wb.prototype.constructor=Wb;Mc.prototype=Object.create(L.prototype);Mc.prototype.constructor=Mc;Xb.prototype=Object.create(ja.prototype);Xb.prototype.constructor=Xb;Nc.prototype=Object.create(L.prototype);
    Nc.prototype.constructor=Nc;Yb.prototype=Object.create(E.prototype);Yb.prototype.constructor=Yb;Oc.prototype=Object.create(L.prototype);Oc.prototype.constructor=Oc;Zb.prototype=Object.create(E.prototype);Zb.prototype.constructor=Zb;Pc.prototype=Object.create(L.prototype);Pc.prototype.constructor=Pc;$b.prototype=Object.create(E.prototype);$b.prototype.constructor=$b;var Lg={triangulate:function(a,b,c){c=c||2;var d=b&&b.length,e=d?b[0]*c:a.length,f=bf(a,0,e,c,!0),g=[];if(!f)return g;var h;if(d){var k=
    c,d=[],m;var l=0;for(m=b.length;l<m;l++){var n=b[l]*k;var p=l<m-1?b[l+1]*k:a.length;n=bf(a,n,p,k,!1);n===n.next&&(n.steiner=!0);d.push(Jg(n))}d.sort(Hg);for(l=0;l<d.length;l++){b=d[l];k=f;if(k=Ig(b,k))b=ef(k,b),Rc(b,b.next);f=Rc(f,f.next)}}if(a.length>80*c){var r=h=a[0];var t=d=a[1];for(k=c;k<e;k+=c)l=a[k],b=a[k+1],l<r&&(r=l),b<t&&(t=b),l>h&&(h=l),b>d&&(d=b);h=Math.max(h-r,d-t);h=0!==h?1/h:0}Sc(f,g,c,r,t,h);return g}},$a={area:function(a){for(var b=a.length,c=0,d=b-1,e=0;e<b;d=e++)c+=a[d].x*a[e].y-
    a[e].x*a[d].y;return.5*c},isClockWise:function(a){return 0>$a.area(a)},triangulateShape:function(a,b){function c(a){var b=a.length;2<b&&a[b-1].equals(a[0])&&a.pop()}function d(a,b){for(var c=0;c<b.length;c++)a.push(b[c].x),a.push(b[c].y)}var e=[],f=[],g=[];c(a);d(e,a);var h=a.length;b.forEach(c);for(a=0;a<b.length;a++)f.push(h),h+=b[a].length,d(e,b[a]);b=Lg.triangulate(e,f);for(a=0;a<b.length;a+=3)g.push(b.slice(a,a+3));return g}};ib.prototype=Object.create(L.prototype);ib.prototype.constructor=ib;
    La.prototype=Object.create(E.prototype);La.prototype.constructor=La;La.prototype.getArrays=function(){var a=this.getAttribute("position"),a=a?Array.prototype.slice.call(a.array):[],b=this.getAttribute("uv"),b=b?Array.prototype.slice.call(b.array):[],c=this.index,c=c?Array.prototype.slice.call(c.array):[];return{position:a,uv:b,index:c}};La.prototype.addShapeList=function(a,b){var c=a.length;b.arrays=this.getArrays();for(var d=0;d<c;d++)this.addShape(a[d],b);this.setIndex(b.arrays.index);this.addAttribute("position",
    new B(b.arrays.position,3));this.addAttribute("uv",new B(b.arrays.uv,2))};La.prototype.addShape=function(a,b){function c(a,b,c){b||console.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=a.x-b.x;var e=a.y-b.y;var f=c.x-a.x;var g=c.y-a.y,h=d*d+e*e;if(Math.abs(d*g-e*f)>Number.EPSILON){var k=Math.sqrt(h),m=Math.sqrt(f*f+g*g),h=b.x-e/k;b=b.y+d/k;g=((c.x-g/m-h)*g-(c.y+f/m-b)*f)/(d*g-e*f);f=h+d*g-a.x;d=b+e*g-a.y;e=f*f+d*d;if(2>=e)return new D(f,
    d);e=Math.sqrt(e/2)}else a=!1,d>Number.EPSILON?f>Number.EPSILON&&(a=!0):d<-Number.EPSILON?f<-Number.EPSILON&&(a=!0):Math.sign(e)===Math.sign(g)&&(a=!0),a?(f=-e,e=Math.sqrt(h)):(f=d,d=e,e=Math.sqrt(h/2));return new D(f/e,d/e)}function e(a,b){for(G=a.length;0<=--G;){var c=G;var d=G-1;0>d&&(d=a.length-1);var e,f=x+2*w;for(e=0;e<f;e++){var g=X*e,m=X*(e+1),n=b+d+g,q=b+d+m,m=b+c+m;h(b+c+g);h(n);h(m);h(n);h(q);h(m);g=l.length/3;g=E.generateSideWallUV(S,l,g-6,g-3,g-2,g-1);k(g[0]);k(g[1]);k(g[3]);k(g[1]);
    k(g[2]);k(g[3])}}}function f(a,b,c){r.push(a);r.push(b);r.push(c)}function g(a,b,c){h(a);h(b);h(c);a=l.length/3;a=E.generateTopUV(S,l,a-3,a-2,a-1);k(a[0]);k(a[1]);k(a[2])}function h(a){n.push(l.length/3);l.push(r[3*a+0]);l.push(r[3*a+1]);l.push(r[3*a+2])}function k(a){u.push(a.x);u.push(a.y)}var m=b.arrays?b.arrays:this.getArrays(),l=m.position,n=m.index,u=m.uv,r=[],m=void 0!==b.amount?b.amount:100,t=void 0!==b.bevelThickness?b.bevelThickness:6,v=void 0!==b.bevelSize?b.bevelSize:t-2,w=void 0!==b.bevelSegments?
    b.bevelSegments:3,z=void 0!==b.bevelEnabled?b.bevelEnabled:!0,y=void 0!==b.curveSegments?b.curveSegments:12,x=void 0!==b.steps?b.steps:1,A=b.extrudePath,C=!1,E=void 0!==b.UVGenerator?b.UVGenerator:ib.WorldUVGenerator;if(A){var H=A.getSpacedPoints(x);C=!0;z=!1;var K=void 0!==b.frames?b.frames:A.computeFrenetFrames(x,!1);var L=new p;var M=new p;var P=new p}z||(v=t=w=0);var O,S=this,y=a.extractPoints(y);a=y.shape;var Q=y.holes;if(!$a.isClockWise(a)){a=a.reverse();var N=0;for(O=Q.length;N<O;N++){var R=
    Q[N];$a.isClockWise(R)&&(Q[N]=R.reverse())}}var U=$a.triangulateShape(a,Q),W=a;N=0;for(O=Q.length;N<O;N++)R=Q[N],a=a.concat(R);var V,X=a.length,T,ba=U.length,y=[],G=0;var Y=W.length;var ea=Y-1;for(V=G+1;G<Y;G++,ea++,V++)ea===Y&&(ea=0),V===Y&&(V=0),y[G]=d(W[G],W[ea],W[V]);var A=[],ca=y.concat();N=0;for(O=Q.length;N<O;N++){R=Q[N];var aa=[];G=0;Y=R.length;ea=Y-1;for(V=G+1;G<Y;G++,ea++,V++)ea===Y&&(ea=0),V===Y&&(V=0),aa[G]=d(R[G],R[ea],R[V]);A.push(aa);ca=ca.concat(aa)}for(ea=0;ea<w;ea++){Y=ea/w;var da=
    t*Math.cos(Y*Math.PI/2);V=v*Math.sin(Y*Math.PI/2);G=0;for(Y=W.length;G<Y;G++){var fa=c(W[G],y[G],V);f(fa.x,fa.y,-da)}N=0;for(O=Q.length;N<O;N++)for(R=Q[N],aa=A[N],G=0,Y=R.length;G<Y;G++)fa=c(R[G],aa[G],V),f(fa.x,fa.y,-da)}V=v;for(G=0;G<X;G++)fa=z?c(a[G],ca[G],V):a[G],C?(M.copy(K.normals[0]).multiplyScalar(fa.x),L.copy(K.binormals[0]).multiplyScalar(fa.y),P.copy(H[0]).add(M).add(L),f(P.x,P.y,P.z)):f(fa.x,fa.y,0);for(Y=1;Y<=x;Y++)for(G=0;G<X;G++)fa=z?c(a[G],ca[G],V):a[G],C?(M.copy(K.normals[Y]).multiplyScalar(fa.x),
    L.copy(K.binormals[Y]).multiplyScalar(fa.y),P.copy(H[Y]).add(M).add(L),f(P.x,P.y,P.z)):f(fa.x,fa.y,m/x*Y);for(ea=w-1;0<=ea;ea--){Y=ea/w;da=t*Math.cos(Y*Math.PI/2);V=v*Math.sin(Y*Math.PI/2);G=0;for(Y=W.length;G<Y;G++)fa=c(W[G],y[G],V),f(fa.x,fa.y,m+da);N=0;for(O=Q.length;N<O;N++)for(R=Q[N],aa=A[N],G=0,Y=R.length;G<Y;G++)fa=c(R[G],aa[G],V),C?f(fa.x,fa.y+H[x-1].y,H[x-1].x+da):f(fa.x,fa.y,m+da)}(function(){var a=l.length/3;if(z){var c=0*X;for(G=0;G<ba;G++)T=U[G],g(T[2]+c,T[1]+c,T[0]+c);c=X*(x+2*w);for(G=
    0;G<ba;G++)T=U[G],g(T[0]+c,T[1]+c,T[2]+c)}else{for(G=0;G<ba;G++)T=U[G],g(T[2],T[1],T[0]);for(G=0;G<ba;G++)T=U[G],g(T[0]+X*x,T[1]+X*x,T[2]+X*x)}S.addGroup(a,l.length/3-a,void 0!==b.material?b.material:0)})();(function(){var a=l.length/3,c=0;e(W,c);c+=W.length;N=0;for(O=Q.length;N<O;N++)R=Q[N],e(R,c),c+=R.length;S.addGroup(a,l.length/3-a,void 0!==b.extrudeMaterial?b.extrudeMaterial:1)})();b.arrays||(this.setIndex(n),this.addAttribute("position",new B(l,3)),this.addAttribute("uv",new B(u,2)))};ib.WorldUVGenerator=
    {generateTopUV:function(a,b,c,d,e){a=b[3*d];d=b[3*d+1];var f=b[3*e];e=b[3*e+1];return[new D(b[3*c],b[3*c+1]),new D(a,d),new D(f,e)]},generateSideWallUV:function(a,b,c,d,e,f){a=b[3*c];var g=b[3*c+1];c=b[3*c+2];var h=b[3*d],k=b[3*d+1];d=b[3*d+2];var m=b[3*e],l=b[3*e+1];e=b[3*e+2];var n=b[3*f],p=b[3*f+1];b=b[3*f+2];return.01>Math.abs(g-k)?[new D(a,1-c),new D(h,1-d),new D(m,1-e),new D(n,1-b)]:[new D(g,1-c),new D(k,1-d),new D(l,1-e),new D(p,1-b)]}};Uc.prototype=Object.create(L.prototype);Uc.prototype.constructor=
    Uc;ac.prototype=Object.create(La.prototype);ac.prototype.constructor=ac;Vc.prototype=Object.create(L.prototype);Vc.prototype.constructor=Vc;wb.prototype=Object.create(E.prototype);wb.prototype.constructor=wb;Wc.prototype=Object.create(L.prototype);Wc.prototype.constructor=Wc;bc.prototype=Object.create(E.prototype);bc.prototype.constructor=bc;Xc.prototype=Object.create(L.prototype);Xc.prototype.constructor=Xc;cc.prototype=Object.create(E.prototype);cc.prototype.constructor=cc;xb.prototype=Object.create(L.prototype);
    xb.prototype.constructor=xb;xb.prototype.toJSON=function(){var a=L.prototype.toJSON.call(this);return ff(this.parameters.shapes,a)};yb.prototype=Object.create(E.prototype);yb.prototype.constructor=yb;yb.prototype.toJSON=function(){var a=E.prototype.toJSON.call(this);return ff(this.parameters.shapes,a)};dc.prototype=Object.create(E.prototype);dc.prototype.constructor=dc;zb.prototype=Object.create(L.prototype);zb.prototype.constructor=zb;ab.prototype=Object.create(E.prototype);ab.prototype.constructor=
    ab;Yc.prototype=Object.create(zb.prototype);Yc.prototype.constructor=Yc;Zc.prototype=Object.create(ab.prototype);Zc.prototype.constructor=Zc;$c.prototype=Object.create(L.prototype);$c.prototype.constructor=$c;ec.prototype=Object.create(E.prototype);ec.prototype.constructor=ec;var ka=Object.freeze({WireframeGeometry:Tb,ParametricGeometry:Hc,ParametricBufferGeometry:Ub,TetrahedronGeometry:Jc,TetrahedronBufferGeometry:Vb,OctahedronGeometry:Kc,OctahedronBufferGeometry:ub,IcosahedronGeometry:Lc,IcosahedronBufferGeometry:Wb,
    DodecahedronGeometry:Mc,DodecahedronBufferGeometry:Xb,PolyhedronGeometry:Ic,PolyhedronBufferGeometry:ja,TubeGeometry:Nc,TubeBufferGeometry:Yb,TorusKnotGeometry:Oc,TorusKnotBufferGeometry:Zb,TorusGeometry:Pc,TorusBufferGeometry:$b,TextGeometry:Uc,TextBufferGeometry:ac,SphereGeometry:Vc,SphereBufferGeometry:wb,RingGeometry:Wc,RingBufferGeometry:bc,PlaneGeometry:Ac,PlaneBufferGeometry:rb,LatheGeometry:Xc,LatheBufferGeometry:cc,ShapeGeometry:xb,ShapeBufferGeometry:yb,ExtrudeGeometry:ib,ExtrudeBufferGeometry:La,
    EdgesGeometry:dc,ConeGeometry:Yc,ConeBufferGeometry:Zc,CylinderGeometry:zb,CylinderBufferGeometry:ab,CircleGeometry:$c,CircleBufferGeometry:ec,BoxGeometry:Mb,BoxBufferGeometry:qb});fc.prototype=Object.create(P.prototype);fc.prototype.constructor=fc;fc.prototype.isShadowMaterial=!0;gc.prototype=Object.create(Fa.prototype);gc.prototype.constructor=gc;gc.prototype.isRawShaderMaterial=!0;Ua.prototype=Object.create(P.prototype);Ua.prototype.constructor=Ua;Ua.prototype.isMeshStandardMaterial=!0;Ua.prototype.copy=
    function(a){P.prototype.copy.call(this,a);this.defines={STANDARD:""};this.color.copy(a.color);this.roughness=a.roughness;this.metalness=a.metalness;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);
    this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.roughnessMap=a.roughnessMap;this.metalnessMap=a.metalnessMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.envMapIntensity=a.envMapIntensity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=
    a.morphTargets;this.morphNormals=a.morphNormals;return this};Ab.prototype=Object.create(Ua.prototype);Ab.prototype.constructor=Ab;Ab.prototype.isMeshPhysicalMaterial=!0;Ab.prototype.copy=function(a){Ua.prototype.copy.call(this,a);this.defines={PHYSICAL:""};this.reflectivity=a.reflectivity;this.clearCoat=a.clearCoat;this.clearCoatRoughness=a.clearCoatRoughness;return this};Ma.prototype=Object.create(P.prototype);Ma.prototype.constructor=Ma;Ma.prototype.isMeshPhongMaterial=!0;Ma.prototype.copy=function(a){P.prototype.copy.call(this,
    a);this.color.copy(a.color);this.specular.copy(a.specular);this.shininess=a.shininess;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;this.displacementScale=
    a.displacementScale;this.displacementBias=a.displacementBias;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};Bb.prototype=
    Object.create(Ma.prototype);Bb.prototype.constructor=Bb;Bb.prototype.isMeshToonMaterial=!0;Bb.prototype.copy=function(a){Ma.prototype.copy.call(this,a);this.gradientMap=a.gradientMap;return this};Cb.prototype=Object.create(P.prototype);Cb.prototype.constructor=Cb;Cb.prototype.isMeshNormalMaterial=!0;Cb.prototype.copy=function(a){P.prototype.copy.call(this,a);this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;
    this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};Db.prototype=Object.create(P.prototype);Db.prototype.constructor=Db;Db.prototype.isMeshLambertMaterial=!0;Db.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=
    a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;
    this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};Eb.prototype=Object.create(W.prototype);Eb.prototype.constructor=Eb;Eb.prototype.isLineDashedMaterial=!0;Eb.prototype.copy=function(a){W.prototype.copy.call(this,a);this.scale=a.scale;this.dashSize=a.dashSize;this.gapSize=a.gapSize;return this};var Mg=Object.freeze({ShadowMaterial:fc,SpriteMaterial:hb,RawShaderMaterial:gc,ShaderMaterial:Fa,PointsMaterial:Ka,MeshPhysicalMaterial:Ab,MeshStandardMaterial:Ua,
    MeshPhongMaterial:Ma,MeshToonMaterial:Bb,MeshNormalMaterial:Cb,MeshLambertMaterial:Db,MeshDepthMaterial:eb,MeshDistanceMaterial:fb,MeshBasicMaterial:Aa,LineDashedMaterial:Eb,LineBasicMaterial:W,Material:P}),Ib={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}},xa=new he,cb={};Object.assign(Na.prototype,{load:function(a,b,c,d){void 0===a&&(a=
    "");void 0!==this.path&&(a=this.path+a);a=this.manager.resolveURL(a);var e=this,f=Ib.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;if(void 0!==cb[a])cb[a].push({onLoad:b,onProgress:c,onError:d});else{var g=a.match(/^data:(.*?)(;base64)?,(.*)$/);if(g){c=g[1];var h=!!g[2],g=g[3],g=window.decodeURIComponent(g);h&&(g=window.atob(g));try{var k=(this.responseType||"").toLowerCase();switch(k){case "arraybuffer":case "blob":for(var m=new Uint8Array(g.length),
    h=0;h<g.length;h++)m[h]=g.charCodeAt(h);var l="blob"===k?new Blob([m.buffer],{type:c}):m.buffer;break;case "document":l=(new DOMParser).parseFromString(g,c);break;case "json":l=JSON.parse(g);break;default:l=g}window.setTimeout(function(){b&&b(l);e.manager.itemEnd(a)},0)}catch(u){window.setTimeout(function(){d&&d(u);e.manager.itemEnd(a);e.manager.itemError(a)},0)}}else{cb[a]=[];cb[a].push({onLoad:b,onProgress:c,onError:d});var n=new XMLHttpRequest;n.open("GET",a,!0);n.addEventListener("load",function(b){var c=
    this.response;Ib.add(a,c);var d=cb[a];delete cb[a];if(200===this.status){for(var f=0,g=d.length;f<g;f++){var h=d[f];if(h.onLoad)h.onLoad(c)}e.manager.itemEnd(a)}else if(0===this.status){console.warn("THREE.FileLoader: HTTP Status 0 received.");f=0;for(g=d.length;f<g;f++)if(h=d[f],h.onLoad)h.onLoad(c);e.manager.itemEnd(a)}else{f=0;for(g=d.length;f<g;f++)if(h=d[f],h.onError)h.onError(b);e.manager.itemEnd(a);e.manager.itemError(a)}},!1);n.addEventListener("progress",function(b){for(var c=cb[a],d=0,e=
    c.length;d<e;d++){var f=c[d];if(f.onProgress)f.onProgress(b)}},!1);n.addEventListener("error",function(b){var c=cb[a];delete cb[a];for(var d=0,f=c.length;d<f;d++){var g=c[d];if(g.onError)g.onError(b)}e.manager.itemEnd(a);e.manager.itemError(a)},!1);void 0!==this.responseType&&(n.responseType=this.responseType);void 0!==this.withCredentials&&(n.withCredentials=this.withCredentials);n.overrideMimeType&&n.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(h in this.requestHeader)n.setRequestHeader(h,
    this.requestHeader[h]);n.send(null)}e.manager.itemStart(a);return n}},setPath:function(a){this.path=a;return this},setResponseType:function(a){this.responseType=a;return this},setWithCredentials:function(a){this.withCredentials=a;return this},setMimeType:function(a){this.mimeType=a;return this},setRequestHeader:function(a){this.requestHeader=a;return this}});Object.assign(gf.prototype,{load:function(a,b,c,d){function e(e){m.load(a[e],function(a){a=g._parser(a,!0);h[e]={width:a.width,height:a.height,
    format:a.format,mipmaps:a.mipmaps};f+=1;6===f&&(1===a.mipmapCount&&(k.minFilter=1006),k.format=a.format,k.needsUpdate=!0,b&&b(k))},c,d)}var f,g=this,h=[],k=new Sb;k.image=h;var m=new Na(this.manager);m.setPath(this.path);m.setResponseType("arraybuffer");if(Array.isArray(a))for(var l=f=0,n=a.length;l<n;++l)e(l);else m.load(a,function(a){a=g._parser(a,!0);if(a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,d=0;d<c;d++){h[d]={mipmaps:[]};for(var e=0;e<a.mipmapCount;e++)h[d].mipmaps.push(a.mipmaps[d*
    a.mipmapCount+e]),h[d].format=a.format,h[d].width=a.width,h[d].height=a.height}else k.image.width=a.width,k.image.height=a.height,k.mipmaps=a.mipmaps;1===a.mipmapCount&&(k.minFilter=1006);k.format=a.format;k.needsUpdate=!0;b&&b(k)},c,d);return k},setPath:function(a){this.path=a;return this}});Object.assign(ie.prototype,{load:function(a,b,c,d){var e=this,f=new lb,g=new Na(this.manager);g.setResponseType("arraybuffer");g.load(a,function(a){if(a=e._parser(a))void 0!==a.image?f.image=a.image:void 0!==
    a.data&&(f.image.width=a.width,f.image.height=a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:1001,f.wrapT=void 0!==a.wrapT?a.wrapT:1001,f.magFilter=void 0!==a.magFilter?a.magFilter:1006,f.minFilter=void 0!==a.minFilter?a.minFilter:1008,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps),1===a.mipmapCount&&(f.minFilter=1006),f.needsUpdate=!0,b&&b(f,a)},c,d);return f}});Object.assign(ad.prototype,
    {crossOrigin:"Anonymous",load:function(a,b,c,d){void 0===a&&(a="");void 0!==this.path&&(a=this.path+a);a=this.manager.resolveURL(a);var e=this,f=Ib.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;c=document.createElementNS("http://www.w3.org/1999/xhtml","img");c.addEventListener("load",function(){Ib.add(a,this);b&&b(this);e.manager.itemEnd(a)},!1);c.addEventListener("error",function(b){d&&d(b);e.manager.itemEnd(a);e.manager.itemError(a)},
    !1);"data:"!==a.substr(0,5)&&void 0!==this.crossOrigin&&(c.crossOrigin=this.crossOrigin);e.manager.itemStart(a);c.src=a;return c},setCrossOrigin:function(a){this.crossOrigin=a;return this},setPath:function(a){this.path=a;return this}});Object.assign(je.prototype,{crossOrigin:"Anonymous",load:function(a,b,c,d){function e(c){g.load(a[c],function(a){f.images[c]=a;h++;6===h&&(f.needsUpdate=!0,b&&b(f))},void 0,d)}var f=new db,g=new ad(this.manager);g.setCrossOrigin(this.crossOrigin);g.setPath(this.path);
    var h=0;for(c=0;c<a.length;++c)e(c);return f},setCrossOrigin:function(a){this.crossOrigin=a;return this},setPath:function(a){this.path=a;return this}});Object.assign(Ad.prototype,{crossOrigin:"Anonymous",load:function(a,b,c,d){var e=new U,f=new ad(this.manager);f.setCrossOrigin(this.crossOrigin);f.setPath(this.path);f.load(a,function(c){e.image=c;c=0<a.search(/\.(jpg|jpeg)$/)||0===a.search(/^data\:image\/jpeg/);e.format=c?1022:1023;e.needsUpdate=!0;void 0!==b&&b(e)},c,d);return e},setCrossOrigin:function(a){this.crossOrigin=
    a;return this},setPath:function(a){this.path=a;return this}});Object.assign(C.prototype,{getPoint:function(){console.warn("THREE.Curve: .getPoint() not implemented.");return null},getPointAt:function(a,b){a=this.getUtoTmapping(a);return this.getPoint(a,b)},getPoints:function(a){void 0===a&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));return b},getSpacedPoints:function(a){void 0===a&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPointAt(c/a));return b},getLength:function(){var a=this.getLengths();
    return a[a.length-1]},getLengths:function(a){void 0===a&&(a=this.arcLengthDivisions);if(this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c=this.getPoint(0),d,e=0;b.push(0);for(d=1;d<=a;d++){var f=this.getPoint(d/a);e+=f.distanceTo(c);b.push(e);c=f}return this.cacheArcLengths=b},updateArcLengths:function(){this.needsUpdate=!0;this.getLengths()},getUtoTmapping:function(a,b){var c=this.getLengths(),d=c.length;b=b?b:a*
    c[d-1];for(var e=0,f=d-1,g;e<=f;)if(a=Math.floor(e+(f-e)/2),g=c[a]-b,0>g)e=a+1;else if(0<g)f=a-1;else{f=a;break}a=f;if(c[a]===b)return a/(d-1);e=c[a];return(a+(b-e)/(c[a+1]-e))/(d-1)},getTangent:function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()},getTangentAt:function(a){a=this.getUtoTmapping(a);return this.getTangent(a)},computeFrenetFrames:function(a,b){var c=new p,d=[],e=[],f=[],g=new p,h=new O,k;for(k=0;k<=a;k++){var m=
    k/a;d[k]=this.getTangentAt(m);d[k].normalize()}e[0]=new p;f[0]=new p;k=Number.MAX_VALUE;m=Math.abs(d[0].x);var l=Math.abs(d[0].y),n=Math.abs(d[0].z);m<=k&&(k=m,c.set(1,0,0));l<=k&&(k=l,c.set(0,1,0));n<=k&&c.set(0,0,1);g.crossVectors(d[0],c).normalize();e[0].crossVectors(d[0],g);f[0].crossVectors(d[0],e[0]);for(k=1;k<=a;k++)e[k]=e[k-1].clone(),f[k]=f[k-1].clone(),g.crossVectors(d[k-1],d[k]),g.length()>Number.EPSILON&&(g.normalize(),c=Math.acos(Q.clamp(d[k-1].dot(d[k]),-1,1)),e[k].applyMatrix4(h.makeRotationAxis(g,
    c))),f[k].crossVectors(d[k],e[k]);if(!0===b)for(c=Math.acos(Q.clamp(e[0].dot(e[a]),-1,1)),c/=a,0<d[0].dot(g.crossVectors(e[0],e[a]))&&(c=-c),k=1;k<=a;k++)e[k].applyMatrix4(h.makeRotationAxis(d[k],c*k)),f[k].crossVectors(d[k],e[k]);return{tangents:d,normals:e,binormals:f}},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.arcLengthDivisions=a.arcLengthDivisions;return this},toJSON:function(){var a={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};a.arcLengthDivisions=
    this.arcLengthDivisions;a.type=this.type;return a},fromJSON:function(a){this.arcLengthDivisions=a.arcLengthDivisions;return this}});Ba.prototype=Object.create(C.prototype);Ba.prototype.constructor=Ba;Ba.prototype.isEllipseCurve=!0;Ba.prototype.getPoint=function(a,b){b=b||new D;for(var c=2*Math.PI,d=this.aEndAngle-this.aStartAngle,e=Math.abs(d)<Number.EPSILON;0>d;)d+=c;for(;d>c;)d-=c;d<Number.EPSILON&&(d=e?0:c);!0!==this.aClockwise||e||(d=d===c?-c:d-c);c=this.aStartAngle+a*d;a=this.aX+this.xRadius*
    Math.cos(c);var f=this.aY+this.yRadius*Math.sin(c);0!==this.aRotation&&(c=Math.cos(this.aRotation),d=Math.sin(this.aRotation),e=a-this.aX,f-=this.aY,a=e*c-f*d+this.aX,f=e*d+f*c+this.aY);return b.set(a,f)};Ba.prototype.copy=function(a){C.prototype.copy.call(this,a);this.aX=a.aX;this.aY=a.aY;this.xRadius=a.xRadius;this.yRadius=a.yRadius;this.aStartAngle=a.aStartAngle;this.aEndAngle=a.aEndAngle;this.aClockwise=a.aClockwise;this.aRotation=a.aRotation;return this};Ba.prototype.toJSON=function(){var a=
    C.prototype.toJSON.call(this);a.aX=this.aX;a.aY=this.aY;a.xRadius=this.xRadius;a.yRadius=this.yRadius;a.aStartAngle=this.aStartAngle;a.aEndAngle=this.aEndAngle;a.aClockwise=this.aClockwise;a.aRotation=this.aRotation;return a};Ba.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.aX=a.aX;this.aY=a.aY;this.xRadius=a.xRadius;this.yRadius=a.yRadius;this.aStartAngle=a.aStartAngle;this.aEndAngle=a.aEndAngle;this.aClockwise=a.aClockwise;this.aRotation=a.aRotation;return this};hc.prototype=
    Object.create(Ba.prototype);hc.prototype.constructor=hc;hc.prototype.isArcCurve=!0;var Td=new p,Ee=new ke,Fe=new ke,Ge=new ke;ca.prototype=Object.create(C.prototype);ca.prototype.constructor=ca;ca.prototype.isCatmullRomCurve3=!0;ca.prototype.getPoint=function(a,b){b=b||new p;var c=this.points,d=c.length;a*=d-(this.closed?0:1);var e=Math.floor(a);a-=e;this.closed?e+=0<e?0:(Math.floor(Math.abs(e)/c.length)+1)*c.length:0===a&&e===d-1&&(e=d-2,a=1);if(this.closed||0<e)var f=c[(e-1)%d];else Td.subVectors(c[0],
    c[1]).add(c[0]),f=Td;var g=c[e%d];var h=c[(e+1)%d];this.closed||e+2<d?c=c[(e+2)%d]:(Td.subVectors(c[d-1],c[d-2]).add(c[d-1]),c=Td);if("centripetal"===this.curveType||"chordal"===this.curveType){var k="chordal"===this.curveType?.5:.25,d=Math.pow(f.distanceToSquared(g),k),e=Math.pow(g.distanceToSquared(h),k),k=Math.pow(h.distanceToSquared(c),k);1E-4>e&&(e=1);1E-4>d&&(d=e);1E-4>k&&(k=e);Ee.initNonuniformCatmullRom(f.x,g.x,h.x,c.x,d,e,k);Fe.initNonuniformCatmullRom(f.y,g.y,h.y,c.y,d,e,k);Ge.initNonuniformCatmullRom(f.z,
    g.z,h.z,c.z,d,e,k)}else"catmullrom"===this.curveType&&(Ee.initCatmullRom(f.x,g.x,h.x,c.x,this.tension),Fe.initCatmullRom(f.y,g.y,h.y,c.y,this.tension),Ge.initCatmullRom(f.z,g.z,h.z,c.z,this.tension));b.set(Ee.calc(a),Fe.calc(a),Ge.calc(a));return b};ca.prototype.copy=function(a){C.prototype.copy.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++)this.points.push(a.points[b].clone());this.closed=a.closed;this.curveType=a.curveType;this.tension=a.tension;return this};ca.prototype.toJSON=
    function(){var a=C.prototype.toJSON.call(this);a.points=[];for(var b=0,c=this.points.length;b<c;b++)a.points.push(this.points[b].toArray());a.closed=this.closed;a.curveType=this.curveType;a.tension=this.tension;return a};ca.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++){var d=a.points[b];this.points.push((new p).fromArray(d))}this.closed=a.closed;this.curveType=a.curveType;this.tension=a.tension;return this};Oa.prototype=Object.create(C.prototype);
    Oa.prototype.constructor=Oa;Oa.prototype.isCubicBezierCurve=!0;Oa.prototype.getPoint=function(a,b){b=b||new D;var c=this.v0,d=this.v1,e=this.v2,f=this.v3;b.set(cd(a,c.x,d.x,e.x,f.x),cd(a,c.y,d.y,e.y,f.y));return b};Oa.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this};Oa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();a.v3=
    this.v3.toArray();return a};Oa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this};Va.prototype=Object.create(C.prototype);Va.prototype.constructor=Va;Va.prototype.isCubicBezierCurve3=!0;Va.prototype.getPoint=function(a,b){b=b||new p;var c=this.v0,d=this.v1,e=this.v2,f=this.v3;b.set(cd(a,c.x,d.x,e.x,f.x),cd(a,c.y,d.y,e.y,f.y),cd(a,c.z,d.z,e.z,f.z));return b};Va.prototype.copy=
    function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this};Va.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();a.v3=this.v3.toArray();return a};Va.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this};ya.prototype=Object.create(C.prototype);
    ya.prototype.constructor=ya;ya.prototype.isLineCurve=!0;ya.prototype.getPoint=function(a,b){b=b||new D;1===a?b.copy(this.v2):(b.copy(this.v2).sub(this.v1),b.multiplyScalar(a).add(this.v1));return b};ya.prototype.getPointAt=function(a,b){return this.getPoint(a,b)};ya.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()};ya.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};ya.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);
    a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};ya.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Pa.prototype=Object.create(C.prototype);Pa.prototype.constructor=Pa;Pa.prototype.isLineCurve3=!0;Pa.prototype.getPoint=function(a,b){b=b||new p;1===a?b.copy(this.v2):(b.copy(this.v2).sub(this.v1),b.multiplyScalar(a).add(this.v1));return b};Pa.prototype.getPointAt=function(a,b){return this.getPoint(a,b)};Pa.prototype.copy=
    function(a){C.prototype.copy.call(this,a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Pa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};Pa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Qa.prototype=Object.create(C.prototype);Qa.prototype.constructor=Qa;Qa.prototype.isQuadraticBezierCurve=!0;Qa.prototype.getPoint=function(a,b){b=b||new D;var c=
    this.v0,d=this.v1,e=this.v2;b.set(bd(a,c.x,d.x,e.x),bd(a,c.y,d.y,e.y));return b};Qa.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Qa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};Qa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};
    Wa.prototype=Object.create(C.prototype);Wa.prototype.constructor=Wa;Wa.prototype.isQuadraticBezierCurve3=!0;Wa.prototype.getPoint=function(a,b){b=b||new p;var c=this.v0,d=this.v1,e=this.v2;b.set(bd(a,c.x,d.x,e.x),bd(a,c.y,d.y,e.y),bd(a,c.z,d.z,e.z));return b};Wa.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Wa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();
    a.v2=this.v2.toArray();return a};Wa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Ra.prototype=Object.create(C.prototype);Ra.prototype.constructor=Ra;Ra.prototype.isSplineCurve=!0;Ra.prototype.getPoint=function(a,b){b=b||new D;var c=this.points,d=(c.length-1)*a;a=Math.floor(d);var d=d-a,e=c[0===a?a:a-1],f=c[a],g=c[a>c.length-2?c.length-1:a+1],c=c[a>c.length-3?c.length-1:a+2];b.set(hf(d,e.x,f.x,
    g.x,c.x),hf(d,e.y,f.y,g.y,c.y));return b};Ra.prototype.copy=function(a){C.prototype.copy.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++)this.points.push(a.points[b].clone());return this};Ra.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.points=[];for(var b=0,c=this.points.length;b<c;b++)a.points.push(this.points[b].toArray());return a};Ra.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++){var d=
    a.points[b];this.points.push((new D).fromArray(d))}return this};var Ng=Object.freeze({ArcCurve:hc,CatmullRomCurve3:ca,CubicBezierCurve:Oa,CubicBezierCurve3:Va,EllipseCurve:Ba,LineCurve:ya,LineCurve3:Pa,QuadraticBezierCurve:Qa,QuadraticBezierCurve3:Wa,SplineCurve:Ra});bb.prototype=Object.assign(Object.create(C.prototype),{constructor:bb,add:function(a){this.curves.push(a)},closePath:function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new ya(b,
    a))},getPoint:function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],c=a.getLength(),a.getPointAt(0===c?0:1-b/c);a++}return null},getLength:function(){var a=this.getCurveLengths();return a[a.length-1]},updateArcLengths:function(){this.needsUpdate=!0;this.cacheLengths=null;this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],
    b=0,c=0,d=this.curves.length;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a},getSpacedPoints:function(a){void 0===a&&(a=40);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));this.autoClose&&b.push(b[0]);return b},getPoints:function(a){a=a||12;for(var b=[],c,d=0,e=this.curves;d<e.length;d++)for(var f=e[d],f=f.getPoints(f&&f.isEllipseCurve?2*a:f&&f.isLineCurve?1:f&&f.isSplineCurve?a*f.points.length:a),g=0;g<f.length;g++){var h=f[g];c&&c.equals(h)||(b.push(h),c=h)}this.autoClose&&
    1<b.length&&!b[b.length-1].equals(b[0])&&b.push(b[0]);return b},copy:function(a){C.prototype.copy.call(this,a);this.curves=[];for(var b=0,c=a.curves.length;b<c;b++)this.curves.push(a.curves[b].clone());this.autoClose=a.autoClose;return this},toJSON:function(){var a=C.prototype.toJSON.call(this);a.autoClose=this.autoClose;a.curves=[];for(var b=0,c=this.curves.length;b<c;b++)a.curves.push(this.curves[b].toJSON());return a},fromJSON:function(a){C.prototype.fromJSON.call(this,a);this.autoClose=a.autoClose;
    this.curves=[];for(var b=0,c=a.curves.length;b<c;b++){var d=a.curves[b];this.curves.push((new Ng[d.type]).fromJSON(d))}return this}});Sa.prototype=Object.assign(Object.create(bb.prototype),{constructor:Sa,setFromPoints:function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)},moveTo:function(a,b){this.currentPoint.set(a,b)},lineTo:function(a,b){var c=new ya(this.currentPoint.clone(),new D(a,b));this.curves.push(c);this.currentPoint.set(a,b)},quadraticCurveTo:function(a,
    b,c,d){a=new Qa(this.currentPoint.clone(),new D(a,b),new D(c,d));this.curves.push(a);this.currentPoint.set(c,d)},bezierCurveTo:function(a,b,c,d,e,f){a=new Oa(this.currentPoint.clone(),new D(a,b),new D(c,d),new D(e,f));this.curves.push(a);this.currentPoint.set(e,f)},splineThru:function(a){var b=[this.currentPoint.clone()].concat(a),b=new Ra(b);this.curves.push(b);this.currentPoint.copy(a[a.length-1])},arc:function(a,b,c,d,e,f){this.absarc(a+this.currentPoint.x,b+this.currentPoint.y,c,d,e,f)},absarc:function(a,
    b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)},ellipse:function(a,b,c,d,e,f,g,h){this.absellipse(a+this.currentPoint.x,b+this.currentPoint.y,c,d,e,f,g,h)},absellipse:function(a,b,c,d,e,f,g,h){a=new Ba(a,b,c,d,e,f,g,h);0<this.curves.length&&(b=a.getPoint(0),b.equals(this.currentPoint)||this.lineTo(b.x,b.y));this.curves.push(a);a=a.getPoint(1);this.currentPoint.copy(a)},copy:function(a){bb.prototype.copy.call(this,a);this.currentPoint.copy(a.currentPoint);return this},toJSON:function(){var a=bb.prototype.toJSON.call(this);
    a.currentPoint=this.currentPoint.toArray();return a},fromJSON:function(a){bb.prototype.fromJSON.call(this,a);this.currentPoint.fromArray(a.currentPoint);return this}});jb.prototype=Object.assign(Object.create(Sa.prototype),{constructor:jb,getPointsHoles:function(a){for(var b=[],c=0,d=this.holes.length;c<d;c++)b[c]=this.holes[c].getPoints(a);return b},extractPoints:function(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}},copy:function(a){Sa.prototype.copy.call(this,a);this.holes=[];
    for(var b=0,c=a.holes.length;b<c;b++)this.holes.push(a.holes[b].clone());return this},toJSON:function(){var a=Sa.prototype.toJSON.call(this);a.uuid=this.uuid;a.holes=[];for(var b=0,c=this.holes.length;b<c;b++)a.holes.push(this.holes[b].toJSON());return a},fromJSON:function(a){Sa.prototype.fromJSON.call(this,a);this.uuid=a.uuid;this.holes=[];for(var b=0,c=a.holes.length;b<c;b++){var d=a.holes[b];this.holes.push((new Sa).fromJSON(d))}return this}});da.prototype=Object.assign(Object.create(x.prototype),
    {constructor:da,isLight:!0,copy:function(a){x.prototype.copy.call(this,a);this.color.copy(a.color);this.intensity=a.intensity;return this},toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;void 0!==this.groundColor&&(a.object.groundColor=this.groundColor.getHex());void 0!==this.distance&&(a.object.distance=this.distance);void 0!==this.angle&&(a.object.angle=this.angle);void 0!==this.decay&&(a.object.decay=this.decay);void 0!==
    this.penumbra&&(a.object.penumbra=this.penumbra);void 0!==this.shadow&&(a.object.shadow=this.shadow.toJSON());return a}});Bd.prototype=Object.assign(Object.create(da.prototype),{constructor:Bd,isHemisphereLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.groundColor.copy(a.groundColor);return this}});Object.assign(Fb.prototype,{copy:function(a){this.camera=a.camera.clone();this.bias=a.bias;this.radius=a.radius;this.mapSize.copy(a.mapSize);return this},clone:function(){return(new this.constructor).copy(this)},
    toJSON:function(){var a={};0!==this.bias&&(a.bias=this.bias);1!==this.radius&&(a.radius=this.radius);if(512!==this.mapSize.x||512!==this.mapSize.y)a.mapSize=this.mapSize.toArray();a.camera=this.camera.toJSON(!1).object;delete a.camera.matrix;return a}});Cd.prototype=Object.assign(Object.create(Fb.prototype),{constructor:Cd,isSpotLightShadow:!0,update:function(a){var b=this.camera,c=2*Q.RAD2DEG*a.angle,d=this.mapSize.width/this.mapSize.height;a=a.distance||b.far;if(c!==b.fov||d!==b.aspect||a!==b.far)b.fov=
    c,b.aspect=d,b.far=a,b.updateProjectionMatrix()}});Dd.prototype=Object.assign(Object.create(da.prototype),{constructor:Dd,isSpotLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.distance=a.distance;this.angle=a.angle;this.penumbra=a.penumbra;this.decay=a.decay;this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});Ed.prototype=Object.assign(Object.create(da.prototype),{constructor:Ed,isPointLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.distance=a.distance;
    this.decay=a.decay;this.shadow=a.shadow.clone();return this}});Fd.prototype=Object.assign(Object.create(Fb.prototype),{constructor:Fd});Gd.prototype=Object.assign(Object.create(da.prototype),{constructor:Gd,isDirectionalLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});Hd.prototype=Object.assign(Object.create(da.prototype),{constructor:Hd,isAmbientLight:!0});Id.prototype=Object.assign(Object.create(da.prototype),{constructor:Id,
    isRectAreaLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.width=a.width;this.height=a.height;return this},toJSON:function(a){a=da.prototype.toJSON.call(this,a);a.object.width=this.width;a.object.height=this.height;return a}});Jd.prototype=Object.assign(Object.create(T.prototype),{constructor:Jd,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});Kd.prototype=Object.assign(Object.create(T.prototype),
    {constructor:Kd,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});Object.assign(pa.prototype,{evaluate:function(a){var b=this.parameterPositions,c=this._cachedIndex,d=b[c],e=b[c-1];a:{b:{c:{d:if(!(a<d)){for(var f=c+2;;){if(void 0===d){if(a<e)break d;this._cachedIndex=c=b.length;return this.afterEnd_(c-1,a,e)}if(c===f)break;e=d;d=b[++c];if(a<d)break b}d=b.length;break c}if(a>=e)break a;else{f=b[1];a<f&&
    (c=2,e=f);for(f=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===f)break;d=e;e=b[--c-1];if(a>=e)break b}d=c;c=0}}for(;c<d;)e=c+d>>>1,a<b[e]?d=e:c=e+1;d=b[c];e=b[c-1];if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(void 0===d)return this._cachedIndex=c=b.length,this.afterEnd_(c-1,e,a)}this._cachedIndex=c;this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||
    this.DefaultSettings_},copySampleValue_:function(a){var b=this.resultBuffer,c=this.sampleValues,d=this.valueSize;a*=d;for(var e=0;e!==d;++e)b[e]=c[a+e];return b},interpolate_:function(){throw Error("call to abstract method");},intervalChanged_:function(){}});Object.assign(pa.prototype,{beforeStart_:pa.prototype.copySampleValue_,afterEnd_:pa.prototype.copySampleValue_});Ld.prototype=Object.assign(Object.create(pa.prototype),{constructor:Ld,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,
    g=this.valueSize;a*=g;b=(c-b)/(d-b);for(c=a+g;a!==c;a+=4)ha.slerpFlat(e,0,f,a-g,f,a,b);return e}});dd.prototype=Object.assign(Object.create(T.prototype),{constructor:dd,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(a){return new Ld(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:void 0});Md.prototype=Object.assign(Object.create(T.prototype),{constructor:Md,ValueTypeName:"color"});ic.prototype=Object.assign(Object.create(T.prototype),
    {constructor:ic,ValueTypeName:"number"});Nd.prototype=Object.assign(Object.create(pa.prototype),{constructor:Nd,DefaultSettings_:{endingStart:2400,endingEnd:2400},intervalChanged_:function(a,b,c){var d=this.parameterPositions,e=a-2,f=a+1,g=d[e],h=d[f];if(void 0===g)switch(this.getSettings_().endingStart){case 2401:e=a;g=2*b-c;break;case 2402:e=d.length-2;g=b+d[e]-d[e+1];break;default:e=a,g=c}if(void 0===h)switch(this.getSettings_().endingEnd){case 2401:f=a;h=2*c-b;break;case 2402:f=1;h=c+d[1]-d[0];
    break;default:f=a-1,h=b}a=.5*(c-b);d=this.valueSize;this._weightPrev=a/(b-g);this._weightNext=a/(h-c);this._offsetPrev=e*d;this._offsetNext=f*d},interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g,k=this._offsetPrev,m=this._offsetNext,l=this._weightPrev,n=this._weightNext,p=(c-b)/(d-b);c=p*p;d=c*p;b=-l*d+2*l*c-l*p;l=(1+l)*d+(-1.5-2*l)*c+(-.5+l)*p+1;p=(-1-n)*d+(1.5+n)*c+.5*p;n=n*d-n*c;for(c=0;c!==g;++c)e[c]=b*f[k+c]+l*f[h+c]+p*f[a+c]+n*f[m+c];
    return e}});ed.prototype=Object.assign(Object.create(pa.prototype),{constructor:ed,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g;b=(c-b)/(d-b);c=1-b;for(d=0;d!==g;++d)e[d]=f[h+d]*c+f[a+d]*b;return e}});Od.prototype=Object.assign(Object.create(pa.prototype),{constructor:Od,interpolate_:function(a){return this.copySampleValue_(a-1)}});var ga={arraySlice:function(a,b,c){return ga.isTypedArray(a)?new a.constructor(a.subarray(b,void 0!==c?c:
    a.length)):a.slice(b,c)},convertArray:function(a,b,c){return!a||!c&&a.constructor===b?a:"number"===typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){for(var b=a.length,c=Array(b),d=0;d!==b;++d)c[d]=d;c.sort(function(b,c){return a[b]-a[c]});return c},sortedArray:function(a,b,c){for(var d=a.length,e=new a.constructor(d),f=0,g=0;g!==d;++f)for(var h=c[f]*b,k=0;k!==b;++k)e[g++]=
    a[h+k];return e},flattenJSON:function(a,b,c,d){for(var e=1,f=a[0];void 0!==f&&void 0===f[d];)f=a[e++];if(void 0!==f){var g=f[d];if(void 0!==g)if(Array.isArray(g)){do g=f[d],void 0!==g&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)}else if(void 0!==g.toArray){do g=f[d],void 0!==g&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)}else{do g=f[d],void 0!==g&&(b.push(f.time),c.push(g)),f=a[e++];while(void 0!==f)}}}};Object.assign(T,{parse:function(a){if(void 0===a.type)throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
    var b=T._getTrackTypeForValueTypeName(a.type);if(void 0===a.times){var c=[],d=[];ga.flattenJSON(a.keys,c,d,"value");a.times=c;a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)},toJSON:function(a){var b=a.constructor;if(void 0!==b.toJSON)b=b.toJSON(a);else{var b={name:a.name,times:ga.convertArray(a.times,Array),values:ga.convertArray(a.values,Array)},c=a.getInterpolation();c!==a.DefaultInterpolation&&(b.interpolation=c)}b.type=a.ValueTypeName;return b},_getTrackTypeForValueTypeName:function(a){switch(a.toLowerCase()){case "scalar":case "double":case "float":case "number":case "integer":return ic;
    case "vector":case "vector2":case "vector3":case "vector4":return jc;case "color":return Md;case "quaternion":return dd;case "bool":case "boolean":return Kd;case "string":return Jd}throw Error("THREE.KeyframeTrack: Unsupported typeName: "+a);}});Object.assign(T.prototype,{constructor:T,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(a){return new Od(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodLinear:function(a){return new ed(this.times,
    this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:function(a){return new Nd(this.times,this.values,this.getValueSize(),a)},setInterpolation:function(a){switch(a){case 2300:var b=this.InterpolantFactoryMethodDiscrete;break;case 2301:b=this.InterpolantFactoryMethodLinear;break;case 2302:b=this.InterpolantFactoryMethodSmooth}if(void 0===b){b="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant)if(a!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);
    else throw Error(b);console.warn("THREE.KeyframeTrack:",b)}else this.createInterpolant=b},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(a){if(0!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]+=a;return this},scale:function(a){if(1!==a)for(var b=
    this.times,c=0,d=b.length;c!==d;++c)b[c]*=a;return this},trim:function(a,b){for(var c=this.times,d=c.length,e=0,f=d-1;e!==d&&c[e]<a;)++e;for(;-1!==f&&c[f]>b;)--f;++f;if(0!==e||f!==d)e>=f&&(f=Math.max(f,1),e=f-1),a=this.getValueSize(),this.times=ga.arraySlice(c,e,f),this.values=ga.arraySlice(this.values,e*a,f*a);return this},validate:function(){var a=!0,b=this.getValueSize();0!==b-Math.floor(b)&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),a=!1);var c=this.times,b=this.values,
    d=c.length;0===d&&(console.error("THREE.KeyframeTrack: Track is empty.",this),a=!1);for(var e=null,f=0;f!==d;f++){var g=c[f];if("number"===typeof g&&isNaN(g)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,f,g);a=!1;break}if(null!==e&&e>g){console.error("THREE.KeyframeTrack: Out of order keys.",this,f,g,e);a=!1;break}e=g}if(void 0!==b&&ga.isTypedArray(b))for(f=0,c=b.length;f!==c;++f)if(d=b[f],isNaN(d)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,f,
    d);a=!1;break}return a},optimize:function(){for(var a,b,c=this.times,d=this.values,e=this.getValueSize(),f=2302===this.getInterpolation(),g=1,h=c.length-1,k=1;k<h;++k){a=!1;var m=c[k];if(m!==c[k+1]&&(1!==k||m!==m[0]))if(f)a=!0;else{b=k*e;for(var l=b-e,n=b+e,m=0;m!==e;++m){var p=d[b+m];if(p!==d[l+m]||p!==d[n+m]){a=!0;break}}}if(a){if(k!==g)for(c[g]=c[k],b=k*e,a=g*e,m=0;m!==e;++m)d[a+m]=d[b+m];++g}}if(0<h){c[g]=c[h];b=h*e;a=g*e;for(m=0;m!==e;++m)d[a+m]=d[b+m];++g}g!==c.length&&(this.times=ga.arraySlice(c,
    0,g),this.values=ga.arraySlice(d,0,g*e));return this}});jc.prototype=Object.assign(Object.create(T.prototype),{constructor:jc,ValueTypeName:"vector"});Object.assign(Ca,{parse:function(a){for(var b=[],c=a.tracks,d=1/(a.fps||1),e=0,f=c.length;e!==f;++e)b.push(T.parse(c[e]).scale(d));return new Ca(a.name,a.duration,b)},toJSON:function(a){var b=[],c=a.tracks;a={name:a.name,duration:a.duration,tracks:b};for(var d=0,e=c.length;d!==e;++d)b.push(T.toJSON(c[d]));return a},CreateFromMorphTargetSequence:function(a,
    b,c,d){for(var e=b.length,f=[],g=0;g<e;g++){var h=[],k=[];h.push((g+e-1)%e,g,(g+1)%e);k.push(0,1,0);var m=ga.getKeyframeOrder(h),h=ga.sortedArray(h,1,m),k=ga.sortedArray(k,1,m);d||0!==h[0]||(h.push(e),k.push(k[0]));f.push((new ic(".morphTargetInfluences["+b[g].name+"]",h,k)).scale(1/c))}return new Ca(a,-1,f)},findByName:function(a,b){var c=a;Array.isArray(a)||(c=a.geometry&&a.geometry.animations||a.animations);for(a=0;a<c.length;a++)if(c[a].name===b)return c[a];return null},CreateClipsFromMorphTargetSequences:function(a,
    b,c){for(var d,e={},f=/^([\w-]*?)([\d]+)$/,g=0,h=a.length;g<h;g++){var k=a[g],m=k.name.match(f);m&&1<m.length&&(d=m[1],(m=e[d])||(e[d]=m=[]),m.push(k))}a=[];for(d in e)a.push(Ca.CreateFromMorphTargetSequence(d,e[d],b,c));return a},parseAnimation:function(a,b){if(!a)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;var c=function(a,b,c,d,e){if(0!==c.length){var f=[],g=[];ga.flattenJSON(c,f,g,d);0!==f.length&&e.push(new a(b,f,g))}},d=[],e=a.name||"default",f=a.length||
    -1,g=a.fps||30;a=a.hierarchy||[];for(var h=0;h<a.length;h++){var k=a[h].keys;if(k&&0!==k.length)if(k[0].morphTargets){for(var f={},m=0;m<k.length;m++)if(k[m].morphTargets)for(var l=0;l<k[m].morphTargets.length;l++)f[k[m].morphTargets[l]]=-1;for(var n in f){for(var p=[],r=[],l=0;l!==k[m].morphTargets.length;++l){var t=k[m];p.push(t.time);r.push(t.morphTarget===n?1:0)}d.push(new ic(".morphTargetInfluence["+n+"]",p,r))}f=f.length*(g||1)}else m=".bones["+b[h].name+"]",c(jc,m+".position",k,"pos",d),c(dd,
    m+".quaternion",k,"rot",d),c(jc,m+".scale",k,"scl",d)}return 0===d.length?null:new Ca(e,f,d)}});Object.assign(Ca.prototype,{resetDuration:function(){for(var a=0,b=0,c=this.tracks.length;b!==c;++b)var d=this.tracks[b],a=Math.max(a,d.times[d.times.length-1]);this.duration=a},trim:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this},optimize:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this}});Object.assign(Pd.prototype,
    {load:function(a,b,c,d){var e=this;(new Na(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setTextures:function(a){this.textures=a},parse:function(a){function b(a){void 0===c[a]&&console.warn("THREE.MaterialLoader: Undefined texture",a);return c[a]}var c=this.textures,d=new Mg[a.type];void 0!==a.uuid&&(d.uuid=a.uuid);void 0!==a.name&&(d.name=a.name);void 0!==a.color&&d.color.setHex(a.color);void 0!==a.roughness&&(d.roughness=a.roughness);void 0!==a.metalness&&(d.metalness=a.metalness);
    void 0!==a.emissive&&d.emissive.setHex(a.emissive);void 0!==a.specular&&d.specular.setHex(a.specular);void 0!==a.shininess&&(d.shininess=a.shininess);void 0!==a.clearCoat&&(d.clearCoat=a.clearCoat);void 0!==a.clearCoatRoughness&&(d.clearCoatRoughness=a.clearCoatRoughness);void 0!==a.uniforms&&(d.uniforms=a.uniforms);void 0!==a.vertexShader&&(d.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(d.fragmentShader=a.fragmentShader);void 0!==a.vertexColors&&(d.vertexColors=a.vertexColors);void 0!==
    a.fog&&(d.fog=a.fog);void 0!==a.flatShading&&(d.flatShading=a.flatShading);void 0!==a.blending&&(d.blending=a.blending);void 0!==a.side&&(d.side=a.side);void 0!==a.opacity&&(d.opacity=a.opacity);void 0!==a.transparent&&(d.transparent=a.transparent);void 0!==a.alphaTest&&(d.alphaTest=a.alphaTest);void 0!==a.depthTest&&(d.depthTest=a.depthTest);void 0!==a.depthWrite&&(d.depthWrite=a.depthWrite);void 0!==a.colorWrite&&(d.colorWrite=a.colorWrite);void 0!==a.wireframe&&(d.wireframe=a.wireframe);void 0!==
    a.wireframeLinewidth&&(d.wireframeLinewidth=a.wireframeLinewidth);void 0!==a.wireframeLinecap&&(d.wireframeLinecap=a.wireframeLinecap);void 0!==a.wireframeLinejoin&&(d.wireframeLinejoin=a.wireframeLinejoin);void 0!==a.rotation&&(d.rotation=a.rotation);1!==a.linewidth&&(d.linewidth=a.linewidth);void 0!==a.dashSize&&(d.dashSize=a.dashSize);void 0!==a.gapSize&&(d.gapSize=a.gapSize);void 0!==a.scale&&(d.scale=a.scale);void 0!==a.skinning&&(d.skinning=a.skinning);void 0!==a.morphTargets&&(d.morphTargets=
    a.morphTargets);void 0!==a.dithering&&(d.dithering=a.dithering);void 0!==a.visible&&(d.visible=a.visible);void 0!==a.userData&&(d.userData=a.userData);void 0!==a.shading&&(d.flatShading=1===a.shading);void 0!==a.size&&(d.size=a.size);void 0!==a.sizeAttenuation&&(d.sizeAttenuation=a.sizeAttenuation);void 0!==a.map&&(d.map=b(a.map));void 0!==a.alphaMap&&(d.alphaMap=b(a.alphaMap),d.transparent=!0);void 0!==a.bumpMap&&(d.bumpMap=b(a.bumpMap));void 0!==a.bumpScale&&(d.bumpScale=a.bumpScale);void 0!==a.normalMap&&
    (d.normalMap=b(a.normalMap));if(void 0!==a.normalScale){var e=a.normalScale;!1===Array.isArray(e)&&(e=[e,e]);d.normalScale=(new D).fromArray(e)}void 0!==a.displacementMap&&(d.displacementMap=b(a.displacementMap));void 0!==a.displacementScale&&(d.displacementScale=a.displacementScale);void 0!==a.displacementBias&&(d.displacementBias=a.displacementBias);void 0!==a.roughnessMap&&(d.roughnessMap=b(a.roughnessMap));void 0!==a.metalnessMap&&(d.metalnessMap=b(a.metalnessMap));void 0!==a.emissiveMap&&(d.emissiveMap=
    b(a.emissiveMap));void 0!==a.emissiveIntensity&&(d.emissiveIntensity=a.emissiveIntensity);void 0!==a.specularMap&&(d.specularMap=b(a.specularMap));void 0!==a.envMap&&(d.envMap=b(a.envMap));void 0!==a.reflectivity&&(d.reflectivity=a.reflectivity);void 0!==a.lightMap&&(d.lightMap=b(a.lightMap));void 0!==a.lightMapIntensity&&(d.lightMapIntensity=a.lightMapIntensity);void 0!==a.aoMap&&(d.aoMap=b(a.aoMap));void 0!==a.aoMapIntensity&&(d.aoMapIntensity=a.aoMapIntensity);void 0!==a.gradientMap&&(d.gradientMap=
    b(a.gradientMap));return d}});Object.assign(le.prototype,{load:function(a,b,c,d){var e=this;(new Na(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},parse:function(a){var b=new E;var c=a.data.index;void 0!==c&&(c=new xf[c.type](c.array),b.setIndex(new M(c,1)));var d=a.data.attributes;for(f in d){var e=d[f];c=new xf[e.type](e.array);b.addAttribute(f,new M(c,e.itemSize,e.normalized))}var f=a.data.groups||a.data.drawcalls||a.data.offsets;if(void 0!==f)for(c=0,d=f.length;c!==d;++c)e=f[c],
    b.addGroup(e.start,e.count,e.materialIndex);a=a.data.boundingSphere;void 0!==a&&(f=new p,void 0!==a.center&&f.fromArray(a.center),b.boundingSphere=new Ia(f,a.radius));return b}});var xf={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!==typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};kc.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,
    b)},get:function(a){for(var b=this.handlers,c=0,d=b.length;c<d;c+=2){var e=b[c+1];if(b[c].test(a))return e}return null}};Object.assign(kc.prototype,{crossOrigin:void 0,initMaterials:function(a,b,c){for(var d=[],e=0;e<a.length;++e)d[e]=this.createMaterial(a[e],b,c);return d},createMaterial:function(){var a={NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5},b=new H,c=new Ad,d=new Pd;return function(e,f,g){function h(a,b,d,e,h){a=f+a;var m=kc.Handlers.get(a);
    null!==m?a=m.load(a):(c.setCrossOrigin(g),a=c.load(a));void 0!==b&&(a.repeat.fromArray(b),1!==b[0]&&(a.wrapS=1E3),1!==b[1]&&(a.wrapT=1E3));void 0!==d&&a.offset.fromArray(d);void 0!==e&&("repeat"===e[0]&&(a.wrapS=1E3),"mirror"===e[0]&&(a.wrapS=1002),"repeat"===e[1]&&(a.wrapT=1E3),"mirror"===e[1]&&(a.wrapT=1002));void 0!==h&&(a.anisotropy=h);b=Q.generateUUID();k[b]=a;return b}var k={},m={uuid:Q.generateUUID(),type:"MeshLambertMaterial"},l;for(l in e){var n=e[l];switch(l){case "DbgColor":case "DbgIndex":case "opticalDensity":case "illumination":break;
    case "DbgName":m.name=n;break;case "blending":m.blending=a[n];break;case "colorAmbient":case "mapAmbient":console.warn("THREE.Loader.createMaterial:",l,"is no longer supported.");break;case "colorDiffuse":m.color=b.fromArray(n).getHex();break;case "colorSpecular":m.specular=b.fromArray(n).getHex();break;case "colorEmissive":m.emissive=b.fromArray(n).getHex();break;case "specularCoef":m.shininess=n;break;case "shading":"basic"===n.toLowerCase()&&(m.type="MeshBasicMaterial");"phong"===n.toLowerCase()&&
    (m.type="MeshPhongMaterial");"standard"===n.toLowerCase()&&(m.type="MeshStandardMaterial");break;case "mapDiffuse":m.map=h(n,e.mapDiffuseRepeat,e.mapDiffuseOffset,e.mapDiffuseWrap,e.mapDiffuseAnisotropy);break;case "mapDiffuseRepeat":case "mapDiffuseOffset":case "mapDiffuseWrap":case "mapDiffuseAnisotropy":break;case "mapEmissive":m.emissiveMap=h(n,e.mapEmissiveRepeat,e.mapEmissiveOffset,e.mapEmissiveWrap,e.mapEmissiveAnisotropy);break;case "mapEmissiveRepeat":case "mapEmissiveOffset":case "mapEmissiveWrap":case "mapEmissiveAnisotropy":break;
    case "mapLight":m.lightMap=h(n,e.mapLightRepeat,e.mapLightOffset,e.mapLightWrap,e.mapLightAnisotropy);break;case "mapLightRepeat":case "mapLightOffset":case "mapLightWrap":case "mapLightAnisotropy":break;case "mapAO":m.aoMap=h(n,e.mapAORepeat,e.mapAOOffset,e.mapAOWrap,e.mapAOAnisotropy);break;case "mapAORepeat":case "mapAOOffset":case "mapAOWrap":case "mapAOAnisotropy":break;case "mapBump":m.bumpMap=h(n,e.mapBumpRepeat,e.mapBumpOffset,e.mapBumpWrap,e.mapBumpAnisotropy);break;case "mapBumpScale":m.bumpScale=
    n;break;case "mapBumpRepeat":case "mapBumpOffset":case "mapBumpWrap":case "mapBumpAnisotropy":break;case "mapNormal":m.normalMap=h(n,e.mapNormalRepeat,e.mapNormalOffset,e.mapNormalWrap,e.mapNormalAnisotropy);break;case "mapNormalFactor":m.normalScale=[n,n];break;case "mapNormalRepeat":case "mapNormalOffset":case "mapNormalWrap":case "mapNormalAnisotropy":break;case "mapSpecular":m.specularMap=h(n,e.mapSpecularRepeat,e.mapSpecularOffset,e.mapSpecularWrap,e.mapSpecularAnisotropy);break;case "mapSpecularRepeat":case "mapSpecularOffset":case "mapSpecularWrap":case "mapSpecularAnisotropy":break;
    case "mapMetalness":m.metalnessMap=h(n,e.mapMetalnessRepeat,e.mapMetalnessOffset,e.mapMetalnessWrap,e.mapMetalnessAnisotropy);break;case "mapMetalnessRepeat":case "mapMetalnessOffset":case "mapMetalnessWrap":case "mapMetalnessAnisotropy":break;case "mapRoughness":m.roughnessMap=h(n,e.mapRoughnessRepeat,e.mapRoughnessOffset,e.mapRoughnessWrap,e.mapRoughnessAnisotropy);break;case "mapRoughnessRepeat":case "mapRoughnessOffset":case "mapRoughnessWrap":case "mapRoughnessAnisotropy":break;case "mapAlpha":m.alphaMap=
    h(n,e.mapAlphaRepeat,e.mapAlphaOffset,e.mapAlphaWrap,e.mapAlphaAnisotropy);break;case "mapAlphaRepeat":case "mapAlphaOffset":case "mapAlphaWrap":case "mapAlphaAnisotropy":break;case "flipSided":m.side=1;break;case "doubleSided":m.side=2;break;case "transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");m.opacity=n;break;case "depthTest":case "depthWrite":case "colorWrite":case "opacity":case "reflectivity":case "transparent":case "visible":case "wireframe":m[l]=
    n;break;case "vertexColors":!0===n&&(m.vertexColors=2);"face"===n&&(m.vertexColors=1);break;default:console.error("THREE.Loader.createMaterial: Unsupported",l,n)}}"MeshBasicMaterial"===m.type&&delete m.emissive;"MeshPhongMaterial"!==m.type&&delete m.specular;1>m.opacity&&(m.transparent=!0);d.setTextures(k);return d.parse(m)}}()});var He={decodeText:function(a){if("undefined"!==typeof TextDecoder)return(new TextDecoder).decode(a);for(var b="",c=0,d=a.length;c<d;c++)b+=String.fromCharCode(a[c]);return b},
    extractUrlBase:function(a){a=a.split("/");if(1===a.length)return"./";a.pop();return a.join("/")+"/"}};Object.assign(me.prototype,{load:function(a,b,c,d){var e=this,f=this.texturePath&&"string"===typeof this.texturePath?this.texturePath:He.extractUrlBase(a),g=new Na(this.manager);g.setWithCredentials(this.withCredentials);g.load(a,function(c){c=JSON.parse(c);var d=c.metadata;if(void 0!==d&&(d=d.type,void 0!==d)){if("object"===d.toLowerCase()){console.error("THREE.JSONLoader: "+a+" should be loaded with THREE.ObjectLoader instead.");
    return}if("scene"===d.toLowerCase()){console.error("THREE.JSONLoader: "+a+" should be loaded with THREE.SceneLoader instead.");return}}c=e.parse(c,f);b(c.geometry,c.materials)},c,d)},setTexturePath:function(a){this.texturePath=a},parse:function(){return function(a,b){void 0!==a.data&&(a=a.data);a.scale=void 0!==a.scale?1/a.scale:1;var c=new L,d=a,e,f,g,h=d.faces;var k=d.vertices;var m=d.normals,l=d.colors;var n=d.scale;var u=0;if(void 0!==d.uvs){for(e=0;e<d.uvs.length;e++)d.uvs[e].length&&u++;for(e=
    0;e<u;e++)c.faceVertexUvs[e]=[]}var r=0;for(g=k.length;r<g;)e=new p,e.x=k[r++]*n,e.y=k[r++]*n,e.z=k[r++]*n,c.vertices.push(e);r=0;for(g=h.length;r<g;){k=h[r++];var t=k&1;var v=k&2;e=k&8;var w=k&16;var z=k&32;n=k&64;k&=128;if(t){t=new Ya;t.a=h[r];t.b=h[r+1];t.c=h[r+3];var y=new Ya;y.a=h[r+1];y.b=h[r+2];y.c=h[r+3];r+=4;v&&(v=h[r++],t.materialIndex=v,y.materialIndex=v);v=c.faces.length;if(e)for(e=0;e<u;e++){var x=d.uvs[e];c.faceVertexUvs[e][v]=[];c.faceVertexUvs[e][v+1]=[];for(f=0;4>f;f++){var A=h[r++];
    var B=x[2*A];A=x[2*A+1];B=new D(B,A);2!==f&&c.faceVertexUvs[e][v].push(B);0!==f&&c.faceVertexUvs[e][v+1].push(B)}}w&&(w=3*h[r++],t.normal.set(m[w++],m[w++],m[w]),y.normal.copy(t.normal));if(z)for(e=0;4>e;e++)w=3*h[r++],z=new p(m[w++],m[w++],m[w]),2!==e&&t.vertexNormals.push(z),0!==e&&y.vertexNormals.push(z);n&&(n=h[r++],n=l[n],t.color.setHex(n),y.color.setHex(n));if(k)for(e=0;4>e;e++)n=h[r++],n=l[n],2!==e&&t.vertexColors.push(new H(n)),0!==e&&y.vertexColors.push(new H(n));c.faces.push(t);c.faces.push(y)}else{t=
    new Ya;t.a=h[r++];t.b=h[r++];t.c=h[r++];v&&(v=h[r++],t.materialIndex=v);v=c.faces.length;if(e)for(e=0;e<u;e++)for(x=d.uvs[e],c.faceVertexUvs[e][v]=[],f=0;3>f;f++)A=h[r++],B=x[2*A],A=x[2*A+1],B=new D(B,A),c.faceVertexUvs[e][v].push(B);w&&(w=3*h[r++],t.normal.set(m[w++],m[w++],m[w]));if(z)for(e=0;3>e;e++)w=3*h[r++],z=new p(m[w++],m[w++],m[w]),t.vertexNormals.push(z);n&&(n=h[r++],t.color.setHex(l[n]));if(k)for(e=0;3>e;e++)n=h[r++],t.vertexColors.push(new H(l[n]));c.faces.push(t)}}d=a;r=void 0!==d.influencesPerVertex?
    d.influencesPerVertex:2;if(d.skinWeights)for(g=0,h=d.skinWeights.length;g<h;g+=r)c.skinWeights.push(new aa(d.skinWeights[g],1<r?d.skinWeights[g+1]:0,2<r?d.skinWeights[g+2]:0,3<r?d.skinWeights[g+3]:0));if(d.skinIndices)for(g=0,h=d.skinIndices.length;g<h;g+=r)c.skinIndices.push(new aa(d.skinIndices[g],1<r?d.skinIndices[g+1]:0,2<r?d.skinIndices[g+2]:0,3<r?d.skinIndices[g+3]:0));c.bones=d.bones;c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&
    console.warn("When skinning, number of vertices ("+c.vertices.length+"), skinIndices ("+c.skinIndices.length+"), and skinWeights ("+c.skinWeights.length+") should match.");g=a;h=g.scale;if(void 0!==g.morphTargets)for(d=0,r=g.morphTargets.length;d<r;d++)for(c.morphTargets[d]={},c.morphTargets[d].name=g.morphTargets[d].name,c.morphTargets[d].vertices=[],m=c.morphTargets[d].vertices,l=g.morphTargets[d].vertices,u=0,k=l.length;u<k;u+=3)n=new p,n.x=l[u]*h,n.y=l[u+1]*h,n.z=l[u+2]*h,m.push(n);if(void 0!==
    g.morphColors&&0<g.morphColors.length)for(console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'),h=c.faces,g=g.morphColors[0].colors,d=0,r=h.length;d<r;d++)h[d].color.fromArray(g,3*d);g=a;d=[];r=[];void 0!==g.animation&&r.push(g.animation);void 0!==g.animations&&(g.animations.length?r=r.concat(g.animations):r.push(g.animations));for(g=0;g<r.length;g++)(h=Ca.parseAnimation(r[g],c.bones))&&d.push(h);c.morphTargets&&(r=Ca.CreateClipsFromMorphTargetSequences(c.morphTargets,
    10),d=d.concat(r));0<d.length&&(c.animations=d);c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials||0===a.materials.length)return{geometry:c};a=kc.prototype.initMaterials(a.materials,b,this.crossOrigin);return{geometry:c,materials:a}}}()});Object.assign(jf.prototype,{load:function(a,b,c,d){""===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf("/")+1));var e=this;(new Na(e.manager)).load(a,function(c){var f=null;try{f=JSON.parse(c)}catch(h){void 0!==d&&d(h);console.error("THREE:ObjectLoader: Can't parse "+
    a+".",h.message);return}c=f.metadata;void 0===c||void 0===c.type||"geometry"===c.type.toLowerCase()?console.error("THREE.ObjectLoader: Can't load "+a+". Use THREE.JSONLoader instead."):e.parse(f,b)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseShape(a.shapes),c=this.parseGeometries(a.geometries,c),d=this.parseImages(a.images,function(){void 0!==b&&b(e)}),d=this.parseTextures(a.textures,d),d=this.parseMaterials(a.materials,
    d),e=this.parseObject(a.object,c,d);a.animations&&(e.animations=this.parseAnimations(a.animations));void 0!==a.images&&0!==a.images.length||void 0===b||b(e);return e},parseShape:function(a){var b={};if(void 0!==a)for(var c=0,d=a.length;c<d;c++){var e=(new jb).fromJSON(a[c]);b[e.uuid]=e}return b},parseGeometries:function(a,b){var c={};if(void 0!==a)for(var d=new me,e=new le,f=0,g=a.length;f<g;f++){var h=a[f];switch(h.type){case "PlaneGeometry":case "PlaneBufferGeometry":var k=new ka[h.type](h.width,
    h.height,h.widthSegments,h.heightSegments);break;case "BoxGeometry":case "BoxBufferGeometry":case "CubeGeometry":k=new ka[h.type](h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CircleGeometry":case "CircleBufferGeometry":k=new ka[h.type](h.radius,h.segments,h.thetaStart,h.thetaLength);break;case "CylinderGeometry":case "CylinderBufferGeometry":k=new ka[h.type](h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);
    break;case "ConeGeometry":case "ConeBufferGeometry":k=new ka[h.type](h.radius,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case "SphereGeometry":case "SphereBufferGeometry":k=new ka[h.type](h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "DodecahedronGeometry":case "DodecahedronBufferGeometry":case "IcosahedronGeometry":case "IcosahedronBufferGeometry":case "OctahedronGeometry":case "OctahedronBufferGeometry":case "TetrahedronGeometry":case "TetrahedronBufferGeometry":k=
    new ka[h.type](h.radius,h.detail);break;case "RingGeometry":case "RingBufferGeometry":k=new ka[h.type](h.innerRadius,h.outerRadius,h.thetaSegments,h.phiSegments,h.thetaStart,h.thetaLength);break;case "TorusGeometry":case "TorusBufferGeometry":k=new ka[h.type](h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":case "TorusKnotBufferGeometry":k=new ka[h.type](h.radius,h.tube,h.tubularSegments,h.radialSegments,h.p,h.q);break;case "LatheGeometry":case "LatheBufferGeometry":k=
    new ka[h.type](h.points,h.segments,h.phiStart,h.phiLength);break;case "PolyhedronGeometry":case "PolyhedronBufferGeometry":k=new ka[h.type](h.vertices,h.indices,h.radius,h.details);break;case "ShapeGeometry":case "ShapeBufferGeometry":k=[];f=0;for(g=h.shapes.length;f<g;f++)k.push(b[h.shapes[f]]);k=new ka[h.type](k,h.curveSegments);break;case "BufferGeometry":k=e.parse(h);break;case "Geometry":k=d.parse(h,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+
    h.type+'"');continue}k.uuid=h.uuid;void 0!==h.name&&(k.name=h.name);c[h.uuid]=k}return c},parseMaterials:function(a,b){var c={};if(void 0!==a){var d=new Pd;d.setTextures(b);b=0;for(var e=a.length;b<e;b++){var f=a[b];if("MultiMaterial"===f.type){for(var g=[],h=0;h<f.materials.length;h++)g.push(d.parse(f.materials[h]));c[f.uuid]=g}else c[f.uuid]=d.parse(f)}}return c},parseAnimations:function(a){for(var b=[],c=0;c<a.length;c++){var d=Ca.parse(a[c]);b.push(d)}return b},parseImages:function(a,b){function c(a){d.manager.itemStart(a);
    return f.load(a,function(){d.manager.itemEnd(a)},void 0,function(){d.manager.itemEnd(a);d.manager.itemError(a)})}var d=this,e={};if(void 0!==a&&0<a.length){b=new he(b);var f=new ad(b);f.setCrossOrigin(this.crossOrigin);b=0;for(var g=a.length;b<g;b++){var h=a[b],k=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url)?h.url:d.texturePath+h.url;e[h.uuid]=c(k)}}return e},parseTextures:function(a,b){function c(a,b){if("number"===typeof a)return a;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",
    a);return b[a]}var d={};if(void 0!==a)for(var e=0,f=a.length;e<f;e++){var g=a[e];void 0===g.image&&console.warn('THREE.ObjectLoader: No "image" specified for',g.uuid);void 0===b[g.image]&&console.warn("THREE.ObjectLoader: Undefined image",g.image);var h=new U(b[g.image]);h.needsUpdate=!0;h.uuid=g.uuid;void 0!==g.name&&(h.name=g.name);void 0!==g.mapping&&(h.mapping=c(g.mapping,Og));void 0!==g.offset&&h.offset.fromArray(g.offset);void 0!==g.repeat&&h.repeat.fromArray(g.repeat);void 0!==g.center&&h.center.fromArray(g.center);
    void 0!==g.rotation&&(h.rotation=g.rotation);void 0!==g.wrap&&(h.wrapS=c(g.wrap[0],yf),h.wrapT=c(g.wrap[1],yf));void 0!==g.minFilter&&(h.minFilter=c(g.minFilter,zf));void 0!==g.magFilter&&(h.magFilter=c(g.magFilter,zf));void 0!==g.anisotropy&&(h.anisotropy=g.anisotropy);void 0!==g.flipY&&(h.flipY=g.flipY);d[g.uuid]=h}return d},parseObject:function(){var a=new O;return function(b,c,d){function e(a){void 0===c[a]&&console.warn("THREE.ObjectLoader: Undefined geometry",a);return c[a]}function f(a){if(void 0!==
    a){if(Array.isArray(a)){for(var b=[],c=0,e=a.length;c<e;c++){var f=a[c];void 0===d[f]&&console.warn("THREE.ObjectLoader: Undefined material",f);b.push(d[f])}return b}void 0===d[a]&&console.warn("THREE.ObjectLoader: Undefined material",a);return d[a]}}switch(b.type){case "Scene":var g=new vd;void 0!==b.background&&Number.isInteger(b.background)&&(g.background=new H(b.background));void 0!==b.fog&&("Fog"===b.fog.type?g.fog=new Qb(b.fog.color,b.fog.near,b.fog.far):"FogExp2"===b.fog.type&&(g.fog=new Pb(b.fog.color,
    b.fog.density)));break;case "PerspectiveCamera":g=new ba(b.fov,b.aspect,b.near,b.far);void 0!==b.focus&&(g.focus=b.focus);void 0!==b.zoom&&(g.zoom=b.zoom);void 0!==b.filmGauge&&(g.filmGauge=b.filmGauge);void 0!==b.filmOffset&&(g.filmOffset=b.filmOffset);void 0!==b.view&&(g.view=Object.assign({},b.view));break;case "OrthographicCamera":g=new Lb(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":g=new Hd(b.color,b.intensity);break;case "DirectionalLight":g=new Gd(b.color,b.intensity);
    break;case "PointLight":g=new Ed(b.color,b.intensity,b.distance,b.decay);break;case "RectAreaLight":g=new Id(b.color,b.intensity,b.width,b.height);break;case "SpotLight":g=new Dd(b.color,b.intensity,b.distance,b.angle,b.penumbra,b.decay);break;case "HemisphereLight":g=new Bd(b.color,b.groundColor,b.intensity);break;case "SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case "Mesh":g=e(b.geometry);var h=f(b.material);g=g.bones&&0<g.bones.length?new xd(g,
    h):new ra(g,h);break;case "LOD":g=new Dc;break;case "Line":g=new sa(e(b.geometry),f(b.material),b.mode);break;case "LineLoop":g=new yd(e(b.geometry),f(b.material));break;case "LineSegments":g=new X(e(b.geometry),f(b.material));break;case "PointCloud":case "Points":g=new Rb(e(b.geometry),f(b.material));break;case "Sprite":g=new Cc(f(b.material));break;case "Group":g=new Fc;break;default:g=new x}g.uuid=b.uuid;void 0!==b.name&&(g.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(g.position,
    g.quaternion,g.scale)):(void 0!==b.position&&g.position.fromArray(b.position),void 0!==b.rotation&&g.rotation.fromArray(b.rotation),void 0!==b.quaternion&&g.quaternion.fromArray(b.quaternion),void 0!==b.scale&&g.scale.fromArray(b.scale));void 0!==b.castShadow&&(g.castShadow=b.castShadow);void 0!==b.receiveShadow&&(g.receiveShadow=b.receiveShadow);b.shadow&&(void 0!==b.shadow.bias&&(g.shadow.bias=b.shadow.bias),void 0!==b.shadow.radius&&(g.shadow.radius=b.shadow.radius),void 0!==b.shadow.mapSize&&
    g.shadow.mapSize.fromArray(b.shadow.mapSize),void 0!==b.shadow.camera&&(g.shadow.camera=this.parseObject(b.shadow.camera)));void 0!==b.visible&&(g.visible=b.visible);void 0!==b.userData&&(g.userData=b.userData);if(void 0!==b.children)for(var h=b.children,k=0;k<h.length;k++)g.add(this.parseObject(h[k],c,d));if("LOD"===b.type)for(b=b.levels,h=0;h<b.length;h++){var k=b[h],m=g.getObjectByProperty("uuid",k.object);void 0!==m&&g.addLevel(m,k.distance)}return g}}()});var Og={UVMapping:300,CubeReflectionMapping:301,
    CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307},yf={RepeatWrapping:1E3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002},zf={NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008};ne.prototype={constructor:ne,setOptions:function(a){this.options=a;return this},
    load:function(a,b,c,d){void 0===a&&(a="");void 0!==this.path&&(a=this.path+a);var e=this,f=Ib.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;fetch(a).then(function(a){return a.blob()}).then(function(a){return createImageBitmap(a,e.options)}).then(function(c){Ib.add(a,c);b&&b(c);e.manager.itemEnd(a)}).catch(function(b){d&&d(b);e.manager.itemEnd(a);e.manager.itemError(a)})},setCrossOrigin:function(){return this},setPath:function(a){this.path=
    a;return this}};Object.assign(oe.prototype,{moveTo:function(a,b){this.currentPath=new Sa;this.subPaths.push(this.currentPath);this.currentPath.moveTo(a,b)},lineTo:function(a,b){this.currentPath.lineTo(a,b)},quadraticCurveTo:function(a,b,c,d){this.currentPath.quadraticCurveTo(a,b,c,d)},bezierCurveTo:function(a,b,c,d,e,f){this.currentPath.bezierCurveTo(a,b,c,d,e,f)},splineThru:function(a){this.currentPath.splineThru(a)},toShapes:function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=
    a[c],f=new jb;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,m=h.y-g.y;if(Math.abs(m)>Number.EPSILON){if(0>m&&(g=b[f],k=-k,h=b[e],m=-m),!(a.y<g.y||a.y>h.y))if(a.y===g.y){if(a.x===g.x)return!0}else{e=m*(a.x-g.x)-k*(a.y-g.y);if(0===e)return!0;0>e||(d=!d)}}else if(a.y===g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=h.x))return!0}return d}var e=$a.isClockWise,f=this.subPaths;if(0===f.length)return[];if(!0===b)return c(f);b=[];if(1===
    f.length){var g=f[0];var h=new jb;h.curves=g.curves;b.push(h);return b}var k=!e(f[0].getPoints()),k=a?!k:k;h=[];var m=[],l=[],n=0;m[n]=void 0;l[n]=[];for(var p=0,r=f.length;p<r;p++){g=f[p];var t=g.getPoints();var v=e(t);(v=a?!v:v)?(!k&&m[n]&&n++,m[n]={s:new jb,p:t},m[n].s.curves=g.curves,k&&n++,l[n]=[]):l[n].push({h:g,p:t[0]})}if(!m[0])return c(f);if(1<m.length){p=!1;a=[];e=0;for(f=m.length;e<f;e++)h[e]=[];e=0;for(f=m.length;e<f;e++)for(g=l[e],v=0;v<g.length;v++){k=g[v];n=!0;for(t=0;t<m.length;t++)d(k.p,
    m[t].p)&&(e!==t&&a.push({froms:e,tos:t,hole:v}),n?(n=!1,h[t].push(k)):p=!0);n&&h[e].push(k)}0<a.length&&(p||(l=h))}p=0;for(e=m.length;p<e;p++)for(h=m[p].s,b.push(h),a=l[p],f=0,g=a.length;f<g;f++)h.holes.push(a[f].h);return b}});Object.assign(pe.prototype,{isFont:!0,generateShapes:function(a,b,c){void 0===b&&(b=100);c=this.data;a=String(a).split("");var d=b/c.resolution,e=(c.boundingBox.yMax-c.boundingBox.yMin+c.underlineThickness)*d,f=0,g=0;b=[];for(var h=0;h<a.length;h++){var k=a[h];if("\n"===k)f=
    0,g-=e;else{var m=d;var l=f,n=g;if(k=c.glyphs[k]||c.glyphs["?"]){var p=new oe;if(k.o)for(var r=k._cachedOutline||(k._cachedOutline=k.o.split(" ")),t=0,v=r.length;t<v;)switch(r[t++]){case "m":var w=r[t++]*m+l;var x=r[t++]*m+n;p.moveTo(w,x);break;case "l":w=r[t++]*m+l;x=r[t++]*m+n;p.lineTo(w,x);break;case "q":var y=r[t++]*m+l;var B=r[t++]*m+n;var A=r[t++]*m+l;var C=r[t++]*m+n;p.quadraticCurveTo(A,C,y,B);break;case "b":y=r[t++]*m+l,B=r[t++]*m+n,A=r[t++]*m+l,C=r[t++]*m+n,w=r[t++]*m+l,x=r[t++]*m+n,p.bezierCurveTo(A,
    C,w,x,y,B)}m={offsetX:k.ha*m,path:p}}else m=void 0;f+=m.offsetX;b.push(m.path)}}c=[];a=0;for(d=b.length;a<d;a++)Array.prototype.push.apply(c,b[a].toShapes());return c}});Object.assign(kf.prototype,{load:function(a,b,c,d){var e=this,f=new Na(this.manager);f.setPath(this.path);f.load(a,function(a){try{var c=JSON.parse(a)}catch(k){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),c=JSON.parse(a.substring(65,a.length-2))}a=e.parse(c);b&&b(a)},c,d)},
    parse:function(a){return new pe(a)},setPath:function(a){this.path=a;return this}});var Ud,se={getContext:function(){void 0===Ud&&(Ud=new (window.AudioContext||window.webkitAudioContext));return Ud},setContext:function(a){Ud=a}};Object.assign(qe.prototype,{load:function(a,b,c,d){var e=new Na(this.manager);e.setResponseType("arraybuffer");e.load(a,function(a){se.getContext().decodeAudioData(a,function(a){b(a)})},c,d)}});Object.assign(lf.prototype,{update:function(){var a,b,c,d,e,f,g,h,k=new O,m=new O;
    return function(l){if(a!==this||b!==l.focus||c!==l.fov||d!==l.aspect*this.aspect||e!==l.near||f!==l.far||g!==l.zoom||h!==this.eyeSep){a=this;b=l.focus;c=l.fov;d=l.aspect*this.aspect;e=l.near;f=l.far;g=l.zoom;var n=l.projectionMatrix.clone();h=this.eyeSep/2;var p=h*e/b,q=e*Math.tan(Q.DEG2RAD*c*.5)/g;m.elements[12]=-h;k.elements[12]=h;var t=-q*d+p;var v=q*d+p;n.elements[0]=2*e/(v-t);n.elements[8]=(v+t)/(v-t);this.cameraL.projectionMatrix.copy(n);t=-q*d-p;v=q*d-p;n.elements[0]=2*e/(v-t);n.elements[8]=
    (v+t)/(v-t);this.cameraR.projectionMatrix.copy(n)}this.cameraL.matrixWorld.copy(l.matrixWorld).multiply(m);this.cameraR.matrixWorld.copy(l.matrixWorld).multiply(k)}}()});fd.prototype=Object.create(x.prototype);fd.prototype.constructor=fd;re.prototype=Object.assign(Object.create(x.prototype),{constructor:re,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),
    this.filter=null)},getFilter:function(){return this.filter},setFilter:function(a){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination);this.filter=a;this.gain.connect(this.filter);this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(a){this.gain.gain.value=a},updateMatrixWorld:function(){var a=new p,b=new ha,c=new p,d=new p;return function(e){x.prototype.updateMatrixWorld.call(this,
    e);e=this.context.listener;var f=this.up;this.matrixWorld.decompose(a,b,c);d.set(0,0,-1).applyQuaternion(b);e.positionX?(e.positionX.setValueAtTime(a.x,this.context.currentTime),e.positionY.setValueAtTime(a.y,this.context.currentTime),e.positionZ.setValueAtTime(a.z,this.context.currentTime),e.forwardX.setValueAtTime(d.x,this.context.currentTime),e.forwardY.setValueAtTime(d.y,this.context.currentTime),e.forwardZ.setValueAtTime(d.z,this.context.currentTime),e.upX.setValueAtTime(f.x,this.context.currentTime),
    e.upY.setValueAtTime(f.y,this.context.currentTime),e.upZ.setValueAtTime(f.z,this.context.currentTime)):(e.setPosition(a.x,a.y,a.z),e.setOrientation(d.x,d.y,d.z,f.x,f.y,f.z))}}()});lc.prototype=Object.assign(Object.create(x.prototype),{constructor:lc,getOutput:function(){return this.gain},setNodeSource:function(a){this.hasPlaybackControl=!1;this.sourceType="audioNode";this.source=a;this.connect();return this},setBuffer:function(a){this.buffer=a;this.sourceType="buffer";this.autoplay&&this.play();return this},
    play:function(){if(!0===this.isPlaying)console.warn("THREE.Audio: Audio is already playing.");else if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else{var a=this.context.createBufferSource();a.buffer=this.buffer;a.loop=this.loop;a.onended=this.onEnded.bind(this);a.playbackRate.setValueAtTime(this.playbackRate,this.startTime);this.startTime=this.context.currentTime;a.start(this.startTime,this.offset);this.isPlaying=!0;this.source=a;return this.connect()}},
    pause:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return!0===this.isPlaying&&(this.source.stop(),this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this},stop:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(),this.offset=0,this.isPlaying=!1,this},connect:function(){if(0<this.filters.length){this.source.connect(this.filters[0]);
    for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].connect(this.filters[a]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(0<this.filters.length){this.source.disconnect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].disconnect(this.filters[a]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},
    getFilters:function(){return this.filters},setFilters:function(a){a||(a=[]);!0===this.isPlaying?(this.disconnect(),this.filters=a,this.connect()):this.filters=a;return this},getFilter:function(){return this.getFilters()[0]},setFilter:function(a){return this.setFilters(a?[a]:[])},setPlaybackRate:function(a){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.playbackRate=a,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,
    this.context.currentTime),this},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(a){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.loop=a,!0===this.isPlaying&&(this.source.loop=this.loop),this},getVolume:function(){return this.gain.gain.value},
    setVolume:function(a){this.gain.gain.value=a;return this}});te.prototype=Object.assign(Object.create(lc.prototype),{constructor:te,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(a){this.panner.refDistance=a},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(a){this.panner.rolloffFactor=a},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(a){this.panner.distanceModel=
    a},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(a){this.panner.maxDistance=a},updateMatrixWorld:function(){var a=new p;return function(b){x.prototype.updateMatrixWorld.call(this,b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x,a.y,a.z)}}()});Object.assign(ue.prototype,{getFrequencyData:function(){this.analyser.getByteFrequencyData(this.data);return this.data},getAverageFrequency:function(){for(var a=0,b=this.getFrequencyData(),c=0;c<b.length;c++)a+=
    b[c];return a/b.length}});Object.assign(ve.prototype,{accumulate:function(a,b){var c=this.buffer,d=this.valueSize;a=a*d+d;var e=this.cumulativeWeight;if(0===e){for(e=0;e!==d;++e)c[a+e]=c[e];e=b}else e+=b,this._mixBufferRegion(c,a,0,b/e,d);this.cumulativeWeight=e},apply:function(a){var b=this.valueSize,c=this.buffer;a=a*b+b;var d=this.cumulativeWeight,e=this.binding;this.cumulativeWeight=0;1>d&&this._mixBufferRegion(c,a,3*b,1-d,b);for(var d=b,f=b+b;d!==f;++d)if(c[d]!==c[d+b]){e.setValue(c,a);break}},
    saveOriginalState:function(){var a=this.buffer,b=this.valueSize,c=3*b;this.binding.getValue(a,c);for(var d=b;d!==c;++d)a[d]=a[c+d%b];this.cumulativeWeight=0},restoreOriginalState:function(){this.binding.setValue(this.buffer,3*this.valueSize)},_select:function(a,b,c,d,e){if(.5<=d)for(d=0;d!==e;++d)a[b+d]=a[c+d]},_slerp:function(a,b,c,d){ha.slerpFlat(a,b,a,b,a,c,d)},_lerp:function(a,b,c,d,e){for(var f=1-d,g=0;g!==e;++g){var h=b+g;a[h]=a[h]*f+a[c+g]*d}}});Object.assign(mf.prototype,{getValue:function(a,
    b){this.bind();var c=this._bindings[this._targetGroup.nCachedObjects_];void 0!==c&&c.getValue(a,b)},setValue:function(a,b){for(var c=this._bindings,d=this._targetGroup.nCachedObjects_,e=c.length;d!==e;++d)c[d].setValue(a,b)},bind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].bind()},unbind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].unbind()}});Object.assign(qa,{Composite:mf,create:function(a,
    b,c){return a&&a.isAnimationObjectGroup?new qa.Composite(a,b,c):new qa(a,b,c)},sanitizeNodeName:function(a){return a.replace(/\s/g,"_").replace(/[^\w-]/g,"")},parseTrackName:function(){var a=new RegExp("^"+/((?:[\w-]+[\/:])*)/.source+/([\w-\.]+)?/.source+/(?:\.([\w-]+)(?:\[(.+)\])?)?/.source+/\.([\w-]+)(?:\[(.+)\])?/.source+"$"),b=["material","materials","bones"];return function(c){var d=a.exec(c);if(!d)throw Error("PropertyBinding: Cannot parse trackName: "+c);var d={nodeName:d[2],objectName:d[3],
    objectIndex:d[4],propertyName:d[5],propertyIndex:d[6]},e=d.nodeName&&d.nodeName.lastIndexOf(".");if(void 0!==e&&-1!==e){var f=d.nodeName.substring(e+1);-1!==b.indexOf(f)&&(d.nodeName=d.nodeName.substring(0,e),d.objectName=f)}if(null===d.propertyName||0===d.propertyName.length)throw Error("PropertyBinding: can not parse propertyName from trackName: "+c);return d}}(),findNode:function(a,b){if(!b||""===b||"root"===b||"."===b||-1===b||b===a.name||b===a.uuid)return a;if(a.skeleton){var c=function(a){for(var c=
    0;c<a.bones.length;c++){var d=a.bones[c];if(d.name===b)return d}return null}(a.skeleton);if(c)return c}if(a.children){var d=function(a){for(var c=0;c<a.length;c++){var e=a[c];if(e.name===b||e.uuid===b||(e=d(e.children)))return e}return null};if(a=d(a.children))return a}return null}});Object.assign(qa.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},
    GetterByBindingType:[function(a,b){a[b]=this.node[this.propertyName]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)a[b++]=c[d]},function(a,b){a[b]=this.resolvedProperty[this.propertyIndex]},function(a,b){this.resolvedProperty.toArray(a,b)}],SetterByBindingTypeAndVersioning:[[function(a,b){this.targetObject[this.propertyName]=a[b]},function(a,b){this.targetObject[this.propertyName]=a[b];this.targetObject.needsUpdate=!0},function(a,b){this.targetObject[this.propertyName]=a[b];
    this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.needsUpdate=!0},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty[this.propertyIndex]=a[b]},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];
    this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty.fromArray(a,b)},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(a,b){this.bind();this.getValue(a,b)},setValue:function(a,b){this.bind();this.setValue(a,b)},bind:function(){var a=
    this.node,b=this.parsedPath,c=b.objectName,d=b.propertyName,e=b.propertyIndex;a||(this.node=a=qa.findNode(this.rootNode,b.nodeName)||this.rootNode);this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(a){if(c){var f=b.objectIndex;switch(c){case "materials":if(!a.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!a.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",
    this);return}a=a.material.materials;break;case "bones":if(!a.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}a=a.skeleton.bones;for(c=0;c<a.length;c++)if(a[c].name===f){f=c;break}break;default:if(void 0===a[c]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}a=a[c]}if(void 0!==f){if(void 0===a[f]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",
    this,a);return}a=a[f]}}f=a[d];if(void 0===f)console.error("THREE.PropertyBinding: Trying to update property for track: "+b.nodeName+"."+d+" but it wasn't found.",a);else{b=this.Versioning.None;void 0!==a.needsUpdate?(b=this.Versioning.NeedsUpdate,this.targetObject=a):void 0!==a.matrixWorldNeedsUpdate&&(b=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=a);c=this.BindingType.Direct;if(void 0!==e){if("morphTargetInfluences"===d){if(!a.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",
    this);return}if(a.geometry.isBufferGeometry){if(!a.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}for(c=0;c<this.node.geometry.morphAttributes.position.length;c++)if(a.geometry.morphAttributes.position[c].name===e){e=c;break}}else{if(!a.geometry.morphTargets){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",
    this);return}for(c=0;c<this.node.geometry.morphTargets.length;c++)if(a.geometry.morphTargets[c].name===e){e=c;break}}}c=this.BindingType.ArrayElement;this.resolvedProperty=f;this.propertyIndex=e}else void 0!==f.fromArray&&void 0!==f.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=f):Array.isArray(f)?(c=this.BindingType.EntireArray,this.resolvedProperty=f):this.propertyName=d;this.getValue=this.GetterByBindingType[c];this.setValue=this.SetterByBindingTypeAndVersioning[c][b]}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+
    this.path+" but it wasn't found.")},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}});Object.assign(qa.prototype,{_getValue_unbound:qa.prototype.getValue,_setValue_unbound:qa.prototype.setValue});Object.assign(nf.prototype,{isAnimationObjectGroup:!0,add:function(){for(var a=this._objects,b=a.length,c=this.nCachedObjects_,d=this._indicesByUUID,e=this._paths,f=this._parsedPaths,g=this._bindings,h=g.length,k=0,m=arguments.length;k!==m;++k){var l=
    arguments[k],n=l.uuid,p=d[n];if(void 0===p){p=b++;d[n]=p;a.push(l);for(var n=0,r=h;n!==r;++n)g[n].push(new qa(l,e[n],f[n]))}else if(p<c){var t=--c,r=a[t];d[r.uuid]=p;a[p]=r;d[n]=t;a[t]=l;n=0;for(r=h;n!==r;++n){var v=g[n],w=v[p];v[p]=v[t];void 0===w&&(w=new qa(l,e[n],f[n]));v[t]=w}}else void 0!==a[p]&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=c},remove:function(){for(var a=
    this._objects,b=this.nCachedObjects_,c=this._indicesByUUID,d=this._bindings,e=d.length,f=0,g=arguments.length;f!==g;++f){var h=arguments[f],k=h.uuid,m=c[k];if(void 0!==m&&m>=b){var l=b++,n=a[l];c[n.uuid]=m;a[m]=n;c[k]=l;a[l]=h;h=0;for(k=e;h!==k;++h){var n=d[h],p=n[m];n[m]=n[l];n[l]=p}}}this.nCachedObjects_=b},uncache:function(){for(var a,b,c=this._objects,d=c.length,e=this.nCachedObjects_,f=this._indicesByUUID,g=this._bindings,h=g.length,k=0,m=arguments.length;k!==m;++k){b=arguments[k].uuid;var l=
    f[b];if(void 0!==l)if(delete f[b],l<e){var n=--e,p=c[n];b=--d;a=c[b];f[p.uuid]=l;c[l]=p;f[a.uuid]=n;c[n]=a;c.pop();for(var p=0,r=h;p!==r;++p){a=g[p];var t=a[b];a[l]=a[n];a[n]=t;a.pop()}}else for(b=--d,a=c[b],f[a.uuid]=l,c[l]=a,c.pop(),p=0,r=h;p!==r;++p)a=g[p],a[l]=a[b],a.pop()}this.nCachedObjects_=e},subscribe_:function(a,b){var c=this._bindingsIndicesByPath,d=c[a],e=this._bindings;if(void 0!==d)return e[d];var f=this._paths,g=this._parsedPaths,h=this._objects,k=this.nCachedObjects_,m=Array(h.length),
    d=e.length;c[a]=d;f.push(a);g.push(b);e.push(m);c=k;for(d=h.length;c!==d;++c)m[c]=new qa(h[c],a,b);return m},unsubscribe_:function(a){var b=this._bindingsIndicesByPath,c=b[a];if(void 0!==c){var d=this._paths,e=this._parsedPaths,f=this._bindings,g=f.length-1,h=f[g];b[a[g]]=c;f[c]=h;f.pop();e[c]=e[g];e.pop();d[c]=d[g];d.pop()}}});Object.assign(of.prototype,{play:function(){this._mixer._activateAction(this);return this},stop:function(){this._mixer._deactivateAction(this);return this.reset()},reset:function(){this.paused=
    !1;this.enabled=!0;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(a){this._startTime=a;return this},setLoop:function(a,b){this.loop=a;this.repetitions=b;return this},setEffectiveWeight:function(a){this.weight=a;this._effectiveWeight=this.enabled?
    a:0;return this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(a){return this._scheduleFading(a,0,1)},fadeOut:function(a){return this._scheduleFading(a,1,0)},crossFadeFrom:function(a,b,c){a.fadeOut(b);this.fadeIn(b);if(c){c=this._clip.duration;var d=a._clip.duration,e=c/d;a.warp(1,d/c,b);this.warp(e,1,b)}return this},crossFadeTo:function(a,b,c){return a.crossFadeFrom(this,b,c)},stopFading:function(){var a=this._weightInterpolant;null!==a&&(this._weightInterpolant=
    null,this._mixer._takeBackControlInterpolant(a));return this},setEffectiveTimeScale:function(a){this.timeScale=a;this._effectiveTimeScale=this.paused?0:a;return this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(a){this.timeScale=this._clip.duration/a;return this.stopWarping()},syncWith:function(a){this.time=a.time;this.timeScale=a.timeScale;return this.stopWarping()},halt:function(a){return this.warp(this._effectiveTimeScale,0,a)},warp:function(a,
    b,c){var d=this._mixer,e=d.time,f=this._timeScaleInterpolant,g=this.timeScale;null===f&&(this._timeScaleInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;d[1]=e+c;f[0]=a/g;f[1]=b/g;return this},stopWarping:function(){var a=this._timeScaleInterpolant;null!==a&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||
    this._mixer._root},_update:function(a,b,c,d){if(this.enabled){var e=this._startTime;if(null!==e){b=(a-e)*c;if(0>b||0===c)return;this._startTime=null;b*=c}b*=this._updateTimeScale(a);c=this._updateTime(b);a=this._updateWeight(a);if(0<a){b=this._interpolants;for(var e=this._propertyBindings,f=0,g=b.length;f!==g;++f)b[f].evaluate(c),e[f].accumulate(d,a)}}else this._updateWeight(a)},_updateWeight:function(a){var b=0;if(this.enabled){var b=this.weight,c=this._weightInterpolant;if(null!==c){var d=c.evaluate(a)[0],
    b=b*d;a>c.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=b},_updateTimeScale:function(a){var b=0;if(!this.paused){var b=this.timeScale,c=this._timeScaleInterpolant;if(null!==c){var d=c.evaluate(a)[0],b=b*d;a>c.parameterPositions[1]&&(this.stopWarping(),0===b?this.paused=!0:this.timeScale=b)}}return this._effectiveTimeScale=b},_updateTime:function(a){var b=this.time+a;if(0===a)return b;var c=this._clip.duration,d=this.loop,e=this._loopCount;if(2200===
    d)a:{if(-1===e&&(this._loopCount=0,this._setEndings(!0,!0,!1)),b>=c)b=c;else if(0>b)b=0;else break a;this.clampWhenFinished?this.paused=!0:this.enabled=!1;this._mixer.dispatchEvent({type:"finished",action:this,direction:0>a?-1:1})}else{d=2202===d;-1===e&&(0<=a?(e=0,this._setEndings(!0,0===this.repetitions,d)):this._setEndings(0===this.repetitions,!0,d));if(b>=c||0>b){var f=Math.floor(b/c),b=b-c*f,e=e+Math.abs(f),g=this.repetitions-e;0>g?(this.clampWhenFinished?this.paused=!0:this.enabled=!1,b=0<a?
    c:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:0<a?1:-1})):(0===g?(a=0>a,this._setEndings(a,!a,d)):this._setEndings(!1,!1,d),this._loopCount=e,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:f}))}if(d&&1===(e&1))return this.time=b,c-b}return this.time=b},_setEndings:function(a,b,c){var d=this._interpolantSettings;c?(d.endingStart=2401,d.endingEnd=2401):(d.endingStart=a?this.zeroSlopeAtStart?2401:2400:2402,d.endingEnd=b?this.zeroSlopeAtEnd?2401:2400:2402)},_scheduleFading:function(a,
    b,c){var d=this._mixer,e=d.time,f=this._weightInterpolant;null===f&&(this._weightInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;f[0]=b;d[1]=e+a;f[1]=c;return this}});we.prototype=Object.assign(Object.create(za.prototype),{constructor:we,_bindAction:function(a,b){var c=a._localRoot||this._root,d=a._clip.tracks,e=d.length,f=a._propertyBindings;a=a._interpolants;var g=c.uuid,h=this._bindingsByRootAndName,k=h[g];void 0===k&&(k={},h[g]=k);for(h=0;h!==e;++h){var m=
    d[h],l=m.name,n=k[l];if(void 0===n){n=f[h];if(void 0!==n){null===n._cacheIndex&&(++n.referenceCount,this._addInactiveBinding(n,g,l));continue}n=new ve(qa.create(c,l,b&&b._propertyBindings[h].binding.parsedPath),m.ValueTypeName,m.getValueSize());++n.referenceCount;this._addInactiveBinding(n,g,l)}f[h]=n;a[h].resultBuffer=n.buffer}},_activateAction:function(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){var b=(a._localRoot||this._root).uuid,c=a._clip.uuid,d=this._actionsByClip[c];this._bindAction(a,
    d&&d.knownActions[0]);this._addInactiveAction(a,c,b)}b=a._propertyBindings;c=0;for(d=b.length;c!==d;++c){var e=b[c];0===e.useCount++&&(this._lendBinding(e),e.saveOriginalState())}this._lendAction(a)}},_deactivateAction:function(a){if(this._isActiveAction(a)){for(var b=a._propertyBindings,c=0,d=b.length;c!==d;++c){var e=b[c];0===--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(a)}},_initMemoryManager:function(){this._actions=[];this._nActiveActions=0;this._actionsByClip=
    {};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;var a=this;this.stats={actions:{get total(){return a._actions.length},get inUse(){return a._nActiveActions}},bindings:{get total(){return a._bindings.length},get inUse(){return a._nActiveBindings}},controlInterpolants:{get total(){return a._controlInterpolants.length},get inUse(){return a._nActiveControlInterpolants}}}},_isActiveAction:function(a){a=a._cacheIndex;
    return null!==a&&a<this._nActiveActions},_addInactiveAction:function(a,b,c){var d=this._actions,e=this._actionsByClip,f=e[b];void 0===f?(f={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[b]=f):(b=f.knownActions,a._byClipCacheIndex=b.length,b.push(a));a._cacheIndex=d.length;d.push(a);f.actionByRoot[c]=a},_removeInactiveAction:function(a){var b=this._actions,c=b[b.length-1],d=a._cacheIndex;c._cacheIndex=d;b[d]=c;b.pop();a._cacheIndex=null;var b=a._clip.uuid,c=this._actionsByClip,d=c[b],e=
    d.knownActions,f=e[e.length-1],g=a._byClipCacheIndex;f._byClipCacheIndex=g;e[g]=f;e.pop();a._byClipCacheIndex=null;delete d.actionByRoot[(a._localRoot||this._root).uuid];0===e.length&&delete c[b];this._removeInactiveBindingsForAction(a)},_removeInactiveBindingsForAction:function(a){a=a._propertyBindings;for(var b=0,c=a.length;b!==c;++b){var d=a[b];0===--d.referenceCount&&this._removeInactiveBinding(d)}},_lendAction:function(a){var b=this._actions,c=a._cacheIndex,d=this._nActiveActions++,e=b[d];a._cacheIndex=
    d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackAction:function(a){var b=this._actions,c=a._cacheIndex,d=--this._nActiveActions,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_addInactiveBinding:function(a,b,c){var d=this._bindingsByRootAndName,e=d[b],f=this._bindings;void 0===e&&(e={},d[b]=e);e[c]=a;a._cacheIndex=f.length;f.push(a)},_removeInactiveBinding:function(a){var b=this._bindings,c=a.binding,d=c.rootNode.uuid,c=c.path,e=this._bindingsByRootAndName,f=e[d],g=b[b.length-1];a=a._cacheIndex;
    g._cacheIndex=a;b[a]=g;b.pop();delete f[c];a:{for(var h in f)break a;delete e[d]}},_lendBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=this._nActiveBindings++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=--this._nActiveBindings,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_lendControlInterpolant:function(){var a=this._controlInterpolants,b=this._nActiveControlInterpolants++,c=a[b];void 0===c&&(c=new ed(new Float32Array(2),
    new Float32Array(2),1,this._controlInterpolantsResultBuffer),c.__cacheIndex=b,a[b]=c);return c},_takeBackControlInterpolant:function(a){var b=this._controlInterpolants,c=a.__cacheIndex,d=--this._nActiveControlInterpolants,e=b[d];a.__cacheIndex=d;b[d]=a;e.__cacheIndex=c;b[c]=e},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(a,b){var c=b||this._root,d=c.uuid,c="string"===typeof a?Ca.findByName(c,a):a;a=null!==c?c.uuid:a;var e=this._actionsByClip[a],f=null;if(void 0!==e){f=
    e.actionByRoot[d];if(void 0!==f)return f;f=e.knownActions[0];null===c&&(c=f._clip)}if(null===c)return null;b=new of(this,c,b);this._bindAction(b,f);this._addInactiveAction(b,a,d);return b},existingAction:function(a,b){var c=b||this._root;b=c.uuid;c="string"===typeof a?Ca.findByName(c,a):a;a=this._actionsByClip[c?c.uuid:a];return void 0!==a?a.actionByRoot[b]||null:null},stopAllAction:function(){for(var a=this._actions,b=this._nActiveActions,c=this._bindings,d=this._nActiveBindings,e=this._nActiveBindings=
    this._nActiveActions=0;e!==b;++e)a[e].reset();for(e=0;e!==d;++e)c[e].useCount=0;return this},update:function(a){a*=this.timeScale;for(var b=this._actions,c=this._nActiveActions,d=this.time+=a,e=Math.sign(a),f=this._accuIndex^=1,g=0;g!==c;++g)b[g]._update(d,a,e,f);a=this._bindings;b=this._nActiveBindings;for(g=0;g!==b;++g)a[g].apply(f);return this},getRoot:function(){return this._root},uncacheClip:function(a){var b=this._actions;a=a.uuid;var c=this._actionsByClip,d=c[a];if(void 0!==d){for(var d=d.knownActions,
    e=0,f=d.length;e!==f;++e){var g=d[e];this._deactivateAction(g);var h=g._cacheIndex,k=b[b.length-1];g._cacheIndex=null;g._byClipCacheIndex=null;k._cacheIndex=h;b[h]=k;b.pop();this._removeInactiveBindingsForAction(g)}delete c[a]}},uncacheRoot:function(a){a=a.uuid;var b=this._actionsByClip;for(d in b){var c=b[d].actionByRoot[a];void 0!==c&&(this._deactivateAction(c),this._removeInactiveAction(c))}var d=this._bindingsByRootAndName[a];if(void 0!==d)for(var e in d)a=d[e],a.restoreOriginalState(),this._removeInactiveBinding(a)},
    uncacheAction:function(a,b){a=this.existingAction(a,b);null!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}});Qd.prototype.clone=function(){return new Qd(void 0===this.value.clone?this.value:this.value.clone())};xe.prototype=Object.assign(Object.create(E.prototype),{constructor:xe,isInstancedBufferGeometry:!0,copy:function(a){E.prototype.copy.call(this,a);this.maxInstancedCount=a.maxInstancedCount;return this},clone:function(){return(new this.constructor).copy(this)}});Object.defineProperties(ye.prototype,
    {count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}});Object.assign(ye.prototype,{isInterleavedBufferAttribute:!0,setX:function(a,b){this.data.array[a*this.data.stride+this.offset]=b;return this},setY:function(a,b){this.data.array[a*this.data.stride+this.offset+1]=b;return this},setZ:function(a,b){this.data.array[a*this.data.stride+this.offset+2]=b;return this},setW:function(a,b){this.data.array[a*this.data.stride+this.offset+3]=b;return this},getX:function(a){return this.data.array[a*
    this.data.stride+this.offset]},getY:function(a){return this.data.array[a*this.data.stride+this.offset+1]},getZ:function(a){return this.data.array[a*this.data.stride+this.offset+2]},getW:function(a){return this.data.array[a*this.data.stride+this.offset+3]},setXY:function(a,b,c){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;return this},
    setXYZW:function(a,b,c,d,e){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;this.data.array[a+3]=e;return this}});Object.defineProperty(mc.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(mc.prototype,{isInterleavedBuffer:!0,setArray:function(a){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==a?a.length/this.stride:0;this.array=a},setDynamic:function(a){this.dynamic=
    a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.count=a.count;this.stride=a.stride;this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.stride;c*=b.stride;for(var d=0,e=this.stride;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(a){this.onUploadCallback=a;return this}});ze.prototype=Object.assign(Object.create(mc.prototype),
    {constructor:ze,isInstancedInterleavedBuffer:!0,copy:function(a){mc.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this}});Ae.prototype=Object.assign(Object.create(M.prototype),{constructor:Ae,isInstancedBufferAttribute:!0,copy:function(a){M.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this}});Object.assign(pf.prototype,{linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(a,b){b&&b.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(b.matrixWorld),
    this.ray.direction.set(a.x,a.y,.5).unproject(b).sub(this.ray.origin).normalize()):b&&b.isOrthographicCamera?(this.ray.origin.set(a.x,a.y,(b.near+b.far)/(b.near-b.far)).unproject(b),this.ray.direction.set(0,0,-1).transformDirection(b.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(a,b){var c=[];Be(a,this,c,b);c.sort(qf);return c},intersectObjects:function(a,b){var c=[];if(!1===Array.isArray(a))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),
    c;for(var d=0,e=a.length;d<e;d++)Be(a[d],this,c,b);c.sort(qf);return c}});Object.assign(rf.prototype,{start:function(){this.oldTime=this.startTime=("undefined"===typeof performance?Date:performance).now();this.elapsedTime=0;this.running=!0},stop:function(){this.getElapsedTime();this.autoStart=this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var b=("undefined"===typeof performance?
    Date:performance).now(),a=(b-this.oldTime)/1E3;this.oldTime=b;this.elapsedTime+=a}return a}});Object.assign(sf.prototype,{set:function(a,b,c){this.radius=a;this.phi=b;this.theta=c;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius=a.radius;this.phi=a.phi;this.theta=a.theta;return this},makeSafe:function(){this.phi=Math.max(1E-6,Math.min(Math.PI-1E-6,this.phi));return this},setFromVector3:function(a){this.radius=a.length();0===this.radius?this.phi=this.theta=
    0:(this.theta=Math.atan2(a.x,a.z),this.phi=Math.acos(Q.clamp(a.y/this.radius,-1,1)));return this}});Object.assign(tf.prototype,{set:function(a,b,c){this.radius=a;this.theta=b;this.y=c;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius=a.radius;this.theta=a.theta;this.y=a.y;return this},setFromVector3:function(a){this.radius=Math.sqrt(a.x*a.x+a.z*a.z);this.theta=Math.atan2(a.x,a.z);this.y=a.y;return this}});gd.prototype=Object.create(x.prototype);gd.prototype.constructor=
    gd;gd.prototype.isImmediateRenderObject=!0;hd.prototype=Object.create(X.prototype);hd.prototype.constructor=hd;hd.prototype.update=function(){var a=new p,b=new p,c=new ma;return function(){var d,e=["a","b","c"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var f=this.object.matrixWorld,g=this.geometry.attributes.position;if((d=this.object.geometry)&&d.isGeometry)for(var h=d.vertices,k=d.faces,l=d=0,p=k.length;l<p;l++)for(var n=k[l],u=0,r=n.vertexNormals.length;u<r;u++){var t=
    n.vertexNormals[u];a.copy(h[n[e[u]]]).applyMatrix4(f);b.copy(t).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);g.setXYZ(d,a.x,a.y,a.z);d+=1;g.setXYZ(d,b.x,b.y,b.z);d+=1}else if(d&&d.isBufferGeometry)for(e=d.attributes.position,h=d.attributes.normal,u=d=0,r=e.count;u<r;u++)a.set(e.getX(u),e.getY(u),e.getZ(u)).applyMatrix4(f),b.set(h.getX(u),h.getY(u),h.getZ(u)),b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a),g.setXYZ(d,a.x,a.y,a.z),d+=1,g.setXYZ(d,b.x,b.y,b.z),d+=1;g.needsUpdate=
    !0}}();nc.prototype=Object.create(x.prototype);nc.prototype.constructor=nc;nc.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};nc.prototype.update=function(){var a=new p,b=new p;return function(){this.light.updateMatrixWorld();var c=this.light.distance?this.light.distance:1E3,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));
    void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}();oc.prototype=Object.create(X.prototype);oc.prototype.constructor=oc;oc.prototype.updateMatrixWorld=function(){var a=new p,b=new O,c=new O;return function(d){var e=this.bones,f=this.geometry,g=f.getAttribute("position");c.getInverse(this.root.matrixWorld);for(var h=0,k=0;h<e.length;h++){var l=e[h];l.parent&&l.parent.isBone&&(b.multiplyMatrices(c,l.matrixWorld),a.setFromMatrixPosition(b),
    g.setXYZ(k,a.x,a.y,a.z),b.multiplyMatrices(c,l.parent.matrixWorld),a.setFromMatrixPosition(b),g.setXYZ(k+1,a.x,a.y,a.z),k+=2)}f.getAttribute("position").needsUpdate=!0;x.prototype.updateMatrixWorld.call(this,d)}}();pc.prototype=Object.create(ra.prototype);pc.prototype.constructor=pc;pc.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};pc.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)};qc.prototype=
    Object.create(x.prototype);qc.prototype.constructor=qc;qc.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose()};qc.prototype.update=function(){var a=.5*this.light.width,b=.5*this.light.height,c=this.line.geometry.attributes.position,d=c.array;d[0]=a;d[1]=-b;d[2]=0;d[3]=a;d[4]=b;d[5]=0;d[6]=-a;d[7]=b;d[8]=0;d[9]=-a;d[10]=-b;d[11]=0;d[12]=a;d[13]=-b;d[14]=0;c.needsUpdate=!0;void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)};
    rc.prototype=Object.create(x.prototype);rc.prototype.constructor=rc;rc.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose()};rc.prototype.update=function(){var a=new p,b=new H,c=new H;return function(){var d=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var e=d.geometry.getAttribute("color");b.copy(this.light.color);c.copy(this.light.groundColor);for(var f=0,g=e.count;f<g;f++){var h=f<g/2?b:c;e.setXYZ(f,h.r,h.g,h.b)}e.needsUpdate=
    !0}d.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate())}}();id.prototype=Object.create(X.prototype);id.prototype.constructor=id;Rd.prototype=Object.create(X.prototype);Rd.prototype.constructor=Rd;jd.prototype=Object.create(X.prototype);jd.prototype.constructor=jd;jd.prototype.update=function(){var a=new p,b=new p,c=new ma;return function(){this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);for(var d=this.object.matrixWorld,e=this.geometry.attributes.position,
    f=this.object.geometry,g=f.vertices,f=f.faces,h=0,k=0,l=f.length;k<l;k++){var p=f[k],n=p.normal;a.copy(g[p.a]).add(g[p.b]).add(g[p.c]).divideScalar(3).applyMatrix4(d);b.copy(n).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);e.setXYZ(h,a.x,a.y,a.z);h+=1;e.setXYZ(h,b.x,b.y,b.z);h+=1}e.needsUpdate=!0}}();sc.prototype=Object.create(x.prototype);sc.prototype.constructor=sc;sc.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();
    this.targetLine.material.dispose()};sc.prototype.update=function(){var a=new p,b=new p,c=new p;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);this.lightPlane.lookAt(c);void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color));this.targetLine.lookAt(c);
    this.targetLine.scale.z=c.length()}}();kd.prototype=Object.create(X.prototype);kd.prototype.constructor=kd;kd.prototype.update=function(){function a(a,g,h,k){d.set(g,h,k).unproject(e);a=c[a];if(void 0!==a)for(g=b.getAttribute("position"),h=0,k=a.length;h<k;h++)g.setXYZ(a[h],d.x,d.y,d.z)}var b,c,d=new p,e=new Ta;return function(){b=this.geometry;c=this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a("c",0,0,-1);a("t",0,0,1);a("n1",-1,-1,-1);a("n2",1,-1,-1);a("n3",-1,1,-1);a("n4",1,
    1,-1);a("f1",-1,-1,1);a("f2",1,-1,1);a("f3",-1,1,1);a("f4",1,1,1);a("u1",.7,1.1,-1);a("u2",-.7,1.1,-1);a("u3",0,2,-1);a("cf1",-1,0,1);a("cf2",1,0,1);a("cf3",0,-1,1);a("cf4",0,1,1);a("cn1",-1,0,-1);a("cn2",1,0,-1);a("cn3",0,-1,-1);a("cn4",0,1,-1);b.getAttribute("position").needsUpdate=!0}}();Gb.prototype=Object.create(X.prototype);Gb.prototype.constructor=Gb;Gb.prototype.update=function(){var a=new Xa;return function(b){void 0!==b&&console.warn("THREE.BoxHelper: .update() has no longer arguments.");
    void 0!==this.object&&a.setFromObject(this.object);if(!a.isEmpty()){b=a.min;var c=a.max,d=this.geometry.attributes.position,e=d.array;e[0]=c.x;e[1]=c.y;e[2]=c.z;e[3]=b.x;e[4]=c.y;e[5]=c.z;e[6]=b.x;e[7]=b.y;e[8]=c.z;e[9]=c.x;e[10]=b.y;e[11]=c.z;e[12]=c.x;e[13]=c.y;e[14]=b.z;e[15]=b.x;e[16]=c.y;e[17]=b.z;e[18]=b.x;e[19]=b.y;e[20]=b.z;e[21]=c.x;e[22]=b.y;e[23]=b.z;d.needsUpdate=!0;this.geometry.computeBoundingSphere()}}}();Gb.prototype.setFromObject=function(a){this.object=a;this.update();return this};
    ld.prototype=Object.create(X.prototype);ld.prototype.constructor=ld;ld.prototype.updateMatrixWorld=function(a){var b=this.box;b.isEmpty()||(b.getCenter(this.position),b.getSize(this.scale),this.scale.multiplyScalar(.5),x.prototype.updateMatrixWorld.call(this,a))};md.prototype=Object.create(sa.prototype);md.prototype.constructor=md;md.prototype.updateMatrixWorld=function(a){var b=-this.plane.constant;1E-8>Math.abs(b)&&(b=1E-8);this.scale.set(.5*this.size,.5*this.size,b);this.lookAt(this.plane.normal);
    x.prototype.updateMatrixWorld.call(this,a)};var Sd,Ce;Hb.prototype=Object.create(x.prototype);Hb.prototype.constructor=Hb;Hb.prototype.setDirection=function(){var a=new p,b;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();Hb.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a);void 0===c&&(c=.2*b);this.line.scale.set(1,Math.max(0,a-b),1);this.line.updateMatrix();
    this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};Hb.prototype.setColor=function(a){this.line.material.color.copy(a);this.cone.material.color.copy(a)};nd.prototype=Object.create(X.prototype);nd.prototype.constructor=nd;C.create=function(a,b){console.log("THREE.Curve.create() has been deprecated");a.prototype=Object.create(C.prototype);a.prototype.constructor=a;a.prototype.getPoint=b;return a};Object.assign(bb.prototype,{createPointsGeometry:function(a){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a=this.getPoints(a);return this.createGeometry(a)},createSpacedPointsGeometry:function(a){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");a=this.getSpacedPoints(a);return this.createGeometry(a)},createGeometry:function(a){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var b=new L,c=0,d=a.length;c<d;c++){var e=a[c];b.vertices.push(new p(e.x,
    e.y,e.z||0))}return b}});Object.assign(Sa.prototype,{fromPoints:function(a){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");this.setFromPoints(a)}});vf.prototype=Object.create(ca.prototype);wf.prototype=Object.create(ca.prototype);De.prototype=Object.create(ca.prototype);Object.assign(De.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},
    reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}});id.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};oc.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};Object.assign(kc.prototype,{extractUrlBase:function(a){console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return He.extractUrlBase(a)}});Object.assign(od.prototype,{center:function(a){console.warn("THREE.Box2: .center() has been renamed to .getCenter().");return this.getCenter(a)},empty:function(){console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(a){console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a)},size:function(a){console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(a)}});Object.assign(Xa.prototype,{center:function(a){console.warn("THREE.Box3: .center() has been renamed to .getCenter().");return this.getCenter(a)},empty:function(){console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(a){console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a)},isIntersectionSphere:function(a){console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a)},size:function(a){console.warn("THREE.Box3: .size() has been renamed to .getSize().");return this.getSize(a)}});Nb.prototype.center=function(a){console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(a)};Object.assign(Q,{random16:function(){console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");return Math.random()},nearestPowerOfTwo:function(a){console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
    return Q.floorPowerOfTwo(a)},nextPowerOfTwo:function(a){console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");return Q.ceilPowerOfTwo(a)}});Object.assign(ma.prototype,{flattenToArrayOffset:function(a,b){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a,b)},multiplyVector3:function(a){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
    multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(a){console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}});Object.assign(O.prototype,{extractPosition:function(a){console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(a)},flattenToArrayOffset:function(a,b){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a,b)},getPosition:function(){var a;return function(){void 0===a&&(a=new p);console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");return a.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(a){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(a)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(a){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector4:function(a){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},
    rotateAxis:function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this)},crossVector:function(a){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},
    rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(a){console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(a,b,c,d,e,f){console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(a,b,d,c,e,f)}});Ea.prototype.isIntersectionLine=function(a){console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(a)};ha.prototype.multiplyVector3=function(a){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)};Object.assign(sb.prototype,{isIntersectionBox:function(a){console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a)},isIntersectionPlane:function(a){console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(a)},isIntersectionSphere:function(a){console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(a)}});Object.assign(jb.prototype,{extractAllPoints:function(a){console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");return this.extractPoints(a)},
    extrude:function(a){console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");return new ib(this,a)},makeGeometry:function(a){console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new xb(this,a)}});Object.assign(D.prototype,{fromAttribute:function(a,b,c){console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},distanceToManhattan:function(a){console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a)},lengthManhattan:function(){console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(p.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},
    getPositionFromMatrix:function(a){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,b){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(b,
    a)},applyProjection:function(a){console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");return this.applyMatrix4(a)},fromAttribute:function(a,b,c){console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},distanceToManhattan:function(a){console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(a)},lengthManhattan:function(){console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength()}});Object.assign(aa.prototype,{fromAttribute:function(a,b,c){console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},lengthManhattan:function(){console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});L.prototype.computeTangents=function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")};Object.assign(x.prototype,
    {getChildByName:function(a){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(a,b){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b,a)}});Object.defineProperties(x.prototype,{eulerOrder:{get:function(){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    return this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Object.defineProperties(Dc.prototype,{objects:{get:function(){console.warn("THREE.LOD: .objects has been renamed to .levels.");
    return this.levels}}});Object.defineProperty(Ec.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}});Object.defineProperty(C.prototype,"__arcLengthDivisions",{get:function(){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");return this.arcLengthDivisions},set:function(a){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    this.arcLengthDivisions=a}});ba.prototype.setLens=function(a,b){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");void 0!==b&&(this.filmGauge=b);this.setFocalLength(a)};Object.defineProperties(da.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");this.shadow.camera.fov=a}},
    shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
    this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far=a}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
    this.shadow.bias=a}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height=a}}});Object.defineProperties(M.prototype,{length:{get:function(){console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
    return this.array.length}}});Object.assign(E.prototype,{addIndex:function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(a)},addDrawCall:function(a,b,c){void 0!==c&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(a,b)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}});Object.defineProperties(E.prototype,{drawcalls:{get:function(){console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups}},offsets:{get:function(){console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups}}});
    Object.defineProperties(Qd.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this}}});Object.defineProperties(P.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},
    wrapRGB:{get:function(){console.warn("THREE.Material: .wrapRGB has been removed.");return new H}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(a){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=1===a}}});Object.defineProperties(Ma.prototype,{metal:{get:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
    return!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(Fa.prototype,{derivatives:{get:function(){console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives},set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives=a}}});Object.assign(ce.prototype,
    {getCurrentRenderTarget:function(){console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");return this.getRenderTarget()},getMaxAnisotropy:function(){console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");return this.capabilities.getMaxAnisotropy()},getPrecision:function(){console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");return this.capabilities.precision},resetGLState:function(){console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset()},supportsFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");return this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc")},
    supportsBlendMinMax:function(){console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");return this.capabilities.vertexTextures},supportsInstancedArrays:function(){console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(a)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}});
    Object.defineProperties(ce.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type=a}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");
    this.shadowMap.cullFace=a}}});Object.defineProperties(Ue.prototype,{cullFace:{get:function(){return this.renderReverseSided?2:1},set:function(a){a=1!==a;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+a+".");this.renderReverseSided=a}}});Object.defineProperties(kb.prototype,{wrapS:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    this.texture.wrapS=a}},wrapT:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT=a}},magFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter=
    a}},minFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter=a}},anisotropy:{get:function(){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy=
    a}},offset:{get:function(){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset},set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset=a}},repeat:{get:function(){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat=a}},format:{get:function(){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    return this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format=a}},type:{get:function(){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type=a}},generateMipmaps:{get:function(){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps},
    set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps=a}}});Object.assign(be.prototype,{getStandingMatrix:function(){console.warn("THREE.WebVRManager: .getStandingMatrix() has been removed.")}});Object.defineProperties(be.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}}});lc.prototype.load=function(a){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var b=this;(new qe).load(a,function(a){b.setBuffer(a)});return this};ue.prototype.getData=function(){console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");return this.getFrequencyData()};fd.prototype.updateCubeMap=function(a,b){console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");return this.update(a,b)};l.WebGLRenderTargetCube=Jb;l.WebGLRenderTarget=kb;l.WebGLRenderer=ce;l.ShaderLib=tb;l.UniformsLib=K;l.UniformsUtils=Ga;l.ShaderChunk=R;l.FogExp2=Pb;l.Fog=Qb;
    l.Scene=vd;l.LensFlare=de;l.Sprite=Cc;l.LOD=Dc;l.SkinnedMesh=xd;l.Skeleton=Ec;l.Bone=wd;l.Mesh=ra;l.LineSegments=X;l.LineLoop=yd;l.Line=sa;l.Points=Rb;l.Group=Fc;l.VideoTexture=ee;l.DataTexture=lb;l.CompressedTexture=Sb;l.CubeTexture=db;l.CanvasTexture=tc;l.DepthTexture=Gc;l.Texture=U;l.CompressedTextureLoader=gf;l.DataTextureLoader=ie;l.CubeTextureLoader=je;l.TextureLoader=Ad;l.ObjectLoader=jf;l.MaterialLoader=Pd;l.BufferGeometryLoader=le;l.DefaultLoadingManager=xa;l.LoadingManager=he;l.JSONLoader=
    me;l.ImageLoader=ad;l.ImageBitmapLoader=ne;l.FontLoader=kf;l.FileLoader=Na;l.Loader=kc;l.LoaderUtils=He;l.Cache=Ib;l.AudioLoader=qe;l.SpotLightShadow=Cd;l.SpotLight=Dd;l.PointLight=Ed;l.RectAreaLight=Id;l.HemisphereLight=Bd;l.DirectionalLightShadow=Fd;l.DirectionalLight=Gd;l.AmbientLight=Hd;l.LightShadow=Fb;l.Light=da;l.StereoCamera=lf;l.PerspectiveCamera=ba;l.OrthographicCamera=Lb;l.CubeCamera=fd;l.ArrayCamera=ud;l.Camera=Ta;l.AudioListener=re;l.PositionalAudio=te;l.AudioContext=se;l.AudioAnalyser=
    ue;l.Audio=lc;l.VectorKeyframeTrack=jc;l.StringKeyframeTrack=Jd;l.QuaternionKeyframeTrack=dd;l.NumberKeyframeTrack=ic;l.ColorKeyframeTrack=Md;l.BooleanKeyframeTrack=Kd;l.PropertyMixer=ve;l.PropertyBinding=qa;l.KeyframeTrack=T;l.AnimationUtils=ga;l.AnimationObjectGroup=nf;l.AnimationMixer=we;l.AnimationClip=Ca;l.Uniform=Qd;l.InstancedBufferGeometry=xe;l.BufferGeometry=E;l.Geometry=L;l.InterleavedBufferAttribute=ye;l.InstancedInterleavedBuffer=ze;l.InterleavedBuffer=mc;l.InstancedBufferAttribute=Ae;
    l.Face3=Ya;l.Object3D=x;l.Raycaster=pf;l.Layers=Wd;l.EventDispatcher=za;l.Clock=rf;l.QuaternionLinearInterpolant=Ld;l.LinearInterpolant=ed;l.DiscreteInterpolant=Od;l.CubicInterpolant=Nd;l.Interpolant=pa;l.Triangle=Za;l.Math=Q;l.Spherical=sf;l.Cylindrical=tf;l.Plane=Ea;l.Frustum=rd;l.Sphere=Ia;l.Ray=sb;l.Matrix4=O;l.Matrix3=ma;l.Box3=Xa;l.Box2=od;l.Line3=Nb;l.Euler=gb;l.Vector4=aa;l.Vector3=p;l.Vector2=D;l.Quaternion=ha;l.Color=H;l.ImmediateRenderObject=gd;l.VertexNormalsHelper=hd;l.SpotLightHelper=
    nc;l.SkeletonHelper=oc;l.PointLightHelper=pc;l.RectAreaLightHelper=qc;l.HemisphereLightHelper=rc;l.GridHelper=id;l.PolarGridHelper=Rd;l.FaceNormalsHelper=jd;l.DirectionalLightHelper=sc;l.CameraHelper=kd;l.BoxHelper=Gb;l.Box3Helper=ld;l.PlaneHelper=md;l.ArrowHelper=Hb;l.AxesHelper=nd;l.Shape=jb;l.Path=Sa;l.ShapePath=oe;l.Font=pe;l.CurvePath=bb;l.Curve=C;l.ShapeUtils=$a;l.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new Fc,d=0,e=b.length;d<e;d++)c.add(new ra(a,b[d]));return c},detach:function(a,
    b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){a.applyMatrix((new O).getInverse(c.matrixWorld));b.remove(a);c.add(a)}};l.WebGLUtils=af;l.WireframeGeometry=Tb;l.ParametricGeometry=Hc;l.ParametricBufferGeometry=Ub;l.TetrahedronGeometry=Jc;l.TetrahedronBufferGeometry=Vb;l.OctahedronGeometry=Kc;l.OctahedronBufferGeometry=ub;l.IcosahedronGeometry=Lc;l.IcosahedronBufferGeometry=Wb;l.DodecahedronGeometry=Mc;l.DodecahedronBufferGeometry=Xb;l.PolyhedronGeometry=Ic;l.PolyhedronBufferGeometry=
    ja;l.TubeGeometry=Nc;l.TubeBufferGeometry=Yb;l.TorusKnotGeometry=Oc;l.TorusKnotBufferGeometry=Zb;l.TorusGeometry=Pc;l.TorusBufferGeometry=$b;l.TextGeometry=Uc;l.TextBufferGeometry=ac;l.SphereGeometry=Vc;l.SphereBufferGeometry=wb;l.RingGeometry=Wc;l.RingBufferGeometry=bc;l.PlaneGeometry=Ac;l.PlaneBufferGeometry=rb;l.LatheGeometry=Xc;l.LatheBufferGeometry=cc;l.ShapeGeometry=xb;l.ShapeBufferGeometry=yb;l.ExtrudeGeometry=ib;l.ExtrudeBufferGeometry=La;l.EdgesGeometry=dc;l.ConeGeometry=Yc;l.ConeBufferGeometry=
    Zc;l.CylinderGeometry=zb;l.CylinderBufferGeometry=ab;l.CircleGeometry=$c;l.CircleBufferGeometry=ec;l.BoxGeometry=Mb;l.BoxBufferGeometry=qb;l.ShadowMaterial=fc;l.SpriteMaterial=hb;l.RawShaderMaterial=gc;l.ShaderMaterial=Fa;l.PointsMaterial=Ka;l.MeshPhysicalMaterial=Ab;l.MeshStandardMaterial=Ua;l.MeshPhongMaterial=Ma;l.MeshToonMaterial=Bb;l.MeshNormalMaterial=Cb;l.MeshLambertMaterial=Db;l.MeshDepthMaterial=eb;l.MeshDistanceMaterial=fb;l.MeshBasicMaterial=Aa;l.LineDashedMaterial=Eb;l.LineBasicMaterial=
    W;l.Material=P;l.Float64BufferAttribute=zc;l.Float32BufferAttribute=B;l.Uint32BufferAttribute=pb;l.Int32BufferAttribute=yc;l.Uint16BufferAttribute=ob;l.Int16BufferAttribute=xc;l.Uint8ClampedBufferAttribute=wc;l.Uint8BufferAttribute=vc;l.Int8BufferAttribute=uc;l.BufferAttribute=M;l.ArcCurve=hc;l.CatmullRomCurve3=ca;l.CubicBezierCurve=Oa;l.CubicBezierCurve3=Va;l.EllipseCurve=Ba;l.LineCurve=ya;l.LineCurve3=Pa;l.QuadraticBezierCurve=Qa;l.QuadraticBezierCurve3=Wa;l.SplineCurve=Ra;l.REVISION="89";l.MOUSE=
    {LEFT:0,MIDDLE:1,RIGHT:2};l.CullFaceNone=0;l.CullFaceBack=1;l.CullFaceFront=2;l.CullFaceFrontBack=3;l.FrontFaceDirectionCW=0;l.FrontFaceDirectionCCW=1;l.BasicShadowMap=0;l.PCFShadowMap=1;l.PCFSoftShadowMap=2;l.FrontSide=0;l.BackSide=1;l.DoubleSide=2;l.FlatShading=1;l.SmoothShading=2;l.NoColors=0;l.FaceColors=1;l.VertexColors=2;l.NoBlending=0;l.NormalBlending=1;l.AdditiveBlending=2;l.SubtractiveBlending=3;l.MultiplyBlending=4;l.CustomBlending=5;l.AddEquation=100;l.SubtractEquation=101;l.ReverseSubtractEquation=
    102;l.MinEquation=103;l.MaxEquation=104;l.ZeroFactor=200;l.OneFactor=201;l.SrcColorFactor=202;l.OneMinusSrcColorFactor=203;l.SrcAlphaFactor=204;l.OneMinusSrcAlphaFactor=205;l.DstAlphaFactor=206;l.OneMinusDstAlphaFactor=207;l.DstColorFactor=208;l.OneMinusDstColorFactor=209;l.SrcAlphaSaturateFactor=210;l.NeverDepth=0;l.AlwaysDepth=1;l.LessDepth=2;l.LessEqualDepth=3;l.EqualDepth=4;l.GreaterEqualDepth=5;l.GreaterDepth=6;l.NotEqualDepth=7;l.MultiplyOperation=0;l.MixOperation=1;l.AddOperation=2;l.NoToneMapping=
    0;l.LinearToneMapping=1;l.ReinhardToneMapping=2;l.Uncharted2ToneMapping=3;l.CineonToneMapping=4;l.UVMapping=300;l.CubeReflectionMapping=301;l.CubeRefractionMapping=302;l.EquirectangularReflectionMapping=303;l.EquirectangularRefractionMapping=304;l.SphericalReflectionMapping=305;l.CubeUVReflectionMapping=306;l.CubeUVRefractionMapping=307;l.RepeatWrapping=1E3;l.ClampToEdgeWrapping=1001;l.MirroredRepeatWrapping=1002;l.NearestFilter=1003;l.NearestMipMapNearestFilter=1004;l.NearestMipMapLinearFilter=1005;
    l.LinearFilter=1006;l.LinearMipMapNearestFilter=1007;l.LinearMipMapLinearFilter=1008;l.UnsignedByteType=1009;l.ByteType=1010;l.ShortType=1011;l.UnsignedShortType=1012;l.IntType=1013;l.UnsignedIntType=1014;l.FloatType=1015;l.HalfFloatType=1016;l.UnsignedShort4444Type=1017;l.UnsignedShort5551Type=1018;l.UnsignedShort565Type=1019;l.UnsignedInt248Type=1020;l.AlphaFormat=1021;l.RGBFormat=1022;l.RGBAFormat=1023;l.LuminanceFormat=1024;l.LuminanceAlphaFormat=1025;l.RGBEFormat=1023;l.DepthFormat=1026;l.DepthStencilFormat=
    1027;l.RGB_S3TC_DXT1_Format=2001;l.RGBA_S3TC_DXT1_Format=2002;l.RGBA_S3TC_DXT3_Format=2003;l.RGBA_S3TC_DXT5_Format=2004;l.RGB_PVRTC_4BPPV1_Format=2100;l.RGB_PVRTC_2BPPV1_Format=2101;l.RGBA_PVRTC_4BPPV1_Format=2102;l.RGBA_PVRTC_2BPPV1_Format=2103;l.RGB_ETC1_Format=2151;l.LoopOnce=2200;l.LoopRepeat=2201;l.LoopPingPong=2202;l.InterpolateDiscrete=2300;l.InterpolateLinear=2301;l.InterpolateSmooth=2302;l.ZeroCurvatureEnding=2400;l.ZeroSlopeEnding=2401;l.WrapAroundEnding=2402;l.TrianglesDrawMode=0;l.TriangleStripDrawMode=
    1;l.TriangleFanDrawMode=2;l.LinearEncoding=3E3;l.sRGBEncoding=3001;l.GammaEncoding=3007;l.RGBEEncoding=3002;l.LogLuvEncoding=3003;l.RGBM7Encoding=3004;l.RGBM16Encoding=3005;l.RGBDEncoding=3006;l.BasicDepthPacking=3200;l.RGBADepthPacking=3201;l.CubeGeometry=Mb;l.Face4=function(a,b,c,d,e,f,g){console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new Ya(a,b,c,e,f,g)};l.LineStrip=0;l.LinePieces=1;l.MeshFaceMaterial=function(a){console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return a};l.MultiMaterial=function(a){void 0===a&&(a=[]);console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");a.isMultiMaterial=!0;a.materials=a;a.clone=function(){return a.slice()};return a};l.PointCloud=function(a,b){console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Rb(a,b)};l.Particle=function(a){console.warn("THREE.Particle has been renamed to THREE.Sprite.");return new Cc(a)};l.ParticleSystem=function(a,b){console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new Rb(a,b)};l.PointCloudMaterial=function(a){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new Ka(a)};l.ParticleBasicMaterial=function(a){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new Ka(a)};l.ParticleSystemMaterial=function(a){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new Ka(a)};l.Vertex=function(a,b,c){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new p(a,b,c)};l.DynamicBufferAttribute=function(a,b){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");return(new M(a,b)).setDynamic(!0)};l.Int8Attribute=function(a,b){console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");return new uc(a,b)};l.Uint8Attribute=function(a,b){console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");return new vc(a,
    b)};l.Uint8ClampedAttribute=function(a,b){console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");return new wc(a,b)};l.Int16Attribute=function(a,b){console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");return new xc(a,b)};l.Uint16Attribute=function(a,b){console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");return new ob(a,b)};l.Int32Attribute=
    function(a,b){console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");return new yc(a,b)};l.Uint32Attribute=function(a,b){console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");return new pb(a,b)};l.Float32Attribute=function(a,b){console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");return new B(a,b)};l.Float64Attribute=function(a,b){console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new zc(a,b)};l.ClosedSplineCurve3=vf;l.SplineCurve3=wf;l.Spline=De;l.AxisHelper=function(a){console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");return new nd(a)};l.BoundingBoxHelper=function(a,b){console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");return new Gb(a,b)};l.EdgesHelper=function(a,b){console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new X(new dc(a.geometry),new W({color:void 0!==
    b?b:16777215}))};l.WireframeHelper=function(a,b){console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new X(new Tb(a.geometry),new W({color:void 0!==b?b:16777215}))};l.XHRLoader=function(a){console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");return new Na(a)};l.BinaryTextureLoader=function(a){console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");return new ie(a)};l.GeometryUtils={merge:function(a,b,c){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    if(b.isMesh){b.matrixAutoUpdate&&b.updateMatrix();var d=b.matrix;b=b.geometry}a.merge(b,d,c)},center:function(a){console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center()}};l.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var e=new Ad;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a},
    loadTextureCube:function(a,b,c,d){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var e=new je;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}};
    l.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector=function(a,b){console.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b)};this.unprojectVector=function(a,b){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(b)};this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}};l.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
    this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};Object.defineProperty(l,"__esModule",{value:!0})});
},{}],"src/loaders/Collada":[function(require,module,exports){
require('../lib/ColladaLoader.js');

exports.Collada = (function() {
  function Collada(properties, cb) {
    this.modelLoader = new THREE.ColladaLoader;
    this.modelLoader.load(properties.path, (function(_this) {
      return function(collada) {
        collada.scene.animations = collada.animations;
        return cb(collada.scene);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  }

  return Collada;

})();


},{"../lib/ColladaLoader.js":"src/lib/ColladaLoader"}],"src/loaders/FBX":[function(require,module,exports){
require('../lib/FBXLoader.js');

window.Zlib = require('../lib/inflate.min.js').Zlib;

exports.FBX = (function() {
  function FBX(properties, cb) {
    this.modelLoader = new THREE.FBXLoader;
    this.modelLoader.load(properties.path, (function(_this) {
      return function(model) {
        return cb(model);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  }

  return FBX;

})();


},{"../lib/FBXLoader.js":"src/lib/FBXLoader","../lib/inflate.min.js":"src/lib/inflate-min"}],"src/loaders/GLTF":[function(require,module,exports){
require('../lib/GLTFLoader.js');

exports.GLTF = (function() {
  function GLTF(properties, cb) {
    this.modelLoader = new THREE.GLTFLoader;
    this.modelLoader.load(properties.path, function(model) {
      model.scene.animations = model.animations;
      return cb(model.scene);
    }, null, function(e) {
      return console.log(e);
    });
  }

  return GLTF;

})();


},{"../lib/GLTFLoader.js":"src/lib/GLTFLoader"}],"src/loaders/JSONObject":[function(require,module,exports){
exports.JSONObject = (function() {
  function JSONObject(properties, cb) {
    this.readJSON(properties.path, (function(_this) {
      return function(json) {
        var metadata;
        metadata = JSON.parse(json).metadata;
        if (metadata.type === 'Object') {
          return _this.loadObject(properties, cb);
        } else {
          return _this.loadGeometry(properties, cb);
        }
      };
    })(this));
  }

  JSONObject.prototype.loadObject = function(properties, cb) {
    this.modelLoader = new THREE.ObjectLoader;
    return this.modelLoader.load(properties.path, (function(_this) {
      return function(model) {
        return cb(model);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  };

  JSONObject.prototype.loadGeometry = function(properties, cb) {
    this.modelLoader = new THREE.JSONLoader;
    return this.modelLoader.load(properties.path, (function(_this) {
      return function(geometry, materials) {
        var material, model;
        material = materials[0];
        model = new THREE.Mesh(geometry, material);
        model.animations = geometry.animations;
        return cb(model);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  };

  JSONObject.prototype.readJSON = function(path, cb) {
    var rawFile;
    rawFile = new XMLHttpRequest;
    rawFile.overrideMimeType('application/json');
    rawFile.open('GET', path, true);
    rawFile.onreadystatechange = function() {
      if (rawFile.readyState === 4 && rawFile.status === 200) {
        return cb(rawFile.responseText);
      }
    };
    return rawFile.send(null);
  };

  return JSONObject;

})();


},{}],"src/loaders/OBJ":[function(require,module,exports){
require('../lib/OBJLoader.js');

require('../lib/MTLLoader.js');

exports.OBJ = (function() {
  function OBJ(properties, cb) {
    var path;
    path = properties.path;
    this.dirPath = path.substring(0, path.indexOf(path.split('/').pop()));
    this.modelPath = path.split('/').pop();
    this.materialPath = this.modelPath.replace('.obj', '.mtl');
    this.materialLoader = new THREE.MTLLoader;
    this.modelLoader = new THREE.OBJLoader;
    this.materialLoader.setPath(this.dirPath);
    this.materialLoader.load(this.materialPath, (function(_this) {
      return function(materials) {
        materials.preload();
        _this.modelLoader.setMaterials(materials);
        _this.modelLoader.setPath(_this.dirPath);
        return _this.modelLoader.load(_this.modelPath, function(model) {
          return cb(model);
        });
      };
    })(this));
  }

  return OBJ;

})();


},{"../lib/MTLLoader.js":"src/lib/MTLLoader","../lib/OBJLoader.js":"src/lib/OBJLoader"}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVyLm1vZHVsZXMuanMiLCJzb3VyY2VzIjpbIi4uL21vZHVsZXMvc3JjL2xvYWRlcnMvT0JKLmNvZmZlZSIsIi4uL21vZHVsZXMvc3JjL2xvYWRlcnMvSlNPTk9iamVjdC5jb2ZmZWUiLCIuLi9tb2R1bGVzL3NyYy9sb2FkZXJzL0dMVEYuY29mZmVlIiwiLi4vbW9kdWxlcy9zcmMvbG9hZGVycy9GQlguY29mZmVlIiwiLi4vbW9kdWxlcy9zcmMvbG9hZGVycy9Db2xsYWRhLmNvZmZlZSIsIi4uL21vZHVsZXMvc3JjL2xpYi90aHJlZS5taW4uanMiLCIuLi9tb2R1bGVzL3NyYy9saWIvaW5mbGF0ZS5taW4uanMiLCIuLi9tb2R1bGVzL3NyYy9saWIvT3JiaXRDb250cm9scy5qcyIsIi4uL21vZHVsZXMvc3JjL2xpYi9PQkpMb2FkZXIuanMiLCIuLi9tb2R1bGVzL3NyYy9saWIvTVRMTG9hZGVyLmpzIiwiLi4vbW9kdWxlcy9zcmMvbGliL0dMVEZMb2FkZXIuanMiLCIuLi9tb2R1bGVzL3NyYy9saWIvRkJYTG9hZGVyLmpzIiwiLi4vbW9kdWxlcy9zcmMvbGliL0NvbGxhZGFMb2FkZXIuanMiLCIuLi9tb2R1bGVzL3NyYy9fU3RhdGVzLmNvZmZlZSIsIi4uL21vZHVsZXMvc3JjL19DYW1lcmEuY29mZmVlIiwiLi4vbW9kdWxlcy9zcmMvX0Jhc2VDbGFzcy5jb2ZmZWUiLCIuLi9tb2R1bGVzL3NyYy9fQW5pbWF0aW9uLmNvZmZlZSIsIi4uL21vZHVsZXMvc3JjL1N0dWRpby5jb2ZmZWUiLCIuLi9tb2R1bGVzL3NyYy9TY2VuZS5jb2ZmZWUiLCIuLi9tb2R1bGVzL3NyYy9Nb2RlbC5jb2ZmZWUiLCIuLi9tb2R1bGVzL3NyYy9NZXNoLmNvZmZlZSIsIi4uL21vZHVsZXMvc3JjL0xpZ2h0LmNvZmZlZSIsIi4uL21vZHVsZXMvc3JjL0dBLmNvZmZlZSIsIi4uL21vZHVsZXMvZm9ybS5jb2ZmZWUiLCJub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUgJy4uL2xpYi9PQkpMb2FkZXIuanMnXG5yZXF1aXJlICcuLi9saWIvTVRMTG9hZGVyLmpzJ1xuXG5jbGFzcyBleHBvcnRzLk9CSlxuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcywgY2IpIC0+XG4gICAgICAgIHBhdGggPSBwcm9wZXJ0aWVzLnBhdGhcbiAgICAgICAgQGRpclBhdGggPSBwYXRoLnN1YnN0cmluZyAwLCBwYXRoLmluZGV4T2YocGF0aC5zcGxpdCgnLycpLnBvcCgpKVxuICAgICAgICBAbW9kZWxQYXRoID0gcGF0aC5zcGxpdCgnLycpLnBvcCgpXG4gICAgICAgIEBtYXRlcmlhbFBhdGggPSBAbW9kZWxQYXRoLnJlcGxhY2UgJy5vYmonLCAnLm10bCdcbiAgICAgICAgXG4gICAgICAgIEBtYXRlcmlhbExvYWRlciA9IG5ldyBUSFJFRS5NVExMb2FkZXJcbiAgICAgICAgQG1vZGVsTG9hZGVyID0gbmV3IFRIUkVFLk9CSkxvYWRlclxuXG4gICAgICAgIEBtYXRlcmlhbExvYWRlci5zZXRQYXRoIEBkaXJQYXRoXG4gICAgICAgIEBtYXRlcmlhbExvYWRlci5sb2FkIEBtYXRlcmlhbFBhdGgsIChtYXRlcmlhbHMpID0+XG4gICAgICAgICAgICBtYXRlcmlhbHMucHJlbG9hZCgpXG5cbiAgICAgICAgICAgIEBtb2RlbExvYWRlci5zZXRNYXRlcmlhbHMgbWF0ZXJpYWxzXG4gICAgICAgICAgICBAbW9kZWxMb2FkZXIuc2V0UGF0aCBAZGlyUGF0aFxuICAgICAgICAgICAgQG1vZGVsTG9hZGVyLmxvYWQgQG1vZGVsUGF0aCwgKG1vZGVsKSA9PlxuICAgICAgICAgICAgICAgIGNiIG1vZGVsIiwiY2xhc3MgZXhwb3J0cy5KU09OT2JqZWN0XG4gICAgY29uc3RydWN0b3I6IChwcm9wZXJ0aWVzLCBjYikgLT5cblxuICAgICAgICBAcmVhZEpTT04gcHJvcGVydGllcy5wYXRoLCAoanNvbikgPT4gXG4gICAgICAgICAgICBtZXRhZGF0YSA9IEpTT04ucGFyc2UoanNvbikubWV0YWRhdGFcblxuICAgICAgICAgICAgaWYgbWV0YWRhdGEudHlwZSA9PSAnT2JqZWN0JyB0aGVuIEBsb2FkT2JqZWN0IHByb3BlcnRpZXMsIGNiXG4gICAgICAgICAgICBlbHNlIEBsb2FkR2VvbWV0cnkgcHJvcGVydGllcywgY2JcblxuXG4gICAgbG9hZE9iamVjdDogKHByb3BlcnRpZXMsIGNiKSAtPlxuICAgICAgICBAbW9kZWxMb2FkZXIgPSBuZXcgVEhSRUUuT2JqZWN0TG9hZGVyXG4gICAgICAgIEBtb2RlbExvYWRlci5sb2FkIHByb3BlcnRpZXMucGF0aCwgKG1vZGVsKSA9PlxuICAgICAgICAgICAgY2IgbW9kZWxcbiAgICAgICAgLCBudWxsLCAoZSkgLT4gY29uc29sZS5sb2cgZVxuICAgIFxuICAgIGxvYWRHZW9tZXRyeTogKHByb3BlcnRpZXMsIGNiKSAtPlxuICAgICAgICBAbW9kZWxMb2FkZXIgPSBuZXcgVEhSRUUuSlNPTkxvYWRlclxuICAgICAgICBAbW9kZWxMb2FkZXIubG9hZCBwcm9wZXJ0aWVzLnBhdGgsIChnZW9tZXRyeSwgbWF0ZXJpYWxzKSA9PlxuICAgICAgICAgICAgbWF0ZXJpYWwgPSBtYXRlcmlhbHNbMF1cbiAgICAgICAgICAgIG1vZGVsID0gbmV3IFRIUkVFLk1lc2ggZ2VvbWV0cnksIG1hdGVyaWFsXG4gICAgICAgICAgICBtb2RlbC5hbmltYXRpb25zID0gZ2VvbWV0cnkuYW5pbWF0aW9uc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYiBtb2RlbFxuICAgICAgICAsIG51bGwsIChlKSAtPiBjb25zb2xlLmxvZyBlXG5cbiAgICByZWFkSlNPTjogKHBhdGgsIGNiKSAtPlxuICAgICAgICByYXdGaWxlID0gbmV3IFhNTEh0dHBSZXF1ZXN0XG4gICAgICAgIHJhd0ZpbGUub3ZlcnJpZGVNaW1lVHlwZSAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgcmF3RmlsZS5vcGVuICdHRVQnLCBwYXRoLCB0cnVlXG4gICAgICAgIHJhd0ZpbGUub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgLT5cbiAgICAgICAgICAgIGlmIHJhd0ZpbGUucmVhZHlTdGF0ZSA9PSA0ICYmIHJhd0ZpbGUuc3RhdHVzID09IDIwMFxuICAgICAgICAgICAgICAgIGNiIHJhd0ZpbGUucmVzcG9uc2VUZXh0XG4gICAgICAgIHJhd0ZpbGUuc2VuZCBudWxsIiwicmVxdWlyZSAnLi4vbGliL0dMVEZMb2FkZXIuanMnXG5cbmNsYXNzIGV4cG9ydHMuR0xURlxuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcywgY2IpIC0+XG4gICAgICAgIEBtb2RlbExvYWRlciA9IG5ldyBUSFJFRS5HTFRGTG9hZGVyXG4gICAgICAgIEBtb2RlbExvYWRlci5sb2FkIHByb3BlcnRpZXMucGF0aCwgKG1vZGVsKSAtPlxuICAgICAgICAgICAgbW9kZWwuc2NlbmUuYW5pbWF0aW9ucyA9IG1vZGVsLmFuaW1hdGlvbnNcbiAgICAgICAgICAgIGNiIG1vZGVsLnNjZW5lXG4gICAgICAgICwgbnVsbCwgKGUpIC0+IGNvbnNvbGUubG9nIGUiLCJyZXF1aXJlICcuLi9saWIvRkJYTG9hZGVyLmpzJ1xud2luZG93LlpsaWIgPSByZXF1aXJlKCcuLi9saWIvaW5mbGF0ZS5taW4uanMnKS5abGliXG5cbmNsYXNzIGV4cG9ydHMuRkJYXG4gICAgY29uc3RydWN0b3I6IChwcm9wZXJ0aWVzLCBjYikgLT5cbiAgICAgICAgQG1vZGVsTG9hZGVyID0gbmV3IFRIUkVFLkZCWExvYWRlclxuICAgICAgICBAbW9kZWxMb2FkZXIubG9hZCBwcm9wZXJ0aWVzLnBhdGgsIChtb2RlbCkgPT5cbiAgICAgICAgICAgIGNiIG1vZGVsXG4gICAgICAgICwgbnVsbCwgKGUpIC0+IGNvbnNvbGUubG9nIGUiLCJyZXF1aXJlICcuLi9saWIvQ29sbGFkYUxvYWRlci5qcydcblxuY2xhc3MgZXhwb3J0cy5Db2xsYWRhXG4gICAgY29uc3RydWN0b3I6IChwcm9wZXJ0aWVzLCBjYikgLT5cbiAgICAgICAgQG1vZGVsTG9hZGVyID0gbmV3IFRIUkVFLkNvbGxhZGFMb2FkZXJcbiAgICAgICAgQG1vZGVsTG9hZGVyLmxvYWQgcHJvcGVydGllcy5wYXRoLCAoY29sbGFkYSkgPT5cbiAgICAgICAgICAgIGNvbGxhZGEuc2NlbmUuYW5pbWF0aW9ucyA9IGNvbGxhZGEuYW5pbWF0aW9uc1xuICAgICAgICAgICAgY2IgY29sbGFkYS5zY2VuZVxuICAgICAgICAsIG51bGwsIChlKSAtPiBjb25zb2xlLmxvZyBlIiwiLy8gdGhyZWVqcy5vcmcvbGljZW5zZVxuKGZ1bmN0aW9uKGwsemEpe1wib2JqZWN0XCI9PT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBtb2R1bGU/emEoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSx6YSk6emEobC5USFJFRT17fSl9KSh0aGlzLGZ1bmN0aW9uKGwpe2Z1bmN0aW9uIHphKCl7fWZ1bmN0aW9uIEQoYSxiKXt0aGlzLng9YXx8MDt0aGlzLnk9Ynx8MH1mdW5jdGlvbiBPKCl7dGhpcy5lbGVtZW50cz1bMSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMV07MDxhcmd1bWVudHMubGVuZ3RoJiZjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4NDogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC5cIil9ZnVuY3Rpb24gaGEoYSxiLGMsZCl7dGhpcy5feD1hfHwwO3RoaXMuX3k9Ynx8MDt0aGlzLl96PWN8fDA7dGhpcy5fdz12b2lkIDAhPT1kP2Q6MX1mdW5jdGlvbiBwKGEsXG4gICAgYixjKXt0aGlzLng9YXx8MDt0aGlzLnk9Ynx8MDt0aGlzLno9Y3x8MH1mdW5jdGlvbiBtYSgpe3RoaXMuZWxlbWVudHM9WzEsMCwwLDAsMSwwLDAsMCwxXTswPGFyZ3VtZW50cy5sZW5ndGgmJmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXgzOiB0aGUgY29uc3RydWN0b3Igbm8gbG9uZ2VyIHJlYWRzIGFyZ3VtZW50cy4gdXNlIC5zZXQoKSBpbnN0ZWFkLlwiKX1mdW5jdGlvbiBVKGEsYixjLGQsZSxmLGcsaCxrLG0pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6QWYrK30pO3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMubmFtZT1cIlwiO3RoaXMuaW1hZ2U9dm9pZCAwIT09YT9hOlUuREVGQVVMVF9JTUFHRTt0aGlzLm1pcG1hcHM9W107dGhpcy5tYXBwaW5nPXZvaWQgMCE9PWI/YjpVLkRFRkFVTFRfTUFQUElORzt0aGlzLndyYXBTPXZvaWQgMCE9PWM/YzoxMDAxO3RoaXMud3JhcFQ9dm9pZCAwIT09ZD9kOjEwMDE7dGhpcy5tYWdGaWx0ZXI9dm9pZCAwIT09XG4gICAgZT9lOjEwMDY7dGhpcy5taW5GaWx0ZXI9dm9pZCAwIT09Zj9mOjEwMDg7dGhpcy5hbmlzb3Ryb3B5PXZvaWQgMCE9PWs/azoxO3RoaXMuZm9ybWF0PXZvaWQgMCE9PWc/ZzoxMDIzO3RoaXMudHlwZT12b2lkIDAhPT1oP2g6MTAwOTt0aGlzLm9mZnNldD1uZXcgRCgwLDApO3RoaXMucmVwZWF0PW5ldyBEKDEsMSk7dGhpcy5jZW50ZXI9bmV3IEQoMCwwKTt0aGlzLnJvdGF0aW9uPTA7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSEwO3RoaXMubWF0cml4PW5ldyBtYTt0aGlzLmdlbmVyYXRlTWlwbWFwcz0hMDt0aGlzLnByZW11bHRpcGx5QWxwaGE9ITE7dGhpcy5mbGlwWT0hMDt0aGlzLnVucGFja0FsaWdubWVudD00O3RoaXMuZW5jb2Rpbmc9dm9pZCAwIT09bT9tOjNFMzt0aGlzLnZlcnNpb249MDt0aGlzLm9uVXBkYXRlPW51bGx9ZnVuY3Rpb24gYWEoYSxiLGMsZCl7dGhpcy54PWF8fDA7dGhpcy55PWJ8fDA7dGhpcy56PWN8fDA7dGhpcy53PXZvaWQgMCE9PWQ/ZDoxfWZ1bmN0aW9uIGtiKGEsXG4gICAgYixjKXt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLndpZHRoPWE7dGhpcy5oZWlnaHQ9Yjt0aGlzLnNjaXNzb3I9bmV3IGFhKDAsMCxhLGIpO3RoaXMuc2Npc3NvclRlc3Q9ITE7dGhpcy52aWV3cG9ydD1uZXcgYWEoMCwwLGEsYik7Yz1jfHx7fTt2b2lkIDA9PT1jLm1pbkZpbHRlciYmKGMubWluRmlsdGVyPTEwMDYpO3RoaXMudGV4dHVyZT1uZXcgVSh2b2lkIDAsdm9pZCAwLGMud3JhcFMsYy53cmFwVCxjLm1hZ0ZpbHRlcixjLm1pbkZpbHRlcixjLmZvcm1hdCxjLnR5cGUsYy5hbmlzb3Ryb3B5LGMuZW5jb2RpbmcpO3RoaXMuZGVwdGhCdWZmZXI9dm9pZCAwIT09Yy5kZXB0aEJ1ZmZlcj9jLmRlcHRoQnVmZmVyOiEwO3RoaXMuc3RlbmNpbEJ1ZmZlcj12b2lkIDAhPT1jLnN0ZW5jaWxCdWZmZXI/Yy5zdGVuY2lsQnVmZmVyOiEwO3RoaXMuZGVwdGhUZXh0dXJlPXZvaWQgMCE9PWMuZGVwdGhUZXh0dXJlP2MuZGVwdGhUZXh0dXJlOm51bGx9ZnVuY3Rpb24gSmIoYSxiLGMpe2tiLmNhbGwodGhpcyxcbiAgICBhLGIsYyk7dGhpcy5hY3RpdmVNaXBNYXBMZXZlbD10aGlzLmFjdGl2ZUN1YmVGYWNlPTB9ZnVuY3Rpb24gbGIoYSxiLGMsZCxlLGYsZyxoLGssbSxxLG4pe1UuY2FsbCh0aGlzLG51bGwsZixnLGgsayxtLGQsZSxxLG4pO3RoaXMuaW1hZ2U9e2RhdGE6YSx3aWR0aDpiLGhlaWdodDpjfTt0aGlzLm1hZ0ZpbHRlcj12b2lkIDAhPT1rP2s6MTAwMzt0aGlzLm1pbkZpbHRlcj12b2lkIDAhPT1tP206MTAwMzt0aGlzLmZsaXBZPXRoaXMuZ2VuZXJhdGVNaXBtYXBzPSExO3RoaXMudW5wYWNrQWxpZ25tZW50PTF9ZnVuY3Rpb24gZGIoYSxiLGMsZCxlLGYsZyxoLGssbSl7YT12b2lkIDAhPT1hP2E6W107VS5jYWxsKHRoaXMsYSx2b2lkIDAhPT1iP2I6MzAxLGMsZCxlLGYsZyxoLGssbSk7dGhpcy5mbGlwWT0hMX1mdW5jdGlvbiBLYihhLGIsYyl7dmFyIGQ9YVswXTtpZigwPj1kfHwwPGQpcmV0dXJuIGE7dmFyIGU9YipjLGY9SWVbZV07dm9pZCAwPT09ZiYmKGY9bmV3IEZsb2F0MzJBcnJheShlKSxcbiAgICBJZVtlXT1mKTtpZigwIT09Yilmb3IoZC50b0FycmF5KGYsMCksZD0xLGU9MDtkIT09YjsrK2QpZSs9YyxhW2RdLnRvQXJyYXkoZixlKTtyZXR1cm4gZn1mdW5jdGlvbiBKZShhLGIpe3ZhciBjPUtlW2JdO3ZvaWQgMD09PWMmJihjPW5ldyBJbnQzMkFycmF5KGIpLEtlW2JdPWMpO2Zvcih2YXIgZD0wO2QhPT1iOysrZCljW2RdPWEuYWxsb2NUZXh0dXJlVW5pdCgpO3JldHVybiBjfWZ1bmN0aW9uIEJmKGEsYil7YS51bmlmb3JtMWYodGhpcy5hZGRyLGIpfWZ1bmN0aW9uIENmKGEsYil7YS51bmlmb3JtMWkodGhpcy5hZGRyLGIpfWZ1bmN0aW9uIERmKGEsYil7dm9pZCAwPT09Yi54P2EudW5pZm9ybTJmdih0aGlzLmFkZHIsYik6YS51bmlmb3JtMmYodGhpcy5hZGRyLGIueCxiLnkpfWZ1bmN0aW9uIEVmKGEsYil7dm9pZCAwIT09Yi54P2EudW5pZm9ybTNmKHRoaXMuYWRkcixiLngsYi55LGIueik6dm9pZCAwIT09Yi5yP2EudW5pZm9ybTNmKHRoaXMuYWRkcixiLnIsYi5nLGIuYik6YS51bmlmb3JtM2Z2KHRoaXMuYWRkcixcbiAgICBiKX1mdW5jdGlvbiBGZihhLGIpe3ZvaWQgMD09PWIueD9hLnVuaWZvcm00ZnYodGhpcy5hZGRyLGIpOmEudW5pZm9ybTRmKHRoaXMuYWRkcixiLngsYi55LGIueixiLncpfWZ1bmN0aW9uIEdmKGEsYil7YS51bmlmb3JtTWF0cml4MmZ2KHRoaXMuYWRkciwhMSxiLmVsZW1lbnRzfHxiKX1mdW5jdGlvbiBIZihhLGIpe3ZvaWQgMD09PWIuZWxlbWVudHM/YS51bmlmb3JtTWF0cml4M2Z2KHRoaXMuYWRkciwhMSxiKTooTGUuc2V0KGIuZWxlbWVudHMpLGEudW5pZm9ybU1hdHJpeDNmdih0aGlzLmFkZHIsITEsTGUpKX1mdW5jdGlvbiBJZihhLGIpe3ZvaWQgMD09PWIuZWxlbWVudHM/YS51bmlmb3JtTWF0cml4NGZ2KHRoaXMuYWRkciwhMSxiKTooTWUuc2V0KGIuZWxlbWVudHMpLGEudW5pZm9ybU1hdHJpeDRmdih0aGlzLmFkZHIsITEsTWUpKX1mdW5jdGlvbiBKZihhLGIsYyl7dmFyIGQ9Yy5hbGxvY1RleHR1cmVVbml0KCk7YS51bmlmb3JtMWkodGhpcy5hZGRyLGQpO2Muc2V0VGV4dHVyZTJEKGJ8fFxuICAgIE5lLGQpfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1jLmFsbG9jVGV4dHVyZVVuaXQoKTthLnVuaWZvcm0xaSh0aGlzLmFkZHIsZCk7Yy5zZXRUZXh0dXJlQ3ViZShifHxPZSxkKX1mdW5jdGlvbiBQZShhLGIpe2EudW5pZm9ybTJpdih0aGlzLmFkZHIsYil9ZnVuY3Rpb24gUWUoYSxiKXthLnVuaWZvcm0zaXYodGhpcy5hZGRyLGIpfWZ1bmN0aW9uIFJlKGEsYil7YS51bmlmb3JtNGl2KHRoaXMuYWRkcixiKX1mdW5jdGlvbiBMZihhKXtzd2l0Y2goYSl7Y2FzZSA1MTI2OnJldHVybiBCZjtjYXNlIDM1NjY0OnJldHVybiBEZjtjYXNlIDM1NjY1OnJldHVybiBFZjtjYXNlIDM1NjY2OnJldHVybiBGZjtjYXNlIDM1Njc0OnJldHVybiBHZjtjYXNlIDM1Njc1OnJldHVybiBIZjtjYXNlIDM1Njc2OnJldHVybiBJZjtjYXNlIDM1Njc4OmNhc2UgMzYxOTg6cmV0dXJuIEpmO2Nhc2UgMzU2ODA6cmV0dXJuIEtmO2Nhc2UgNTEyNDpjYXNlIDM1NjcwOnJldHVybiBDZjtjYXNlIDM1NjY3OmNhc2UgMzU2NzE6cmV0dXJuIFBlO1xuICAgIGNhc2UgMzU2Njg6Y2FzZSAzNTY3MjpyZXR1cm4gUWU7Y2FzZSAzNTY2OTpjYXNlIDM1NjczOnJldHVybiBSZX19ZnVuY3Rpb24gTWYoYSxiKXthLnVuaWZvcm0xZnYodGhpcy5hZGRyLGIpfWZ1bmN0aW9uIE5mKGEsYil7YS51bmlmb3JtMWl2KHRoaXMuYWRkcixiKX1mdW5jdGlvbiBPZihhLGIpe2EudW5pZm9ybTJmdih0aGlzLmFkZHIsS2IoYix0aGlzLnNpemUsMikpfWZ1bmN0aW9uIFBmKGEsYil7YS51bmlmb3JtM2Z2KHRoaXMuYWRkcixLYihiLHRoaXMuc2l6ZSwzKSl9ZnVuY3Rpb24gUWYoYSxiKXthLnVuaWZvcm00ZnYodGhpcy5hZGRyLEtiKGIsdGhpcy5zaXplLDQpKX1mdW5jdGlvbiBSZihhLGIpe2EudW5pZm9ybU1hdHJpeDJmdih0aGlzLmFkZHIsITEsS2IoYix0aGlzLnNpemUsNCkpfWZ1bmN0aW9uIFNmKGEsYil7YS51bmlmb3JtTWF0cml4M2Z2KHRoaXMuYWRkciwhMSxLYihiLHRoaXMuc2l6ZSw5KSl9ZnVuY3Rpb24gVGYoYSxiKXthLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5hZGRyLFxuICAgICExLEtiKGIsdGhpcy5zaXplLDE2KSl9ZnVuY3Rpb24gVWYoYSxiLGMpe3ZhciBkPWIubGVuZ3RoLGU9SmUoYyxkKTthLnVuaWZvcm0xaXYodGhpcy5hZGRyLGUpO2ZvcihhPTA7YSE9PWQ7KythKWMuc2V0VGV4dHVyZTJEKGJbYV18fE5lLGVbYV0pfWZ1bmN0aW9uIFZmKGEsYixjKXt2YXIgZD1iLmxlbmd0aCxlPUplKGMsZCk7YS51bmlmb3JtMWl2KHRoaXMuYWRkcixlKTtmb3IoYT0wO2EhPT1kOysrYSljLnNldFRleHR1cmVDdWJlKGJbYV18fE9lLGVbYV0pfWZ1bmN0aW9uIFdmKGEpe3N3aXRjaChhKXtjYXNlIDUxMjY6cmV0dXJuIE1mO2Nhc2UgMzU2NjQ6cmV0dXJuIE9mO2Nhc2UgMzU2NjU6cmV0dXJuIFBmO2Nhc2UgMzU2NjY6cmV0dXJuIFFmO2Nhc2UgMzU2NzQ6cmV0dXJuIFJmO2Nhc2UgMzU2NzU6cmV0dXJuIFNmO2Nhc2UgMzU2NzY6cmV0dXJuIFRmO2Nhc2UgMzU2Nzg6cmV0dXJuIFVmO2Nhc2UgMzU2ODA6cmV0dXJuIFZmO2Nhc2UgNTEyNDpjYXNlIDM1NjcwOnJldHVybiBOZjtcbiAgICBjYXNlIDM1NjY3OmNhc2UgMzU2NzE6cmV0dXJuIFBlO2Nhc2UgMzU2Njg6Y2FzZSAzNTY3MjpyZXR1cm4gUWU7Y2FzZSAzNTY2OTpjYXNlIDM1NjczOnJldHVybiBSZX19ZnVuY3Rpb24gWGYoYSxiLGMpe3RoaXMuaWQ9YTt0aGlzLmFkZHI9Yzt0aGlzLnNldFZhbHVlPUxmKGIudHlwZSl9ZnVuY3Rpb24gWWYoYSxiLGMpe3RoaXMuaWQ9YTt0aGlzLmFkZHI9Yzt0aGlzLnNpemU9Yi5zaXplO3RoaXMuc2V0VmFsdWU9V2YoYi50eXBlKX1mdW5jdGlvbiBTZShhKXt0aGlzLmlkPWE7dGhpcy5zZXE9W107dGhpcy5tYXA9e319ZnVuY3Rpb24gbWIoYSxiLGMpe3RoaXMuc2VxPVtdO3RoaXMubWFwPXt9O3RoaXMucmVuZGVyZXI9YztjPWEuZ2V0UHJvZ3JhbVBhcmFtZXRlcihiLGEuQUNUSVZFX1VOSUZPUk1TKTtmb3IodmFyIGQ9MDtkPGM7KytkKXt2YXIgZT1hLmdldEFjdGl2ZVVuaWZvcm0oYixkKSxmPWEuZ2V0VW5pZm9ybUxvY2F0aW9uKGIsZS5uYW1lKSxnPXRoaXMsaD1lLm5hbWUsaz1cbiAgICBoLmxlbmd0aDtmb3IoVmQubGFzdEluZGV4PTA7Oyl7dmFyIG09VmQuZXhlYyhoKSxxPVZkLmxhc3RJbmRleCxuPW1bMV0sdT1tWzNdO1wiXVwiPT09bVsyXSYmKG58PTApO2lmKHZvaWQgMD09PXV8fFwiW1wiPT09dSYmcSsyPT09ayl7aD1nO2U9dm9pZCAwPT09dT9uZXcgWGYobixlLGYpOm5ldyBZZihuLGUsZik7aC5zZXEucHVzaChlKTtoLm1hcFtlLmlkXT1lO2JyZWFrfWVsc2UgdT1nLm1hcFtuXSx2b2lkIDA9PT11JiYodT1uZXcgU2Uobiksbj1nLGc9dSxuLnNlcS5wdXNoKGcpLG4ubWFwW2cuaWRdPWcpLGc9dX19fWZ1bmN0aW9uIEgoYSxiLGMpe3JldHVybiB2b2lkIDA9PT1iJiZ2b2lkIDA9PT1jP3RoaXMuc2V0KGEpOnRoaXMuc2V0UkdCKGEsYixjKX1mdW5jdGlvbiBvZChhLGIpe3RoaXMubWluPXZvaWQgMCE9PWE/YTpuZXcgRChJbmZpbml0eSxJbmZpbml0eSk7dGhpcy5tYXg9dm9pZCAwIT09Yj9iOm5ldyBEKC1JbmZpbml0eSwtSW5maW5pdHkpfWZ1bmN0aW9uIFpmKGEsYixjLFxuICAgIGQsZSl7dmFyIGYsZyxoLGssbSxxLG4sdSxyLHQsbCx3LHoseSxJLEE7dGhpcy5yZW5kZXI9ZnVuY3Rpb24oYSx2LERhLG5hKXtpZigwIT09YS5sZW5ndGgpe3Y9bmV3IHA7dmFyIEo9bmEudy9uYS56LEhhPS41Km5hLnoscGQ9LjUqbmEudyxsYT0xNi9uYS53LFM9bmV3IEQobGEqSixsYSksdmE9bmV3IHAoMSwxLDApLE49bmV3IEQoMSwxKSxCPW5ldyBvZDtCLm1pbi5zZXQobmEueCxuYS55KTtCLm1heC5zZXQobmEueCsobmEuei0xNiksbmEueSsobmEudy0xNikpO2lmKHZvaWQgMD09PXkpe3ZhciBsYT1uZXcgRmxvYXQzMkFycmF5KFstMSwtMSwwLDAsMSwtMSwxLDAsMSwxLDEsMSwtMSwxLDAsMV0pLHg9bmV3IFVpbnQxNkFycmF5KFswLDEsMiwwLDIsM10pO2w9Yi5jcmVhdGVCdWZmZXIoKTt3PWIuY3JlYXRlQnVmZmVyKCk7Yi5iaW5kQnVmZmVyKGIuQVJSQVlfQlVGRkVSLGwpO2IuYnVmZmVyRGF0YShiLkFSUkFZX0JVRkZFUixsYSxiLlNUQVRJQ19EUkFXKTtiLmJpbmRCdWZmZXIoYi5FTEVNRU5UX0FSUkFZX0JVRkZFUixcbiAgICB3KTtiLmJ1ZmZlckRhdGEoYi5FTEVNRU5UX0FSUkFZX0JVRkZFUix4LGIuU1RBVElDX0RSQVcpO0k9Yi5jcmVhdGVUZXh0dXJlKCk7QT1iLmNyZWF0ZVRleHR1cmUoKTtjLmJpbmRUZXh0dXJlKGIuVEVYVFVSRV8yRCxJKTtiLnRleEltYWdlMkQoYi5URVhUVVJFXzJELDAsYi5SR0IsMTYsMTYsMCxiLlJHQixiLlVOU0lHTkVEX0JZVEUsbnVsbCk7Yi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCxiLlRFWFRVUkVfV1JBUF9TLGIuQ0xBTVBfVE9fRURHRSk7Yi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCxiLlRFWFRVUkVfV1JBUF9ULGIuQ0xBTVBfVE9fRURHRSk7Yi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCxiLlRFWFRVUkVfTUFHX0ZJTFRFUixiLk5FQVJFU1QpO2IudGV4UGFyYW1ldGVyaShiLlRFWFRVUkVfMkQsYi5URVhUVVJFX01JTl9GSUxURVIsYi5ORUFSRVNUKTtjLmJpbmRUZXh0dXJlKGIuVEVYVFVSRV8yRCxBKTtiLnRleEltYWdlMkQoYi5URVhUVVJFXzJELDAsXG4gICAgYi5SR0JBLDE2LDE2LDAsYi5SR0JBLGIuVU5TSUdORURfQllURSxudWxsKTtiLnRleFBhcmFtZXRlcmkoYi5URVhUVVJFXzJELGIuVEVYVFVSRV9XUkFQX1MsYi5DTEFNUF9UT19FREdFKTtiLnRleFBhcmFtZXRlcmkoYi5URVhUVVJFXzJELGIuVEVYVFVSRV9XUkFQX1QsYi5DTEFNUF9UT19FREdFKTtiLnRleFBhcmFtZXRlcmkoYi5URVhUVVJFXzJELGIuVEVYVFVSRV9NQUdfRklMVEVSLGIuTkVBUkVTVCk7Yi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCxiLlRFWFRVUkVfTUlOX0ZJTFRFUixiLk5FQVJFU1QpO3ZhciBsYT16PXt2ZXJ0ZXhTaGFkZXI6XCJ1bmlmb3JtIGxvd3AgaW50IHJlbmRlclR5cGU7XFxudW5pZm9ybSB2ZWMzIHNjcmVlblBvc2l0aW9uO1xcbnVuaWZvcm0gdmVjMiBzY2FsZTtcXG51bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG9jY2x1c2lvbk1hcDtcXG5hdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiB1djtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZhcnlpbmcgZmxvYXQgdlZpc2liaWxpdHk7XFxudm9pZCBtYWluKCkge1xcblxcdHZVViA9IHV2O1xcblxcdHZlYzIgcG9zID0gcG9zaXRpb247XFxuXFx0aWYgKCByZW5kZXJUeXBlID09IDIgKSB7XFxuXFx0XFx0dmVjNCB2aXNpYmlsaXR5ID0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuMSwgMC4xICkgKTtcXG5cXHRcXHR2aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuMSApICk7XFxuXFx0XFx0dmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC45LCAwLjEgKSApO1xcblxcdFxcdHZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuOSwgMC41ICkgKTtcXG5cXHRcXHR2aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuOSApICk7XFxuXFx0XFx0dmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC41LCAwLjkgKSApO1xcblxcdFxcdHZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuMSwgMC45ICkgKTtcXG5cXHRcXHR2aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuNSApICk7XFxuXFx0XFx0dmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC41LCAwLjUgKSApO1xcblxcdFxcdHZWaXNpYmlsaXR5ID0gICAgICAgIHZpc2liaWxpdHkuciAvIDkuMDtcXG5cXHRcXHR2VmlzaWJpbGl0eSAqPSAxLjAgLSB2aXNpYmlsaXR5LmcgLyA5LjA7XFxuXFx0XFx0dlZpc2liaWxpdHkgKj0gICAgICAgdmlzaWJpbGl0eS5iIC8gOS4wO1xcblxcdFxcdHZWaXNpYmlsaXR5ICo9IDEuMCAtIHZpc2liaWxpdHkuYSAvIDkuMDtcXG5cXHRcXHRwb3MueCA9IGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnggLSBzaW4oIHJvdGF0aW9uICkgKiBwb3NpdGlvbi55O1xcblxcdFxcdHBvcy55ID0gc2luKCByb3RhdGlvbiApICogcG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnk7XFxuXFx0fVxcblxcdGdsX1Bvc2l0aW9uID0gdmVjNCggKCBwb3MgKiBzY2FsZSArIHNjcmVlblBvc2l0aW9uLnh5ICkueHksIHNjcmVlblBvc2l0aW9uLnosIDEuMCApO1xcbn1cIixcbiAgICBmcmFnbWVudFNoYWRlcjpcInVuaWZvcm0gbG93cCBpbnQgcmVuZGVyVHlwZTtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gdmVjMyBjb2xvcjtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZhcnlpbmcgZmxvYXQgdlZpc2liaWxpdHk7XFxudm9pZCBtYWluKCkge1xcblxcdGlmICggcmVuZGVyVHlwZSA9PSAwICkge1xcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIDEuMCwgMC4wLCAxLjAsIDAuMCApO1xcblxcdH0gZWxzZSBpZiAoIHJlbmRlclR5cGUgPT0gMSApIHtcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7XFxuXFx0fSBlbHNlIHtcXG5cXHRcXHR2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7XFxuXFx0XFx0dGV4dHVyZS5hICo9IG9wYWNpdHkgKiB2VmlzaWJpbGl0eTtcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcblxcdFxcdGdsX0ZyYWdDb2xvci5yZ2IgKj0gY29sb3I7XFxuXFx0fVxcbn1cIn0seD1iLmNyZWF0ZVByb2dyYW0oKSxcbiAgICBFPWIuY3JlYXRlU2hhZGVyKGIuRlJBR01FTlRfU0hBREVSKSxWPWIuY3JlYXRlU2hhZGVyKGIuVkVSVEVYX1NIQURFUiksSD1cInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBmbG9hdDtcXG5cIjtiLnNoYWRlclNvdXJjZShFLEgrbGEuZnJhZ21lbnRTaGFkZXIpO2Iuc2hhZGVyU291cmNlKFYsSCtsYS52ZXJ0ZXhTaGFkZXIpO2IuY29tcGlsZVNoYWRlcihFKTtiLmNvbXBpbGVTaGFkZXIoVik7Yi5hdHRhY2hTaGFkZXIoeCxFKTtiLmF0dGFjaFNoYWRlcih4LFYpO2IubGlua1Byb2dyYW0oeCk7eT14O3I9Yi5nZXRBdHRyaWJMb2NhdGlvbih5LFwicG9zaXRpb25cIik7dD1iLmdldEF0dHJpYkxvY2F0aW9uKHksXCJ1dlwiKTtmPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJyZW5kZXJUeXBlXCIpO2c9Yi5nZXRVbmlmb3JtTG9jYXRpb24oeSxcIm1hcFwiKTtoPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJvY2NsdXNpb25NYXBcIik7az1iLmdldFVuaWZvcm1Mb2NhdGlvbih5LFwib3BhY2l0eVwiKTttPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXG4gICAgXCJjb2xvclwiKTtxPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJzY2FsZVwiKTtuPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJyb3RhdGlvblwiKTt1PWIuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJzY3JlZW5Qb3NpdGlvblwiKX1jLnVzZVByb2dyYW0oeSk7Yy5pbml0QXR0cmlidXRlcygpO2MuZW5hYmxlQXR0cmlidXRlKHIpO2MuZW5hYmxlQXR0cmlidXRlKHQpO2MuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtiLnVuaWZvcm0xaShoLDApO2IudW5pZm9ybTFpKGcsMSk7Yi5iaW5kQnVmZmVyKGIuQVJSQVlfQlVGRkVSLGwpO2IudmVydGV4QXR0cmliUG9pbnRlcihyLDIsYi5GTE9BVCwhMSwxNiwwKTtiLnZlcnRleEF0dHJpYlBvaW50ZXIodCwyLGIuRkxPQVQsITEsMTYsOCk7Yi5iaW5kQnVmZmVyKGIuRUxFTUVOVF9BUlJBWV9CVUZGRVIsdyk7Yy5kaXNhYmxlKGIuQ1VMTF9GQUNFKTtjLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayghMSk7eD0wO2ZvcihFPWEubGVuZ3RoO3g8RTt4KyspaWYobGE9XG4gICAgMTYvbmEudyxTLnNldChsYSpKLGxhKSxWPWFbeF0sdi5zZXQoVi5tYXRyaXhXb3JsZC5lbGVtZW50c1sxMl0sVi5tYXRyaXhXb3JsZC5lbGVtZW50c1sxM10sVi5tYXRyaXhXb3JsZC5lbGVtZW50c1sxNF0pLHYuYXBwbHlNYXRyaXg0KERhLm1hdHJpeFdvcmxkSW52ZXJzZSksdi5hcHBseU1hdHJpeDQoRGEucHJvamVjdGlvbk1hdHJpeCksdmEuY29weSh2KSxOLng9bmEueCt2YS54KkhhK0hhLTgsTi55PW5hLnkrdmEueSpwZCtwZC04LCEwPT09Qi5jb250YWluc1BvaW50KE4pKXtjLmFjdGl2ZVRleHR1cmUoYi5URVhUVVJFMCk7Yy5iaW5kVGV4dHVyZShiLlRFWFRVUkVfMkQsbnVsbCk7Yy5hY3RpdmVUZXh0dXJlKGIuVEVYVFVSRTEpO2MuYmluZFRleHR1cmUoYi5URVhUVVJFXzJELEkpO2IuY29weVRleEltYWdlMkQoYi5URVhUVVJFXzJELDAsYi5SR0IsTi54LE4ueSwxNiwxNiwwKTtiLnVuaWZvcm0xaShmLDApO2IudW5pZm9ybTJmKHEsUy54LFMueSk7Yi51bmlmb3JtM2YodSx2YS54LFxuICAgIHZhLnksdmEueik7Yy5kaXNhYmxlKGIuQkxFTkQpO2MuZW5hYmxlKGIuREVQVEhfVEVTVCk7Yi5kcmF3RWxlbWVudHMoYi5UUklBTkdMRVMsNixiLlVOU0lHTkVEX1NIT1JULDApO2MuYWN0aXZlVGV4dHVyZShiLlRFWFRVUkUwKTtjLmJpbmRUZXh0dXJlKGIuVEVYVFVSRV8yRCxBKTtiLmNvcHlUZXhJbWFnZTJEKGIuVEVYVFVSRV8yRCwwLGIuUkdCQSxOLngsTi55LDE2LDE2LDApO2IudW5pZm9ybTFpKGYsMSk7Yy5kaXNhYmxlKGIuREVQVEhfVEVTVCk7Yy5hY3RpdmVUZXh0dXJlKGIuVEVYVFVSRTEpO2MuYmluZFRleHR1cmUoYi5URVhUVVJFXzJELEkpO2IuZHJhd0VsZW1lbnRzKGIuVFJJQU5HTEVTLDYsYi5VTlNJR05FRF9TSE9SVCwwKTtWLnBvc2l0aW9uU2NyZWVuLmNvcHkodmEpO1YuY3VzdG9tVXBkYXRlQ2FsbGJhY2s/Vi5jdXN0b21VcGRhdGVDYWxsYmFjayhWKTpWLnVwZGF0ZUxlbnNGbGFyZXMoKTtiLnVuaWZvcm0xaShmLDIpO2MuZW5hYmxlKGIuQkxFTkQpO2Zvcih2YXIgSD1cbiAgICAwLEs9Vi5sZW5zRmxhcmVzLmxlbmd0aDtIPEs7SCsrKXt2YXIgQz1WLmxlbnNGbGFyZXNbSF07LjAwMTxDLm9wYWNpdHkmJi4wMDE8Qy5zY2FsZSYmKHZhLng9Qy54LHZhLnk9Qy55LHZhLno9Qy56LGxhPUMuc2l6ZSpDLnNjYWxlL25hLncsUy54PWxhKkosUy55PWxhLGIudW5pZm9ybTNmKHUsdmEueCx2YS55LHZhLnopLGIudW5pZm9ybTJmKHEsUy54LFMueSksYi51bmlmb3JtMWYobixDLnJvdGF0aW9uKSxiLnVuaWZvcm0xZihrLEMub3BhY2l0eSksYi51bmlmb3JtM2YobSxDLmNvbG9yLnIsQy5jb2xvci5nLEMuY29sb3IuYiksYy5zZXRCbGVuZGluZyhDLmJsZW5kaW5nLEMuYmxlbmRFcXVhdGlvbixDLmJsZW5kU3JjLEMuYmxlbmREc3QpLGQuc2V0VGV4dHVyZTJEKEMudGV4dHVyZSwxKSxiLmRyYXdFbGVtZW50cyhiLlRSSUFOR0xFUyw2LGIuVU5TSUdORURfU0hPUlQsMCkpfX1jLmVuYWJsZShiLkNVTExfRkFDRSk7Yy5lbmFibGUoYi5ERVBUSF9URVNUKTtjLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayghMCk7XG4gICAgYy5yZXNldCgpfX19ZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYsZyxoLGspe1UuY2FsbCh0aGlzLGEsYixjLGQsZSxmLGcsaCxrKTt0aGlzLm5lZWRzVXBkYXRlPSEwfWZ1bmN0aW9uICRmKGEsYixjLGQsZSl7dmFyIGYsZyxoLGssbSxxLG4sdSxyLHQsbCx3LHoseSxJLEEsSjtmdW5jdGlvbiBIYShhLGIpe3JldHVybiBhLnJlbmRlck9yZGVyIT09Yi5yZW5kZXJPcmRlcj9hLnJlbmRlck9yZGVyLWIucmVuZGVyT3JkZXI6YS56IT09Yi56P2Iuei1hLno6Yi5pZC1hLmlkfXZhciBEYSxuYSxvYSxUZSxwZD1uZXcgcCxsYT1uZXcgaGEsUz1uZXcgcDt0aGlzLnJlbmRlcj1mdW5jdGlvbih2LHAsRCl7aWYoMCE9PXYubGVuZ3RoKXtpZih2b2lkIDA9PT1vYSl7dmFyIHg9bmV3IEZsb2F0MzJBcnJheShbLS41LC0uNSwwLDAsLjUsLS41LDEsMCwuNSwuNSwxLDEsLS41LC41LDAsMV0pLE49bmV3IFVpbnQxNkFycmF5KFswLDEsMiwwLDIsM10pO0RhPWIuY3JlYXRlQnVmZmVyKCk7bmE9Yi5jcmVhdGVCdWZmZXIoKTtcbiAgICBiLmJpbmRCdWZmZXIoYi5BUlJBWV9CVUZGRVIsRGEpO2IuYnVmZmVyRGF0YShiLkFSUkFZX0JVRkZFUix4LGIuU1RBVElDX0RSQVcpO2IuYmluZEJ1ZmZlcihiLkVMRU1FTlRfQVJSQVlfQlVGRkVSLG5hKTtiLmJ1ZmZlckRhdGEoYi5FTEVNRU5UX0FSUkFZX0JVRkZFUixOLGIuU1RBVElDX0RSQVcpO3g9Yi5jcmVhdGVQcm9ncmFtKCk7Tj1iLmNyZWF0ZVNoYWRlcihiLlZFUlRFWF9TSEFERVIpO3ZhciBCPWIuY3JlYXRlU2hhZGVyKGIuRlJBR01FTlRfU0hBREVSKTtiLnNoYWRlclNvdXJjZShOLFtcInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBmbG9hdDtcIixcIiNkZWZpbmUgU0hBREVSX05BTUUgU3ByaXRlTWF0ZXJpYWxcXG51bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcbnVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIHNjYWxlO1xcbnVuaWZvcm0gdmVjMiB1dk9mZnNldDtcXG51bmlmb3JtIHZlYzIgdXZTY2FsZTtcXG5hdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiB1djtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7XFxudm9pZCBtYWluKCkge1xcblxcdHZVViA9IHV2T2Zmc2V0ICsgdXYgKiB1dlNjYWxlO1xcblxcdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gcG9zaXRpb24gKiBzY2FsZTtcXG5cXHR2ZWMyIHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRyb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XFxuXFx0cm90YXRlZFBvc2l0aW9uLnkgPSBzaW4oIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdHZlYzQgbXZQb3NpdGlvbjtcXG5cXHRtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggMC4wLCAwLjAsIDAuMCwgMS4wICk7XFxuXFx0bXZQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cXHRmb2dEZXB0aCA9IC0gbXZQb3NpdGlvbi56O1xcbn1cIl0uam9pbihcIlxcblwiKSk7XG4gICAgYi5zaGFkZXJTb3VyY2UoQixbXCJwcmVjaXNpb24gXCIrZS5wcmVjaXNpb24rXCIgZmxvYXQ7XCIsXCIjZGVmaW5lIFNIQURFUl9OQU1FIFNwcml0ZU1hdGVyaWFsXFxudW5pZm9ybSB2ZWMzIGNvbG9yO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBpbnQgZm9nVHlwZTtcXG51bmlmb3JtIHZlYzMgZm9nQ29sb3I7XFxudW5pZm9ybSBmbG9hdCBmb2dEZW5zaXR5O1xcbnVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG51bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG51bmlmb3JtIGZsb2F0IGFscGhhVGVzdDtcXG52YXJ5aW5nIHZlYzIgdlVWO1xcbnZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCggbWFwLCB2VVYgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciAqIHRleHR1cmUueHl6LCB0ZXh0dXJlLmEgKiBvcGFjaXR5ICk7XFxuXFx0aWYgKCBnbF9GcmFnQ29sb3IuYSA8IGFscGhhVGVzdCApIGRpc2NhcmQ7XFxuXFx0aWYgKCBmb2dUeXBlID4gMCApIHtcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSAwLjA7XFxuXFx0XFx0aWYgKCBmb2dUeXBlID09IDEgKSB7XFxuXFx0XFx0XFx0Zm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBmb2dEZXB0aCApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0Y29uc3QgZmxvYXQgTE9HMiA9IDEuNDQyNjk1O1xcblxcdFxcdFxcdGZvZ0ZhY3RvciA9IGV4cDIoIC0gZm9nRGVuc2l0eSAqIGZvZ0RlbnNpdHkgKiBmb2dEZXB0aCAqIGZvZ0RlcHRoICogTE9HMiApO1xcblxcdFxcdFxcdGZvZ0ZhY3RvciA9IDEuMCAtIGNsYW1wKCBmb2dGYWN0b3IsIDAuMCwgMS4wICk7XFxuXFx0XFx0fVxcblxcdFxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgoIGdsX0ZyYWdDb2xvci5yZ2IsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG5cXHR9XFxufVwiXS5qb2luKFwiXFxuXCIpKTtcbiAgICBiLmNvbXBpbGVTaGFkZXIoTik7Yi5jb21waWxlU2hhZGVyKEIpO2IuYXR0YWNoU2hhZGVyKHgsTik7Yi5hdHRhY2hTaGFkZXIoeCxCKTtiLmxpbmtQcm9ncmFtKHgpO29hPXg7QT1iLmdldEF0dHJpYkxvY2F0aW9uKG9hLFwicG9zaXRpb25cIik7Sj1iLmdldEF0dHJpYkxvY2F0aW9uKG9hLFwidXZcIik7Zj1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcInV2T2Zmc2V0XCIpO2c9Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJ1dlNjYWxlXCIpO2g9Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJyb3RhdGlvblwiKTtrPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwic2NhbGVcIik7bT1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcImNvbG9yXCIpO3E9Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJtYXBcIik7bj1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcIm9wYWNpdHlcIik7dT1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcIm1vZGVsVmlld01hdHJpeFwiKTtyPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwicHJvamVjdGlvbk1hdHJpeFwiKTtcbiAgICB0PWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwiZm9nVHlwZVwiKTtsPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwiZm9nRGVuc2l0eVwiKTt3PWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwiZm9nTmVhclwiKTt6PWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwiZm9nRmFyXCIpO3k9Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJmb2dDb2xvclwiKTtiLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcImZvZ0RlcHRoXCIpO0k9Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJhbHBoYVRlc3RcIik7eD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXCJjYW52YXNcIik7eC53aWR0aD04O3guaGVpZ2h0PTg7Tj14LmdldENvbnRleHQoXCIyZFwiKTtOLmZpbGxTdHlsZT1cIndoaXRlXCI7Ti5maWxsUmVjdCgwLDAsOCw4KTtUZT1uZXcgdGMoeCl9Yy51c2VQcm9ncmFtKG9hKTtjLmluaXRBdHRyaWJ1dGVzKCk7Yy5lbmFibGVBdHRyaWJ1dGUoQSk7Yy5lbmFibGVBdHRyaWJ1dGUoSik7XG4gICAgYy5kaXNhYmxlVW51c2VkQXR0cmlidXRlcygpO2MuZGlzYWJsZShiLkNVTExfRkFDRSk7Yy5lbmFibGUoYi5CTEVORCk7Yi5iaW5kQnVmZmVyKGIuQVJSQVlfQlVGRkVSLERhKTtiLnZlcnRleEF0dHJpYlBvaW50ZXIoQSwyLGIuRkxPQVQsITEsMTYsMCk7Yi52ZXJ0ZXhBdHRyaWJQb2ludGVyKEosMixiLkZMT0FULCExLDE2LDgpO2IuYmluZEJ1ZmZlcihiLkVMRU1FTlRfQVJSQVlfQlVGRkVSLG5hKTtiLnVuaWZvcm1NYXRyaXg0ZnYociwhMSxELnByb2plY3Rpb25NYXRyaXguZWxlbWVudHMpO2MuYWN0aXZlVGV4dHVyZShiLlRFWFRVUkUwKTtiLnVuaWZvcm0xaShxLDApO049eD0wOyhCPXAuZm9nKT8oYi51bmlmb3JtM2YoeSxCLmNvbG9yLnIsQi5jb2xvci5nLEIuY29sb3IuYiksQi5pc0ZvZz8oYi51bmlmb3JtMWYodyxCLm5lYXIpLGIudW5pZm9ybTFmKHosQi5mYXIpLGIudW5pZm9ybTFpKHQsMSksTj14PTEpOkIuaXNGb2dFeHAyJiYoYi51bmlmb3JtMWYobCxCLmRlbnNpdHkpLFxuICAgIGIudW5pZm9ybTFpKHQsMiksTj14PTIpKTooYi51bmlmb3JtMWkodCwwKSxOPXg9MCk7Zm9yKHZhciBDPTAsRT12Lmxlbmd0aDtDPEU7QysrKUI9dltDXSxCLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKEQubWF0cml4V29ybGRJbnZlcnNlLEIubWF0cml4V29ybGQpLEIuej0tQi5tb2RlbFZpZXdNYXRyaXguZWxlbWVudHNbMTRdO3Yuc29ydChIYSk7Zm9yKHZhciB2YT1bXSxDPTAsRT12Lmxlbmd0aDtDPEU7QysrKXtCPXZbQ107dmFyIEc9Qi5tYXRlcmlhbDtpZighMSE9PUcudmlzaWJsZSl7Qi5vbkJlZm9yZVJlbmRlcihhLHAsRCx2b2lkIDAsRyx2b2lkIDApO2IudW5pZm9ybTFmKEksRy5hbHBoYVRlc3QpO2IudW5pZm9ybU1hdHJpeDRmdih1LCExLEIubW9kZWxWaWV3TWF0cml4LmVsZW1lbnRzKTtCLm1hdHJpeFdvcmxkLmRlY29tcG9zZShwZCxsYSxTKTt2YVswXT1TLng7dmFbMV09Uy55O3ZhciBxZD0wO3AuZm9nJiZHLmZvZyYmKHFkPU4pO3ghPT1xZCYmKGIudW5pZm9ybTFpKHQsXG4gICAgcWQpLHg9cWQpO251bGwhPT1HLm1hcD8oYi51bmlmb3JtMmYoZixHLm1hcC5vZmZzZXQueCxHLm1hcC5vZmZzZXQueSksYi51bmlmb3JtMmYoZyxHLm1hcC5yZXBlYXQueCxHLm1hcC5yZXBlYXQueSkpOihiLnVuaWZvcm0yZihmLDAsMCksYi51bmlmb3JtMmYoZywxLDEpKTtiLnVuaWZvcm0xZihuLEcub3BhY2l0eSk7Yi51bmlmb3JtM2YobSxHLmNvbG9yLnIsRy5jb2xvci5nLEcuY29sb3IuYik7Yi51bmlmb3JtMWYoaCxHLnJvdGF0aW9uKTtiLnVuaWZvcm0yZnYoayx2YSk7Yy5zZXRCbGVuZGluZyhHLmJsZW5kaW5nLEcuYmxlbmRFcXVhdGlvbixHLmJsZW5kU3JjLEcuYmxlbmREc3QsRy5ibGVuZEVxdWF0aW9uQWxwaGEsRy5ibGVuZFNyY0FscGhhLEcuYmxlbmREc3RBbHBoYSxHLnByZW11bHRpcGxpZWRBbHBoYSk7Yy5idWZmZXJzLmRlcHRoLnNldFRlc3QoRy5kZXB0aFRlc3QpO2MuYnVmZmVycy5kZXB0aC5zZXRNYXNrKEcuZGVwdGhXcml0ZSk7Yy5idWZmZXJzLmNvbG9yLnNldE1hc2soRy5jb2xvcldyaXRlKTtcbiAgICBkLnNldFRleHR1cmUyRChHLm1hcHx8VGUsMCk7Yi5kcmF3RWxlbWVudHMoYi5UUklBTkdMRVMsNixiLlVOU0lHTkVEX1NIT1JULDApO0Iub25BZnRlclJlbmRlcihhLHAsRCx2b2lkIDAsRyx2b2lkIDApfX1jLmVuYWJsZShiLkNVTExfRkFDRSk7Yy5yZXNldCgpfX19ZnVuY3Rpb24gUCgpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6YWcrK30pO3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMubmFtZT1cIlwiO3RoaXMudHlwZT1cIk1hdGVyaWFsXCI7dGhpcy5saWdodHM9dGhpcy5mb2c9ITA7dGhpcy5ibGVuZGluZz0xO3RoaXMuc2lkZT0wO3RoaXMuZmxhdFNoYWRpbmc9ITE7dGhpcy52ZXJ0ZXhDb2xvcnM9MDt0aGlzLm9wYWNpdHk9MTt0aGlzLnRyYW5zcGFyZW50PSExO3RoaXMuYmxlbmRTcmM9MjA0O3RoaXMuYmxlbmREc3Q9MjA1O3RoaXMuYmxlbmRFcXVhdGlvbj0xMDA7dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGE9dGhpcy5ibGVuZERzdEFscGhhPXRoaXMuYmxlbmRTcmNBbHBoYT1cbiAgICBudWxsO3RoaXMuZGVwdGhGdW5jPTM7dGhpcy5kZXB0aFdyaXRlPXRoaXMuZGVwdGhUZXN0PSEwO3RoaXMuY2xpcHBpbmdQbGFuZXM9bnVsbDt0aGlzLmNsaXBTaGFkb3dzPXRoaXMuY2xpcEludGVyc2VjdGlvbj0hMTt0aGlzLmNvbG9yV3JpdGU9ITA7dGhpcy5wcmVjaXNpb249bnVsbDt0aGlzLnBvbHlnb25PZmZzZXQ9ITE7dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM9dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yPTA7dGhpcy5kaXRoZXJpbmc9ITE7dGhpcy5hbHBoYVRlc3Q9MDt0aGlzLnByZW11bHRpcGxpZWRBbHBoYT0hMTt0aGlzLm92ZXJkcmF3PTA7dGhpcy52aXNpYmxlPSEwO3RoaXMudXNlckRhdGE9e307dGhpcy5uZWVkc1VwZGF0ZT0hMH1mdW5jdGlvbiBlYihhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTWVzaERlcHRoTWF0ZXJpYWxcIjt0aGlzLmRlcHRoUGFja2luZz0zMjAwO3RoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9ITE7dGhpcy5kaXNwbGFjZW1lbnRNYXA9XG4gICAgdGhpcy5hbHBoYU1hcD10aGlzLm1hcD1udWxsO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9MTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9MDt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMubGlnaHRzPXRoaXMuZm9nPSExO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIGZiKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoRGlzdGFuY2VNYXRlcmlhbFwiO3RoaXMucmVmZXJlbmNlUG9zaXRpb249bmV3IHA7dGhpcy5uZWFyRGlzdGFuY2U9MTt0aGlzLmZhckRpc3RhbmNlPTFFMzt0aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuZGlzcGxhY2VtZW50TWFwPXRoaXMuYWxwaGFNYXA9dGhpcy5tYXA9bnVsbDt0aGlzLmRpc3BsYWNlbWVudFNjYWxlPTE7dGhpcy5kaXNwbGFjZW1lbnRCaWFzPTA7dGhpcy5saWdodHM9dGhpcy5mb2c9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9ZnVuY3Rpb24gWGEoYSxiKXt0aGlzLm1pbj12b2lkIDAhPT1cbiAgICBhP2E6bmV3IHAoSW5maW5pdHksSW5maW5pdHksSW5maW5pdHkpO3RoaXMubWF4PXZvaWQgMCE9PWI/YjpuZXcgcCgtSW5maW5pdHksLUluZmluaXR5LC1JbmZpbml0eSl9ZnVuY3Rpb24gSWEoYSxiKXt0aGlzLmNlbnRlcj12b2lkIDAhPT1hP2E6bmV3IHA7dGhpcy5yYWRpdXM9dm9pZCAwIT09Yj9iOjB9ZnVuY3Rpb24gRWEoYSxiKXt0aGlzLm5vcm1hbD12b2lkIDAhPT1hP2E6bmV3IHAoMSwwLDApO3RoaXMuY29uc3RhbnQ9dm9pZCAwIT09Yj9iOjB9ZnVuY3Rpb24gcmQoYSxiLGMsZCxlLGYpe3RoaXMucGxhbmVzPVt2b2lkIDAhPT1hP2E6bmV3IEVhLHZvaWQgMCE9PWI/YjpuZXcgRWEsdm9pZCAwIT09Yz9jOm5ldyBFYSx2b2lkIDAhPT1kP2Q6bmV3IEVhLHZvaWQgMCE9PWU/ZTpuZXcgRWEsdm9pZCAwIT09Zj9mOm5ldyBFYV19ZnVuY3Rpb24gVWUoYSxiLGMpe2Z1bmN0aW9uIGQoYixjLGQsZSxmLGcpe3ZhciBoPWIuZ2VvbWV0cnk7dmFyIGs9bjt2YXIgbT1iLmN1c3RvbURlcHRoTWF0ZXJpYWw7XG4gICAgZCYmKGs9dSxtPWIuY3VzdG9tRGlzdGFuY2VNYXRlcmlhbCk7bT9rPW06KG09ITEsYy5tb3JwaFRhcmdldHMmJihoJiZoLmlzQnVmZmVyR2VvbWV0cnk/bT1oLm1vcnBoQXR0cmlidXRlcyYmaC5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24mJjA8aC5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24ubGVuZ3RoOmgmJmguaXNHZW9tZXRyeSYmKG09aC5tb3JwaFRhcmdldHMmJjA8aC5tb3JwaFRhcmdldHMubGVuZ3RoKSksYi5pc1NraW5uZWRNZXNoJiYhMT09PWMuc2tpbm5pbmcmJmNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMU2hhZG93TWFwOiBUSFJFRS5Ta2lubmVkTWVzaCB3aXRoIG1hdGVyaWFsLnNraW5uaW5nIHNldCB0byBmYWxzZTpcIixiKSxiPWIuaXNTa2lubmVkTWVzaCYmYy5za2lubmluZyxoPTAsbSYmKGh8PTEpLGImJihofD0yKSxrPWtbaF0pO2EubG9jYWxDbGlwcGluZ0VuYWJsZWQmJiEwPT09Yy5jbGlwU2hhZG93cyYmMCE9PWMuY2xpcHBpbmdQbGFuZXMubGVuZ3RoJiYoaD1cbiAgICBrLnV1aWQsbT1jLnV1aWQsYj1yW2hdLHZvaWQgMD09PWImJihiPXt9LHJbaF09YiksaD1iW21dLHZvaWQgMD09PWgmJihoPWsuY2xvbmUoKSxiW21dPWgpLGs9aCk7ay52aXNpYmxlPWMudmlzaWJsZTtrLndpcmVmcmFtZT1jLndpcmVmcmFtZTttPWMuc2lkZTtBLnJlbmRlclNpbmdsZVNpZGVkJiYyPT1tJiYobT0wKTtBLnJlbmRlclJldmVyc2VTaWRlZCYmKDA9PT1tP209MToxPT09bSYmKG09MCkpO2suc2lkZT1tO2suY2xpcFNoYWRvd3M9Yy5jbGlwU2hhZG93cztrLmNsaXBwaW5nUGxhbmVzPWMuY2xpcHBpbmdQbGFuZXM7ay5jbGlwSW50ZXJzZWN0aW9uPWMuY2xpcEludGVyc2VjdGlvbjtrLndpcmVmcmFtZUxpbmV3aWR0aD1jLndpcmVmcmFtZUxpbmV3aWR0aDtrLmxpbmV3aWR0aD1jLmxpbmV3aWR0aDtkJiZrLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwmJihrLnJlZmVyZW5jZVBvc2l0aW9uLmNvcHkoZSksay5uZWFyRGlzdGFuY2U9ZixrLmZhckRpc3RhbmNlPWcpO3JldHVybiBrfVxuICAgIGZ1bmN0aW9uIGUoYyxoLGcsayl7dmFyIG07aWYoITEhPT1jLnZpc2libGUpe2lmKGMubGF5ZXJzLnRlc3QoaC5sYXllcnMpJiYoYy5pc01lc2h8fGMuaXNMaW5lfHxjLmlzUG9pbnRzKSYmYy5jYXN0U2hhZG93JiYoIWMuZnJ1c3R1bUN1bGxlZHx8Zi5pbnRlcnNlY3RzT2JqZWN0KGMpKSl7Yy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhnLm1hdHJpeFdvcmxkSW52ZXJzZSxjLm1hdHJpeFdvcmxkKTt2YXIgbj1iLnVwZGF0ZShjKSx1PWMubWF0ZXJpYWw7aWYoQXJyYXkuaXNBcnJheSh1KSlmb3IodmFyIHI9bi5ncm91cHMsdD0wLGw9ci5sZW5ndGg7dDxsO3QrKyl7dmFyIEk9clt0XTsobT11W0kubWF0ZXJpYWxJbmRleF0pJiZtLnZpc2libGUmJihtPWQoYyxtLGsscSxnLm5lYXIsZy5mYXIpLGEucmVuZGVyQnVmZmVyRGlyZWN0KGcsbnVsbCxuLG0sYyxJKSl9ZWxzZSB1LnZpc2libGUmJihtPWQoYyx1LGsscSxnLm5lYXIsZy5mYXIpLGEucmVuZGVyQnVmZmVyRGlyZWN0KGcsXG4gICAgbnVsbCxuLG0sYyxudWxsKSl9Yz1jLmNoaWxkcmVuO249MDtmb3IodT1jLmxlbmd0aDtuPHU7bisrKWUoY1tuXSxoLGcsayl9fXZhciBmPW5ldyByZCxnPW5ldyBPLGg9bmV3IEQsaz1uZXcgRChjLGMpLG09bmV3IHAscT1uZXcgcCxuPUFycmF5KDQpLHU9QXJyYXkoNCkscj17fSx0PVtuZXcgcCgxLDAsMCksbmV3IHAoLTEsMCwwKSxuZXcgcCgwLDAsMSksbmV3IHAoMCwwLC0xKSxuZXcgcCgwLDEsMCksbmV3IHAoMCwtMSwwKV0sbD1bbmV3IHAoMCwxLDApLG5ldyBwKDAsMSwwKSxuZXcgcCgwLDEsMCksbmV3IHAoMCwxLDApLG5ldyBwKDAsMCwxKSxuZXcgcCgwLDAsLTEpXSx3PVtuZXcgYWEsbmV3IGFhLG5ldyBhYSxuZXcgYWEsbmV3IGFhLG5ldyBhYV07Zm9yKGM9MDs0IT09YzsrK2Mpe3ZhciB6PTAhPT0oYyYxKSx5PTAhPT0oYyYyKSxJPW5ldyBlYih7ZGVwdGhQYWNraW5nOjMyMDEsbW9ycGhUYXJnZXRzOnosc2tpbm5pbmc6eX0pO25bY109STt6PW5ldyBmYih7bW9ycGhUYXJnZXRzOnosXG4gICAgc2tpbm5pbmc6eX0pO3VbY109en12YXIgQT10aGlzO3RoaXMuZW5hYmxlZD0hMTt0aGlzLmF1dG9VcGRhdGU9ITA7dGhpcy5uZWVkc1VwZGF0ZT0hMTt0aGlzLnR5cGU9MTt0aGlzLnJlbmRlclNpbmdsZVNpZGVkPXRoaXMucmVuZGVyUmV2ZXJzZVNpZGVkPSEwO3RoaXMucmVuZGVyPWZ1bmN0aW9uKGIsYyxkKXtpZighMSE9PUEuZW5hYmxlZCYmKCExIT09QS5hdXRvVXBkYXRlfHwhMSE9PUEubmVlZHNVcGRhdGUpJiYwIT09Yi5sZW5ndGgpe3ZhciBuPWEuc3RhdGU7bi5kaXNhYmxlKGEuY29udGV4dC5CTEVORCk7bi5idWZmZXJzLmNvbG9yLnNldENsZWFyKDEsMSwxLDEpO24uYnVmZmVycy5kZXB0aC5zZXRUZXN0KCEwKTtuLnNldFNjaXNzb3JUZXN0KCExKTtmb3IodmFyIHUscj0wLEk9Yi5sZW5ndGg7cjxJO3IrKyl7dmFyIHY9YltyXTt1PXYuc2hhZG93O3ZhciBwPXYmJnYuaXNQb2ludExpZ2h0O2lmKHZvaWQgMD09PXUpY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xTaGFkb3dNYXA6XCIsXG4gICAgdixcImhhcyBubyBzaGFkb3cuXCIpO2Vsc2V7dmFyIHo9dS5jYW1lcmE7aC5jb3B5KHUubWFwU2l6ZSk7aC5taW4oayk7aWYocCl7dmFyIHk9aC54LEo9aC55O3dbMF0uc2V0KDIqeSxKLHksSik7d1sxXS5zZXQoMCxKLHksSik7d1syXS5zZXQoMyp5LEoseSxKKTt3WzNdLnNldCh5LEoseSxKKTt3WzRdLnNldCgzKnksMCx5LEopO3dbNV0uc2V0KHksMCx5LEopO2gueCo9NDtoLnkqPTJ9bnVsbD09PXUubWFwJiYodS5tYXA9bmV3IGtiKGgueCxoLnkse21pbkZpbHRlcjoxMDAzLG1hZ0ZpbHRlcjoxMDAzLGZvcm1hdDoxMDIzfSksdS5tYXAudGV4dHVyZS5uYW1lPXYubmFtZStcIi5zaGFkb3dNYXBcIix6LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSk7dS5pc1Nwb3RMaWdodFNoYWRvdyYmdS51cGRhdGUodik7eT11Lm1hcDtKPXUubWF0cml4O3Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHYubWF0cml4V29ybGQpO3oucG9zaXRpb24uY29weShxKTtwPyh1PTYsSi5tYWtlVHJhbnNsYXRpb24oLXEueCxcbiAgICAtcS55LC1xLnopKToodT0xLG0uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHYudGFyZ2V0Lm1hdHJpeFdvcmxkKSx6Lmxvb2tBdChtKSx6LnVwZGF0ZU1hdHJpeFdvcmxkKCksSi5zZXQoLjUsMCwwLC41LDAsLjUsMCwuNSwwLDAsLjUsLjUsMCwwLDAsMSksSi5tdWx0aXBseSh6LnByb2plY3Rpb25NYXRyaXgpLEoubXVsdGlwbHkoei5tYXRyaXhXb3JsZEludmVyc2UpKTthLnNldFJlbmRlclRhcmdldCh5KTthLmNsZWFyKCk7Zm9yKHY9MDt2PHU7disrKXAmJihtLmNvcHkoei5wb3NpdGlvbiksbS5hZGQodFt2XSksei51cC5jb3B5KGxbdl0pLHoubG9va0F0KG0pLHoudXBkYXRlTWF0cml4V29ybGQoKSxuLnZpZXdwb3J0KHdbdl0pKSxnLm11bHRpcGx5TWF0cmljZXMoei5wcm9qZWN0aW9uTWF0cml4LHoubWF0cml4V29ybGRJbnZlcnNlKSxmLnNldEZyb21NYXRyaXgoZyksZShjLGQseixwKX19QS5uZWVkc1VwZGF0ZT0hMX19fWZ1bmN0aW9uIGJnKGEpe3ZhciBiPXt9O3JldHVybntnZXQ6ZnVuY3Rpb24oYSl7YS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlJiZcbiAgICAoYT1hLmRhdGEpO3JldHVybiBiW2EudXVpZF19LHJlbW92ZTpmdW5jdGlvbihjKXtjLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUmJihjPWMuZGF0YSk7dmFyIGQ9YltjLnV1aWRdO2QmJihhLmRlbGV0ZUJ1ZmZlcihkLmJ1ZmZlciksZGVsZXRlIGJbYy51dWlkXSl9LHVwZGF0ZTpmdW5jdGlvbihjLGQpe2MuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSYmKGM9Yy5kYXRhKTt2YXIgZT1iW2MudXVpZF07aWYodm9pZCAwPT09ZSl7dmFyIGU9Yy51dWlkLGY9Yy5hcnJheSxnPWMuZHluYW1pYz9hLkRZTkFNSUNfRFJBVzphLlNUQVRJQ19EUkFXLGg9YS5jcmVhdGVCdWZmZXIoKTthLmJpbmRCdWZmZXIoZCxoKTthLmJ1ZmZlckRhdGEoZCxmLGcpO2Mub25VcGxvYWRDYWxsYmFjaygpO2Q9YS5GTE9BVDtmIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5P2Q9YS5GTE9BVDpmIGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5P2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMQXR0cmlidXRlczogVW5zdXBwb3J0ZWQgZGF0YSBidWZmZXIgZm9ybWF0OiBGbG9hdDY0QXJyYXkuXCIpOlxuICAgIGYgaW5zdGFuY2VvZiBVaW50MTZBcnJheT9kPWEuVU5TSUdORURfU0hPUlQ6ZiBpbnN0YW5jZW9mIEludDE2QXJyYXk/ZD1hLlNIT1JUOmYgaW5zdGFuY2VvZiBVaW50MzJBcnJheT9kPWEuVU5TSUdORURfSU5UOmYgaW5zdGFuY2VvZiBJbnQzMkFycmF5P2Q9YS5JTlQ6ZiBpbnN0YW5jZW9mIEludDhBcnJheT9kPWEuQllURTpmIGluc3RhbmNlb2YgVWludDhBcnJheSYmKGQ9YS5VTlNJR05FRF9CWVRFKTtiW2VdPXtidWZmZXI6aCx0eXBlOmQsYnl0ZXNQZXJFbGVtZW50OmYuQllURVNfUEVSX0VMRU1FTlQsdmVyc2lvbjpjLnZlcnNpb259fWVsc2UgZS52ZXJzaW9uPGMudmVyc2lvbiYmKGY9YyxoPWYuYXJyYXksZz1mLnVwZGF0ZVJhbmdlLGEuYmluZEJ1ZmZlcihkLGUuYnVmZmVyKSwhMT09PWYuZHluYW1pYz9hLmJ1ZmZlckRhdGEoZCxoLGEuU1RBVElDX0RSQVcpOi0xPT09Zy5jb3VudD9hLmJ1ZmZlclN1YkRhdGEoZCwwLGgpOjA9PT1nLmNvdW50P2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTE9iamVjdHMudXBkYXRlQnVmZmVyOiBkeW5hbWljIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSBtYXJrZWQgYXMgbmVlZHNVcGRhdGUgYnV0IHVwZGF0ZVJhbmdlLmNvdW50IGlzIDAsIGVuc3VyZSB5b3UgYXJlIHVzaW5nIHNldCBtZXRob2RzIG9yIHVwZGF0aW5nIG1hbnVhbGx5LlwiKTpcbiAgICAoYS5idWZmZXJTdWJEYXRhKGQsZy5vZmZzZXQqaC5CWVRFU19QRVJfRUxFTUVOVCxoLnN1YmFycmF5KGcub2Zmc2V0LGcub2Zmc2V0K2cuY291bnQpKSxnLmNvdW50PS0xKSxlLnZlcnNpb249Yy52ZXJzaW9uKX19fWZ1bmN0aW9uIGdiKGEsYixjLGQpe3RoaXMuX3g9YXx8MDt0aGlzLl95PWJ8fDA7dGhpcy5fej1jfHwwO3RoaXMuX29yZGVyPWR8fGdiLkRlZmF1bHRPcmRlcn1mdW5jdGlvbiBXZCgpe3RoaXMubWFzaz0xfWZ1bmN0aW9uIHgoKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlkXCIse3ZhbHVlOmNnKyt9KTt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJPYmplY3QzRFwiO3RoaXMucGFyZW50PW51bGw7dGhpcy5jaGlsZHJlbj1bXTt0aGlzLnVwPXguRGVmYXVsdFVwLmNsb25lKCk7dmFyIGE9bmV3IHAsYj1uZXcgZ2IsYz1uZXcgaGEsZD1uZXcgcCgxLDEsMSk7Yi5vbkNoYW5nZShmdW5jdGlvbigpe2Muc2V0RnJvbUV1bGVyKGIsXG4gICAgITEpfSk7Yy5vbkNoYW5nZShmdW5jdGlvbigpe2Iuc2V0RnJvbVF1YXRlcm5pb24oYyx2b2lkIDAsITEpfSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7cG9zaXRpb246e2VudW1lcmFibGU6ITAsdmFsdWU6YX0scm90YXRpb246e2VudW1lcmFibGU6ITAsdmFsdWU6Yn0scXVhdGVybmlvbjp7ZW51bWVyYWJsZTohMCx2YWx1ZTpjfSxzY2FsZTp7ZW51bWVyYWJsZTohMCx2YWx1ZTpkfSxtb2RlbFZpZXdNYXRyaXg6e3ZhbHVlOm5ldyBPfSxub3JtYWxNYXRyaXg6e3ZhbHVlOm5ldyBtYX19KTt0aGlzLm1hdHJpeD1uZXcgTzt0aGlzLm1hdHJpeFdvcmxkPW5ldyBPO3RoaXMubWF0cml4QXV0b1VwZGF0ZT14LkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlO3RoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMTt0aGlzLmxheWVycz1uZXcgV2Q7dGhpcy52aXNpYmxlPSEwO3RoaXMucmVjZWl2ZVNoYWRvdz10aGlzLmNhc3RTaGFkb3c9ITE7dGhpcy5mcnVzdHVtQ3VsbGVkPSEwO3RoaXMucmVuZGVyT3JkZXI9XG4gICAgMDt0aGlzLnVzZXJEYXRhPXt9fWZ1bmN0aW9uIFRhKCl7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkNhbWVyYVwiO3RoaXMubWF0cml4V29ybGRJbnZlcnNlPW5ldyBPO3RoaXMucHJvamVjdGlvbk1hdHJpeD1uZXcgT31mdW5jdGlvbiBMYihhLGIsYyxkLGUsZil7VGEuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJPcnRob2dyYXBoaWNDYW1lcmFcIjt0aGlzLnpvb209MTt0aGlzLnZpZXc9bnVsbDt0aGlzLmxlZnQ9YTt0aGlzLnJpZ2h0PWI7dGhpcy50b3A9Yzt0aGlzLmJvdHRvbT1kO3RoaXMubmVhcj12b2lkIDAhPT1lP2U6LjE7dGhpcy5mYXI9dm9pZCAwIT09Zj9mOjJFMzt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX1mdW5jdGlvbiBZYShhLGIsYyxkLGUsZil7dGhpcy5hPWE7dGhpcy5iPWI7dGhpcy5jPWM7dGhpcy5ub3JtYWw9ZCYmZC5pc1ZlY3RvcjM/ZDpuZXcgcDt0aGlzLnZlcnRleE5vcm1hbHM9QXJyYXkuaXNBcnJheShkKT9kOltdO3RoaXMuY29sb3I9ZSYmZS5pc0NvbG9yP1xuICAgIGU6bmV3IEg7dGhpcy52ZXJ0ZXhDb2xvcnM9QXJyYXkuaXNBcnJheShlKT9lOltdO3RoaXMubWF0ZXJpYWxJbmRleD12b2lkIDAhPT1mP2Y6MH1mdW5jdGlvbiBMKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZFwiLHt2YWx1ZTpkZys9Mn0pO3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMubmFtZT1cIlwiO3RoaXMudHlwZT1cIkdlb21ldHJ5XCI7dGhpcy52ZXJ0aWNlcz1bXTt0aGlzLmNvbG9ycz1bXTt0aGlzLmZhY2VzPVtdO3RoaXMuZmFjZVZlcnRleFV2cz1bW11dO3RoaXMubW9ycGhUYXJnZXRzPVtdO3RoaXMubW9ycGhOb3JtYWxzPVtdO3RoaXMuc2tpbldlaWdodHM9W107dGhpcy5za2luSW5kaWNlcz1bXTt0aGlzLmxpbmVEaXN0YW5jZXM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGw7dGhpcy5ncm91cHNOZWVkVXBkYXRlPXRoaXMubGluZURpc3RhbmNlc05lZWRVcGRhdGU9dGhpcy5jb2xvcnNOZWVkVXBkYXRlPXRoaXMubm9ybWFsc05lZWRVcGRhdGU9XG4gICAgdGhpcy51dnNOZWVkVXBkYXRlPXRoaXMudmVydGljZXNOZWVkVXBkYXRlPXRoaXMuZWxlbWVudHNOZWVkVXBkYXRlPSExfWZ1bmN0aW9uIE0oYSxiLGMpe2lmKEFycmF5LmlzQXJyYXkoYSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuXCIpO3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMubmFtZT1cIlwiO3RoaXMuYXJyYXk9YTt0aGlzLml0ZW1TaXplPWI7dGhpcy5jb3VudD12b2lkIDAhPT1hP2EubGVuZ3RoL2I6MDt0aGlzLm5vcm1hbGl6ZWQ9ITA9PT1jO3RoaXMuZHluYW1pYz0hMTt0aGlzLnVwZGF0ZVJhbmdlPXtvZmZzZXQ6MCxjb3VudDotMX07dGhpcy5vblVwbG9hZENhbGxiYWNrPWZ1bmN0aW9uKCl7fTt0aGlzLnZlcnNpb249MH1mdW5jdGlvbiB1YyhhLGIsYyl7TS5jYWxsKHRoaXMsbmV3IEludDhBcnJheShhKSxiLGMpfWZ1bmN0aW9uIHZjKGEsYixjKXtNLmNhbGwodGhpcyxuZXcgVWludDhBcnJheShhKSxcbiAgICBiLGMpfWZ1bmN0aW9uIHdjKGEsYixjKXtNLmNhbGwodGhpcyxuZXcgVWludDhDbGFtcGVkQXJyYXkoYSksYixjKX1mdW5jdGlvbiB4YyhhLGIsYyl7TS5jYWxsKHRoaXMsbmV3IEludDE2QXJyYXkoYSksYixjKX1mdW5jdGlvbiBvYihhLGIsYyl7TS5jYWxsKHRoaXMsbmV3IFVpbnQxNkFycmF5KGEpLGIsYyl9ZnVuY3Rpb24geWMoYSxiLGMpe00uY2FsbCh0aGlzLG5ldyBJbnQzMkFycmF5KGEpLGIsYyl9ZnVuY3Rpb24gcGIoYSxiLGMpe00uY2FsbCh0aGlzLG5ldyBVaW50MzJBcnJheShhKSxiLGMpfWZ1bmN0aW9uIEIoYSxiLGMpe00uY2FsbCh0aGlzLG5ldyBGbG9hdDMyQXJyYXkoYSksYixjKX1mdW5jdGlvbiB6YyhhLGIsYyl7TS5jYWxsKHRoaXMsbmV3IEZsb2F0NjRBcnJheShhKSxiLGMpfWZ1bmN0aW9uIFZlKCl7dGhpcy5pbmRpY2VzPVtdO3RoaXMudmVydGljZXM9W107dGhpcy5ub3JtYWxzPVtdO3RoaXMuY29sb3JzPVtdO3RoaXMudXZzPVtdO3RoaXMudXZzMj1bXTt0aGlzLmdyb3Vwcz1cbiAgICBbXTt0aGlzLm1vcnBoVGFyZ2V0cz17fTt0aGlzLnNraW5XZWlnaHRzPVtdO3RoaXMuc2tpbkluZGljZXM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGw7dGhpcy5ncm91cHNOZWVkVXBkYXRlPXRoaXMudXZzTmVlZFVwZGF0ZT10aGlzLmNvbG9yc05lZWRVcGRhdGU9dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZT10aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMX1mdW5jdGlvbiBYZChhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuLUluZmluaXR5O2Zvcih2YXIgYj1hWzBdLGM9MSxkPWEubGVuZ3RoO2M8ZDsrK2MpYVtjXT5iJiYoYj1hW2NdKTtyZXR1cm4gYn1mdW5jdGlvbiBFKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZFwiLHt2YWx1ZTplZys9Mn0pO3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMubmFtZT1cIlwiO3RoaXMudHlwZT1cIkJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5pbmRleD1udWxsO3RoaXMuYXR0cmlidXRlcz17fTt0aGlzLm1vcnBoQXR0cmlidXRlcz1cbiAgICB7fTt0aGlzLmdyb3Vwcz1bXTt0aGlzLmJvdW5kaW5nU3BoZXJlPXRoaXMuYm91bmRpbmdCb3g9bnVsbDt0aGlzLmRyYXdSYW5nZT17c3RhcnQ6MCxjb3VudDpJbmZpbml0eX19ZnVuY3Rpb24gTWIoYSxiLGMsZCxlLGYpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJCb3hHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17d2lkdGg6YSxoZWlnaHQ6YixkZXB0aDpjLHdpZHRoU2VnbWVudHM6ZCxoZWlnaHRTZWdtZW50czplLGRlcHRoU2VnbWVudHM6Zn07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IHFiKGEsYixjLGQsZSxmKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gcWIoYSxiLGMsZCxlLGYpe2Z1bmN0aW9uIGcoYSxiLGMsZCxlLGYsZyxsLEhhLERhLG5hKXt2YXIgdD1mL0hhLHY9Zy9EYSxJPWYvMixBPWcvMix3PWwvMjtnPUhhKzE7dmFyIHo9RGErMSx5PWY9MCxKLHgsQj1uZXcgcDtmb3IoeD0wO3g8ejt4Kyspe3ZhciBEPXgqdi1BO2ZvcihKPTA7SjxnO0orKylCW2FdPVxuICAgIChKKnQtSSkqZCxCW2JdPUQqZSxCW2NdPXcsbS5wdXNoKEIueCxCLnksQi56KSxCW2FdPTAsQltiXT0wLEJbY109MDxsPzE6LTEscS5wdXNoKEIueCxCLnksQi56KSxuLnB1c2goSi9IYSksbi5wdXNoKDEteC9EYSksZis9MX1mb3IoeD0wO3g8RGE7eCsrKWZvcihKPTA7SjxIYTtKKyspYT11K0orZyooeCsxKSxiPXUrKEorMSkrZyooeCsxKSxjPXUrKEorMSkrZyp4LGsucHVzaCh1K0orZyp4LGEsYyksay5wdXNoKGEsYixjKSx5Kz02O2guYWRkR3JvdXAocix5LG5hKTtyKz15O3UrPWZ9RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkJveEJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt3aWR0aDphLGhlaWdodDpiLGRlcHRoOmMsd2lkdGhTZWdtZW50czpkLGhlaWdodFNlZ21lbnRzOmUsZGVwdGhTZWdtZW50czpmfTt2YXIgaD10aGlzO2E9YXx8MTtiPWJ8fDE7Yz1jfHwxO2Q9TWF0aC5mbG9vcihkKXx8MTtlPU1hdGguZmxvb3IoZSl8fDE7Zj1NYXRoLmZsb29yKGYpfHwxO3ZhciBrPVxuICAgIFtdLG09W10scT1bXSxuPVtdLHU9MCxyPTA7ZyhcInpcIixcInlcIixcInhcIiwtMSwtMSxjLGIsYSxmLGUsMCk7ZyhcInpcIixcInlcIixcInhcIiwxLC0xLGMsYiwtYSxmLGUsMSk7ZyhcInhcIixcInpcIixcInlcIiwxLDEsYSxjLGIsZCxmLDIpO2coXCJ4XCIsXCJ6XCIsXCJ5XCIsMSwtMSxhLGMsLWIsZCxmLDMpO2coXCJ4XCIsXCJ5XCIsXCJ6XCIsMSwtMSxhLGIsYyxkLGUsNCk7ZyhcInhcIixcInlcIixcInpcIiwtMSwtMSxhLGIsLWMsZCxlLDUpO3RoaXMuc2V0SW5kZXgoayk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKG0sMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIocSwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKG4sMikpfWZ1bmN0aW9uIEFjKGEsYixjLGQpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQbGFuZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt3aWR0aDphLGhlaWdodDpiLHdpZHRoU2VnbWVudHM6YyxoZWlnaHRTZWdtZW50czpkfTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgcmIoYSxcbiAgICBiLGMsZCkpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIHJiKGEsYixjLGQpe0UuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQbGFuZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt3aWR0aDphLGhlaWdodDpiLHdpZHRoU2VnbWVudHM6YyxoZWlnaHRTZWdtZW50czpkfTthPWF8fDE7Yj1ifHwxO3ZhciBlPWEvMixmPWIvMjtjPU1hdGguZmxvb3IoYyl8fDE7ZD1NYXRoLmZsb29yKGQpfHwxO3ZhciBnPWMrMSxoPWQrMSxrPWEvYyxtPWIvZCxxPVtdLG49W10sdT1bXSxyPVtdO2ZvcihhPTA7YTxoO2ErKyl7dmFyIHQ9YSptLWY7Zm9yKGI9MDtiPGc7YisrKW4ucHVzaChiKmstZSwtdCwwKSx1LnB1c2goMCwwLDEpLHIucHVzaChiL2MpLHIucHVzaCgxLWEvZCl9Zm9yKGE9MDthPGQ7YSsrKWZvcihiPTA7YjxjO2IrKyllPWIrZyooYSsxKSxmPWIrMStnKihhKzEpLGg9YisxK2cqYSxxLnB1c2goYitnKmEsZSxoKSxxLnB1c2goZSxmLGgpO3RoaXMuc2V0SW5kZXgocSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLFxuICAgIG5ldyBCKG4sMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIodSwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKHIsMikpfWZ1bmN0aW9uIEFhKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoQmFzaWNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IEgoMTY3NzcyMTUpO3RoaXMubGlnaHRNYXA9dGhpcy5tYXA9bnVsbDt0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5PTE7dGhpcy5hb01hcD1udWxsO3RoaXMuYW9NYXBJbnRlbnNpdHk9MTt0aGlzLmVudk1hcD10aGlzLmFscGhhTWFwPXRoaXMuc3BlY3VsYXJNYXA9bnVsbDt0aGlzLmNvbWJpbmU9MDt0aGlzLnJlZmxlY3Rpdml0eT0xO3RoaXMucmVmcmFjdGlvblJhdGlvPS45ODt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMud2lyZWZyYW1lTGluZWpvaW49dGhpcy53aXJlZnJhbWVMaW5lY2FwPVwicm91bmRcIjt0aGlzLmxpZ2h0cz10aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPVxuICAgICExO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIEZhKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTaGFkZXJNYXRlcmlhbFwiO3RoaXMuZGVmaW5lcz17fTt0aGlzLnVuaWZvcm1zPXt9O3RoaXMudmVydGV4U2hhZGVyPVwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG59XCI7dGhpcy5mcmFnbWVudFNoYWRlcj1cInZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59XCI7dGhpcy5saW5ld2lkdGg9MTt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9dGhpcy5jbGlwcGluZz10aGlzLmxpZ2h0cz10aGlzLmZvZz0hMTt0aGlzLmV4dGVuc2lvbnM9e2Rlcml2YXRpdmVzOiExLGZyYWdEZXB0aDohMSxcbiAgICBkcmF3QnVmZmVyczohMSxzaGFkZXJUZXh0dXJlTE9EOiExfTt0aGlzLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM9e2NvbG9yOlsxLDEsMV0sdXY6WzAsMF0sdXYyOlswLDBdfTt0aGlzLmluZGV4MEF0dHJpYnV0ZU5hbWU9dm9pZCAwO3ZvaWQgMCE9PWEmJih2b2lkIDAhPT1hLmF0dHJpYnV0ZXMmJmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5TaGFkZXJNYXRlcmlhbDogYXR0cmlidXRlcyBzaG91bGQgbm93IGJlIGRlZmluZWQgaW4gVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC5cIiksdGhpcy5zZXRWYWx1ZXMoYSkpfWZ1bmN0aW9uIHNiKGEsYil7dGhpcy5vcmlnaW49dm9pZCAwIT09YT9hOm5ldyBwO3RoaXMuZGlyZWN0aW9uPXZvaWQgMCE9PWI/YjpuZXcgcH1mdW5jdGlvbiBOYihhLGIpe3RoaXMuc3RhcnQ9dm9pZCAwIT09YT9hOm5ldyBwO3RoaXMuZW5kPXZvaWQgMCE9PWI/YjpuZXcgcH1mdW5jdGlvbiBaYShhLGIsYyl7dGhpcy5hPXZvaWQgMCE9PWE/YTpuZXcgcDt0aGlzLmI9dm9pZCAwIT09XG4gICAgYj9iOm5ldyBwO3RoaXMuYz12b2lkIDAhPT1jP2M6bmV3IHB9ZnVuY3Rpb24gcmEoYSxiKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTWVzaFwiO3RoaXMuZ2VvbWV0cnk9dm9pZCAwIT09YT9hOm5ldyBFO3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09Yj9iOm5ldyBBYSh7Y29sb3I6MTY3NzcyMTUqTWF0aC5yYW5kb20oKX0pO3RoaXMuZHJhd01vZGU9MDt0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpfWZ1bmN0aW9uIGZnKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSxjKXtiLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoYS5yLGEuZyxhLmIsYyxkKX12YXIgZj1uZXcgSCgwKSxnPTAsaCxrLG07cmV0dXJue2dldENsZWFyQ29sb3I6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0Q2xlYXJDb2xvcjpmdW5jdGlvbihhLGIpe2Yuc2V0KGEpO2c9dm9pZCAwIT09Yj9iOjE7ZShmLGcpfSxnZXRDbGVhckFscGhhOmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldENsZWFyQWxwaGE6ZnVuY3Rpb24oYSl7Zz1hO2UoZixcbiAgICBnKX0scmVuZGVyOmZ1bmN0aW9uKGIsZCx1LHIpe2Q9ZC5iYWNrZ3JvdW5kO251bGw9PT1kP2UoZixnKTpkJiZkLmlzQ29sb3ImJihlKGQsMSkscj0hMCk7KGEuYXV0b0NsZWFyfHxyKSYmYS5jbGVhcihhLmF1dG9DbGVhckNvbG9yLGEuYXV0b0NsZWFyRGVwdGgsYS5hdXRvQ2xlYXJTdGVuY2lsKTtkJiZkLmlzQ3ViZVRleHR1cmU/KHZvaWQgMD09PW0mJihtPW5ldyByYShuZXcgcWIoMSwxLDEpLG5ldyBGYSh7dW5pZm9ybXM6dGIuY3ViZS51bmlmb3Jtcyx2ZXJ0ZXhTaGFkZXI6dGIuY3ViZS52ZXJ0ZXhTaGFkZXIsZnJhZ21lbnRTaGFkZXI6dGIuY3ViZS5mcmFnbWVudFNoYWRlcixzaWRlOjEsZGVwdGhUZXN0OiEwLGRlcHRoV3JpdGU6ITEsZm9nOiExfSkpLG0uZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKFwibm9ybWFsXCIpLG0uZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKFwidXZcIiksbS5vbkJlZm9yZVJlbmRlcj1mdW5jdGlvbihhLGIsYyl7dGhpcy5tYXRyaXhXb3JsZC5jb3B5UG9zaXRpb24oYy5tYXRyaXhXb3JsZCl9LFxuICAgIGMudXBkYXRlKG0uZ2VvbWV0cnkpKSxtLm1hdGVyaWFsLnVuaWZvcm1zLnRDdWJlLnZhbHVlPWQsYi5wdXNoKG0sbS5nZW9tZXRyeSxtLm1hdGVyaWFsLDAsbnVsbCkpOmQmJmQuaXNUZXh0dXJlJiYodm9pZCAwPT09aCYmKGg9bmV3IExiKC0xLDEsMSwtMSwwLDEpLGs9bmV3IHJhKG5ldyByYigyLDIpLG5ldyBBYSh7ZGVwdGhUZXN0OiExLGRlcHRoV3JpdGU6ITEsZm9nOiExfSkpLGMudXBkYXRlKGsuZ2VvbWV0cnkpKSxrLm1hdGVyaWFsLm1hcD1kLGEucmVuZGVyQnVmZmVyRGlyZWN0KGgsbnVsbCxrLmdlb21ldHJ5LGsubWF0ZXJpYWwsayxudWxsKSl9fX1mdW5jdGlvbiBnZyhhLGIpe3JldHVybiBhLnJlbmRlck9yZGVyIT09Yi5yZW5kZXJPcmRlcj9hLnJlbmRlck9yZGVyLWIucmVuZGVyT3JkZXI6YS5wcm9ncmFtJiZiLnByb2dyYW0mJmEucHJvZ3JhbSE9PWIucHJvZ3JhbT9hLnByb2dyYW0uaWQtYi5wcm9ncmFtLmlkOmEubWF0ZXJpYWwuaWQhPT1iLm1hdGVyaWFsLmlkP2EubWF0ZXJpYWwuaWQtXG4gICAgYi5tYXRlcmlhbC5pZDphLnohPT1iLno/YS56LWIuejphLmlkLWIuaWR9ZnVuY3Rpb24gaGcoYSxiKXtyZXR1cm4gYS5yZW5kZXJPcmRlciE9PWIucmVuZGVyT3JkZXI/YS5yZW5kZXJPcmRlci1iLnJlbmRlck9yZGVyOmEueiE9PWIuej9iLnotYS56OmEuaWQtYi5pZH1mdW5jdGlvbiBpZygpe3ZhciBhPVtdLGI9MCxjPVtdLGQ9W107cmV0dXJue29wYXF1ZTpjLHRyYW5zcGFyZW50OmQsaW5pdDpmdW5jdGlvbigpe2I9MDtjLmxlbmd0aD0wO2QubGVuZ3RoPTB9LHB1c2g6ZnVuY3Rpb24oZSxmLGcsaCxrKXt2YXIgbT1hW2JdO3ZvaWQgMD09PW0/KG09e2lkOmUuaWQsb2JqZWN0OmUsZ2VvbWV0cnk6ZixtYXRlcmlhbDpnLHByb2dyYW06Zy5wcm9ncmFtLHJlbmRlck9yZGVyOmUucmVuZGVyT3JkZXIsejpoLGdyb3VwOmt9LGFbYl09bSk6KG0uaWQ9ZS5pZCxtLm9iamVjdD1lLG0uZ2VvbWV0cnk9ZixtLm1hdGVyaWFsPWcsbS5wcm9ncmFtPWcucHJvZ3JhbSxtLnJlbmRlck9yZGVyPWUucmVuZGVyT3JkZXIsXG4gICAgbS56PWgsbS5ncm91cD1rKTsoITA9PT1nLnRyYW5zcGFyZW50P2Q6YykucHVzaChtKTtiKyt9LHNvcnQ6ZnVuY3Rpb24oKXsxPGMubGVuZ3RoJiZjLnNvcnQoZ2cpOzE8ZC5sZW5ndGgmJmQuc29ydChoZyl9fX1mdW5jdGlvbiBqZygpe3ZhciBhPXt9O3JldHVybntnZXQ6ZnVuY3Rpb24oYixjKXtiPWIuaWQrXCIsXCIrYy5pZDtjPWFbYl07dm9pZCAwPT09YyYmKGM9bmV3IGlnLGFbYl09Yyk7cmV0dXJuIGN9LGRpc3Bvc2U6ZnVuY3Rpb24oKXthPXt9fX19ZnVuY3Rpb24ga2coYSxiKXtyZXR1cm4gTWF0aC5hYnMoYlsxXSktTWF0aC5hYnMoYVsxXSl9ZnVuY3Rpb24gbGcoYSl7dmFyIGI9e30sYz1uZXcgRmxvYXQzMkFycmF5KDgpO3JldHVybnt1cGRhdGU6ZnVuY3Rpb24oZCxlLGYsZyl7dmFyIGg9ZC5tb3JwaFRhcmdldEluZmx1ZW5jZXMsaz1oLmxlbmd0aDtkPWJbZS5pZF07aWYodm9pZCAwPT09ZCl7ZD1bXTtmb3IodmFyIG09MDttPGs7bSsrKWRbbV09W20sMF07YltlLmlkXT1kfXZhciBxPVxuICAgIGYubW9ycGhUYXJnZXRzJiZlLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtmPWYubW9ycGhOb3JtYWxzJiZlLm1vcnBoQXR0cmlidXRlcy5ub3JtYWw7Zm9yKG09MDttPGs7bSsrKXt2YXIgbj1kW21dOzAhPT1uWzFdJiYocSYmZS5yZW1vdmVBdHRyaWJ1dGUoXCJtb3JwaFRhcmdldFwiK20pLGYmJmUucmVtb3ZlQXR0cmlidXRlKFwibW9ycGhOb3JtYWxcIittKSl9Zm9yKG09MDttPGs7bSsrKW49ZFttXSxuWzBdPW0sblsxXT1oW21dO2Quc29ydChrZyk7Zm9yKG09MDs4Pm07bSsrKXtpZihuPWRbbV0paWYoaD1uWzBdLG49blsxXSl7cSYmZS5hZGRBdHRyaWJ1dGUoXCJtb3JwaFRhcmdldFwiK20scVtoXSk7ZiYmZS5hZGRBdHRyaWJ1dGUoXCJtb3JwaE5vcm1hbFwiK20sZltoXSk7Y1ttXT1uO2NvbnRpbnVlfWNbbV09MH1nLmdldFVuaWZvcm1zKCkuc2V0VmFsdWUoYSxcIm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1wiLGMpfX19ZnVuY3Rpb24gbWcoYSxiLGMpe3ZhciBkLGUsZjt0aGlzLnNldE1vZGU9ZnVuY3Rpb24oYSl7ZD1cbiAgICBhfTt0aGlzLnNldEluZGV4PWZ1bmN0aW9uKGEpe2U9YS50eXBlO2Y9YS5ieXRlc1BlckVsZW1lbnR9O3RoaXMucmVuZGVyPWZ1bmN0aW9uKGIsaCl7YS5kcmF3RWxlbWVudHMoZCxoLGUsYipmKTtjLmNhbGxzKys7Yy52ZXJ0aWNlcys9aDtkPT09YS5UUklBTkdMRVM/Yy5mYWNlcys9aC8zOmQ9PT1hLlBPSU5UUyYmKGMucG9pbnRzKz1oKX07dGhpcy5yZW5kZXJJbnN0YW5jZXM9ZnVuY3Rpb24oZyxoLGspe3ZhciBtPWIuZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKTtudWxsPT09bT9jb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLlwiKToobS5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRShkLGssZSxoKmYsZy5tYXhJbnN0YW5jZWRDb3VudCksYy5jYWxscysrLGMudmVydGljZXMrPVxuICAgIGsqZy5tYXhJbnN0YW5jZWRDb3VudCxkPT09YS5UUklBTkdMRVM/Yy5mYWNlcys9Zy5tYXhJbnN0YW5jZWRDb3VudCprLzM6ZD09PWEuUE9JTlRTJiYoYy5wb2ludHMrPWcubWF4SW5zdGFuY2VkQ291bnQqaykpfX1mdW5jdGlvbiBuZyhhLGIsYyl7dmFyIGQ7dGhpcy5zZXRNb2RlPWZ1bmN0aW9uKGEpe2Q9YX07dGhpcy5yZW5kZXI9ZnVuY3Rpb24oYixmKXthLmRyYXdBcnJheXMoZCxiLGYpO2MuY2FsbHMrKztjLnZlcnRpY2VzKz1mO2Q9PT1hLlRSSUFOR0xFUz9jLmZhY2VzKz1mLzM6ZD09PWEuUE9JTlRTJiYoYy5wb2ludHMrPWYpfTt0aGlzLnJlbmRlckluc3RhbmNlcz1mdW5jdGlvbihlLGYsZyl7dmFyIGg9Yi5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpO2lmKG51bGw9PT1oKWNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy5cIik7XG4gICAgZWxzZXt2YXIgaz1lLmF0dHJpYnV0ZXMucG9zaXRpb247ay5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlPyhnPWsuZGF0YS5jb3VudCxoLmRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRShkLDAsZyxlLm1heEluc3RhbmNlZENvdW50KSk6aC5kcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUoZCxmLGcsZS5tYXhJbnN0YW5jZWRDb3VudCk7Yy5jYWxscysrO2MudmVydGljZXMrPWcqZS5tYXhJbnN0YW5jZWRDb3VudDtkPT09YS5UUklBTkdMRVM/Yy5mYWNlcys9ZS5tYXhJbnN0YW5jZWRDb3VudCpnLzM6ZD09PWEuUE9JTlRTJiYoYy5wb2ludHMrPWUubWF4SW5zdGFuY2VkQ291bnQqZyl9fX1mdW5jdGlvbiBvZyhhLGIsYyl7ZnVuY3Rpb24gZChhKXthPWEudGFyZ2V0O3ZhciBoPWVbYS5pZF07bnVsbCE9PWguaW5kZXgmJmIucmVtb3ZlKGguaW5kZXgpO2Zvcih2YXIgZyBpbiBoLmF0dHJpYnV0ZXMpYi5yZW1vdmUoaC5hdHRyaWJ1dGVzW2ddKTthLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsXG4gICAgZCk7ZGVsZXRlIGVbYS5pZF07aWYoZz1mW2EuaWRdKWIucmVtb3ZlKGcpLGRlbGV0ZSBmW2EuaWRdO2lmKGc9ZltoLmlkXSliLnJlbW92ZShnKSxkZWxldGUgZltoLmlkXTtjLmdlb21ldHJpZXMtLX12YXIgZT17fSxmPXt9O3JldHVybntnZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgZj1lW2IuaWRdO2lmKGYpcmV0dXJuIGY7Yi5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGQpO2IuaXNCdWZmZXJHZW9tZXRyeT9mPWI6Yi5pc0dlb21ldHJ5JiYodm9pZCAwPT09Yi5fYnVmZmVyR2VvbWV0cnkmJihiLl9idWZmZXJHZW9tZXRyeT0obmV3IEUpLnNldEZyb21PYmplY3QoYSkpLGY9Yi5fYnVmZmVyR2VvbWV0cnkpO2VbYi5pZF09ZjtjLmdlb21ldHJpZXMrKztyZXR1cm4gZn0sdXBkYXRlOmZ1bmN0aW9uKGMpe3ZhciBkPWMuaW5kZXgsZT1jLmF0dHJpYnV0ZXM7bnVsbCE9PWQmJmIudXBkYXRlKGQsYS5FTEVNRU5UX0FSUkFZX0JVRkZFUik7Zm9yKHZhciBmIGluIGUpYi51cGRhdGUoZVtmXSxcbiAgICBhLkFSUkFZX0JVRkZFUik7Yz1jLm1vcnBoQXR0cmlidXRlcztmb3IoZiBpbiBjKWZvcih2YXIgZD1jW2ZdLGU9MCxnPWQubGVuZ3RoO2U8ZztlKyspYi51cGRhdGUoZFtlXSxhLkFSUkFZX0JVRkZFUil9LGdldFdpcmVmcmFtZUF0dHJpYnV0ZTpmdW5jdGlvbihjKXt2YXIgZD1mW2MuaWRdO2lmKGQpcmV0dXJuIGQ7ZD1bXTt2YXIgZT1jLmluZGV4O3ZhciBnPWMuYXR0cmlidXRlcztpZihudWxsIT09ZSl7dmFyIHE9ZS5hcnJheTtmb3IodmFyIG49MCx1PXEubGVuZ3RoO248dTtuKz0zKXt2YXIgcj1xW24rMF07Zz1xW24rMV07ZT1xW24rMl07ZC5wdXNoKHIsZyxnLGUsZSxyKX19ZWxzZSBmb3IocT1nLnBvc2l0aW9uLmFycmF5LG49MCx1PXEubGVuZ3RoLzMtMTtuPHU7bis9MylyPW4rMCxnPW4rMSxlPW4rMixkLnB1c2gocixnLGcsZSxlLHIpO2Q9bmV3ICg2NTUzNTxYZChkKT9wYjpvYikoZCwxKTtiLnVwZGF0ZShkLGEuRUxFTUVOVF9BUlJBWV9CVUZGRVIpO3JldHVybiBmW2MuaWRdPVxuICAgIGR9fX1mdW5jdGlvbiBwZygpe3ZhciBhPXt9O3JldHVybntnZXQ6ZnVuY3Rpb24oYil7aWYodm9pZCAwIT09YVtiLmlkXSlyZXR1cm4gYVtiLmlkXTtzd2l0Y2goYi50eXBlKXtjYXNlIFwiRGlyZWN0aW9uYWxMaWdodFwiOnZhciBjPXtkaXJlY3Rpb246bmV3IHAsY29sb3I6bmV3IEgsc2hhZG93OiExLHNoYWRvd0JpYXM6MCxzaGFkb3dSYWRpdXM6MSxzaGFkb3dNYXBTaXplOm5ldyBEfTticmVhaztjYXNlIFwiU3BvdExpZ2h0XCI6Yz17cG9zaXRpb246bmV3IHAsZGlyZWN0aW9uOm5ldyBwLGNvbG9yOm5ldyBILGRpc3RhbmNlOjAsY29uZUNvczowLHBlbnVtYnJhQ29zOjAsZGVjYXk6MCxzaGFkb3c6ITEsc2hhZG93QmlhczowLHNoYWRvd1JhZGl1czoxLHNoYWRvd01hcFNpemU6bmV3IER9O2JyZWFrO2Nhc2UgXCJQb2ludExpZ2h0XCI6Yz17cG9zaXRpb246bmV3IHAsY29sb3I6bmV3IEgsZGlzdGFuY2U6MCxkZWNheTowLHNoYWRvdzohMSxzaGFkb3dCaWFzOjAsc2hhZG93UmFkaXVzOjEsc2hhZG93TWFwU2l6ZTpuZXcgRCxcbiAgICBzaGFkb3dDYW1lcmFOZWFyOjEsc2hhZG93Q2FtZXJhRmFyOjFFM307YnJlYWs7Y2FzZSBcIkhlbWlzcGhlcmVMaWdodFwiOmM9e2RpcmVjdGlvbjpuZXcgcCxza3lDb2xvcjpuZXcgSCxncm91bmRDb2xvcjpuZXcgSH07YnJlYWs7Y2FzZSBcIlJlY3RBcmVhTGlnaHRcIjpjPXtjb2xvcjpuZXcgSCxwb3NpdGlvbjpuZXcgcCxoYWxmV2lkdGg6bmV3IHAsaGFsZkhlaWdodDpuZXcgcH19cmV0dXJuIGFbYi5pZF09Y319fWZ1bmN0aW9uIHFnKCl7dmFyIGE9bmV3IHBnLGI9e2hhc2g6XCJcIixhbWJpZW50OlswLDAsMF0sZGlyZWN0aW9uYWw6W10sZGlyZWN0aW9uYWxTaGFkb3dNYXA6W10sZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6W10sc3BvdDpbXSxzcG90U2hhZG93TWFwOltdLHNwb3RTaGFkb3dNYXRyaXg6W10scmVjdEFyZWE6W10scG9pbnQ6W10scG9pbnRTaGFkb3dNYXA6W10scG9pbnRTaGFkb3dNYXRyaXg6W10saGVtaTpbXX0sYz1uZXcgcCxkPW5ldyBPLGU9bmV3IE87cmV0dXJue3NldHVwOmZ1bmN0aW9uKGYsXG4gICAgZyxoKXtmb3IodmFyIGssbT0wLHE9MCxuPTAsdT0wLHI9MCx0PTAsbD0wLHc9MCxwPWgubWF0cml4V29ybGRJbnZlcnNlLHk9MCxJPWYubGVuZ3RoO3k8STt5Kyspe3ZhciBBPWZbeV07az1BLmNvbG9yO3ZhciBKPUEuaW50ZW5zaXR5LEhhPUEuZGlzdGFuY2UsRGE9QS5zaGFkb3cmJkEuc2hhZG93Lm1hcD9BLnNoYWRvdy5tYXAudGV4dHVyZTpudWxsO2lmKEEuaXNBbWJpZW50TGlnaHQpbSs9ay5yKkoscSs9ay5nKkosbis9ay5iKko7ZWxzZSBpZihBLmlzRGlyZWN0aW9uYWxMaWdodCl7aD1hLmdldChBKTtoLmNvbG9yLmNvcHkoQS5jb2xvcikubXVsdGlwbHlTY2FsYXIoQS5pbnRlbnNpdHkpO2guZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihBLm1hdHJpeFdvcmxkKTtjLnNldEZyb21NYXRyaXhQb3NpdGlvbihBLnRhcmdldC5tYXRyaXhXb3JsZCk7aC5kaXJlY3Rpb24uc3ViKGMpO2guZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbihwKTtpZihoLnNoYWRvdz1BLmNhc3RTaGFkb3cpaz1cbiAgICBBLnNoYWRvdyxoLnNoYWRvd0JpYXM9ay5iaWFzLGguc2hhZG93UmFkaXVzPWsucmFkaXVzLGguc2hhZG93TWFwU2l6ZT1rLm1hcFNpemU7Yi5kaXJlY3Rpb25hbFNoYWRvd01hcFt1XT1EYTtiLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4W3VdPUEuc2hhZG93Lm1hdHJpeDtiLmRpcmVjdGlvbmFsW3VdPWg7dSsrfWVsc2UgaWYoQS5pc1Nwb3RMaWdodCl7aD1hLmdldChBKTtoLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihBLm1hdHJpeFdvcmxkKTtoLnBvc2l0aW9uLmFwcGx5TWF0cml4NChwKTtoLmNvbG9yLmNvcHkoaykubXVsdGlwbHlTY2FsYXIoSik7aC5kaXN0YW5jZT1IYTtoLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oQS5tYXRyaXhXb3JsZCk7Yy5zZXRGcm9tTWF0cml4UG9zaXRpb24oQS50YXJnZXQubWF0cml4V29ybGQpO2guZGlyZWN0aW9uLnN1YihjKTtoLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24ocCk7aC5jb25lQ29zPU1hdGguY29zKEEuYW5nbGUpO1xuICAgIGgucGVudW1icmFDb3M9TWF0aC5jb3MoQS5hbmdsZSooMS1BLnBlbnVtYnJhKSk7aC5kZWNheT0wPT09QS5kaXN0YW5jZT8wOkEuZGVjYXk7aWYoaC5zaGFkb3c9QS5jYXN0U2hhZG93KWs9QS5zaGFkb3csaC5zaGFkb3dCaWFzPWsuYmlhcyxoLnNoYWRvd1JhZGl1cz1rLnJhZGl1cyxoLnNoYWRvd01hcFNpemU9ay5tYXBTaXplO2Iuc3BvdFNoYWRvd01hcFt0XT1EYTtiLnNwb3RTaGFkb3dNYXRyaXhbdF09QS5zaGFkb3cubWF0cml4O2Iuc3BvdFt0XT1oO3QrK31lbHNlIGlmKEEuaXNSZWN0QXJlYUxpZ2h0KWg9YS5nZXQoQSksaC5jb2xvci5jb3B5KGspLm11bHRpcGx5U2NhbGFyKEovKEEud2lkdGgqQS5oZWlnaHQpKSxoLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihBLm1hdHJpeFdvcmxkKSxoLnBvc2l0aW9uLmFwcGx5TWF0cml4NChwKSxlLmlkZW50aXR5KCksZC5jb3B5KEEubWF0cml4V29ybGQpLGQucHJlbXVsdGlwbHkocCksZS5leHRyYWN0Um90YXRpb24oZCksaC5oYWxmV2lkdGguc2V0KC41KlxuICAgIEEud2lkdGgsMCwwKSxoLmhhbGZIZWlnaHQuc2V0KDAsLjUqQS5oZWlnaHQsMCksaC5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KGUpLGguaGFsZkhlaWdodC5hcHBseU1hdHJpeDQoZSksYi5yZWN0QXJlYVtsXT1oLGwrKztlbHNlIGlmKEEuaXNQb2ludExpZ2h0KXtoPWEuZ2V0KEEpO2gucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKEEubWF0cml4V29ybGQpO2gucG9zaXRpb24uYXBwbHlNYXRyaXg0KHApO2guY29sb3IuY29weShBLmNvbG9yKS5tdWx0aXBseVNjYWxhcihBLmludGVuc2l0eSk7aC5kaXN0YW5jZT1BLmRpc3RhbmNlO2guZGVjYXk9MD09PUEuZGlzdGFuY2U/MDpBLmRlY2F5O2lmKGguc2hhZG93PUEuY2FzdFNoYWRvdylrPUEuc2hhZG93LGguc2hhZG93Qmlhcz1rLmJpYXMsaC5zaGFkb3dSYWRpdXM9ay5yYWRpdXMsaC5zaGFkb3dNYXBTaXplPWsubWFwU2l6ZSxoLnNoYWRvd0NhbWVyYU5lYXI9ay5jYW1lcmEubmVhcixoLnNoYWRvd0NhbWVyYUZhcj1rLmNhbWVyYS5mYXI7XG4gICAgYi5wb2ludFNoYWRvd01hcFtyXT1EYTtiLnBvaW50U2hhZG93TWF0cml4W3JdPUEuc2hhZG93Lm1hdHJpeDtiLnBvaW50W3JdPWg7cisrfWVsc2UgQS5pc0hlbWlzcGhlcmVMaWdodCYmKGg9YS5nZXQoQSksaC5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKEEubWF0cml4V29ybGQpLGguZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbihwKSxoLmRpcmVjdGlvbi5ub3JtYWxpemUoKSxoLnNreUNvbG9yLmNvcHkoQS5jb2xvcikubXVsdGlwbHlTY2FsYXIoSiksaC5ncm91bmRDb2xvci5jb3B5KEEuZ3JvdW5kQ29sb3IpLm11bHRpcGx5U2NhbGFyKEopLGIuaGVtaVt3XT1oLHcrKyl9Yi5hbWJpZW50WzBdPW07Yi5hbWJpZW50WzFdPXE7Yi5hbWJpZW50WzJdPW47Yi5kaXJlY3Rpb25hbC5sZW5ndGg9dTtiLnNwb3QubGVuZ3RoPXQ7Yi5yZWN0QXJlYS5sZW5ndGg9bDtiLnBvaW50Lmxlbmd0aD1yO2IuaGVtaS5sZW5ndGg9dztiLmhhc2g9dStcIixcIityK1wiLFwiK3QrXCIsXCIrbCtcIixcIitcbiAgICB3K1wiLFwiK2cubGVuZ3RofSxzdGF0ZTpifX1mdW5jdGlvbiByZyhhLGIpe3ZhciBjPXt9O3JldHVybnt1cGRhdGU6ZnVuY3Rpb24oZCl7dmFyIGU9Yi5mcmFtZSxmPWQuZ2VvbWV0cnksZz1hLmdldChkLGYpO2NbZy5pZF0hPT1lJiYoZi5pc0dlb21ldHJ5JiZnLnVwZGF0ZUZyb21PYmplY3QoZCksYS51cGRhdGUoZyksY1tnLmlkXT1lKTtyZXR1cm4gZ30sY2xlYXI6ZnVuY3Rpb24oKXtjPXt9fX19ZnVuY3Rpb24gc2coYSl7YT1hLnNwbGl0KFwiXFxuXCIpO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKWFbYl09YisxK1wiOiBcIithW2JdO3JldHVybiBhLmpvaW4oXCJcXG5cIil9ZnVuY3Rpb24gV2UoYSxiLGMpe3ZhciBkPWEuY3JlYXRlU2hhZGVyKGIpO2Euc2hhZGVyU291cmNlKGQsYyk7YS5jb21waWxlU2hhZGVyKGQpOyExPT09YS5nZXRTaGFkZXJQYXJhbWV0ZXIoZCxhLkNPTVBJTEVfU1RBVFVTKSYmY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMU2hhZGVyOiBTaGFkZXIgY291bGRuJ3QgY29tcGlsZS5cIik7XG4gICAgXCJcIiE9PWEuZ2V0U2hhZGVySW5mb0xvZyhkKSYmY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xTaGFkZXI6IGdsLmdldFNoYWRlckluZm9Mb2coKVwiLGI9PT1hLlZFUlRFWF9TSEFERVI/XCJ2ZXJ0ZXhcIjpcImZyYWdtZW50XCIsYS5nZXRTaGFkZXJJbmZvTG9nKGQpLHNnKGMpKTtyZXR1cm4gZH1mdW5jdGlvbiBYZShhKXtzd2l0Y2goYSl7Y2FzZSAzRTM6cmV0dXJuW1wiTGluZWFyXCIsXCIoIHZhbHVlIClcIl07Y2FzZSAzMDAxOnJldHVybltcInNSR0JcIixcIiggdmFsdWUgKVwiXTtjYXNlIDMwMDI6cmV0dXJuW1wiUkdCRVwiLFwiKCB2YWx1ZSApXCJdO2Nhc2UgMzAwNDpyZXR1cm5bXCJSR0JNXCIsXCIoIHZhbHVlLCA3LjAgKVwiXTtjYXNlIDMwMDU6cmV0dXJuW1wiUkdCTVwiLFwiKCB2YWx1ZSwgMTYuMCApXCJdO2Nhc2UgMzAwNjpyZXR1cm5bXCJSR0JEXCIsXCIoIHZhbHVlLCAyNTYuMCApXCJdO2Nhc2UgMzAwNzpyZXR1cm5bXCJHYW1tYVwiLFwiKCB2YWx1ZSwgZmxvYXQoIEdBTU1BX0ZBQ1RPUiApIClcIl07ZGVmYXVsdDp0aHJvdyBFcnJvcihcInVuc3VwcG9ydGVkIGVuY29kaW5nOiBcIitcbiAgICBhKTt9fWZ1bmN0aW9uIFlkKGEsYil7Yj1YZShiKTtyZXR1cm5cInZlYzQgXCIrYStcIiggdmVjNCB2YWx1ZSApIHsgcmV0dXJuIFwiK2JbMF0rXCJUb0xpbmVhclwiK2JbMV0rXCI7IH1cIn1mdW5jdGlvbiB0ZyhhLGIpe2I9WGUoYik7cmV0dXJuXCJ2ZWM0IFwiK2ErXCIoIHZlYzQgdmFsdWUgKSB7IHJldHVybiBMaW5lYXJUb1wiK2JbMF0rYlsxXStcIjsgfVwifWZ1bmN0aW9uIHVnKGEsYil7c3dpdGNoKGIpe2Nhc2UgMTpiPVwiTGluZWFyXCI7YnJlYWs7Y2FzZSAyOmI9XCJSZWluaGFyZFwiO2JyZWFrO2Nhc2UgMzpiPVwiVW5jaGFydGVkMlwiO2JyZWFrO2Nhc2UgNDpiPVwiT3B0aW1pemVkQ2luZW9uXCI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcInVuc3VwcG9ydGVkIHRvbmVNYXBwaW5nOiBcIitiKTt9cmV0dXJuXCJ2ZWMzIFwiK2ErXCIoIHZlYzMgY29sb3IgKSB7IHJldHVybiBcIitiK1wiVG9uZU1hcHBpbmcoIGNvbG9yICk7IH1cIn1mdW5jdGlvbiB2ZyhhLGIsYyl7YT1hfHx7fTtyZXR1cm5bYS5kZXJpdmF0aXZlc3x8XG4gICAgYi5lbnZNYXBDdWJlVVZ8fGIuYnVtcE1hcHx8Yi5ub3JtYWxNYXB8fGIuZmxhdFNoYWRpbmc/XCIjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZVwiOlwiXCIsKGEuZnJhZ0RlcHRofHxiLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIpJiZjLmdldChcIkVYVF9mcmFnX2RlcHRoXCIpP1wiI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVwiOlwiXCIsYS5kcmF3QnVmZmVycyYmYy5nZXQoXCJXRUJHTF9kcmF3X2J1ZmZlcnNcIik/XCIjZXh0ZW5zaW9uIEdMX0VYVF9kcmF3X2J1ZmZlcnMgOiByZXF1aXJlXCI6XCJcIiwoYS5zaGFkZXJUZXh0dXJlTE9EfHxiLmVudk1hcCkmJmMuZ2V0KFwiRVhUX3NoYWRlcl90ZXh0dXJlX2xvZFwiKT9cIiNleHRlbnNpb24gR0xfRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCA6IGVuYWJsZVwiOlwiXCJdLmZpbHRlcihCYykuam9pbihcIlxcblwiKX1mdW5jdGlvbiB3ZyhhKXt2YXIgYj1bXSxjO2ZvcihjIGluIGEpe3ZhciBkPWFbY107ITEhPT1kJiZiLnB1c2goXCIjZGVmaW5lIFwiK1xuICAgIGMrXCIgXCIrZCl9cmV0dXJuIGIuam9pbihcIlxcblwiKX1mdW5jdGlvbiBCYyhhKXtyZXR1cm5cIlwiIT09YX1mdW5jdGlvbiBZZShhLGIpe3JldHVybiBhLnJlcGxhY2UoL05VTV9ESVJfTElHSFRTL2csYi5udW1EaXJMaWdodHMpLnJlcGxhY2UoL05VTV9TUE9UX0xJR0hUUy9nLGIubnVtU3BvdExpZ2h0cykucmVwbGFjZSgvTlVNX1JFQ1RfQVJFQV9MSUdIVFMvZyxiLm51bVJlY3RBcmVhTGlnaHRzKS5yZXBsYWNlKC9OVU1fUE9JTlRfTElHSFRTL2csYi5udW1Qb2ludExpZ2h0cykucmVwbGFjZSgvTlVNX0hFTUlfTElHSFRTL2csYi5udW1IZW1pTGlnaHRzKX1mdW5jdGlvbiBaZChhKXtyZXR1cm4gYS5yZXBsYWNlKC9eWyBcXHRdKiNpbmNsdWRlICs8KFtcXHdcXGQuXSspPi9nbSxmdW5jdGlvbihhLGMpe2E9UltjXTtpZih2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiQ2FuIG5vdCByZXNvbHZlICNpbmNsdWRlIDxcIitjK1wiPlwiKTtyZXR1cm4gWmQoYSl9KX1mdW5jdGlvbiBaZShhKXtyZXR1cm4gYS5yZXBsYWNlKC9mb3IgXFwoIGludCBpIFxcPSAoXFxkKylcXDsgaSA8IChcXGQrKVxcOyBpIFxcK1xcKyBcXCkgXFx7KFtcXHNcXFNdKz8pKD89XFx9KVxcfS9nLFxuICAgIGZ1bmN0aW9uKGEsYyxkLGUpe2E9XCJcIjtmb3IoYz1wYXJzZUludChjKTtjPHBhcnNlSW50KGQpO2MrKylhKz1lLnJlcGxhY2UoL1xcWyBpIFxcXS9nLFwiWyBcIitjK1wiIF1cIik7cmV0dXJuIGF9KX1mdW5jdGlvbiB4ZyhhLGIsYyxkLGUsZil7dmFyIGc9YS5jb250ZXh0LGg9ZC5kZWZpbmVzLGs9ZS52ZXJ0ZXhTaGFkZXIsbT1lLmZyYWdtZW50U2hhZGVyLHE9XCJTSEFET1dNQVBfVFlQRV9CQVNJQ1wiOzE9PT1mLnNoYWRvd01hcFR5cGU/cT1cIlNIQURPV01BUF9UWVBFX1BDRlwiOjI9PT1mLnNoYWRvd01hcFR5cGUmJihxPVwiU0hBRE9XTUFQX1RZUEVfUENGX1NPRlRcIik7dmFyIG49XCJFTlZNQVBfVFlQRV9DVUJFXCIsdT1cIkVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cIixyPVwiRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXCI7aWYoZi5lbnZNYXApe3N3aXRjaChkLmVudk1hcC5tYXBwaW5nKXtjYXNlIDMwMTpjYXNlIDMwMjpuPVwiRU5WTUFQX1RZUEVfQ1VCRVwiO2JyZWFrO2Nhc2UgMzA2OmNhc2UgMzA3Om49XCJFTlZNQVBfVFlQRV9DVUJFX1VWXCI7XG4gICAgYnJlYWs7Y2FzZSAzMDM6Y2FzZSAzMDQ6bj1cIkVOVk1BUF9UWVBFX0VRVUlSRUNcIjticmVhaztjYXNlIDMwNTpuPVwiRU5WTUFQX1RZUEVfU1BIRVJFXCJ9c3dpdGNoKGQuZW52TWFwLm1hcHBpbmcpe2Nhc2UgMzAyOmNhc2UgMzA0OnU9XCJFTlZNQVBfTU9ERV9SRUZSQUNUSU9OXCJ9c3dpdGNoKGQuY29tYmluZSl7Y2FzZSAwOnI9XCJFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcIjticmVhaztjYXNlIDE6cj1cIkVOVk1BUF9CTEVORElOR19NSVhcIjticmVhaztjYXNlIDI6cj1cIkVOVk1BUF9CTEVORElOR19BRERcIn19dmFyIHQ9MDxhLmdhbW1hRmFjdG9yP2EuZ2FtbWFGYWN0b3I6MSxsPXZnKGQuZXh0ZW5zaW9ucyxmLGIpLHA9d2coaCksej1nLmNyZWF0ZVByb2dyYW0oKTtkLmlzUmF3U2hhZGVyTWF0ZXJpYWw/KGg9W3BdLmZpbHRlcihCYykuam9pbihcIlxcblwiKSwwPGgubGVuZ3RoJiYoaCs9XCJcXG5cIiksYj1bbCxwXS5maWx0ZXIoQmMpLmpvaW4oXCJcXG5cIiksMDxiLmxlbmd0aCYmKGIrPVwiXFxuXCIpKTooaD1cbiAgICBbXCJwcmVjaXNpb24gXCIrZi5wcmVjaXNpb24rXCIgZmxvYXQ7XCIsXCJwcmVjaXNpb24gXCIrZi5wcmVjaXNpb24rXCIgaW50O1wiLFwiI2RlZmluZSBTSEFERVJfTkFNRSBcIitlLm5hbWUscCxmLnN1cHBvcnRzVmVydGV4VGV4dHVyZXM/XCIjZGVmaW5lIFZFUlRFWF9URVhUVVJFU1wiOlwiXCIsXCIjZGVmaW5lIEdBTU1BX0ZBQ1RPUiBcIit0LFwiI2RlZmluZSBNQVhfQk9ORVMgXCIrZi5tYXhCb25lcyxmLnVzZUZvZyYmZi5mb2c/XCIjZGVmaW5lIFVTRV9GT0dcIjpcIlwiLGYudXNlRm9nJiZmLmZvZ0V4cD9cIiNkZWZpbmUgRk9HX0VYUDJcIjpcIlwiLGYubWFwP1wiI2RlZmluZSBVU0VfTUFQXCI6XCJcIixmLmVudk1hcD9cIiNkZWZpbmUgVVNFX0VOVk1BUFwiOlwiXCIsZi5lbnZNYXA/XCIjZGVmaW5lIFwiK3U6XCJcIixmLmxpZ2h0TWFwP1wiI2RlZmluZSBVU0VfTElHSFRNQVBcIjpcIlwiLGYuYW9NYXA/XCIjZGVmaW5lIFVTRV9BT01BUFwiOlwiXCIsZi5lbWlzc2l2ZU1hcD9cIiNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQXCI6XCJcIixmLmJ1bXBNYXA/XCIjZGVmaW5lIFVTRV9CVU1QTUFQXCI6XG4gICAgXCJcIixmLm5vcm1hbE1hcD9cIiNkZWZpbmUgVVNFX05PUk1BTE1BUFwiOlwiXCIsZi5kaXNwbGFjZW1lbnRNYXAmJmYuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcz9cIiNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUFwiOlwiXCIsZi5zcGVjdWxhck1hcD9cIiNkZWZpbmUgVVNFX1NQRUNVTEFSTUFQXCI6XCJcIixmLnJvdWdobmVzc01hcD9cIiNkZWZpbmUgVVNFX1JPVUdITkVTU01BUFwiOlwiXCIsZi5tZXRhbG5lc3NNYXA/XCIjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVBcIjpcIlwiLGYuYWxwaGFNYXA/XCIjZGVmaW5lIFVTRV9BTFBIQU1BUFwiOlwiXCIsZi52ZXJ0ZXhDb2xvcnM/XCIjZGVmaW5lIFVTRV9DT0xPUlwiOlwiXCIsZi5mbGF0U2hhZGluZz9cIiNkZWZpbmUgRkxBVF9TSEFERURcIjpcIlwiLGYuc2tpbm5pbmc/XCIjZGVmaW5lIFVTRV9TS0lOTklOR1wiOlwiXCIsZi51c2VWZXJ0ZXhUZXh0dXJlP1wiI2RlZmluZSBCT05FX1RFWFRVUkVcIjpcIlwiLGYubW9ycGhUYXJnZXRzP1wiI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTXCI6XCJcIixmLm1vcnBoTm9ybWFscyYmXG4gICAgITE9PT1mLmZsYXRTaGFkaW5nP1wiI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTXCI6XCJcIixmLmRvdWJsZVNpZGVkP1wiI2RlZmluZSBET1VCTEVfU0lERURcIjpcIlwiLGYuZmxpcFNpZGVkP1wiI2RlZmluZSBGTElQX1NJREVEXCI6XCJcIixcIiNkZWZpbmUgTlVNX0NMSVBQSU5HX1BMQU5FUyBcIitmLm51bUNsaXBwaW5nUGxhbmVzLGYuc2hhZG93TWFwRW5hYmxlZD9cIiNkZWZpbmUgVVNFX1NIQURPV01BUFwiOlwiXCIsZi5zaGFkb3dNYXBFbmFibGVkP1wiI2RlZmluZSBcIitxOlwiXCIsZi5zaXplQXR0ZW51YXRpb24/XCIjZGVmaW5lIFVTRV9TSVpFQVRURU5VQVRJT05cIjpcIlwiLGYubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcj9cIiNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGXCI6XCJcIixmLmxvZ2FyaXRobWljRGVwdGhCdWZmZXImJmIuZ2V0KFwiRVhUX2ZyYWdfZGVwdGhcIik/XCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFRcIjpcIlwiLFwidW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1wiLFwidW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcIixcbiAgICBcInVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1wiLFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIsXCJ1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4O1wiLFwidW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO1wiLFwiYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XCIsXCJhdHRyaWJ1dGUgdmVjMyBub3JtYWw7XCIsXCJhdHRyaWJ1dGUgdmVjMiB1djtcIixcIiNpZmRlZiBVU0VfQ09MT1JcIixcIlxcdGF0dHJpYnV0ZSB2ZWMzIGNvbG9yO1wiLFwiI2VuZGlmXCIsXCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1wiLFwiXFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQwO1wiLFwiXFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQxO1wiLFwiXFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQyO1wiLFwiXFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQzO1wiLFwiXFx0I2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcIixcIlxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMDtcIixcIlxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMTtcIixcbiAgICBcIlxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMjtcIixcIlxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMztcIixcIlxcdCNlbHNlXCIsXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDQ7XCIsXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDU7XCIsXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDY7XCIsXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDc7XCIsXCJcXHQjZW5kaWZcIixcIiNlbmRpZlwiLFwiI2lmZGVmIFVTRV9TS0lOTklOR1wiLFwiXFx0YXR0cmlidXRlIHZlYzQgc2tpbkluZGV4O1wiLFwiXFx0YXR0cmlidXRlIHZlYzQgc2tpbldlaWdodDtcIixcIiNlbmRpZlwiLFwiXFxuXCJdLmZpbHRlcihCYykuam9pbihcIlxcblwiKSxiPVtsLFwicHJlY2lzaW9uIFwiK2YucHJlY2lzaW9uK1wiIGZsb2F0O1wiLFwicHJlY2lzaW9uIFwiK2YucHJlY2lzaW9uK1wiIGludDtcIixcIiNkZWZpbmUgU0hBREVSX05BTUUgXCIrZS5uYW1lLHAsZi5hbHBoYVRlc3Q/XCIjZGVmaW5lIEFMUEhBVEVTVCBcIitmLmFscGhhVGVzdDpcbiAgICBcIlwiLFwiI2RlZmluZSBHQU1NQV9GQUNUT1IgXCIrdCxmLnVzZUZvZyYmZi5mb2c/XCIjZGVmaW5lIFVTRV9GT0dcIjpcIlwiLGYudXNlRm9nJiZmLmZvZ0V4cD9cIiNkZWZpbmUgRk9HX0VYUDJcIjpcIlwiLGYubWFwP1wiI2RlZmluZSBVU0VfTUFQXCI6XCJcIixmLmVudk1hcD9cIiNkZWZpbmUgVVNFX0VOVk1BUFwiOlwiXCIsZi5lbnZNYXA/XCIjZGVmaW5lIFwiK246XCJcIixmLmVudk1hcD9cIiNkZWZpbmUgXCIrdTpcIlwiLGYuZW52TWFwP1wiI2RlZmluZSBcIityOlwiXCIsZi5saWdodE1hcD9cIiNkZWZpbmUgVVNFX0xJR0hUTUFQXCI6XCJcIixmLmFvTWFwP1wiI2RlZmluZSBVU0VfQU9NQVBcIjpcIlwiLGYuZW1pc3NpdmVNYXA/XCIjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUFwiOlwiXCIsZi5idW1wTWFwP1wiI2RlZmluZSBVU0VfQlVNUE1BUFwiOlwiXCIsZi5ub3JtYWxNYXA/XCIjZGVmaW5lIFVTRV9OT1JNQUxNQVBcIjpcIlwiLGYuc3BlY3VsYXJNYXA/XCIjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUFwiOlwiXCIsZi5yb3VnaG5lc3NNYXA/XCIjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVBcIjpcbiAgICBcIlwiLGYubWV0YWxuZXNzTWFwP1wiI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQXCI6XCJcIixmLmFscGhhTWFwP1wiI2RlZmluZSBVU0VfQUxQSEFNQVBcIjpcIlwiLGYudmVydGV4Q29sb3JzP1wiI2RlZmluZSBVU0VfQ09MT1JcIjpcIlwiLGYuZ3JhZGllbnRNYXA/XCIjZGVmaW5lIFVTRV9HUkFESUVOVE1BUFwiOlwiXCIsZi5mbGF0U2hhZGluZz9cIiNkZWZpbmUgRkxBVF9TSEFERURcIjpcIlwiLGYuZG91YmxlU2lkZWQ/XCIjZGVmaW5lIERPVUJMRV9TSURFRFwiOlwiXCIsZi5mbGlwU2lkZWQ/XCIjZGVmaW5lIEZMSVBfU0lERURcIjpcIlwiLFwiI2RlZmluZSBOVU1fQ0xJUFBJTkdfUExBTkVTIFwiK2YubnVtQ2xpcHBpbmdQbGFuZXMsXCIjZGVmaW5lIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyBcIisoZi5udW1DbGlwcGluZ1BsYW5lcy1mLm51bUNsaXBJbnRlcnNlY3Rpb24pLGYuc2hhZG93TWFwRW5hYmxlZD9cIiNkZWZpbmUgVVNFX1NIQURPV01BUFwiOlwiXCIsZi5zaGFkb3dNYXBFbmFibGVkP1wiI2RlZmluZSBcIitxOlwiXCIsZi5wcmVtdWx0aXBsaWVkQWxwaGE/XG4gICAgXCIjZGVmaW5lIFBSRU1VTFRJUExJRURfQUxQSEFcIjpcIlwiLGYucGh5c2ljYWxseUNvcnJlY3RMaWdodHM/XCIjZGVmaW5lIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcIjpcIlwiLGYubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcj9cIiNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGXCI6XCJcIixmLmxvZ2FyaXRobWljRGVwdGhCdWZmZXImJmIuZ2V0KFwiRVhUX2ZyYWdfZGVwdGhcIik/XCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFRcIjpcIlwiLGYuZW52TWFwJiZiLmdldChcIkVYVF9zaGFkZXJfdGV4dHVyZV9sb2RcIik/XCIjZGVmaW5lIFRFWFRVUkVfTE9EX0VYVFwiOlwiXCIsXCJ1bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcIixcInVuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjtcIiwwIT09Zi50b25lTWFwcGluZz9cIiNkZWZpbmUgVE9ORV9NQVBQSU5HXCI6XCJcIiwwIT09Zi50b25lTWFwcGluZz9SLnRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQ6XCJcIiwwIT09Zi50b25lTWFwcGluZz91ZyhcInRvbmVNYXBwaW5nXCIsZi50b25lTWFwcGluZyk6XG4gICAgXCJcIixmLmRpdGhlcmluZz9cIiNkZWZpbmUgRElUSEVSSU5HXCI6XCJcIixmLm91dHB1dEVuY29kaW5nfHxmLm1hcEVuY29kaW5nfHxmLmVudk1hcEVuY29kaW5nfHxmLmVtaXNzaXZlTWFwRW5jb2Rpbmc/Ui5lbmNvZGluZ3NfcGFyc19mcmFnbWVudDpcIlwiLGYubWFwRW5jb2Rpbmc/WWQoXCJtYXBUZXhlbFRvTGluZWFyXCIsZi5tYXBFbmNvZGluZyk6XCJcIixmLmVudk1hcEVuY29kaW5nP1lkKFwiZW52TWFwVGV4ZWxUb0xpbmVhclwiLGYuZW52TWFwRW5jb2RpbmcpOlwiXCIsZi5lbWlzc2l2ZU1hcEVuY29kaW5nP1lkKFwiZW1pc3NpdmVNYXBUZXhlbFRvTGluZWFyXCIsZi5lbWlzc2l2ZU1hcEVuY29kaW5nKTpcIlwiLGYub3V0cHV0RW5jb2Rpbmc/dGcoXCJsaW5lYXJUb091dHB1dFRleGVsXCIsZi5vdXRwdXRFbmNvZGluZyk6XCJcIixmLmRlcHRoUGFja2luZz9cIiNkZWZpbmUgREVQVEhfUEFDS0lORyBcIitkLmRlcHRoUGFja2luZzpcIlwiLFwiXFxuXCJdLmZpbHRlcihCYykuam9pbihcIlxcblwiKSk7az1aZChrKTtrPVllKGssZik7XG4gICAgbT1aZChtKTttPVllKG0sZik7ZC5pc1NoYWRlck1hdGVyaWFsfHwoaz1aZShrKSxtPVplKG0pKTttPWIrbTtrPVdlKGcsZy5WRVJURVhfU0hBREVSLGgrayk7bT1XZShnLGcuRlJBR01FTlRfU0hBREVSLG0pO2cuYXR0YWNoU2hhZGVyKHosayk7Zy5hdHRhY2hTaGFkZXIoeixtKTt2b2lkIDAhPT1kLmluZGV4MEF0dHJpYnV0ZU5hbWU/Zy5iaW5kQXR0cmliTG9jYXRpb24oeiwwLGQuaW5kZXgwQXR0cmlidXRlTmFtZSk6ITA9PT1mLm1vcnBoVGFyZ2V0cyYmZy5iaW5kQXR0cmliTG9jYXRpb24oeiwwLFwicG9zaXRpb25cIik7Zy5saW5rUHJvZ3JhbSh6KTtmPWcuZ2V0UHJvZ3JhbUluZm9Mb2coeik7ZT1nLmdldFNoYWRlckluZm9Mb2coayk7cT1nLmdldFNoYWRlckluZm9Mb2cobSk7dT1uPSEwO2lmKCExPT09Zy5nZXRQcm9ncmFtUGFyYW1ldGVyKHosZy5MSU5LX1NUQVRVUykpbj0hMSxjb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xQcm9ncmFtOiBzaGFkZXIgZXJyb3I6IFwiLGcuZ2V0RXJyb3IoKSxcbiAgICBcImdsLlZBTElEQVRFX1NUQVRVU1wiLGcuZ2V0UHJvZ3JhbVBhcmFtZXRlcih6LGcuVkFMSURBVEVfU1RBVFVTKSxcImdsLmdldFByb2dyYW1JbmZvTG9nXCIsZixlLHEpO2Vsc2UgaWYoXCJcIiE9PWYpY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xQcm9ncmFtOiBnbC5nZXRQcm9ncmFtSW5mb0xvZygpXCIsZik7ZWxzZSBpZihcIlwiPT09ZXx8XCJcIj09PXEpdT0hMTt1JiYodGhpcy5kaWFnbm9zdGljcz17cnVubmFibGU6bixtYXRlcmlhbDpkLHByb2dyYW1Mb2c6Zix2ZXJ0ZXhTaGFkZXI6e2xvZzplLHByZWZpeDpofSxmcmFnbWVudFNoYWRlcjp7bG9nOnEscHJlZml4OmJ9fSk7Zy5kZWxldGVTaGFkZXIoayk7Zy5kZWxldGVTaGFkZXIobSk7dmFyIHk7dGhpcy5nZXRVbmlmb3Jtcz1mdW5jdGlvbigpe3ZvaWQgMD09PXkmJih5PW5ldyBtYihnLHosYSkpO3JldHVybiB5fTt2YXIgSTt0aGlzLmdldEF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1JKXtmb3IodmFyIGE9e30sYj1nLmdldFByb2dyYW1QYXJhbWV0ZXIoeixcbiAgICBnLkFDVElWRV9BVFRSSUJVVEVTKSxjPTA7YzxiO2MrKyl7dmFyIGQ9Zy5nZXRBY3RpdmVBdHRyaWIoeixjKS5uYW1lO2FbZF09Zy5nZXRBdHRyaWJMb2NhdGlvbih6LGQpfUk9YX1yZXR1cm4gSX07dGhpcy5kZXN0cm95PWZ1bmN0aW9uKCl7Zy5kZWxldGVQcm9ncmFtKHopO3RoaXMucHJvZ3JhbT12b2lkIDB9O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMse3VuaWZvcm1zOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFByb2dyYW06IC51bmlmb3JtcyBpcyBub3cgLmdldFVuaWZvcm1zKCkuXCIpO3JldHVybiB0aGlzLmdldFVuaWZvcm1zKCl9fSxhdHRyaWJ1dGVzOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFByb2dyYW06IC5hdHRyaWJ1dGVzIGlzIG5vdyAuZ2V0QXR0cmlidXRlcygpLlwiKTtyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVzKCl9fX0pO3RoaXMuaWQ9eWcrKzt0aGlzLmNvZGU9Yzt0aGlzLnVzZWRUaW1lcz0xO1xuICAgIHRoaXMucHJvZ3JhbT16O3RoaXMudmVydGV4U2hhZGVyPWs7dGhpcy5mcmFnbWVudFNoYWRlcj1tO3JldHVybiB0aGlzfWZ1bmN0aW9uIHpnKGEsYixjKXtmdW5jdGlvbiBkKGEsYil7aWYoYSlhLmlzVGV4dHVyZT9jPWEuZW5jb2Rpbmc6YS5pc1dlYkdMUmVuZGVyVGFyZ2V0JiYoY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xQcm9ncmFtcy5nZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwOiBkb24ndCB1c2UgcmVuZGVyIHRhcmdldHMgYXMgdGV4dHVyZXMuIFVzZSB0aGVpciAudGV4dHVyZSBwcm9wZXJ0eSBpbnN0ZWFkLlwiKSxjPWEudGV4dHVyZS5lbmNvZGluZyk7ZWxzZSB2YXIgYz0zRTM7M0UzPT09YyYmYiYmKGM9MzAwNyk7cmV0dXJuIGN9dmFyIGU9W10sZj17TWVzaERlcHRoTWF0ZXJpYWw6XCJkZXB0aFwiLE1lc2hEaXN0YW5jZU1hdGVyaWFsOlwiZGlzdGFuY2VSR0JBXCIsTWVzaE5vcm1hbE1hdGVyaWFsOlwibm9ybWFsXCIsTWVzaEJhc2ljTWF0ZXJpYWw6XCJiYXNpY1wiLE1lc2hMYW1iZXJ0TWF0ZXJpYWw6XCJsYW1iZXJ0XCIsXG4gICAgTWVzaFBob25nTWF0ZXJpYWw6XCJwaG9uZ1wiLE1lc2hUb29uTWF0ZXJpYWw6XCJwaG9uZ1wiLE1lc2hTdGFuZGFyZE1hdGVyaWFsOlwicGh5c2ljYWxcIixNZXNoUGh5c2ljYWxNYXRlcmlhbDpcInBoeXNpY2FsXCIsTGluZUJhc2ljTWF0ZXJpYWw6XCJiYXNpY1wiLExpbmVEYXNoZWRNYXRlcmlhbDpcImRhc2hlZFwiLFBvaW50c01hdGVyaWFsOlwicG9pbnRzXCIsU2hhZG93TWF0ZXJpYWw6XCJzaGFkb3dcIn0sZz1cInByZWNpc2lvbiBzdXBwb3J0c1ZlcnRleFRleHR1cmVzIG1hcCBtYXBFbmNvZGluZyBlbnZNYXAgZW52TWFwTW9kZSBlbnZNYXBFbmNvZGluZyBsaWdodE1hcCBhb01hcCBlbWlzc2l2ZU1hcCBlbWlzc2l2ZU1hcEVuY29kaW5nIGJ1bXBNYXAgbm9ybWFsTWFwIGRpc3BsYWNlbWVudE1hcCBzcGVjdWxhck1hcCByb3VnaG5lc3NNYXAgbWV0YWxuZXNzTWFwIGdyYWRpZW50TWFwIGFscGhhTWFwIGNvbWJpbmUgdmVydGV4Q29sb3JzIGZvZyB1c2VGb2cgZm9nRXhwIGZsYXRTaGFkaW5nIHNpemVBdHRlbnVhdGlvbiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyIHNraW5uaW5nIG1heEJvbmVzIHVzZVZlcnRleFRleHR1cmUgbW9ycGhUYXJnZXRzIG1vcnBoTm9ybWFscyBtYXhNb3JwaFRhcmdldHMgbWF4TW9ycGhOb3JtYWxzIHByZW11bHRpcGxpZWRBbHBoYSBudW1EaXJMaWdodHMgbnVtUG9pbnRMaWdodHMgbnVtU3BvdExpZ2h0cyBudW1IZW1pTGlnaHRzIG51bVJlY3RBcmVhTGlnaHRzIHNoYWRvd01hcEVuYWJsZWQgc2hhZG93TWFwVHlwZSB0b25lTWFwcGluZyBwaHlzaWNhbGx5Q29ycmVjdExpZ2h0cyBhbHBoYVRlc3QgZG91YmxlU2lkZWQgZmxpcFNpZGVkIG51bUNsaXBwaW5nUGxhbmVzIG51bUNsaXBJbnRlcnNlY3Rpb24gZGVwdGhQYWNraW5nIGRpdGhlcmluZ1wiLnNwbGl0KFwiIFwiKTtcbiAgICB0aGlzLmdldFBhcmFtZXRlcnM9ZnVuY3Rpb24oYixlLGcscSxuLHUscil7dmFyIGg9ZltiLnR5cGVdO2lmKHIuaXNTa2lubmVkTWVzaCl7dmFyIGs9ci5za2VsZXRvbi5ib25lcztpZihjLmZsb2F0VmVydGV4VGV4dHVyZXMpaz0xMDI0O2Vsc2V7dmFyIG09TWF0aC5taW4oTWF0aC5mbG9vcigoYy5tYXhWZXJ0ZXhVbmlmb3Jtcy0yMCkvNCksay5sZW5ndGgpO208ay5sZW5ndGg/KGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFNrZWxldG9uIGhhcyBcIitrLmxlbmd0aCtcIiBib25lcy4gVGhpcyBHUFUgc3VwcG9ydHMgXCIrbStcIi5cIiksaz0wKTprPW19fWVsc2Ugaz0wO209Yy5wcmVjaXNpb247bnVsbCE9PWIucHJlY2lzaW9uJiYobT1jLmdldE1heFByZWNpc2lvbihiLnByZWNpc2lvbiksbSE9PWIucHJlY2lzaW9uJiZjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFByb2dyYW0uZ2V0UGFyYW1ldGVyczpcIixiLnByZWNpc2lvbixcIm5vdCBzdXBwb3J0ZWQsIHVzaW5nXCIsbSxcImluc3RlYWQuXCIpKTtcbiAgICB2YXIgbD1hLmdldFJlbmRlclRhcmdldCgpO3JldHVybntzaGFkZXJJRDpoLHByZWNpc2lvbjptLHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6Yy52ZXJ0ZXhUZXh0dXJlcyxvdXRwdXRFbmNvZGluZzpkKGw/bC50ZXh0dXJlOm51bGwsYS5nYW1tYU91dHB1dCksbWFwOiEhYi5tYXAsbWFwRW5jb2Rpbmc6ZChiLm1hcCxhLmdhbW1hSW5wdXQpLGVudk1hcDohIWIuZW52TWFwLGVudk1hcE1vZGU6Yi5lbnZNYXAmJmIuZW52TWFwLm1hcHBpbmcsZW52TWFwRW5jb2Rpbmc6ZChiLmVudk1hcCxhLmdhbW1hSW5wdXQpLGVudk1hcEN1YmVVVjohIWIuZW52TWFwJiYoMzA2PT09Yi5lbnZNYXAubWFwcGluZ3x8MzA3PT09Yi5lbnZNYXAubWFwcGluZyksbGlnaHRNYXA6ISFiLmxpZ2h0TWFwLGFvTWFwOiEhYi5hb01hcCxlbWlzc2l2ZU1hcDohIWIuZW1pc3NpdmVNYXAsZW1pc3NpdmVNYXBFbmNvZGluZzpkKGIuZW1pc3NpdmVNYXAsYS5nYW1tYUlucHV0KSxidW1wTWFwOiEhYi5idW1wTWFwLG5vcm1hbE1hcDohIWIubm9ybWFsTWFwLFxuICAgIGRpc3BsYWNlbWVudE1hcDohIWIuZGlzcGxhY2VtZW50TWFwLHJvdWdobmVzc01hcDohIWIucm91Z2huZXNzTWFwLG1ldGFsbmVzc01hcDohIWIubWV0YWxuZXNzTWFwLHNwZWN1bGFyTWFwOiEhYi5zcGVjdWxhck1hcCxhbHBoYU1hcDohIWIuYWxwaGFNYXAsZ3JhZGllbnRNYXA6ISFiLmdyYWRpZW50TWFwLGNvbWJpbmU6Yi5jb21iaW5lLHZlcnRleENvbG9yczpiLnZlcnRleENvbG9ycyxmb2c6ISFxLHVzZUZvZzpiLmZvZyxmb2dFeHA6cSYmcS5pc0ZvZ0V4cDIsZmxhdFNoYWRpbmc6Yi5mbGF0U2hhZGluZyxzaXplQXR0ZW51YXRpb246Yi5zaXplQXR0ZW51YXRpb24sbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjpjLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIsc2tpbm5pbmc6Yi5za2lubmluZyYmMDxrLG1heEJvbmVzOmssdXNlVmVydGV4VGV4dHVyZTpjLmZsb2F0VmVydGV4VGV4dHVyZXMsbW9ycGhUYXJnZXRzOmIubW9ycGhUYXJnZXRzLG1vcnBoTm9ybWFsczpiLm1vcnBoTm9ybWFscyxcbiAgICBtYXhNb3JwaFRhcmdldHM6YS5tYXhNb3JwaFRhcmdldHMsbWF4TW9ycGhOb3JtYWxzOmEubWF4TW9ycGhOb3JtYWxzLG51bURpckxpZ2h0czplLmRpcmVjdGlvbmFsLmxlbmd0aCxudW1Qb2ludExpZ2h0czplLnBvaW50Lmxlbmd0aCxudW1TcG90TGlnaHRzOmUuc3BvdC5sZW5ndGgsbnVtUmVjdEFyZWFMaWdodHM6ZS5yZWN0QXJlYS5sZW5ndGgsbnVtSGVtaUxpZ2h0czplLmhlbWkubGVuZ3RoLG51bUNsaXBwaW5nUGxhbmVzOm4sbnVtQ2xpcEludGVyc2VjdGlvbjp1LGRpdGhlcmluZzpiLmRpdGhlcmluZyxzaGFkb3dNYXBFbmFibGVkOmEuc2hhZG93TWFwLmVuYWJsZWQmJnIucmVjZWl2ZVNoYWRvdyYmMDxnLmxlbmd0aCxzaGFkb3dNYXBUeXBlOmEuc2hhZG93TWFwLnR5cGUsdG9uZU1hcHBpbmc6YS50b25lTWFwcGluZyxwaHlzaWNhbGx5Q29ycmVjdExpZ2h0czphLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzLHByZW11bHRpcGxpZWRBbHBoYTpiLnByZW11bHRpcGxpZWRBbHBoYSxcbiAgICBhbHBoYVRlc3Q6Yi5hbHBoYVRlc3QsZG91YmxlU2lkZWQ6Mj09PWIuc2lkZSxmbGlwU2lkZWQ6MT09PWIuc2lkZSxkZXB0aFBhY2tpbmc6dm9pZCAwIT09Yi5kZXB0aFBhY2tpbmc/Yi5kZXB0aFBhY2tpbmc6ITF9fTt0aGlzLmdldFByb2dyYW1Db2RlPWZ1bmN0aW9uKGIsYyl7dmFyIGQ9W107Yy5zaGFkZXJJRD9kLnB1c2goYy5zaGFkZXJJRCk6KGQucHVzaChiLmZyYWdtZW50U2hhZGVyKSxkLnB1c2goYi52ZXJ0ZXhTaGFkZXIpKTtpZih2b2lkIDAhPT1iLmRlZmluZXMpZm9yKHZhciBlIGluIGIuZGVmaW5lcylkLnB1c2goZSksZC5wdXNoKGIuZGVmaW5lc1tlXSk7Zm9yKGU9MDtlPGcubGVuZ3RoO2UrKylkLnB1c2goY1tnW2VdXSk7ZC5wdXNoKGIub25CZWZvcmVDb21waWxlLnRvU3RyaW5nKCkpO2QucHVzaChhLmdhbW1hT3V0cHV0KTtyZXR1cm4gZC5qb2luKCl9O3RoaXMuYWNxdWlyZVByb2dyYW09ZnVuY3Rpb24oYyxkLGYsZyl7Zm9yKHZhciBoLGs9MCxtPWUubGVuZ3RoO2s8XG4gICAgbTtrKyspe3ZhciBxPWVba107aWYocS5jb2RlPT09Zyl7aD1xOysraC51c2VkVGltZXM7YnJlYWt9fXZvaWQgMD09PWgmJihoPW5ldyB4ZyhhLGIsZyxjLGQsZiksZS5wdXNoKGgpKTtyZXR1cm4gaH07dGhpcy5yZWxlYXNlUHJvZ3JhbT1mdW5jdGlvbihhKXtpZigwPT09LS1hLnVzZWRUaW1lcyl7dmFyIGI9ZS5pbmRleE9mKGEpO2VbYl09ZVtlLmxlbmd0aC0xXTtlLnBvcCgpO2EuZGVzdHJveSgpfX07dGhpcy5wcm9ncmFtcz1lfWZ1bmN0aW9uIEFnKGEsYixjLGQsZSxmLGcpe2Z1bmN0aW9uIGgoYSxiKXtpZihhLndpZHRoPmJ8fGEuaGVpZ2h0PmIpe2IvPU1hdGgubWF4KGEud2lkdGgsYS5oZWlnaHQpO3ZhciBjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcImNhbnZhc1wiKTtjLndpZHRoPU1hdGguZmxvb3IoYS53aWR0aCpiKTtjLmhlaWdodD1NYXRoLmZsb29yKGEuaGVpZ2h0KmIpO2MuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShhLFxuICAgIDAsMCxhLndpZHRoLGEuaGVpZ2h0LDAsMCxjLndpZHRoLGMuaGVpZ2h0KTtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBpbWFnZSBpcyB0b28gYmlnIChcIithLndpZHRoK1wieFwiK2EuaGVpZ2h0K1wiKS4gUmVzaXplZCB0byBcIitjLndpZHRoK1wieFwiK2MuaGVpZ2h0LGEpO3JldHVybiBjfXJldHVybiBhfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIFEuaXNQb3dlck9mVHdvKGEud2lkdGgpJiZRLmlzUG93ZXJPZlR3byhhLmhlaWdodCl9ZnVuY3Rpb24gbShhLGIpe3JldHVybiBhLmdlbmVyYXRlTWlwbWFwcyYmYiYmMTAwMyE9PWEubWluRmlsdGVyJiYxMDA2IT09YS5taW5GaWx0ZXJ9ZnVuY3Rpb24gcShiKXtyZXR1cm4gMTAwMz09PWJ8fDEwMDQ9PT1ifHwxMDA1PT09Yj9hLk5FQVJFU1Q6YS5MSU5FQVJ9ZnVuY3Rpb24gbihiKXtiPWIudGFyZ2V0O2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixuKTthOnt2YXIgYz1kLmdldChiKTtpZihiLmltYWdlJiZjLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUpYS5kZWxldGVUZXh0dXJlKGMuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZSk7XG4gICAgZWxzZXtpZih2b2lkIDA9PT1jLl9fd2ViZ2xJbml0KWJyZWFrIGE7YS5kZWxldGVUZXh0dXJlKGMuX193ZWJnbFRleHR1cmUpfWQucmVtb3ZlKGIpfWIuaXNWaWRlb1RleHR1cmUmJmRlbGV0ZSB5W2IuaWRdO2cudGV4dHVyZXMtLX1mdW5jdGlvbiB1KGIpe2I9Yi50YXJnZXQ7Yi5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLHUpO3ZhciBjPWQuZ2V0KGIpLGU9ZC5nZXQoYi50ZXh0dXJlKTtpZihiKXt2b2lkIDAhPT1lLl9fd2ViZ2xUZXh0dXJlJiZhLmRlbGV0ZVRleHR1cmUoZS5fX3dlYmdsVGV4dHVyZSk7Yi5kZXB0aFRleHR1cmUmJmIuZGVwdGhUZXh0dXJlLmRpc3Bvc2UoKTtpZihiLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlKWZvcihlPTA7Nj5lO2UrKylhLmRlbGV0ZUZyYW1lYnVmZmVyKGMuX193ZWJnbEZyYW1lYnVmZmVyW2VdKSxjLl9fd2ViZ2xEZXB0aGJ1ZmZlciYmYS5kZWxldGVSZW5kZXJidWZmZXIoYy5fX3dlYmdsRGVwdGhidWZmZXJbZV0pO2Vsc2UgYS5kZWxldGVGcmFtZWJ1ZmZlcihjLl9fd2ViZ2xGcmFtZWJ1ZmZlciksXG4gICAgYy5fX3dlYmdsRGVwdGhidWZmZXImJmEuZGVsZXRlUmVuZGVyYnVmZmVyKGMuX193ZWJnbERlcHRoYnVmZmVyKTtkLnJlbW92ZShiLnRleHR1cmUpO2QucmVtb3ZlKGIpfWcudGV4dHVyZXMtLX1mdW5jdGlvbiByKGIscSl7dmFyIHU9ZC5nZXQoYik7aWYoMDxiLnZlcnNpb24mJnUuX192ZXJzaW9uIT09Yi52ZXJzaW9uKXt2YXIgcj1iLmltYWdlO2lmKHZvaWQgMD09PXIpY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBtYXJrZWQgZm9yIHVwZGF0ZSBidXQgaW1hZ2UgaXMgdW5kZWZpbmVkXCIsYik7ZWxzZSBpZighMT09PXIuY29tcGxldGUpY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBtYXJrZWQgZm9yIHVwZGF0ZSBidXQgaW1hZ2UgaXMgaW5jb21wbGV0ZVwiLGIpO2Vsc2V7dm9pZCAwPT09dS5fX3dlYmdsSW5pdCYmKHUuX193ZWJnbEluaXQ9ITAsYi5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLG4pLHUuX193ZWJnbFRleHR1cmU9XG4gICAgYS5jcmVhdGVUZXh0dXJlKCksYi5pc1ZpZGVvVGV4dHVyZSYmKHlbYi5pZF09YiksZy50ZXh0dXJlcysrKTtjLmFjdGl2ZVRleHR1cmUoYS5URVhUVVJFMCtxKTtjLmJpbmRUZXh0dXJlKGEuVEVYVFVSRV8yRCx1Ll9fd2ViZ2xUZXh0dXJlKTthLnBpeGVsU3RvcmVpKGEuVU5QQUNLX0ZMSVBfWV9XRUJHTCxiLmZsaXBZKTthLnBpeGVsU3RvcmVpKGEuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLGIucHJlbXVsdGlwbHlBbHBoYSk7YS5waXhlbFN0b3JlaShhLlVOUEFDS19BTElHTk1FTlQsYi51bnBhY2tBbGlnbm1lbnQpO3ZhciBsPWgoYi5pbWFnZSxlLm1heFRleHR1cmVTaXplKTsoMTAwMSE9PWIud3JhcFN8fDEwMDEhPT1iLndyYXBUfHwxMDAzIT09Yi5taW5GaWx0ZXImJjEwMDYhPT1iLm1pbkZpbHRlcikmJiExPT09ayhsKSYmKHE9bCxxIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudHx8cSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50fHxxIGluc3RhbmNlb2YgSW1hZ2VCaXRtYXA/XG4gICAgKHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFwiY2FudmFzXCIpLHIud2lkdGg9US5mbG9vclBvd2VyT2ZUd28ocS53aWR0aCksci5oZWlnaHQ9US5mbG9vclBvd2VyT2ZUd28ocS5oZWlnaHQpLHIuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShxLDAsMCxyLndpZHRoLHIuaGVpZ2h0KSxjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBpbWFnZSBpcyBub3QgcG93ZXIgb2YgdHdvIChcIitxLndpZHRoK1wieFwiK3EuaGVpZ2h0K1wiKS4gUmVzaXplZCB0byBcIityLndpZHRoK1wieFwiK3IuaGVpZ2h0LHEpLGw9cik6bD1xKTtxPWsobCk7dmFyIHI9Zi5jb252ZXJ0KGIuZm9ybWF0KSx2PWYuY29udmVydChiLnR5cGUpO3QoYS5URVhUVVJFXzJELGIscSk7dmFyIHA9Yi5taXBtYXBzO2lmKGIuaXNEZXB0aFRleHR1cmUpe3A9YS5ERVBUSF9DT01QT05FTlQ7aWYoMTAxNT09PWIudHlwZSl7aWYoIXopdGhyb3cgRXJyb3IoXCJGbG9hdCBEZXB0aCBUZXh0dXJlIG9ubHkgc3VwcG9ydGVkIGluIFdlYkdMMi4wXCIpO1xuICAgIHA9YS5ERVBUSF9DT01QT05FTlQzMkZ9ZWxzZSB6JiYocD1hLkRFUFRIX0NPTVBPTkVOVDE2KTsxMDI2PT09Yi5mb3JtYXQmJnA9PT1hLkRFUFRIX0NPTVBPTkVOVCYmMTAxMiE9PWIudHlwZSYmMTAxNCE9PWIudHlwZSYmKGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFVzZSBVbnNpZ25lZFNob3J0VHlwZSBvciBVbnNpZ25lZEludFR5cGUgZm9yIERlcHRoRm9ybWF0IERlcHRoVGV4dHVyZS5cIiksYi50eXBlPTEwMTIsdj1mLmNvbnZlcnQoYi50eXBlKSk7MTAyNz09PWIuZm9ybWF0JiYocD1hLkRFUFRIX1NURU5DSUwsMTAyMCE9PWIudHlwZSYmKGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFVzZSBVbnNpZ25lZEludDI0OFR5cGUgZm9yIERlcHRoU3RlbmNpbEZvcm1hdCBEZXB0aFRleHR1cmUuXCIpLGIudHlwZT0xMDIwLHY9Zi5jb252ZXJ0KGIudHlwZSkpKTtjLnRleEltYWdlMkQoYS5URVhUVVJFXzJELDAscCxsLndpZHRoLGwuaGVpZ2h0LDAscixcbiAgICB2LG51bGwpfWVsc2UgaWYoYi5pc0RhdGFUZXh0dXJlKWlmKDA8cC5sZW5ndGgmJnEpe2Zvcih2YXIgQT0wLHc9cC5sZW5ndGg7QTx3O0ErKylsPXBbQV0sYy50ZXhJbWFnZTJEKGEuVEVYVFVSRV8yRCxBLHIsbC53aWR0aCxsLmhlaWdodCwwLHIsdixsLmRhdGEpO2IuZ2VuZXJhdGVNaXBtYXBzPSExfWVsc2UgYy50ZXhJbWFnZTJEKGEuVEVYVFVSRV8yRCwwLHIsbC53aWR0aCxsLmhlaWdodCwwLHIsdixsLmRhdGEpO2Vsc2UgaWYoYi5pc0NvbXByZXNzZWRUZXh0dXJlKWZvcihBPTAsdz1wLmxlbmd0aDtBPHc7QSsrKWw9cFtBXSwxMDIzIT09Yi5mb3JtYXQmJjEwMjIhPT1iLmZvcm1hdD8tMTxjLmdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpLmluZGV4T2Yocik/Yy5jb21wcmVzc2VkVGV4SW1hZ2UyRChhLlRFWFRVUkVfMkQsQSxyLGwud2lkdGgsbC5oZWlnaHQsMCxsLmRhdGEpOmNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC51cGxvYWRUZXh0dXJlKClcIik6XG4gICAgYy50ZXhJbWFnZTJEKGEuVEVYVFVSRV8yRCxBLHIsbC53aWR0aCxsLmhlaWdodCwwLHIsdixsLmRhdGEpO2Vsc2UgaWYoMDxwLmxlbmd0aCYmcSl7QT0wO2Zvcih3PXAubGVuZ3RoO0E8dztBKyspbD1wW0FdLGMudGV4SW1hZ2UyRChhLlRFWFRVUkVfMkQsQSxyLHIsdixsKTtiLmdlbmVyYXRlTWlwbWFwcz0hMX1lbHNlIGMudGV4SW1hZ2UyRChhLlRFWFRVUkVfMkQsMCxyLHIsdixsKTttKGIscSkmJmEuZ2VuZXJhdGVNaXBtYXAoYS5URVhUVVJFXzJEKTt1Ll9fdmVyc2lvbj1iLnZlcnNpb247aWYoYi5vblVwZGF0ZSliLm9uVXBkYXRlKGIpO3JldHVybn19Yy5hY3RpdmVUZXh0dXJlKGEuVEVYVFVSRTArcSk7Yy5iaW5kVGV4dHVyZShhLlRFWFRVUkVfMkQsdS5fX3dlYmdsVGV4dHVyZSl9ZnVuY3Rpb24gdChjLGcsaCl7aD8oYS50ZXhQYXJhbWV0ZXJpKGMsYS5URVhUVVJFX1dSQVBfUyxmLmNvbnZlcnQoZy53cmFwUykpLGEudGV4UGFyYW1ldGVyaShjLGEuVEVYVFVSRV9XUkFQX1QsXG4gICAgZi5jb252ZXJ0KGcud3JhcFQpKSxhLnRleFBhcmFtZXRlcmkoYyxhLlRFWFRVUkVfTUFHX0ZJTFRFUixmLmNvbnZlcnQoZy5tYWdGaWx0ZXIpKSxhLnRleFBhcmFtZXRlcmkoYyxhLlRFWFRVUkVfTUlOX0ZJTFRFUixmLmNvbnZlcnQoZy5taW5GaWx0ZXIpKSk6KGEudGV4UGFyYW1ldGVyaShjLGEuVEVYVFVSRV9XUkFQX1MsYS5DTEFNUF9UT19FREdFKSxhLnRleFBhcmFtZXRlcmkoYyxhLlRFWFRVUkVfV1JBUF9ULGEuQ0xBTVBfVE9fRURHRSksMTAwMT09PWcud3JhcFMmJjEwMDE9PT1nLndyYXBUfHxjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGlzIG5vdCBwb3dlciBvZiB0d28uIFRleHR1cmUud3JhcFMgYW5kIFRleHR1cmUud3JhcFQgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLlwiLGcpLGEudGV4UGFyYW1ldGVyaShjLGEuVEVYVFVSRV9NQUdfRklMVEVSLHEoZy5tYWdGaWx0ZXIpKSxhLnRleFBhcmFtZXRlcmkoYyxcbiAgICBhLlRFWFRVUkVfTUlOX0ZJTFRFUixxKGcubWluRmlsdGVyKSksMTAwMyE9PWcubWluRmlsdGVyJiYxMDA2IT09Zy5taW5GaWx0ZXImJmNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci5cIixnKSk7IShoPWIuZ2V0KFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpKXx8MTAxNT09PWcudHlwZSYmbnVsbD09PWIuZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyXCIpfHwxMDE2PT09Zy50eXBlJiZudWxsPT09Yi5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhclwiKXx8ISgxPGcuYW5pc290cm9weXx8ZC5nZXQoZykuX19jdXJyZW50QW5pc290cm9weSl8fChhLnRleFBhcmFtZXRlcmYoYyxoLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULE1hdGgubWluKGcuYW5pc290cm9weSxcbiAgICBlLmdldE1heEFuaXNvdHJvcHkoKSkpLGQuZ2V0KGcpLl9fY3VycmVudEFuaXNvdHJvcHk9Zy5hbmlzb3Ryb3B5KX1mdW5jdGlvbiBsKGIsZSxnLGgpe3ZhciBrPWYuY29udmVydChlLnRleHR1cmUuZm9ybWF0KSxtPWYuY29udmVydChlLnRleHR1cmUudHlwZSk7Yy50ZXhJbWFnZTJEKGgsMCxrLGUud2lkdGgsZS5oZWlnaHQsMCxrLG0sbnVsbCk7YS5iaW5kRnJhbWVidWZmZXIoYS5GUkFNRUJVRkZFUixiKTthLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGEuRlJBTUVCVUZGRVIsZyxoLGQuZ2V0KGUudGV4dHVyZSkuX193ZWJnbFRleHR1cmUsMCk7YS5iaW5kRnJhbWVidWZmZXIoYS5GUkFNRUJVRkZFUixudWxsKX1mdW5jdGlvbiBwKGIsYyl7YS5iaW5kUmVuZGVyYnVmZmVyKGEuUkVOREVSQlVGRkVSLGIpO2MuZGVwdGhCdWZmZXImJiFjLnN0ZW5jaWxCdWZmZXI/KGEucmVuZGVyYnVmZmVyU3RvcmFnZShhLlJFTkRFUkJVRkZFUixhLkRFUFRIX0NPTVBPTkVOVDE2LGMud2lkdGgsYy5oZWlnaHQpLFxuICAgIGEuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoYS5GUkFNRUJVRkZFUixhLkRFUFRIX0FUVEFDSE1FTlQsYS5SRU5ERVJCVUZGRVIsYikpOmMuZGVwdGhCdWZmZXImJmMuc3RlbmNpbEJ1ZmZlcj8oYS5yZW5kZXJidWZmZXJTdG9yYWdlKGEuUkVOREVSQlVGRkVSLGEuREVQVEhfU1RFTkNJTCxjLndpZHRoLGMuaGVpZ2h0KSxhLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGEuRlJBTUVCVUZGRVIsYS5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsYS5SRU5ERVJCVUZGRVIsYikpOmEucmVuZGVyYnVmZmVyU3RvcmFnZShhLlJFTkRFUkJVRkZFUixhLlJHQkE0LGMud2lkdGgsYy5oZWlnaHQpO2EuYmluZFJlbmRlcmJ1ZmZlcihhLlJFTkRFUkJVRkZFUixudWxsKX12YXIgej1cInVuZGVmaW5lZFwiIT09dHlwZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQmJmEgaW5zdGFuY2VvZiB3aW5kb3cuV2ViR0wyUmVuZGVyaW5nQ29udGV4dCx5PXt9O3RoaXMuc2V0VGV4dHVyZTJEPXI7dGhpcy5zZXRUZXh0dXJlQ3ViZT1cbiAgICBmdW5jdGlvbihiLHEpe3ZhciB1PWQuZ2V0KGIpO2lmKDY9PT1iLmltYWdlLmxlbmd0aClpZigwPGIudmVyc2lvbiYmdS5fX3ZlcnNpb24hPT1iLnZlcnNpb24pe3UuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZXx8KGIuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixuKSx1Ll9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmU9YS5jcmVhdGVUZXh0dXJlKCksZy50ZXh0dXJlcysrKTtjLmFjdGl2ZVRleHR1cmUoYS5URVhUVVJFMCtxKTtjLmJpbmRUZXh0dXJlKGEuVEVYVFVSRV9DVUJFX01BUCx1Ll9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUpO2EucGl4ZWxTdG9yZWkoYS5VTlBBQ0tfRkxJUF9ZX1dFQkdMLGIuZmxpcFkpO3E9YiYmYi5pc0NvbXByZXNzZWRUZXh0dXJlO2Zvcih2YXIgcj1iLmltYWdlWzBdJiZiLmltYWdlWzBdLmlzRGF0YVRleHR1cmUsbD1bXSx2PTA7Nj52O3YrKylsW3ZdPXF8fHI/cj9iLmltYWdlW3ZdLmltYWdlOmIuaW1hZ2Vbdl06aChiLmltYWdlW3ZdLGUubWF4Q3ViZW1hcFNpemUpO1xuICAgIHZhciBwPWsobFswXSksdz1mLmNvbnZlcnQoYi5mb3JtYXQpLEE9Zi5jb252ZXJ0KGIudHlwZSk7dChhLlRFWFRVUkVfQ1VCRV9NQVAsYixwKTtmb3Iodj0wOzY+djt2KyspaWYocSlmb3IodmFyIHksST1sW3ZdLm1pcG1hcHMsej0wLHg9SS5sZW5ndGg7ejx4O3orKyl5PUlbel0sMTAyMyE9PWIuZm9ybWF0JiYxMDIyIT09Yi5mb3JtYXQ/LTE8Yy5nZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMoKS5pbmRleE9mKHcpP2MuY29tcHJlc3NlZFRleEltYWdlMkQoYS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1grdix6LHcseS53aWR0aCx5LmhlaWdodCwwLHkuZGF0YSk6Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnNldFRleHR1cmVDdWJlKClcIik6Yy50ZXhJbWFnZTJEKGEuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK3Yseix3LHkud2lkdGgseS5oZWlnaHQsXG4gICAgMCx3LEEseS5kYXRhKTtlbHNlIHI/Yy50ZXhJbWFnZTJEKGEuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK3YsMCx3LGxbdl0ud2lkdGgsbFt2XS5oZWlnaHQsMCx3LEEsbFt2XS5kYXRhKTpjLnRleEltYWdlMkQoYS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1grdiwwLHcsdyxBLGxbdl0pO20oYixwKSYmYS5nZW5lcmF0ZU1pcG1hcChhLlRFWFRVUkVfQ1VCRV9NQVApO3UuX192ZXJzaW9uPWIudmVyc2lvbjtpZihiLm9uVXBkYXRlKWIub25VcGRhdGUoYil9ZWxzZSBjLmFjdGl2ZVRleHR1cmUoYS5URVhUVVJFMCtxKSxjLmJpbmRUZXh0dXJlKGEuVEVYVFVSRV9DVUJFX01BUCx1Ll9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUpfTt0aGlzLnNldFRleHR1cmVDdWJlRHluYW1pYz1mdW5jdGlvbihiLGUpe2MuYWN0aXZlVGV4dHVyZShhLlRFWFRVUkUwK2UpO2MuYmluZFRleHR1cmUoYS5URVhUVVJFX0NVQkVfTUFQLGQuZ2V0KGIpLl9fd2ViZ2xUZXh0dXJlKX07dGhpcy5zZXR1cFJlbmRlclRhcmdldD1cbiAgICBmdW5jdGlvbihiKXt2YXIgZT1kLmdldChiKSxmPWQuZ2V0KGIudGV4dHVyZSk7Yi5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLHUpO2YuX193ZWJnbFRleHR1cmU9YS5jcmVhdGVUZXh0dXJlKCk7Zy50ZXh0dXJlcysrO3ZhciBoPSEwPT09Yi5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSxuPWsoYik7aWYoaCl7ZS5fX3dlYmdsRnJhbWVidWZmZXI9W107Zm9yKHZhciBxPTA7Nj5xO3ErKyllLl9fd2ViZ2xGcmFtZWJ1ZmZlcltxXT1hLmNyZWF0ZUZyYW1lYnVmZmVyKCl9ZWxzZSBlLl9fd2ViZ2xGcmFtZWJ1ZmZlcj1hLmNyZWF0ZUZyYW1lYnVmZmVyKCk7aWYoaCl7Yy5iaW5kVGV4dHVyZShhLlRFWFRVUkVfQ1VCRV9NQVAsZi5fX3dlYmdsVGV4dHVyZSk7dChhLlRFWFRVUkVfQ1VCRV9NQVAsYi50ZXh0dXJlLG4pO2ZvcihxPTA7Nj5xO3ErKylsKGUuX193ZWJnbEZyYW1lYnVmZmVyW3FdLGIsYS5DT0xPUl9BVFRBQ0hNRU5UMCxhLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCtxKTtcbiAgICBtKGIudGV4dHVyZSxuKSYmYS5nZW5lcmF0ZU1pcG1hcChhLlRFWFRVUkVfQ1VCRV9NQVApO2MuYmluZFRleHR1cmUoYS5URVhUVVJFX0NVQkVfTUFQLG51bGwpfWVsc2UgYy5iaW5kVGV4dHVyZShhLlRFWFRVUkVfMkQsZi5fX3dlYmdsVGV4dHVyZSksdChhLlRFWFRVUkVfMkQsYi50ZXh0dXJlLG4pLGwoZS5fX3dlYmdsRnJhbWVidWZmZXIsYixhLkNPTE9SX0FUVEFDSE1FTlQwLGEuVEVYVFVSRV8yRCksbShiLnRleHR1cmUsbikmJmEuZ2VuZXJhdGVNaXBtYXAoYS5URVhUVVJFXzJEKSxjLmJpbmRUZXh0dXJlKGEuVEVYVFVSRV8yRCxudWxsKTtpZihiLmRlcHRoQnVmZmVyKXtlPWQuZ2V0KGIpO2Y9ITA9PT1iLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlO2lmKGIuZGVwdGhUZXh0dXJlKXtpZihmKXRocm93IEVycm9yKFwidGFyZ2V0LmRlcHRoVGV4dHVyZSBub3Qgc3VwcG9ydGVkIGluIEN1YmUgcmVuZGVyIHRhcmdldHNcIik7aWYoYiYmYi5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSl0aHJvdyBFcnJvcihcIkRlcHRoIFRleHR1cmUgd2l0aCBjdWJlIHJlbmRlciB0YXJnZXRzIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgYS5iaW5kRnJhbWVidWZmZXIoYS5GUkFNRUJVRkZFUixlLl9fd2ViZ2xGcmFtZWJ1ZmZlcik7aWYoIWIuZGVwdGhUZXh0dXJlfHwhYi5kZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUpdGhyb3cgRXJyb3IoXCJyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlXCIpO2QuZ2V0KGIuZGVwdGhUZXh0dXJlKS5fX3dlYmdsVGV4dHVyZSYmYi5kZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGg9PT1iLndpZHRoJiZiLmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQ9PT1iLmhlaWdodHx8KGIuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoPWIud2lkdGgsYi5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0PWIuaGVpZ2h0LGIuZGVwdGhUZXh0dXJlLm5lZWRzVXBkYXRlPSEwKTtyKGIuZGVwdGhUZXh0dXJlLDApO2U9ZC5nZXQoYi5kZXB0aFRleHR1cmUpLl9fd2ViZ2xUZXh0dXJlO2lmKDEwMjY9PT1iLmRlcHRoVGV4dHVyZS5mb3JtYXQpYS5mcmFtZWJ1ZmZlclRleHR1cmUyRChhLkZSQU1FQlVGRkVSLFxuICAgIGEuREVQVEhfQVRUQUNITUVOVCxhLlRFWFRVUkVfMkQsZSwwKTtlbHNlIGlmKDEwMjc9PT1iLmRlcHRoVGV4dHVyZS5mb3JtYXQpYS5mcmFtZWJ1ZmZlclRleHR1cmUyRChhLkZSQU1FQlVGRkVSLGEuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULGEuVEVYVFVSRV8yRCxlLDApO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmtub3duIGRlcHRoVGV4dHVyZSBmb3JtYXRcIik7fWVsc2UgaWYoZilmb3IoZS5fX3dlYmdsRGVwdGhidWZmZXI9W10sZj0wOzY+ZjtmKyspYS5iaW5kRnJhbWVidWZmZXIoYS5GUkFNRUJVRkZFUixlLl9fd2ViZ2xGcmFtZWJ1ZmZlcltmXSksZS5fX3dlYmdsRGVwdGhidWZmZXJbZl09YS5jcmVhdGVSZW5kZXJidWZmZXIoKSxwKGUuX193ZWJnbERlcHRoYnVmZmVyW2ZdLGIpO2Vsc2UgYS5iaW5kRnJhbWVidWZmZXIoYS5GUkFNRUJVRkZFUixlLl9fd2ViZ2xGcmFtZWJ1ZmZlciksZS5fX3dlYmdsRGVwdGhidWZmZXI9YS5jcmVhdGVSZW5kZXJidWZmZXIoKSxwKGUuX193ZWJnbERlcHRoYnVmZmVyLFxuICAgIGIpO2EuYmluZEZyYW1lYnVmZmVyKGEuRlJBTUVCVUZGRVIsbnVsbCl9fTt0aGlzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcD1mdW5jdGlvbihiKXt2YXIgZT1iLnRleHR1cmUsZj1rKGIpO20oZSxmKSYmKGI9Yi5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZT9hLlRFWFRVUkVfQ1VCRV9NQVA6YS5URVhUVVJFXzJELGU9ZC5nZXQoZSkuX193ZWJnbFRleHR1cmUsYy5iaW5kVGV4dHVyZShiLGUpLGEuZ2VuZXJhdGVNaXBtYXAoYiksYy5iaW5kVGV4dHVyZShiLG51bGwpKX07dGhpcy51cGRhdGVWaWRlb1RleHR1cmVzPWZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIHkpeVthXS51cGRhdGUoKX19ZnVuY3Rpb24gQmcoKXt2YXIgYT17fTtyZXR1cm57Z2V0OmZ1bmN0aW9uKGIpe2I9Yi51dWlkO3ZhciBjPWFbYl07dm9pZCAwPT09YyYmKGM9e30sYVtiXT1jKTtyZXR1cm4gY30scmVtb3ZlOmZ1bmN0aW9uKGIpe2RlbGV0ZSBhW2IudXVpZF19LGNsZWFyOmZ1bmN0aW9uKCl7YT17fX19fWZ1bmN0aW9uIENnKGEsXG4gICAgYixjKXtmdW5jdGlvbiBkKGIsYyxkKXt2YXIgZT1uZXcgVWludDhBcnJheSg0KSxmPWEuY3JlYXRlVGV4dHVyZSgpO2EuYmluZFRleHR1cmUoYixmKTthLnRleFBhcmFtZXRlcmkoYixhLlRFWFRVUkVfTUlOX0ZJTFRFUixhLk5FQVJFU1QpO2EudGV4UGFyYW1ldGVyaShiLGEuVEVYVFVSRV9NQUdfRklMVEVSLGEuTkVBUkVTVCk7Zm9yKGI9MDtiPGQ7YisrKWEudGV4SW1hZ2UyRChjK2IsMCxhLlJHQkEsMSwxLDAsYS5SR0JBLGEuVU5TSUdORURfQllURSxlKTtyZXR1cm4gZn1mdW5jdGlvbiBlKGIpeyEwIT09eVtiXSYmKGEuZW5hYmxlKGIpLHlbYl09ITApfWZ1bmN0aW9uIGYoYil7ITEhPT15W2JdJiYoYS5kaXNhYmxlKGIpLHlbYl09ITEpfWZ1bmN0aW9uIGcoYixkLGcsaCxrLG0scSxuKXswIT09Yj9lKGEuQkxFTkQpOmYoYS5CTEVORCk7aWYoNSE9PWIpe2lmKGIhPT1KfHxuIT09bGEpc3dpdGNoKGIpe2Nhc2UgMjpuPyhhLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShhLkZVTkNfQURELFxuICAgIGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jU2VwYXJhdGUoYS5PTkUsYS5PTkUsYS5PTkUsYS5PTkUpKTooYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuU1JDX0FMUEhBLGEuT05FKSk7YnJlYWs7Y2FzZSAzOm4/KGEuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGEuRlVOQ19BREQsYS5GVU5DX0FERCksYS5ibGVuZEZ1bmNTZXBhcmF0ZShhLlpFUk8sYS5aRVJPLGEuT05FX01JTlVTX1NSQ19DT0xPUixhLk9ORV9NSU5VU19TUkNfQUxQSEEpKTooYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuWkVSTyxhLk9ORV9NSU5VU19TUkNfQ09MT1IpKTticmVhaztjYXNlIDQ6bj8oYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYS5GVU5DX0FERCxhLkZVTkNfQUREKSxhLmJsZW5kRnVuY1NlcGFyYXRlKGEuWkVSTyxhLlNSQ19DT0xPUixhLlpFUk8sYS5TUkNfQUxQSEEpKTooYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuWkVSTyxcbiAgICBhLlNSQ19DT0xPUikpO2JyZWFrO2RlZmF1bHQ6bj8oYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYS5GVU5DX0FERCxhLkZVTkNfQUREKSxhLmJsZW5kRnVuY1NlcGFyYXRlKGEuT05FLGEuT05FX01JTlVTX1NSQ19BTFBIQSxhLk9ORSxhLk9ORV9NSU5VU19TUkNfQUxQSEEpKTooYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYS5GVU5DX0FERCxhLkZVTkNfQUREKSxhLmJsZW5kRnVuY1NlcGFyYXRlKGEuU1JDX0FMUEhBLGEuT05FX01JTlVTX1NSQ19BTFBIQSxhLk9ORSxhLk9ORV9NSU5VU19TUkNfQUxQSEEpKX1IPUU9Qz1EPUI9eD1udWxsfWVsc2V7az1rfHxkO209bXx8ZztxPXF8fGg7aWYoZCE9PXh8fGshPT1DKWEuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGMuY29udmVydChkKSxjLmNvbnZlcnQoaykpLHg9ZCxDPWs7aWYoZyE9PUJ8fGghPT1EfHxtIT09RXx8cSE9PUgpYS5ibGVuZEZ1bmNTZXBhcmF0ZShjLmNvbnZlcnQoZyksYy5jb252ZXJ0KGgpLGMuY29udmVydChtKSxjLmNvbnZlcnQocSkpLFxuICAgIEI9ZyxEPWgsRT1tLEg9cX1KPWI7bGE9bn1mdW5jdGlvbiBoKGIpe1MhPT1iJiYoYj9hLmZyb250RmFjZShhLkNXKTphLmZyb250RmFjZShhLkNDVyksUz1iKX1mdW5jdGlvbiBrKGIpezAhPT1iPyhlKGEuQ1VMTF9GQUNFKSxiIT09SyYmKDE9PT1iP2EuY3VsbEZhY2UoYS5CQUNLKToyPT09Yj9hLmN1bGxGYWNlKGEuRlJPTlQpOmEuY3VsbEZhY2UoYS5GUk9OVF9BTkRfQkFDSykpKTpmKGEuQ1VMTF9GQUNFKTtLPWJ9ZnVuY3Rpb24gbShiLGMsZCl7aWYoYil7aWYoZShhLlBPTFlHT05fT0ZGU0VUX0ZJTEwpLEwhPT1jfHxPIT09ZClhLnBvbHlnb25PZmZzZXQoYyxkKSxMPWMsTz1kfWVsc2UgZihhLlBPTFlHT05fT0ZGU0VUX0ZJTEwpfWZ1bmN0aW9uIHEoYil7dm9pZCAwPT09YiYmKGI9YS5URVhUVVJFMCtRLTEpO00hPT1iJiYoYS5hY3RpdmVUZXh0dXJlKGIpLE09Yil9dmFyIG49bmV3IGZ1bmN0aW9uKCl7dmFyIGI9ITEsYz1uZXcgYWEsZD1udWxsLGU9bmV3IGFhKDAsMCwwLDApO1xuICAgIHJldHVybntzZXRNYXNrOmZ1bmN0aW9uKGMpe2Q9PT1jfHxifHwoYS5jb2xvck1hc2soYyxjLGMsYyksZD1jKX0sc2V0TG9ja2VkOmZ1bmN0aW9uKGEpe2I9YX0sc2V0Q2xlYXI6ZnVuY3Rpb24oYixkLGYsZyxoKXshMD09PWgmJihiKj1nLGQqPWcsZio9Zyk7Yy5zZXQoYixkLGYsZyk7ITE9PT1lLmVxdWFscyhjKSYmKGEuY2xlYXJDb2xvcihiLGQsZixnKSxlLmNvcHkoYykpfSxyZXNldDpmdW5jdGlvbigpe2I9ITE7ZD1udWxsO2Uuc2V0KC0xLDAsMCwwKX19fSx1PW5ldyBmdW5jdGlvbigpe3ZhciBiPSExLGM9bnVsbCxkPW51bGwsZz1udWxsO3JldHVybntzZXRUZXN0OmZ1bmN0aW9uKGIpe2I/ZShhLkRFUFRIX1RFU1QpOmYoYS5ERVBUSF9URVNUKX0sc2V0TWFzazpmdW5jdGlvbihkKXtjPT09ZHx8Ynx8KGEuZGVwdGhNYXNrKGQpLGM9ZCl9LHNldEZ1bmM6ZnVuY3Rpb24oYil7aWYoZCE9PWIpe2lmKGIpc3dpdGNoKGIpe2Nhc2UgMDphLmRlcHRoRnVuYyhhLk5FVkVSKTticmVhaztcbiAgICBjYXNlIDE6YS5kZXB0aEZ1bmMoYS5BTFdBWVMpO2JyZWFrO2Nhc2UgMjphLmRlcHRoRnVuYyhhLkxFU1MpO2JyZWFrO2Nhc2UgMzphLmRlcHRoRnVuYyhhLkxFUVVBTCk7YnJlYWs7Y2FzZSA0OmEuZGVwdGhGdW5jKGEuRVFVQUwpO2JyZWFrO2Nhc2UgNTphLmRlcHRoRnVuYyhhLkdFUVVBTCk7YnJlYWs7Y2FzZSA2OmEuZGVwdGhGdW5jKGEuR1JFQVRFUik7YnJlYWs7Y2FzZSA3OmEuZGVwdGhGdW5jKGEuTk9URVFVQUwpO2JyZWFrO2RlZmF1bHQ6YS5kZXB0aEZ1bmMoYS5MRVFVQUwpfWVsc2UgYS5kZXB0aEZ1bmMoYS5MRVFVQUwpO2Q9Yn19LHNldExvY2tlZDpmdW5jdGlvbihhKXtiPWF9LHNldENsZWFyOmZ1bmN0aW9uKGIpe2chPT1iJiYoYS5jbGVhckRlcHRoKGIpLGc9Yil9LHJlc2V0OmZ1bmN0aW9uKCl7Yj0hMTtnPWQ9Yz1udWxsfX19LHI9bmV3IGZ1bmN0aW9uKCl7dmFyIGI9ITEsYz1udWxsLGQ9bnVsbCxnPW51bGwsaD1udWxsLGs9bnVsbCxtPW51bGwsbj1udWxsLHE9bnVsbDtcbiAgICByZXR1cm57c2V0VGVzdDpmdW5jdGlvbihiKXtiP2UoYS5TVEVOQ0lMX1RFU1QpOmYoYS5TVEVOQ0lMX1RFU1QpfSxzZXRNYXNrOmZ1bmN0aW9uKGQpe2M9PT1kfHxifHwoYS5zdGVuY2lsTWFzayhkKSxjPWQpfSxzZXRGdW5jOmZ1bmN0aW9uKGIsYyxlKXtpZihkIT09Ynx8ZyE9PWN8fGghPT1lKWEuc3RlbmNpbEZ1bmMoYixjLGUpLGQ9YixnPWMsaD1lfSxzZXRPcDpmdW5jdGlvbihiLGMsZCl7aWYoayE9PWJ8fG0hPT1jfHxuIT09ZClhLnN0ZW5jaWxPcChiLGMsZCksaz1iLG09YyxuPWR9LHNldExvY2tlZDpmdW5jdGlvbihhKXtiPWF9LHNldENsZWFyOmZ1bmN0aW9uKGIpe3EhPT1iJiYoYS5jbGVhclN0ZW5jaWwoYikscT1iKX0scmVzZXQ6ZnVuY3Rpb24oKXtiPSExO3E9bj1tPWs9aD1nPWQ9Yz1udWxsfX19LGw9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVkVSVEVYX0FUVFJJQlMpLHY9bmV3IFVpbnQ4QXJyYXkobCkscD1uZXcgVWludDhBcnJheShsKSx6PW5ldyBVaW50OEFycmF5KGwpLFxuICAgIHk9e30sST1udWxsLEE9bnVsbCxKPW51bGwseD1udWxsLEI9bnVsbCxEPW51bGwsQz1udWxsLEU9bnVsbCxIPW51bGwsbGE9ITEsUz1udWxsLEs9bnVsbCxOPW51bGwsTD1udWxsLE89bnVsbCxRPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMpLGw9cGFyc2VGbG9hdCgvXldlYkdMXFwgKFswLTldKS8uZXhlYyhhLmdldFBhcmFtZXRlcihhLlZFUlNJT04pKVsxXSksVj0xPD1wYXJzZUZsb2F0KGwpLE09bnVsbCxQPXt9LFI9bmV3IGFhLEc9bmV3IGFhLFk9e307WVthLlRFWFRVUkVfMkRdPWQoYS5URVhUVVJFXzJELGEuVEVYVFVSRV8yRCwxKTtZW2EuVEVYVFVSRV9DVUJFX01BUF09ZChhLlRFWFRVUkVfQ1VCRV9NQVAsYS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gsNik7bi5zZXRDbGVhcigwLDAsMCwxKTt1LnNldENsZWFyKDEpO3Iuc2V0Q2xlYXIoMCk7ZShhLkRFUFRIX1RFU1QpO3Uuc2V0RnVuYygzKTtoKCExKTtrKDEpO2UoYS5DVUxMX0ZBQ0UpO1xuICAgIGUoYS5CTEVORCk7ZygxKTtyZXR1cm57YnVmZmVyczp7Y29sb3I6bixkZXB0aDp1LHN0ZW5jaWw6cn0saW5pdEF0dHJpYnV0ZXM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXYubGVuZ3RoO2E8YjthKyspdlthXT0wfSxlbmFibGVBdHRyaWJ1dGU6ZnVuY3Rpb24oYyl7dltjXT0xOzA9PT1wW2NdJiYoYS5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjKSxwW2NdPTEpOzAhPT16W2NdJiYoYi5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpLnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShjLDApLHpbY109MCl9LGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3I6ZnVuY3Rpb24oYyxkKXt2W2NdPTE7MD09PXBbY10mJihhLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGMpLHBbY109MSk7eltjXSE9PWQmJihiLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIikudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKGMsZCkseltjXT1kKX0sZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM6ZnVuY3Rpb24oKXtmb3IodmFyIGI9XG4gICAgMCxjPXAubGVuZ3RoO2IhPT1jOysrYilwW2JdIT09dltiXSYmKGEuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGIpLHBbYl09MCl9LGVuYWJsZTplLGRpc2FibGU6ZixnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHM6ZnVuY3Rpb24oKXtpZihudWxsPT09SSYmKEk9W10sYi5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIil8fGIuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIil8fGIuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzFcIikpKWZvcih2YXIgYz1hLmdldFBhcmFtZXRlcihhLkNPTVBSRVNTRURfVEVYVFVSRV9GT1JNQVRTKSxkPTA7ZDxjLmxlbmd0aDtkKyspSS5wdXNoKGNbZF0pO3JldHVybiBJfSx1c2VQcm9ncmFtOmZ1bmN0aW9uKGIpe3JldHVybiBBIT09Yj8oYS51c2VQcm9ncmFtKGIpLEE9YiwhMCk6ITF9LHNldEJsZW5kaW5nOmcsc2V0TWF0ZXJpYWw6ZnVuY3Rpb24oYixjKXsyPT09Yi5zaWRlP2YoYS5DVUxMX0ZBQ0UpOlxuICAgIGUoYS5DVUxMX0ZBQ0UpO3ZhciBkPTE9PT1iLnNpZGU7YyYmKGQ9IWQpO2goZCk7ITA9PT1iLnRyYW5zcGFyZW50P2coYi5ibGVuZGluZyxiLmJsZW5kRXF1YXRpb24sYi5ibGVuZFNyYyxiLmJsZW5kRHN0LGIuYmxlbmRFcXVhdGlvbkFscGhhLGIuYmxlbmRTcmNBbHBoYSxiLmJsZW5kRHN0QWxwaGEsYi5wcmVtdWx0aXBsaWVkQWxwaGEpOmcoMCk7dS5zZXRGdW5jKGIuZGVwdGhGdW5jKTt1LnNldFRlc3QoYi5kZXB0aFRlc3QpO3Uuc2V0TWFzayhiLmRlcHRoV3JpdGUpO24uc2V0TWFzayhiLmNvbG9yV3JpdGUpO20oYi5wb2x5Z29uT2Zmc2V0LGIucG9seWdvbk9mZnNldEZhY3RvcixiLnBvbHlnb25PZmZzZXRVbml0cyl9LHNldEZsaXBTaWRlZDpoLHNldEN1bGxGYWNlOmssc2V0TGluZVdpZHRoOmZ1bmN0aW9uKGIpe2IhPT1OJiYoViYmYS5saW5lV2lkdGgoYiksTj1iKX0sc2V0UG9seWdvbk9mZnNldDptLHNldFNjaXNzb3JUZXN0OmZ1bmN0aW9uKGIpe2I/ZShhLlNDSVNTT1JfVEVTVCk6XG4gICAgZihhLlNDSVNTT1JfVEVTVCl9LGFjdGl2ZVRleHR1cmU6cSxiaW5kVGV4dHVyZTpmdW5jdGlvbihiLGMpe251bGw9PT1NJiZxKCk7dmFyIGQ9UFtNXTt2b2lkIDA9PT1kJiYoZD17dHlwZTp2b2lkIDAsdGV4dHVyZTp2b2lkIDB9LFBbTV09ZCk7aWYoZC50eXBlIT09Ynx8ZC50ZXh0dXJlIT09YylhLmJpbmRUZXh0dXJlKGIsY3x8WVtiXSksZC50eXBlPWIsZC50ZXh0dXJlPWN9LGNvbXByZXNzZWRUZXhJbWFnZTJEOmZ1bmN0aW9uKCl7dHJ5e2EuY29tcHJlc3NlZFRleEltYWdlMkQuYXBwbHkoYSxhcmd1bWVudHMpfWNhdGNoKGVhKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xTdGF0ZTpcIixlYSl9fSx0ZXhJbWFnZTJEOmZ1bmN0aW9uKCl7dHJ5e2EudGV4SW1hZ2UyRC5hcHBseShhLGFyZ3VtZW50cyl9Y2F0Y2goZWEpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFN0YXRlOlwiLGVhKX19LHNjaXNzb3I6ZnVuY3Rpb24oYil7ITE9PT1SLmVxdWFscyhiKSYmKGEuc2Npc3NvcihiLngsXG4gICAgYi55LGIueixiLncpLFIuY29weShiKSl9LHZpZXdwb3J0OmZ1bmN0aW9uKGIpeyExPT09Ry5lcXVhbHMoYikmJihhLnZpZXdwb3J0KGIueCxiLnksYi56LGIudyksRy5jb3B5KGIpKX0scmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGI9MDtiPHAubGVuZ3RoO2IrKykxPT09cFtiXSYmKGEuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGIpLHBbYl09MCk7eT17fTtNPUk9bnVsbDtQPXt9O0s9Uz1KPUE9bnVsbDtuLnJlc2V0KCk7dS5yZXNldCgpO3IucmVzZXQoKX19fWZ1bmN0aW9uIERnKGEsYixjKXtmdW5jdGlvbiBkKGIpe2lmKFwiaGlnaHBcIj09PWIpe2lmKDA8YS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoYS5WRVJURVhfU0hBREVSLGEuSElHSF9GTE9BVCkucHJlY2lzaW9uJiYwPGEuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGEuRlJBR01FTlRfU0hBREVSLGEuSElHSF9GTE9BVCkucHJlY2lzaW9uKXJldHVyblwiaGlnaHBcIjtiPVwibWVkaXVtcFwifXJldHVyblwibWVkaXVtcFwiPT09YiYmXG4gICAgMDxhLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChhLlZFUlRFWF9TSEFERVIsYS5NRURJVU1fRkxPQVQpLnByZWNpc2lvbiYmMDxhLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChhLkZSQUdNRU5UX1NIQURFUixhLk1FRElVTV9GTE9BVCkucHJlY2lzaW9uP1wibWVkaXVtcFwiOlwibG93cFwifXZhciBlLGY9dm9pZCAwIT09Yy5wcmVjaXNpb24/Yy5wcmVjaXNpb246XCJoaWdocFwiLGc9ZChmKTtnIT09ZiYmKGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6XCIsZixcIm5vdCBzdXBwb3J0ZWQsIHVzaW5nXCIsZyxcImluc3RlYWQuXCIpLGY9Zyk7Yz0hMD09PWMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjt2YXIgZz1hLmdldFBhcmFtZXRlcihhLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTKSxoPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTKSxrPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX1RFWFRVUkVfU0laRSksbT1hLmdldFBhcmFtZXRlcihhLk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUpLFxuICAgIHE9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVkVSVEVYX0FUVFJJQlMpLG49YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyksdT1hLmdldFBhcmFtZXRlcihhLk1BWF9WQVJZSU5HX1ZFQ1RPUlMpLHI9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTKSxsPTA8aCx2PSEhYi5nZXQoXCJPRVNfdGV4dHVyZV9mbG9hdFwiKTtyZXR1cm57Z2V0TWF4QW5pc290cm9weTpmdW5jdGlvbigpe2lmKHZvaWQgMCE9PWUpcmV0dXJuIGU7dmFyIGM9Yi5nZXQoXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIik7cmV0dXJuIGU9bnVsbCE9PWM/YS5nZXRQYXJhbWV0ZXIoYy5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpOjB9LGdldE1heFByZWNpc2lvbjpkLHByZWNpc2lvbjpmLGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6YyxtYXhUZXh0dXJlczpnLG1heFZlcnRleFRleHR1cmVzOmgsbWF4VGV4dHVyZVNpemU6ayxtYXhDdWJlbWFwU2l6ZTptLFxuICAgIG1heEF0dHJpYnV0ZXM6cSxtYXhWZXJ0ZXhVbmlmb3JtczpuLG1heFZhcnlpbmdzOnUsbWF4RnJhZ21lbnRVbmlmb3JtczpyLHZlcnRleFRleHR1cmVzOmwsZmxvYXRGcmFnbWVudFRleHR1cmVzOnYsZmxvYXRWZXJ0ZXhUZXh0dXJlczpsJiZ2fX1mdW5jdGlvbiBiYShhLGIsYyxkKXtUYS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBlcnNwZWN0aXZlQ2FtZXJhXCI7dGhpcy5mb3Y9dm9pZCAwIT09YT9hOjUwO3RoaXMuem9vbT0xO3RoaXMubmVhcj12b2lkIDAhPT1jP2M6LjE7dGhpcy5mYXI9dm9pZCAwIT09ZD9kOjJFMzt0aGlzLmZvY3VzPTEwO3RoaXMuYXNwZWN0PXZvaWQgMCE9PWI/YjoxO3RoaXMudmlldz1udWxsO3RoaXMuZmlsbUdhdWdlPTM1O3RoaXMuZmlsbU9mZnNldD0wO3RoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpfWZ1bmN0aW9uIHVkKGEpe2JhLmNhbGwodGhpcyk7dGhpcy5jYW1lcmFzPWF8fFtdfWZ1bmN0aW9uIGJlKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09XG4gICAgZCYmZC5pc1ByZXNlbnRpbmcpe3ZhciBiPWQuZ2V0RXllUGFyYW1ldGVycyhcImxlZnRcIiksZT1iLnJlbmRlcldpZHRoLGI9Yi5yZW5kZXJIZWlnaHQ7bj1hLmdldFBpeGVsUmF0aW8oKTtxPWEuZ2V0U2l6ZSgpO2Euc2V0RHJhd2luZ0J1ZmZlclNpemUoMiplLGIsMSl9ZWxzZSBjLmVuYWJsZWQmJmEuc2V0RHJhd2luZ0J1ZmZlclNpemUocS53aWR0aCxxLmhlaWdodCxuKX12YXIgYz10aGlzLGQ9bnVsbCxlPW51bGwsZj1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93JiZcIlZSRnJhbWVEYXRhXCJpbiB3aW5kb3cmJihlPW5ldyB3aW5kb3cuVlJGcmFtZURhdGEpO3ZhciBnPW5ldyBPLGg9bmV3IGJhO2guYm91bmRzPW5ldyBhYSgwLDAsLjUsMSk7aC5sYXllcnMuZW5hYmxlKDEpO3ZhciBrPW5ldyBiYTtrLmJvdW5kcz1uZXcgYWEoLjUsMCwuNSwxKTtrLmxheWVycy5lbmFibGUoMik7dmFyIG09bmV3IHVkKFtoLGtdKTttLmxheWVycy5lbmFibGUoMSk7bS5sYXllcnMuZW5hYmxlKDIpO1xuICAgIHZhciBxLG47XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidnJkaXNwbGF5cHJlc2VudGNoYW5nZVwiLGIsITEpO3RoaXMuZW5hYmxlZD0hMTt0aGlzLmdldERldmljZT1mdW5jdGlvbigpe3JldHVybiBkfTt0aGlzLnNldERldmljZT1mdW5jdGlvbihhKXt2b2lkIDAhPT1hJiYoZD1hKX07dGhpcy5zZXRQb3NlVGFyZ2V0PWZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEmJihmPWEpfTt0aGlzLmdldENhbWVyYT1mdW5jdGlvbihhKXtpZihudWxsPT09ZClyZXR1cm4gYTtkLmRlcHRoTmVhcj1hLm5lYXI7ZC5kZXB0aEZhcj1hLmZhcjtkLmdldEZyYW1lRGF0YShlKTt2YXIgYj1lLnBvc2UsYz1udWxsIT09Zj9mOmE7bnVsbCE9PWIucG9zaXRpb24/Yy5wb3NpdGlvbi5mcm9tQXJyYXkoYi5wb3NpdGlvbik6Yy5wb3NpdGlvbi5zZXQoMCwwLDApO251bGwhPT1iLm9yaWVudGF0aW9uJiZjLnF1YXRlcm5pb24uZnJvbUFycmF5KGIub3JpZW50YXRpb24pO1xuICAgIGMudXBkYXRlTWF0cml4V29ybGQoKTtpZighMT09PWQuaXNQcmVzZW50aW5nKXJldHVybiBhO2gubmVhcj1hLm5lYXI7ay5uZWFyPWEubmVhcjtoLmZhcj1hLmZhcjtrLmZhcj1hLmZhcjttLm1hdHJpeFdvcmxkLmNvcHkoYS5tYXRyaXhXb3JsZCk7bS5tYXRyaXhXb3JsZEludmVyc2UuY29weShhLm1hdHJpeFdvcmxkSW52ZXJzZSk7aC5tYXRyaXhXb3JsZEludmVyc2UuZnJvbUFycmF5KGUubGVmdFZpZXdNYXRyaXgpO2subWF0cml4V29ybGRJbnZlcnNlLmZyb21BcnJheShlLnJpZ2h0Vmlld01hdHJpeCk7YT1jLnBhcmVudDtudWxsIT09YSYmKGcuZ2V0SW52ZXJzZShhLm1hdHJpeFdvcmxkKSxoLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseShnKSxrLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseShnKSk7aC5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKGgubWF0cml4V29ybGRJbnZlcnNlKTtrLm1hdHJpeFdvcmxkLmdldEludmVyc2Uoay5tYXRyaXhXb3JsZEludmVyc2UpO2gucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoZS5sZWZ0UHJvamVjdGlvbk1hdHJpeCk7XG4gICAgay5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheShlLnJpZ2h0UHJvamVjdGlvbk1hdHJpeCk7bS5wcm9qZWN0aW9uTWF0cml4LmNvcHkoaC5wcm9qZWN0aW9uTWF0cml4KTthPWQuZ2V0TGF5ZXJzKCk7YS5sZW5ndGgmJihhPWFbMF0sbnVsbCE9PWEubGVmdEJvdW5kcyYmND09PWEubGVmdEJvdW5kcy5sZW5ndGgmJmguYm91bmRzLmZyb21BcnJheShhLmxlZnRCb3VuZHMpLG51bGwhPT1hLnJpZ2h0Qm91bmRzJiY0PT09YS5yaWdodEJvdW5kcy5sZW5ndGgmJmsuYm91bmRzLmZyb21BcnJheShhLnJpZ2h0Qm91bmRzKSk7cmV0dXJuIG19O3RoaXMuc3VibWl0RnJhbWU9ZnVuY3Rpb24oKXtkJiZkLmlzUHJlc2VudGluZyYmZC5zdWJtaXRGcmFtZSgpfTt0aGlzLmRpc3Bvc2U9ZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2cmRpc3BsYXlwcmVzZW50Y2hhbmdlXCIsYil9fWZ1bmN0aW9uIEVnKGEpe3ZhciBiPXt9O1xuICAgIHJldHVybntnZXQ6ZnVuY3Rpb24oYyl7aWYodm9pZCAwIT09YltjXSlyZXR1cm4gYltjXTtzd2l0Y2goYyl7Y2FzZSBcIldFQkdMX2RlcHRoX3RleHR1cmVcIjp2YXIgZD1hLmdldEV4dGVuc2lvbihcIldFQkdMX2RlcHRoX3RleHR1cmVcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiTU9aX1dFQkdMX2RlcHRoX3RleHR1cmVcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX1dFQkdMX2RlcHRoX3RleHR1cmVcIik7YnJlYWs7Y2FzZSBcIkVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiOmQ9YS5nZXRFeHRlbnNpb24oXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKXx8YS5nZXRFeHRlbnNpb24oXCJXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpO2JyZWFrO2Nhc2UgXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiOmQ9YS5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKXx8XG4gICAgYS5nZXRFeHRlbnNpb24oXCJNT1pfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpO2JyZWFrO2Nhc2UgXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIik7YnJlYWs7Y2FzZSBcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCI6ZD1hLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCIpO2JyZWFrO2RlZmF1bHQ6ZD1hLmdldEV4dGVuc2lvbihjKX1udWxsPT09ZCYmY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogXCIrYytcIiBleHRlbnNpb24gbm90IHN1cHBvcnRlZC5cIik7cmV0dXJuIGJbY109ZH19fWZ1bmN0aW9uIEZnKCl7ZnVuY3Rpb24gYSgpe20udmFsdWUhPT1cbiAgICBkJiYobS52YWx1ZT1kLG0ubmVlZHNVcGRhdGU9MDxlKTtjLm51bVBsYW5lcz1lO2MubnVtSW50ZXJzZWN0aW9uPTB9ZnVuY3Rpb24gYihhLGIsZCxlKXt2YXIgZj1udWxsIT09YT9hLmxlbmd0aDowLGc9bnVsbDtpZigwIT09Zil7Zz1tLnZhbHVlO2lmKCEwIT09ZXx8bnVsbD09PWcpe2U9ZCs0KmY7Yj1iLm1hdHJpeFdvcmxkSW52ZXJzZTtrLmdldE5vcm1hbE1hdHJpeChiKTtpZihudWxsPT09Z3x8Zy5sZW5ndGg8ZSlnPW5ldyBGbG9hdDMyQXJyYXkoZSk7Zm9yKGU9MDtlIT09ZjsrK2UsZCs9NCloLmNvcHkoYVtlXSkuYXBwbHlNYXRyaXg0KGIsayksaC5ub3JtYWwudG9BcnJheShnLGQpLGdbZCszXT1oLmNvbnN0YW50fW0udmFsdWU9ZzttLm5lZWRzVXBkYXRlPSEwfWMubnVtUGxhbmVzPWY7cmV0dXJuIGd9dmFyIGM9dGhpcyxkPW51bGwsZT0wLGY9ITEsZz0hMSxoPW5ldyBFYSxrPW5ldyBtYSxtPXt2YWx1ZTpudWxsLG5lZWRzVXBkYXRlOiExfTt0aGlzLnVuaWZvcm09bTt0aGlzLm51bUludGVyc2VjdGlvbj1cbiAgICB0aGlzLm51bVBsYW5lcz0wO3RoaXMuaW5pdD1mdW5jdGlvbihhLGMsZyl7dmFyIGg9MCE9PWEubGVuZ3RofHxjfHwwIT09ZXx8ZjtmPWM7ZD1iKGEsZywwKTtlPWEubGVuZ3RoO3JldHVybiBofTt0aGlzLmJlZ2luU2hhZG93cz1mdW5jdGlvbigpe2c9ITA7YihudWxsKX07dGhpcy5lbmRTaGFkb3dzPWZ1bmN0aW9uKCl7Zz0hMTthKCl9O3RoaXMuc2V0U3RhdGU9ZnVuY3Rpb24oYyxoLGssbCx0LHYpe2lmKCFmfHxudWxsPT09Y3x8MD09PWMubGVuZ3RofHxnJiYhaylnP2IobnVsbCk6YSgpO2Vsc2V7az1nPzA6ZTt2YXIgbj00KmsscT10LmNsaXBwaW5nU3RhdGV8fG51bGw7bS52YWx1ZT1xO3E9YihjLGwsbix2KTtmb3IoYz0wO2MhPT1uOysrYylxW2NdPWRbY107dC5jbGlwcGluZ1N0YXRlPXE7dGhpcy5udW1JbnRlcnNlY3Rpb249aD90aGlzLm51bVBsYW5lczowO3RoaXMubnVtUGxhbmVzKz1rfX19ZnVuY3Rpb24gYWYoYSxiKXtyZXR1cm57Y29udmVydDpmdW5jdGlvbihjKXtpZigxRTM9PT1cbiAgICBjKXJldHVybiBhLlJFUEVBVDtpZigxMDAxPT09YylyZXR1cm4gYS5DTEFNUF9UT19FREdFO2lmKDEwMDI9PT1jKXJldHVybiBhLk1JUlJPUkVEX1JFUEVBVDtpZigxMDAzPT09YylyZXR1cm4gYS5ORUFSRVNUO2lmKDEwMDQ9PT1jKXJldHVybiBhLk5FQVJFU1RfTUlQTUFQX05FQVJFU1Q7aWYoMTAwNT09PWMpcmV0dXJuIGEuTkVBUkVTVF9NSVBNQVBfTElORUFSO2lmKDEwMDY9PT1jKXJldHVybiBhLkxJTkVBUjtpZigxMDA3PT09YylyZXR1cm4gYS5MSU5FQVJfTUlQTUFQX05FQVJFU1Q7aWYoMTAwOD09PWMpcmV0dXJuIGEuTElORUFSX01JUE1BUF9MSU5FQVI7aWYoMTAwOT09PWMpcmV0dXJuIGEuVU5TSUdORURfQllURTtpZigxMDE3PT09YylyZXR1cm4gYS5VTlNJR05FRF9TSE9SVF80XzRfNF80O2lmKDEwMTg9PT1jKXJldHVybiBhLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE7aWYoMTAxOT09PWMpcmV0dXJuIGEuVU5TSUdORURfU0hPUlRfNV82XzU7aWYoMTAxMD09PWMpcmV0dXJuIGEuQllURTtcbiAgICBpZigxMDExPT09YylyZXR1cm4gYS5TSE9SVDtpZigxMDEyPT09YylyZXR1cm4gYS5VTlNJR05FRF9TSE9SVDtpZigxMDEzPT09YylyZXR1cm4gYS5JTlQ7aWYoMTAxND09PWMpcmV0dXJuIGEuVU5TSUdORURfSU5UO2lmKDEwMTU9PT1jKXJldHVybiBhLkZMT0FUO2lmKDEwMTY9PT1jKXt2YXIgZD1iLmdldChcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRcIik7aWYobnVsbCE9PWQpcmV0dXJuIGQuSEFMRl9GTE9BVF9PRVN9aWYoMTAyMT09PWMpcmV0dXJuIGEuQUxQSEE7aWYoMTAyMj09PWMpcmV0dXJuIGEuUkdCO2lmKDEwMjM9PT1jKXJldHVybiBhLlJHQkE7aWYoMTAyND09PWMpcmV0dXJuIGEuTFVNSU5BTkNFO2lmKDEwMjU9PT1jKXJldHVybiBhLkxVTUlOQU5DRV9BTFBIQTtpZigxMDI2PT09YylyZXR1cm4gYS5ERVBUSF9DT01QT05FTlQ7aWYoMTAyNz09PWMpcmV0dXJuIGEuREVQVEhfU1RFTkNJTDtpZigxMDA9PT1jKXJldHVybiBhLkZVTkNfQUREO2lmKDEwMT09PWMpcmV0dXJuIGEuRlVOQ19TVUJUUkFDVDtcbiAgICBpZigxMDI9PT1jKXJldHVybiBhLkZVTkNfUkVWRVJTRV9TVUJUUkFDVDtpZigyMDA9PT1jKXJldHVybiBhLlpFUk87aWYoMjAxPT09YylyZXR1cm4gYS5PTkU7aWYoMjAyPT09YylyZXR1cm4gYS5TUkNfQ09MT1I7aWYoMjAzPT09YylyZXR1cm4gYS5PTkVfTUlOVVNfU1JDX0NPTE9SO2lmKDIwND09PWMpcmV0dXJuIGEuU1JDX0FMUEhBO2lmKDIwNT09PWMpcmV0dXJuIGEuT05FX01JTlVTX1NSQ19BTFBIQTtpZigyMDY9PT1jKXJldHVybiBhLkRTVF9BTFBIQTtpZigyMDc9PT1jKXJldHVybiBhLk9ORV9NSU5VU19EU1RfQUxQSEE7aWYoMjA4PT09YylyZXR1cm4gYS5EU1RfQ09MT1I7aWYoMjA5PT09YylyZXR1cm4gYS5PTkVfTUlOVVNfRFNUX0NPTE9SO2lmKDIxMD09PWMpcmV0dXJuIGEuU1JDX0FMUEhBX1NBVFVSQVRFO2lmKDIwMDE9PT1jfHwyMDAyPT09Y3x8MjAwMz09PWN8fDIwMDQ9PT1jKWlmKGQ9Yi5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKSxudWxsIT09XG4gICAgZCl7aWYoMjAwMT09PWMpcmV0dXJuIGQuQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVDtpZigyMDAyPT09YylyZXR1cm4gZC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtpZigyMDAzPT09YylyZXR1cm4gZC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVDtpZigyMDA0PT09YylyZXR1cm4gZC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVH1pZigyMTAwPT09Y3x8MjEwMT09PWN8fDIxMDI9PT1jfHwyMTAzPT09YylpZihkPWIuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpLG51bGwhPT1kKXtpZigyMTAwPT09YylyZXR1cm4gZC5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO2lmKDIxMDE9PT1jKXJldHVybiBkLkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUc7aWYoMjEwMj09PWMpcmV0dXJuIGQuQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7aWYoMjEwMz09PWMpcmV0dXJuIGQuQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUd9aWYoMjE1MT09PVxuICAgIGMmJihkPWIuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzFcIiksbnVsbCE9PWQpKXJldHVybiBkLkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0w7aWYoMTAzPT09Y3x8MTA0PT09YylpZihkPWIuZ2V0KFwiRVhUX2JsZW5kX21pbm1heFwiKSxudWxsIT09ZCl7aWYoMTAzPT09YylyZXR1cm4gZC5NSU5fRVhUO2lmKDEwND09PWMpcmV0dXJuIGQuTUFYX0VYVH1yZXR1cm4gMTAyMD09PWMmJihkPWIuZ2V0KFwiV0VCR0xfZGVwdGhfdGV4dHVyZVwiKSxudWxsIT09ZCk/ZC5VTlNJR05FRF9JTlRfMjRfOF9XRUJHTDowfX19ZnVuY3Rpb24gY2UoYSl7ZnVuY3Rpb24gYigpe2lhPW5ldyBFZyhGKTtpYS5nZXQoXCJXRUJHTF9kZXB0aF90ZXh0dXJlXCIpO2lhLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpO2lhLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKTtpYS5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpO2lhLmdldChcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyXCIpO1xuICAgIGlhLmdldChcIk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1wiKTtpYS5nZXQoXCJPRVNfZWxlbWVudF9pbmRleF91aW50XCIpO2lhLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIik7cGE9bmV3IGFmKEYsaWEpO1Q9bmV3IERnKEYsaWEsYSk7Wj1uZXcgQ2coRixpYSxwYSk7Wi5zY2lzc29yKFguY29weShmYSkubXVsdGlwbHlTY2FsYXIod2EpKTtaLnZpZXdwb3J0KG5iLmNvcHkoZGEpLm11bHRpcGx5U2NhbGFyKHdhKSk7Y2E9bmV3IEJnO2dhPW5ldyBBZyhGLGlhLFosY2EsVCxwYSxoYSk7cWE9bmV3IGJnKEYpO3JhPW5ldyBvZyhGLHFhLGhhKTt0YT1uZXcgcmcocmEsYmEpO3hhPW5ldyBsZyhGKTttYT1uZXcgemcoUyxpYSxUKTt1YT1uZXcgcWc7c2E9bmV3IGpnO2phPW5ldyBmZyhTLFoscmEsSik7eWE9bmV3IG5nKEYsaWEsYmEpO3phPW5ldyBtZyhGLGlhLGJhKTtBYT1uZXcgWmYoUyxGLFosZ2EsVCk7QmE9bmV3ICRmKFMsRixaLGdhLFQpO1MuaW5mby5wcm9ncmFtcz1tYS5wcm9ncmFtcztcbiAgICBTLmNvbnRleHQ9RjtTLmNhcGFiaWxpdGllcz1UO1MuZXh0ZW5zaW9ucz1pYTtTLnByb3BlcnRpZXM9Y2E7Uy5yZW5kZXJMaXN0cz1zYTtTLnN0YXRlPVp9ZnVuY3Rpb24gYyhhKXthLnByZXZlbnREZWZhdWx0KCk7Y29uc29sZS5sb2coXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IExvc3QuXCIpO0w9ITB9ZnVuY3Rpb24gZCgpe2NvbnNvbGUubG9nKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBSZXN0b3JlZC5cIik7TD0hMTtiKCl9ZnVuY3Rpb24gZShhKXthPWEudGFyZ2V0O2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixlKTtmKGEpO2NhLnJlbW92ZShhKX1mdW5jdGlvbiBmKGEpe3ZhciBiPWNhLmdldChhKS5wcm9ncmFtO2EucHJvZ3JhbT12b2lkIDA7dm9pZCAwIT09YiYmbWEucmVsZWFzZVByb2dyYW0oYil9ZnVuY3Rpb24gZyhhLGIsYyl7YS5yZW5kZXIoZnVuY3Rpb24oYSl7Uy5yZW5kZXJCdWZmZXJJbW1lZGlhdGUoYSxiLGMpfSl9ZnVuY3Rpb24gaChhKXtudWxsIT09XG4gICAgQ2EmJkNhKGEpOyhhPWthLmdldERldmljZSgpKSYmYS5pc1ByZXNlbnRpbmc/YS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaCk6d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShoKX1mdW5jdGlvbiBrKGEsYixjKXtpZighMSE9PWEudmlzaWJsZSl7aWYoYS5sYXllcnMudGVzdChiLmxheWVycykpaWYoYS5pc0xpZ2h0KUQucHVzaChhKSxhLmNhc3RTaGFkb3cmJkMucHVzaChhKTtlbHNlIGlmKGEuaXNTcHJpdGUpYS5mcnVzdHVtQ3VsbGVkJiYhJGQuaW50ZXJzZWN0c1Nwcml0ZShhKXx8SC5wdXNoKGEpO2Vsc2UgaWYoYS5pc0xlbnNGbGFyZSlsYS5wdXNoKGEpO2Vsc2UgaWYoYS5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCljJiZPYi5zZXRGcm9tTWF0cml4UG9zaXRpb24oYS5tYXRyaXhXb3JsZCkuYXBwbHlNYXRyaXg0KHRkKSxFLnB1c2goYSxudWxsLGEubWF0ZXJpYWwsT2IueixudWxsKTtlbHNlIGlmKGEuaXNNZXNofHxhLmlzTGluZXx8YS5pc1BvaW50cylpZihhLmlzU2tpbm5lZE1lc2gmJlxuICAgIGEuc2tlbGV0b24udXBkYXRlKCksIWEuZnJ1c3R1bUN1bGxlZHx8JGQuaW50ZXJzZWN0c09iamVjdChhKSl7YyYmT2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGEubWF0cml4V29ybGQpLmFwcGx5TWF0cml4NCh0ZCk7dmFyIGQ9dGEudXBkYXRlKGEpLGU9YS5tYXRlcmlhbDtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgZj1kLmdyb3VwcyxnPTAsaD1mLmxlbmd0aDtnPGg7ZysrKXt2YXIgbT1mW2ddLG49ZVttLm1hdGVyaWFsSW5kZXhdO24mJm4udmlzaWJsZSYmRS5wdXNoKGEsZCxuLE9iLnosbSl9ZWxzZSBlLnZpc2libGUmJkUucHVzaChhLGQsZSxPYi56LG51bGwpfWE9YS5jaGlsZHJlbjtnPTA7Zm9yKGg9YS5sZW5ndGg7ZzxoO2crKylrKGFbZ10sYixjKX19ZnVuY3Rpb24gbShhLGIsYyxkKXtmb3IodmFyIGU9MCxmPWEubGVuZ3RoO2U8ZjtlKyspe3ZhciBnPWFbZV0saD1nLm9iamVjdCxrPWcuZ2VvbWV0cnksbT12b2lkIDA9PT1kP2cubWF0ZXJpYWw6ZCxnPWcuZ3JvdXA7aWYoYy5pc0FycmF5Q2FtZXJhKXtXPVxuICAgIGM7Zm9yKHZhciBuPWMuY2FtZXJhcyx1PTAsbD1uLmxlbmd0aDt1PGw7dSsrKXt2YXIgcj1uW3VdO2lmKGgubGF5ZXJzLnRlc3Qoci5sYXllcnMpKXt2YXIgdD1yLmJvdW5kcztaLnZpZXdwb3J0KG5iLnNldCh0LngqZWEsdC55KlUsdC56KmVhLHQudypVKS5tdWx0aXBseVNjYWxhcih3YSkpO3EoaCxiLHIsayxtLGcpfX19ZWxzZSBXPW51bGwscShoLGIsYyxrLG0sZyl9fWZ1bmN0aW9uIHEoYSxiLGMsZCxlLGYpe2Eub25CZWZvcmVSZW5kZXIoUyxiLGMsZCxlLGYpO2EubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoYy5tYXRyaXhXb3JsZEludmVyc2UsYS5tYXRyaXhXb3JsZCk7YS5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KGEubW9kZWxWaWV3TWF0cml4KTtpZihhLmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0KXt2YXIgaD1hLmlzTWVzaCYmMD5hLm1hdHJpeFdvcmxkLmRldGVybWluYW50KCk7Wi5zZXRNYXRlcmlhbChlLGgpO2g9dShjLGIuZm9nLGUsYSk7Uj1cIlwiO1xuICAgIGcoYSxoLGUpfWVsc2UgUy5yZW5kZXJCdWZmZXJEaXJlY3QoYyxiLmZvZyxkLGUsYSxmKTthLm9uQWZ0ZXJSZW5kZXIoUyxiLGMsZCxlLGYpfWZ1bmN0aW9uIG4oYSxiLGMpe3ZhciBkPWNhLmdldChhKTtjPW1hLmdldFBhcmFtZXRlcnMoYSx1YS5zdGF0ZSxDLGIsSmEubnVtUGxhbmVzLEphLm51bUludGVyc2VjdGlvbixjKTt2YXIgZz1tYS5nZXRQcm9ncmFtQ29kZShhLGMpLGg9ZC5wcm9ncmFtLGs9ITA7aWYodm9pZCAwPT09aClhLmFkZEV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsZSk7ZWxzZSBpZihoLmNvZGUhPT1nKWYoYSk7ZWxzZXtpZih2b2lkIDAhPT1jLnNoYWRlcklEKXJldHVybjtrPSExfWsmJihjLnNoYWRlcklEPyhoPXRiW2Muc2hhZGVySURdLGQuc2hhZGVyPXtuYW1lOmEudHlwZSx1bmlmb3JtczpHYS5jbG9uZShoLnVuaWZvcm1zKSx2ZXJ0ZXhTaGFkZXI6aC52ZXJ0ZXhTaGFkZXIsZnJhZ21lbnRTaGFkZXI6aC5mcmFnbWVudFNoYWRlcn0pOmQuc2hhZGVyPXtuYW1lOmEudHlwZSxcbiAgICB1bmlmb3JtczphLnVuaWZvcm1zLHZlcnRleFNoYWRlcjphLnZlcnRleFNoYWRlcixmcmFnbWVudFNoYWRlcjphLmZyYWdtZW50U2hhZGVyfSxhLm9uQmVmb3JlQ29tcGlsZShkLnNoYWRlciksaD1tYS5hY3F1aXJlUHJvZ3JhbShhLGQuc2hhZGVyLGMsZyksZC5wcm9ncmFtPWgsYS5wcm9ncmFtPWgpO2M9aC5nZXRBdHRyaWJ1dGVzKCk7aWYoYS5tb3JwaFRhcmdldHMpZm9yKGc9YS5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHM9MDtnPFMubWF4TW9ycGhUYXJnZXRzO2crKykwPD1jW1wibW9ycGhUYXJnZXRcIitnXSYmYS5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMrKztpZihhLm1vcnBoTm9ybWFscylmb3IoZz1hLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscz0wO2c8Uy5tYXhNb3JwaE5vcm1hbHM7ZysrKTA8PWNbXCJtb3JwaE5vcm1hbFwiK2ddJiZhLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscysrO2M9ZC5zaGFkZXIudW5pZm9ybXM7aWYoIWEuaXNTaGFkZXJNYXRlcmlhbCYmIWEuaXNSYXdTaGFkZXJNYXRlcmlhbHx8XG4gICAgITA9PT1hLmNsaXBwaW5nKWQubnVtQ2xpcHBpbmdQbGFuZXM9SmEubnVtUGxhbmVzLGQubnVtSW50ZXJzZWN0aW9uPUphLm51bUludGVyc2VjdGlvbixjLmNsaXBwaW5nUGxhbmVzPUphLnVuaWZvcm07ZC5mb2c9YjtkLmxpZ2h0c0hhc2g9dWEuc3RhdGUuaGFzaDthLmxpZ2h0cyYmKGMuYW1iaWVudExpZ2h0Q29sb3IudmFsdWU9dWEuc3RhdGUuYW1iaWVudCxjLmRpcmVjdGlvbmFsTGlnaHRzLnZhbHVlPXVhLnN0YXRlLmRpcmVjdGlvbmFsLGMuc3BvdExpZ2h0cy52YWx1ZT11YS5zdGF0ZS5zcG90LGMucmVjdEFyZWFMaWdodHMudmFsdWU9dWEuc3RhdGUucmVjdEFyZWEsYy5wb2ludExpZ2h0cy52YWx1ZT11YS5zdGF0ZS5wb2ludCxjLmhlbWlzcGhlcmVMaWdodHMudmFsdWU9dWEuc3RhdGUuaGVtaSxjLmRpcmVjdGlvbmFsU2hhZG93TWFwLnZhbHVlPXVhLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwLGMuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgudmFsdWU9dWEuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgsXG4gICAgYy5zcG90U2hhZG93TWFwLnZhbHVlPXVhLnN0YXRlLnNwb3RTaGFkb3dNYXAsYy5zcG90U2hhZG93TWF0cml4LnZhbHVlPXVhLnN0YXRlLnNwb3RTaGFkb3dNYXRyaXgsYy5wb2ludFNoYWRvd01hcC52YWx1ZT11YS5zdGF0ZS5wb2ludFNoYWRvd01hcCxjLnBvaW50U2hhZG93TWF0cml4LnZhbHVlPXVhLnN0YXRlLnBvaW50U2hhZG93TWF0cml4KTthPWQucHJvZ3JhbS5nZXRVbmlmb3JtcygpO2E9bWIuc2VxV2l0aFZhbHVlKGEuc2VxLGMpO2QudW5pZm9ybXNMaXN0PWF9ZnVuY3Rpb24gdShhLGIsYyxkKXtZPTA7dmFyIGU9Y2EuZ2V0KGMpO3NkJiYoYWV8fGEhPT1WKSYmSmEuc2V0U3RhdGUoYy5jbGlwcGluZ1BsYW5lcyxjLmNsaXBJbnRlcnNlY3Rpb24sYy5jbGlwU2hhZG93cyxhLGUsYT09PVYmJmMuaWQ9PT1QKTshMT09PWMubmVlZHNVcGRhdGUmJih2b2lkIDA9PT1lLnByb2dyYW0/Yy5uZWVkc1VwZGF0ZT0hMDpjLmZvZyYmZS5mb2chPT1iP2MubmVlZHNVcGRhdGU9ITA6Yy5saWdodHMmJlxuICAgIGUubGlnaHRzSGFzaCE9PXVhLnN0YXRlLmhhc2g/Yy5uZWVkc1VwZGF0ZT0hMDp2b2lkIDA9PT1lLm51bUNsaXBwaW5nUGxhbmVzfHxlLm51bUNsaXBwaW5nUGxhbmVzPT09SmEubnVtUGxhbmVzJiZlLm51bUludGVyc2VjdGlvbj09PUphLm51bUludGVyc2VjdGlvbnx8KGMubmVlZHNVcGRhdGU9ITApKTtjLm5lZWRzVXBkYXRlJiYobihjLGIsZCksYy5uZWVkc1VwZGF0ZT0hMSk7dmFyIGY9ITEsZz0hMSxoPSExLGs9ZS5wcm9ncmFtLG09ay5nZXRVbmlmb3JtcygpLHE9ZS5zaGFkZXIudW5pZm9ybXM7Wi51c2VQcm9ncmFtKGsucHJvZ3JhbSkmJihoPWc9Zj0hMCk7Yy5pZCE9PVAmJihQPWMuaWQsZz0hMCk7aWYoZnx8YSE9PVYpe20uc2V0VmFsdWUoRixcInByb2plY3Rpb25NYXRyaXhcIixhLnByb2plY3Rpb25NYXRyaXgpO1QubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciYmbS5zZXRWYWx1ZShGLFwibG9nRGVwdGhCdWZGQ1wiLDIvKE1hdGgubG9nKGEuZmFyKzEpL01hdGguTE4yKSk7ViE9PShXfHxcbiAgICBhKSYmKFY9V3x8YSxoPWc9ITApO2lmKGMuaXNTaGFkZXJNYXRlcmlhbHx8Yy5pc01lc2hQaG9uZ01hdGVyaWFsfHxjLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWx8fGMuZW52TWFwKWY9bS5tYXAuY2FtZXJhUG9zaXRpb24sdm9pZCAwIT09ZiYmZi5zZXRWYWx1ZShGLE9iLnNldEZyb21NYXRyaXhQb3NpdGlvbihhLm1hdHJpeFdvcmxkKSk7KGMuaXNNZXNoUGhvbmdNYXRlcmlhbHx8Yy5pc01lc2hMYW1iZXJ0TWF0ZXJpYWx8fGMuaXNNZXNoQmFzaWNNYXRlcmlhbHx8Yy5pc01lc2hTdGFuZGFyZE1hdGVyaWFsfHxjLmlzU2hhZGVyTWF0ZXJpYWx8fGMuc2tpbm5pbmcpJiZtLnNldFZhbHVlKEYsXCJ2aWV3TWF0cml4XCIsYS5tYXRyaXhXb3JsZEludmVyc2UpfWlmKGMuc2tpbm5pbmcmJihtLnNldE9wdGlvbmFsKEYsZCxcImJpbmRNYXRyaXhcIiksbS5zZXRPcHRpb25hbChGLGQsXCJiaW5kTWF0cml4SW52ZXJzZVwiKSxhPWQuc2tlbGV0b24pKWlmKGY9YS5ib25lcyxULmZsb2F0VmVydGV4VGV4dHVyZXMpe2lmKHZvaWQgMD09PVxuICAgIGEuYm9uZVRleHR1cmUpe3ZhciBmPU1hdGguc3FydCg0KmYubGVuZ3RoKSxmPVEuY2VpbFBvd2VyT2ZUd28oZiksZj1NYXRoLm1heChmLDQpLHU9bmV3IEZsb2F0MzJBcnJheShmKmYqNCk7dS5zZXQoYS5ib25lTWF0cmljZXMpO3ZhciByPW5ldyBsYih1LGYsZiwxMDIzLDEwMTUpO2EuYm9uZU1hdHJpY2VzPXU7YS5ib25lVGV4dHVyZT1yO2EuYm9uZVRleHR1cmVTaXplPWZ9bS5zZXRWYWx1ZShGLFwiYm9uZVRleHR1cmVcIixhLmJvbmVUZXh0dXJlKTttLnNldFZhbHVlKEYsXCJib25lVGV4dHVyZVNpemVcIixhLmJvbmVUZXh0dXJlU2l6ZSl9ZWxzZSBtLnNldE9wdGlvbmFsKEYsYSxcImJvbmVNYXRyaWNlc1wiKTtnJiYobS5zZXRWYWx1ZShGLFwidG9uZU1hcHBpbmdFeHBvc3VyZVwiLFMudG9uZU1hcHBpbmdFeHBvc3VyZSksbS5zZXRWYWx1ZShGLFwidG9uZU1hcHBpbmdXaGl0ZVBvaW50XCIsUy50b25lTWFwcGluZ1doaXRlUG9pbnQpLGMubGlnaHRzJiYoZz1oLHEuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGU9XG4gICAgZyxxLmRpcmVjdGlvbmFsTGlnaHRzLm5lZWRzVXBkYXRlPWcscS5wb2ludExpZ2h0cy5uZWVkc1VwZGF0ZT1nLHEuc3BvdExpZ2h0cy5uZWVkc1VwZGF0ZT1nLHEucmVjdEFyZWFMaWdodHMubmVlZHNVcGRhdGU9ZyxxLmhlbWlzcGhlcmVMaWdodHMubmVlZHNVcGRhdGU9ZyksYiYmYy5mb2cmJihxLmZvZ0NvbG9yLnZhbHVlPWIuY29sb3IsYi5pc0ZvZz8ocS5mb2dOZWFyLnZhbHVlPWIubmVhcixxLmZvZ0Zhci52YWx1ZT1iLmZhcik6Yi5pc0ZvZ0V4cDImJihxLmZvZ0RlbnNpdHkudmFsdWU9Yi5kZW5zaXR5KSksYy5pc01lc2hCYXNpY01hdGVyaWFsP2wocSxjKTpjLmlzTWVzaExhbWJlcnRNYXRlcmlhbD8obChxLGMpLGMuZW1pc3NpdmVNYXAmJihxLmVtaXNzaXZlTWFwLnZhbHVlPWMuZW1pc3NpdmVNYXApKTpjLmlzTWVzaFBob25nTWF0ZXJpYWw/KGwocSxjKSxjLmlzTWVzaFRvb25NYXRlcmlhbD8odChxLGMpLGMuZ3JhZGllbnRNYXAmJihxLmdyYWRpZW50TWFwLnZhbHVlPWMuZ3JhZGllbnRNYXApKTpcbiAgICB0KHEsYykpOmMuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbD8obChxLGMpLGMuaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCYmKHEuY2xlYXJDb2F0LnZhbHVlPWMuY2xlYXJDb2F0LHEuY2xlYXJDb2F0Um91Z2huZXNzLnZhbHVlPWMuY2xlYXJDb2F0Um91Z2huZXNzKSxxLnJvdWdobmVzcy52YWx1ZT1jLnJvdWdobmVzcyxxLm1ldGFsbmVzcy52YWx1ZT1jLm1ldGFsbmVzcyxjLnJvdWdobmVzc01hcCYmKHEucm91Z2huZXNzTWFwLnZhbHVlPWMucm91Z2huZXNzTWFwKSxjLm1ldGFsbmVzc01hcCYmKHEubWV0YWxuZXNzTWFwLnZhbHVlPWMubWV0YWxuZXNzTWFwKSxjLmVtaXNzaXZlTWFwJiYocS5lbWlzc2l2ZU1hcC52YWx1ZT1jLmVtaXNzaXZlTWFwKSxjLmJ1bXBNYXAmJihxLmJ1bXBNYXAudmFsdWU9Yy5idW1wTWFwLHEuYnVtcFNjYWxlLnZhbHVlPWMuYnVtcFNjYWxlKSxjLm5vcm1hbE1hcCYmKHEubm9ybWFsTWFwLnZhbHVlPWMubm9ybWFsTWFwLHEubm9ybWFsU2NhbGUudmFsdWUuY29weShjLm5vcm1hbFNjYWxlKSksXG4gICAgYy5kaXNwbGFjZW1lbnRNYXAmJihxLmRpc3BsYWNlbWVudE1hcC52YWx1ZT1jLmRpc3BsYWNlbWVudE1hcCxxLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlPWMuZGlzcGxhY2VtZW50U2NhbGUscS5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlPWMuZGlzcGxhY2VtZW50QmlhcyksYy5lbnZNYXAmJihxLmVudk1hcEludGVuc2l0eS52YWx1ZT1jLmVudk1hcEludGVuc2l0eSkpOmMuaXNNZXNoRGVwdGhNYXRlcmlhbD8obChxLGMpLGMuZGlzcGxhY2VtZW50TWFwJiYocS5kaXNwbGFjZW1lbnRNYXAudmFsdWU9Yy5kaXNwbGFjZW1lbnRNYXAscS5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZT1jLmRpc3BsYWNlbWVudFNjYWxlLHEuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZT1jLmRpc3BsYWNlbWVudEJpYXMpKTpjLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWw/KGwocSxjKSxjLmRpc3BsYWNlbWVudE1hcCYmKHEuZGlzcGxhY2VtZW50TWFwLnZhbHVlPWMuZGlzcGxhY2VtZW50TWFwLHEuZGlzcGxhY2VtZW50U2NhbGUudmFsdWU9XG4gICAgYy5kaXNwbGFjZW1lbnRTY2FsZSxxLmRpc3BsYWNlbWVudEJpYXMudmFsdWU9Yy5kaXNwbGFjZW1lbnRCaWFzKSxxLnJlZmVyZW5jZVBvc2l0aW9uLnZhbHVlLmNvcHkoYy5yZWZlcmVuY2VQb3NpdGlvbikscS5uZWFyRGlzdGFuY2UudmFsdWU9Yy5uZWFyRGlzdGFuY2UscS5mYXJEaXN0YW5jZS52YWx1ZT1jLmZhckRpc3RhbmNlKTpjLmlzTWVzaE5vcm1hbE1hdGVyaWFsPyhsKHEsYyksYy5idW1wTWFwJiYocS5idW1wTWFwLnZhbHVlPWMuYnVtcE1hcCxxLmJ1bXBTY2FsZS52YWx1ZT1jLmJ1bXBTY2FsZSksYy5ub3JtYWxNYXAmJihxLm5vcm1hbE1hcC52YWx1ZT1jLm5vcm1hbE1hcCxxLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoYy5ub3JtYWxTY2FsZSkpLGMuZGlzcGxhY2VtZW50TWFwJiYocS5kaXNwbGFjZW1lbnRNYXAudmFsdWU9Yy5kaXNwbGFjZW1lbnRNYXAscS5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZT1jLmRpc3BsYWNlbWVudFNjYWxlLHEuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZT1cbiAgICBjLmRpc3BsYWNlbWVudEJpYXMpKTpjLmlzTGluZUJhc2ljTWF0ZXJpYWw/KHEuZGlmZnVzZS52YWx1ZT1jLmNvbG9yLHEub3BhY2l0eS52YWx1ZT1jLm9wYWNpdHksYy5pc0xpbmVEYXNoZWRNYXRlcmlhbCYmKHEuZGFzaFNpemUudmFsdWU9Yy5kYXNoU2l6ZSxxLnRvdGFsU2l6ZS52YWx1ZT1jLmRhc2hTaXplK2MuZ2FwU2l6ZSxxLnNjYWxlLnZhbHVlPWMuc2NhbGUpKTpjLmlzUG9pbnRzTWF0ZXJpYWw/KHEuZGlmZnVzZS52YWx1ZT1jLmNvbG9yLHEub3BhY2l0eS52YWx1ZT1jLm9wYWNpdHkscS5zaXplLnZhbHVlPWMuc2l6ZSp3YSxxLnNjYWxlLnZhbHVlPS41KlUscS5tYXAudmFsdWU9Yy5tYXAsbnVsbCE9PWMubWFwJiYoITA9PT1jLm1hcC5tYXRyaXhBdXRvVXBkYXRlJiYoYj1jLm1hcC5vZmZzZXQsZz1jLm1hcC5yZXBlYXQsaD1jLm1hcC5jZW50ZXIsYy5tYXAubWF0cml4LnNldFV2VHJhbnNmb3JtKGIueCxiLnksZy54LGcueSxjLm1hcC5yb3RhdGlvbixoLngsaC55KSkscS51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KGMubWFwLm1hdHJpeCkpKTpcbiAgICBjLmlzU2hhZG93TWF0ZXJpYWwmJihxLmNvbG9yLnZhbHVlPWMuY29sb3IscS5vcGFjaXR5LnZhbHVlPWMub3BhY2l0eSksdm9pZCAwIT09cS5sdGNNYXQmJihxLmx0Y01hdC52YWx1ZT1LLkxUQ19NQVRfVEVYVFVSRSksdm9pZCAwIT09cS5sdGNNYWcmJihxLmx0Y01hZy52YWx1ZT1LLkxUQ19NQUdfVEVYVFVSRSksbWIudXBsb2FkKEYsZS51bmlmb3Jtc0xpc3QscSxTKSk7bS5zZXRWYWx1ZShGLFwibW9kZWxWaWV3TWF0cml4XCIsZC5tb2RlbFZpZXdNYXRyaXgpO20uc2V0VmFsdWUoRixcIm5vcm1hbE1hdHJpeFwiLGQubm9ybWFsTWF0cml4KTttLnNldFZhbHVlKEYsXCJtb2RlbE1hdHJpeFwiLGQubWF0cml4V29ybGQpO3JldHVybiBrfWZ1bmN0aW9uIGwoYSxiKXthLm9wYWNpdHkudmFsdWU9Yi5vcGFjaXR5O2IuY29sb3ImJihhLmRpZmZ1c2UudmFsdWU9Yi5jb2xvcik7Yi5lbWlzc2l2ZSYmYS5lbWlzc2l2ZS52YWx1ZS5jb3B5KGIuZW1pc3NpdmUpLm11bHRpcGx5U2NhbGFyKGIuZW1pc3NpdmVJbnRlbnNpdHkpO1xuICAgIGIubWFwJiYoYS5tYXAudmFsdWU9Yi5tYXApO2IuYWxwaGFNYXAmJihhLmFscGhhTWFwLnZhbHVlPWIuYWxwaGFNYXApO2Iuc3BlY3VsYXJNYXAmJihhLnNwZWN1bGFyTWFwLnZhbHVlPWIuc3BlY3VsYXJNYXApO2IuZW52TWFwJiYoYS5lbnZNYXAudmFsdWU9Yi5lbnZNYXAsYS5mbGlwRW52TWFwLnZhbHVlPWIuZW52TWFwJiZiLmVudk1hcC5pc0N1YmVUZXh0dXJlPy0xOjEsYS5yZWZsZWN0aXZpdHkudmFsdWU9Yi5yZWZsZWN0aXZpdHksYS5yZWZyYWN0aW9uUmF0aW8udmFsdWU9Yi5yZWZyYWN0aW9uUmF0aW8pO2IubGlnaHRNYXAmJihhLmxpZ2h0TWFwLnZhbHVlPWIubGlnaHRNYXAsYS5saWdodE1hcEludGVuc2l0eS52YWx1ZT1iLmxpZ2h0TWFwSW50ZW5zaXR5KTtiLmFvTWFwJiYoYS5hb01hcC52YWx1ZT1iLmFvTWFwLGEuYW9NYXBJbnRlbnNpdHkudmFsdWU9Yi5hb01hcEludGVuc2l0eSk7aWYoYi5tYXApdmFyIGM9Yi5tYXA7ZWxzZSBiLnNwZWN1bGFyTWFwP2M9Yi5zcGVjdWxhck1hcDpcbiAgICBiLmRpc3BsYWNlbWVudE1hcD9jPWIuZGlzcGxhY2VtZW50TWFwOmIubm9ybWFsTWFwP2M9Yi5ub3JtYWxNYXA6Yi5idW1wTWFwP2M9Yi5idW1wTWFwOmIucm91Z2huZXNzTWFwP2M9Yi5yb3VnaG5lc3NNYXA6Yi5tZXRhbG5lc3NNYXA/Yz1iLm1ldGFsbmVzc01hcDpiLmFscGhhTWFwP2M9Yi5hbHBoYU1hcDpiLmVtaXNzaXZlTWFwJiYoYz1iLmVtaXNzaXZlTWFwKTtpZih2b2lkIDAhPT1jKXtjLmlzV2ViR0xSZW5kZXJUYXJnZXQmJihjPWMudGV4dHVyZSk7aWYoITA9PT1jLm1hdHJpeEF1dG9VcGRhdGUpe2I9Yy5vZmZzZXQ7dmFyIGQ9Yy5yZXBlYXQsZT1jLmNlbnRlcjtjLm1hdHJpeC5zZXRVdlRyYW5zZm9ybShiLngsYi55LGQueCxkLnksYy5yb3RhdGlvbixlLngsZS55KX1hLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoYy5tYXRyaXgpfX1mdW5jdGlvbiB0KGEsYil7YS5zcGVjdWxhci52YWx1ZT1iLnNwZWN1bGFyO2Euc2hpbmluZXNzLnZhbHVlPU1hdGgubWF4KGIuc2hpbmluZXNzLFxuICAgIDFFLTQpO2IuZW1pc3NpdmVNYXAmJihhLmVtaXNzaXZlTWFwLnZhbHVlPWIuZW1pc3NpdmVNYXApO2IuYnVtcE1hcCYmKGEuYnVtcE1hcC52YWx1ZT1iLmJ1bXBNYXAsYS5idW1wU2NhbGUudmFsdWU9Yi5idW1wU2NhbGUpO2Iubm9ybWFsTWFwJiYoYS5ub3JtYWxNYXAudmFsdWU9Yi5ub3JtYWxNYXAsYS5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KGIubm9ybWFsU2NhbGUpKTtiLmRpc3BsYWNlbWVudE1hcCYmKGEuZGlzcGxhY2VtZW50TWFwLnZhbHVlPWIuZGlzcGxhY2VtZW50TWFwLGEuZGlzcGxhY2VtZW50U2NhbGUudmFsdWU9Yi5kaXNwbGFjZW1lbnRTY2FsZSxhLmRpc3BsYWNlbWVudEJpYXMudmFsdWU9Yi5kaXNwbGFjZW1lbnRCaWFzKX1jb25zb2xlLmxvZyhcIlRIUkVFLldlYkdMUmVuZGVyZXJcIixcIjg5XCIpO2E9YXx8e307dmFyIHY9dm9pZCAwIT09YS5jYW52YXM/YS5jYW52YXM6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFxuICAgIFwiY2FudmFzXCIpLHc9dm9pZCAwIT09YS5jb250ZXh0P2EuY29udGV4dDpudWxsLHo9dm9pZCAwIT09YS5hbHBoYT9hLmFscGhhOiExLHk9dm9pZCAwIT09YS5kZXB0aD9hLmRlcHRoOiEwLEk9dm9pZCAwIT09YS5zdGVuY2lsP2Euc3RlbmNpbDohMCxBPXZvaWQgMCE9PWEuYW50aWFsaWFzP2EuYW50aWFsaWFzOiExLEo9dm9pZCAwIT09YS5wcmVtdWx0aXBsaWVkQWxwaGE/YS5wcmVtdWx0aXBsaWVkQWxwaGE6ITAseD12b2lkIDAhPT1hLnByZXNlcnZlRHJhd2luZ0J1ZmZlcj9hLnByZXNlcnZlRHJhd2luZ0J1ZmZlcjohMSxCPXZvaWQgMCE9PWEucG93ZXJQcmVmZXJlbmNlP2EucG93ZXJQcmVmZXJlbmNlOlwiZGVmYXVsdFwiLEQ9W10sQz1bXSxFPW51bGwsSD1bXSxsYT1bXTt0aGlzLmRvbUVsZW1lbnQ9djt0aGlzLmNvbnRleHQ9bnVsbDt0aGlzLnNvcnRPYmplY3RzPXRoaXMuYXV0b0NsZWFyU3RlbmNpbD10aGlzLmF1dG9DbGVhckRlcHRoPXRoaXMuYXV0b0NsZWFyQ29sb3I9dGhpcy5hdXRvQ2xlYXI9XG4gICAgITA7dGhpcy5jbGlwcGluZ1BsYW5lcz1bXTt0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkPSExO3RoaXMuZ2FtbWFGYWN0b3I9Mjt0aGlzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzPXRoaXMuZ2FtbWFPdXRwdXQ9dGhpcy5nYW1tYUlucHV0PSExO3RoaXMudG9uZU1hcHBpbmdXaGl0ZVBvaW50PXRoaXMudG9uZU1hcHBpbmdFeHBvc3VyZT10aGlzLnRvbmVNYXBwaW5nPTE7dGhpcy5tYXhNb3JwaFRhcmdldHM9ODt0aGlzLm1heE1vcnBoTm9ybWFscz00O3ZhciBTPXRoaXMsTD0hMSxOPW51bGwsTT1udWxsLFA9LTEsUj1cIlwiLFY9bnVsbCxXPW51bGwsbmI9bmV3IGFhLFg9bmV3IGFhLEc9bnVsbCxZPTAsZWE9di53aWR0aCxVPXYuaGVpZ2h0LHdhPTEsZGE9bmV3IGFhKDAsMCxlYSxVKSxmYT1uZXcgYWEoMCwwLGVhLFUpLCRlPSExLCRkPW5ldyByZCxKYT1uZXcgRmcsc2Q9ITEsYWU9ITEsdGQ9bmV3IE8sT2I9bmV3IHAsaGE9e2dlb21ldHJpZXM6MCx0ZXh0dXJlczowfSxiYT17ZnJhbWU6MCxcbiAgICBjYWxsczowLHZlcnRpY2VzOjAsZmFjZXM6MCxwb2ludHM6MH07dGhpcy5pbmZvPXtyZW5kZXI6YmEsbWVtb3J5OmhhLHByb2dyYW1zOm51bGx9O3RyeXt6PXthbHBoYTp6LGRlcHRoOnksc3RlbmNpbDpJLGFudGlhbGlhczpBLHByZW11bHRpcGxpZWRBbHBoYTpKLHByZXNlcnZlRHJhd2luZ0J1ZmZlcjp4LHBvd2VyUHJlZmVyZW5jZTpCfTt2LmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsYywhMSk7di5hZGRFdmVudExpc3RlbmVyKFwid2ViZ2xjb250ZXh0cmVzdG9yZWRcIixkLCExKTt2YXIgRj13fHx2LmdldENvbnRleHQoXCJ3ZWJnbFwiLHopfHx2LmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIix6KTtpZihudWxsPT09Ril7aWYobnVsbCE9PXYuZ2V0Q29udGV4dChcIndlYmdsXCIpKXRocm93IEVycm9yKFwiRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dCB3aXRoIHlvdXIgc2VsZWN0ZWQgYXR0cmlidXRlcy5cIik7dGhyb3cgRXJyb3IoXCJFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LlwiKTtcbiAgICB9dm9pZCAwPT09Ri5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQmJihGLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdD1mdW5jdGlvbigpe3JldHVybntyYW5nZU1pbjoxLHJhbmdlTWF4OjEscHJlY2lzaW9uOjF9fSl9Y2F0Y2goR2cpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBcIitHZy5tZXNzYWdlKX12YXIgaWEsVCxaLGNhLGdhLHFhLHJhLHRhLHVhLG1hLHNhLGphLHhhLHlhLHphLEFhLEJhLHBhO2IoKTt2YXIga2E9bmV3IGJlKFMpO3RoaXMudnI9a2E7dmFyIEVhPW5ldyBVZShTLHRhLFQubWF4VGV4dHVyZVNpemUpO3RoaXMuc2hhZG93TWFwPUVhO3RoaXMuZ2V0Q29udGV4dD1mdW5jdGlvbigpe3JldHVybiBGfTt0aGlzLmdldENvbnRleHRBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIEYuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKX07dGhpcy5mb3JjZUNvbnRleHRMb3NzPWZ1bmN0aW9uKCl7dmFyIGE9aWEuZ2V0KFwiV0VCR0xfbG9zZV9jb250ZXh0XCIpO2EmJlxuICAgIGEubG9zZUNvbnRleHQoKX07dGhpcy5mb3JjZUNvbnRleHRSZXN0b3JlPWZ1bmN0aW9uKCl7dmFyIGE9aWEuZ2V0KFwiV0VCR0xfbG9zZV9jb250ZXh0XCIpO2EmJmEucmVzdG9yZUNvbnRleHQoKX07dGhpcy5nZXRQaXhlbFJhdGlvPWZ1bmN0aW9uKCl7cmV0dXJuIHdhfTt0aGlzLnNldFBpeGVsUmF0aW89ZnVuY3Rpb24oYSl7dm9pZCAwIT09YSYmKHdhPWEsdGhpcy5zZXRTaXplKGVhLFUsITEpKX07dGhpcy5nZXRTaXplPWZ1bmN0aW9uKCl7cmV0dXJue3dpZHRoOmVhLGhlaWdodDpVfX07dGhpcy5zZXRTaXplPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1rYS5nZXREZXZpY2UoKTtkJiZkLmlzUHJlc2VudGluZz9jb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBDYW4ndCBjaGFuZ2Ugc2l6ZSB3aGlsZSBWUiBkZXZpY2UgaXMgcHJlc2VudGluZy5cIik6KGVhPWEsVT1iLHYud2lkdGg9YSp3YSx2LmhlaWdodD1iKndhLCExIT09YyYmKHYuc3R5bGUud2lkdGg9YStcInB4XCIsdi5zdHlsZS5oZWlnaHQ9XG4gICAgYitcInB4XCIpLHRoaXMuc2V0Vmlld3BvcnQoMCwwLGEsYikpfTt0aGlzLmdldERyYXdpbmdCdWZmZXJTaXplPWZ1bmN0aW9uKCl7cmV0dXJue3dpZHRoOmVhKndhLGhlaWdodDpVKndhfX07dGhpcy5zZXREcmF3aW5nQnVmZmVyU2l6ZT1mdW5jdGlvbihhLGIsYyl7ZWE9YTtVPWI7d2E9Yzt2LndpZHRoPWEqYzt2LmhlaWdodD1iKmM7dGhpcy5zZXRWaWV3cG9ydCgwLDAsYSxiKX07dGhpcy5zZXRWaWV3cG9ydD1mdW5jdGlvbihhLGIsYyxkKXtkYS5zZXQoYSxVLWItZCxjLGQpO1oudmlld3BvcnQobmIuY29weShkYSkubXVsdGlwbHlTY2FsYXIod2EpKX07dGhpcy5zZXRTY2lzc29yPWZ1bmN0aW9uKGEsYixjLGQpe2ZhLnNldChhLFUtYi1kLGMsZCk7Wi5zY2lzc29yKFguY29weShmYSkubXVsdGlwbHlTY2FsYXIod2EpKX07dGhpcy5zZXRTY2lzc29yVGVzdD1mdW5jdGlvbihhKXtaLnNldFNjaXNzb3JUZXN0KCRlPWEpfTt0aGlzLmdldENsZWFyQ29sb3I9ZnVuY3Rpb24oKXtyZXR1cm4gamEuZ2V0Q2xlYXJDb2xvcigpfTtcbiAgICB0aGlzLnNldENsZWFyQ29sb3I9ZnVuY3Rpb24oKXtqYS5zZXRDbGVhckNvbG9yLmFwcGx5KGphLGFyZ3VtZW50cyl9O3RoaXMuZ2V0Q2xlYXJBbHBoYT1mdW5jdGlvbigpe3JldHVybiBqYS5nZXRDbGVhckFscGhhKCl9O3RoaXMuc2V0Q2xlYXJBbHBoYT1mdW5jdGlvbigpe2phLnNldENsZWFyQWxwaGEuYXBwbHkoamEsYXJndW1lbnRzKX07dGhpcy5jbGVhcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9MDtpZih2b2lkIDA9PT1hfHxhKWR8PUYuQ09MT1JfQlVGRkVSX0JJVDtpZih2b2lkIDA9PT1ifHxiKWR8PUYuREVQVEhfQlVGRkVSX0JJVDtpZih2b2lkIDA9PT1jfHxjKWR8PUYuU1RFTkNJTF9CVUZGRVJfQklUO0YuY2xlYXIoZCl9O3RoaXMuY2xlYXJDb2xvcj1mdW5jdGlvbigpe3RoaXMuY2xlYXIoITAsITEsITEpfTt0aGlzLmNsZWFyRGVwdGg9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyKCExLCEwLCExKX07dGhpcy5jbGVhclN0ZW5jaWw9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyKCExLCExLFxuICAgICEwKX07dGhpcy5jbGVhclRhcmdldD1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLnNldFJlbmRlclRhcmdldChhKTt0aGlzLmNsZWFyKGIsYyxkKX07dGhpcy5kaXNwb3NlPWZ1bmN0aW9uKCl7di5yZW1vdmVFdmVudExpc3RlbmVyKFwid2ViZ2xjb250ZXh0bG9zdFwiLGMsITEpO3YucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsZCwhMSk7c2EuZGlzcG9zZSgpO2thLmRpc3Bvc2UoKX07dGhpcy5yZW5kZXJCdWZmZXJJbW1lZGlhdGU9ZnVuY3Rpb24oYSxiLGMpe1ouaW5pdEF0dHJpYnV0ZXMoKTt2YXIgZD1jYS5nZXQoYSk7YS5oYXNQb3NpdGlvbnMmJiFkLnBvc2l0aW9uJiYoZC5wb3NpdGlvbj1GLmNyZWF0ZUJ1ZmZlcigpKTthLmhhc05vcm1hbHMmJiFkLm5vcm1hbCYmKGQubm9ybWFsPUYuY3JlYXRlQnVmZmVyKCkpO2EuaGFzVXZzJiYhZC51diYmKGQudXY9Ri5jcmVhdGVCdWZmZXIoKSk7YS5oYXNDb2xvcnMmJiFkLmNvbG9yJiYoZC5jb2xvcj1GLmNyZWF0ZUJ1ZmZlcigpKTtcbiAgICBiPWIuZ2V0QXR0cmlidXRlcygpO2EuaGFzUG9zaXRpb25zJiYoRi5iaW5kQnVmZmVyKEYuQVJSQVlfQlVGRkVSLGQucG9zaXRpb24pLEYuYnVmZmVyRGF0YShGLkFSUkFZX0JVRkZFUixhLnBvc2l0aW9uQXJyYXksRi5EWU5BTUlDX0RSQVcpLFouZW5hYmxlQXR0cmlidXRlKGIucG9zaXRpb24pLEYudmVydGV4QXR0cmliUG9pbnRlcihiLnBvc2l0aW9uLDMsRi5GTE9BVCwhMSwwLDApKTtpZihhLmhhc05vcm1hbHMpe0YuYmluZEJ1ZmZlcihGLkFSUkFZX0JVRkZFUixkLm5vcm1hbCk7aWYoIWMuaXNNZXNoUGhvbmdNYXRlcmlhbCYmIWMuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCYmIWMuaXNNZXNoTm9ybWFsTWF0ZXJpYWwmJiEwPT09Yy5mbGF0U2hhZGluZylmb3IodmFyIGU9MCxmPTMqYS5jb3VudDtlPGY7ZSs9OSl7dmFyIGc9YS5ub3JtYWxBcnJheSxoPShnW2UrMF0rZ1tlKzNdK2dbZSs2XSkvMyxrPShnW2UrMV0rZ1tlKzRdK2dbZSs3XSkvMyxtPShnW2UrMl0rZ1tlKzVdK2dbZStcbiAgICA4XSkvMztnW2UrMF09aDtnW2UrMV09aztnW2UrMl09bTtnW2UrM109aDtnW2UrNF09aztnW2UrNV09bTtnW2UrNl09aDtnW2UrN109aztnW2UrOF09bX1GLmJ1ZmZlckRhdGEoRi5BUlJBWV9CVUZGRVIsYS5ub3JtYWxBcnJheSxGLkRZTkFNSUNfRFJBVyk7Wi5lbmFibGVBdHRyaWJ1dGUoYi5ub3JtYWwpO0YudmVydGV4QXR0cmliUG9pbnRlcihiLm5vcm1hbCwzLEYuRkxPQVQsITEsMCwwKX1hLmhhc1V2cyYmYy5tYXAmJihGLmJpbmRCdWZmZXIoRi5BUlJBWV9CVUZGRVIsZC51diksRi5idWZmZXJEYXRhKEYuQVJSQVlfQlVGRkVSLGEudXZBcnJheSxGLkRZTkFNSUNfRFJBVyksWi5lbmFibGVBdHRyaWJ1dGUoYi51diksRi52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIudXYsMixGLkZMT0FULCExLDAsMCkpO2EuaGFzQ29sb3JzJiYwIT09Yy52ZXJ0ZXhDb2xvcnMmJihGLmJpbmRCdWZmZXIoRi5BUlJBWV9CVUZGRVIsZC5jb2xvciksRi5idWZmZXJEYXRhKEYuQVJSQVlfQlVGRkVSLGEuY29sb3JBcnJheSxcbiAgICBGLkRZTkFNSUNfRFJBVyksWi5lbmFibGVBdHRyaWJ1dGUoYi5jb2xvciksRi52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIuY29sb3IsMyxGLkZMT0FULCExLDAsMCkpO1ouZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtGLmRyYXdBcnJheXMoRi5UUklBTkdMRVMsMCxhLmNvdW50KTthLmNvdW50PTB9O3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz1lLmlzTWVzaCYmMD5lLm1hdHJpeFdvcmxkLmRldGVybWluYW50KCk7Wi5zZXRNYXRlcmlhbChkLGcpO3ZhciBoPXUoYSxiLGQsZSk7YT1jLmlkK1wiX1wiK2guaWQrXCJfXCIrKCEwPT09ZC53aXJlZnJhbWUpO3ZhciBrPSExO2EhPT1SJiYoUj1hLGs9ITApO2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzJiYoeGEudXBkYXRlKGUsYyxkLGgpLGs9ITApO3ZhciBnPWMuaW5kZXgsbT1jLmF0dHJpYnV0ZXMucG9zaXRpb247Yj0xOyEwPT09ZC53aXJlZnJhbWUmJihnPXJhLmdldFdpcmVmcmFtZUF0dHJpYnV0ZShjKSxcbiAgICBiPTIpO2E9eWE7aWYobnVsbCE9PWcpe3ZhciBxPXFhLmdldChnKTthPXphO2Euc2V0SW5kZXgocSl9aWYoayl7az12b2lkIDA7aWYoYyYmYy5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5JiZudWxsPT09aWEuZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKSljb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXR1cFZlcnRleEF0dHJpYnV0ZXM6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLlwiKTtlbHNle3ZvaWQgMD09PWsmJihrPTApO1ouaW5pdEF0dHJpYnV0ZXMoKTt2YXIgbj1jLmF0dHJpYnV0ZXMsaD1oLmdldEF0dHJpYnV0ZXMoKSxsPWQuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcztmb3IoSiBpbiBoKXt2YXIgcj1oW0pdO2lmKDA8PXIpe3ZhciB0PW5bSl07aWYodm9pZCAwIT09dCl7dmFyIHY9dC5ub3JtYWxpemVkLHA9dC5pdGVtU2l6ZSxcbiAgICB3PXFhLmdldCh0KTtpZih2b2lkIDAhPT13KXt2YXIgQT13LmJ1ZmZlcix5PXcudHlwZSx3PXcuYnl0ZXNQZXJFbGVtZW50O2lmKHQuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSl7dmFyIHo9dC5kYXRhLEk9ei5zdHJpZGUsdD10Lm9mZnNldDt6JiZ6LmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI/KFouZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcihyLHoubWVzaFBlckF0dHJpYnV0ZSksdm9pZCAwPT09Yy5tYXhJbnN0YW5jZWRDb3VudCYmKGMubWF4SW5zdGFuY2VkQ291bnQ9ei5tZXNoUGVyQXR0cmlidXRlKnouY291bnQpKTpaLmVuYWJsZUF0dHJpYnV0ZShyKTtGLmJpbmRCdWZmZXIoRi5BUlJBWV9CVUZGRVIsQSk7Ri52ZXJ0ZXhBdHRyaWJQb2ludGVyKHIscCx5LHYsSSp3LChrKkkrdCkqdyl9ZWxzZSB0LmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlPyhaLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3Iocix0Lm1lc2hQZXJBdHRyaWJ1dGUpLHZvaWQgMD09PWMubWF4SW5zdGFuY2VkQ291bnQmJlxuICAgIChjLm1heEluc3RhbmNlZENvdW50PXQubWVzaFBlckF0dHJpYnV0ZSp0LmNvdW50KSk6Wi5lbmFibGVBdHRyaWJ1dGUociksRi5iaW5kQnVmZmVyKEYuQVJSQVlfQlVGRkVSLEEpLEYudmVydGV4QXR0cmliUG9pbnRlcihyLHAseSx2LDAsaypwKncpfX1lbHNlIGlmKHZvaWQgMCE9PWwmJih2PWxbSl0sdm9pZCAwIT09dikpc3dpdGNoKHYubGVuZ3RoKXtjYXNlIDI6Ri52ZXJ0ZXhBdHRyaWIyZnYocix2KTticmVhaztjYXNlIDM6Ri52ZXJ0ZXhBdHRyaWIzZnYocix2KTticmVhaztjYXNlIDQ6Ri52ZXJ0ZXhBdHRyaWI0ZnYocix2KTticmVhaztkZWZhdWx0OkYudmVydGV4QXR0cmliMWZ2KHIsdil9fX1aLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCl9bnVsbCE9PWcmJkYuYmluZEJ1ZmZlcihGLkVMRU1FTlRfQVJSQVlfQlVGRkVSLHEuYnVmZmVyKX1xPTA7bnVsbCE9PWc/cT1nLmNvdW50OnZvaWQgMCE9PW0mJihxPW0uY291bnQpO2c9Yy5kcmF3UmFuZ2Uuc3RhcnQqYjttPW51bGwhPT1cbiAgICBmP2Yuc3RhcnQqYjowO3ZhciBKPU1hdGgubWF4KGcsbSk7Zj1NYXRoLm1heCgwLE1hdGgubWluKHEsZytjLmRyYXdSYW5nZS5jb3VudCpiLG0rKG51bGwhPT1mP2YuY291bnQqYjpJbmZpbml0eSkpLTEtSisxKTtpZigwIT09Zil7aWYoZS5pc01lc2gpaWYoITA9PT1kLndpcmVmcmFtZSlaLnNldExpbmVXaWR0aChkLndpcmVmcmFtZUxpbmV3aWR0aCoobnVsbD09PU4/d2E6MSkpLGEuc2V0TW9kZShGLkxJTkVTKTtlbHNlIHN3aXRjaChlLmRyYXdNb2RlKXtjYXNlIDA6YS5zZXRNb2RlKEYuVFJJQU5HTEVTKTticmVhaztjYXNlIDE6YS5zZXRNb2RlKEYuVFJJQU5HTEVfU1RSSVApO2JyZWFrO2Nhc2UgMjphLnNldE1vZGUoRi5UUklBTkdMRV9GQU4pfWVsc2UgZS5pc0xpbmU/KGQ9ZC5saW5ld2lkdGgsdm9pZCAwPT09ZCYmKGQ9MSksWi5zZXRMaW5lV2lkdGgoZCoobnVsbD09PU4/d2E6MSkpLGUuaXNMaW5lU2VnbWVudHM/YS5zZXRNb2RlKEYuTElORVMpOmUuaXNMaW5lTG9vcD9hLnNldE1vZGUoRi5MSU5FX0xPT1ApOlxuICAgIGEuc2V0TW9kZShGLkxJTkVfU1RSSVApKTplLmlzUG9pbnRzJiZhLnNldE1vZGUoRi5QT0lOVFMpO2MmJmMuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeT8wPGMubWF4SW5zdGFuY2VkQ291bnQmJmEucmVuZGVySW5zdGFuY2VzKGMsSixmKTphLnJlbmRlcihKLGYpfX07dGhpcy5jb21waWxlPWZ1bmN0aW9uKGEsYil7RC5sZW5ndGg9MDtDLmxlbmd0aD0wO2EudHJhdmVyc2UoZnVuY3Rpb24oYSl7YS5pc0xpZ2h0JiYoRC5wdXNoKGEpLGEuY2FzdFNoYWRvdyYmQy5wdXNoKGEpKX0pO3VhLnNldHVwKEQsQyxiKTthLnRyYXZlcnNlKGZ1bmN0aW9uKGIpe2lmKGIubWF0ZXJpYWwpaWYoQXJyYXkuaXNBcnJheShiLm1hdGVyaWFsKSlmb3IodmFyIGM9MDtjPGIubWF0ZXJpYWwubGVuZ3RoO2MrKyluKGIubWF0ZXJpYWxbY10sYS5mb2csYik7ZWxzZSBuKGIubWF0ZXJpYWwsYS5mb2csYil9KX07dmFyIEZhPSExLENhPW51bGw7dGhpcy5hbmltYXRlPWZ1bmN0aW9uKGEpe0NhPWE7RmF8fCgoYT1cbiAgICBrYS5nZXREZXZpY2UoKSkmJmEuaXNQcmVzZW50aW5nP2EucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGgpOndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaCksRmE9ITApfTt0aGlzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyxkKXtpZighYnx8IWIuaXNDYW1lcmEpY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyOiBjYW1lcmEgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkNhbWVyYS5cIik7ZWxzZSBpZighTCl7Uj1cIlwiO1A9LTE7Vj1udWxsOyEwPT09YS5hdXRvVXBkYXRlJiZhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7bnVsbD09PWIucGFyZW50JiZiLnVwZGF0ZU1hdHJpeFdvcmxkKCk7a2EuZW5hYmxlZCYmKGI9a2EuZ2V0Q2FtZXJhKGIpKTt0ZC5tdWx0aXBseU1hdHJpY2VzKGIucHJvamVjdGlvbk1hdHJpeCxiLm1hdHJpeFdvcmxkSW52ZXJzZSk7JGQuc2V0RnJvbU1hdHJpeCh0ZCk7RC5sZW5ndGg9MDtDLmxlbmd0aD0wO0gubGVuZ3RoPTA7bGEubGVuZ3RoPVxuICAgIDA7YWU9dGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZDtzZD1KYS5pbml0KHRoaXMuY2xpcHBpbmdQbGFuZXMsYWUsYik7RT1zYS5nZXQoYSxiKTtFLmluaXQoKTtrKGEsYixTLnNvcnRPYmplY3RzKTshMD09PVMuc29ydE9iamVjdHMmJkUuc29ydCgpO2dhLnVwZGF0ZVZpZGVvVGV4dHVyZXMoKTtzZCYmSmEuYmVnaW5TaGFkb3dzKCk7RWEucmVuZGVyKEMsYSxiKTt1YS5zZXR1cChELEMsYik7c2QmJkphLmVuZFNoYWRvd3MoKTtiYS5mcmFtZSsrO2JhLmNhbGxzPTA7YmEudmVydGljZXM9MDtiYS5mYWNlcz0wO2JhLnBvaW50cz0wO3ZvaWQgMD09PWMmJihjPW51bGwpO3RoaXMuc2V0UmVuZGVyVGFyZ2V0KGMpO2phLnJlbmRlcihFLGEsYixkKTtkPUUub3BhcXVlO3ZhciBlPUUudHJhbnNwYXJlbnQ7aWYoYS5vdmVycmlkZU1hdGVyaWFsKXt2YXIgZj1hLm92ZXJyaWRlTWF0ZXJpYWw7ZC5sZW5ndGgmJm0oZCxhLGIsZik7ZS5sZW5ndGgmJm0oZSxhLGIsZil9ZWxzZSBkLmxlbmd0aCYmbShkLFxuICAgIGEsYiksZS5sZW5ndGgmJm0oZSxhLGIpO0JhLnJlbmRlcihILGEsYik7QWEucmVuZGVyKGxhLGEsYixuYik7YyYmZ2EudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKGMpO1ouYnVmZmVycy5kZXB0aC5zZXRUZXN0KCEwKTtaLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayghMCk7Wi5idWZmZXJzLmNvbG9yLnNldE1hc2soITApO1ouc2V0UG9seWdvbk9mZnNldCghMSk7a2EuZW5hYmxlZCYma2Euc3VibWl0RnJhbWUoKX19O3RoaXMuc2V0RmFjZUN1bGxpbmc9ZnVuY3Rpb24oYSxiKXtaLnNldEN1bGxGYWNlKGEpO1ouc2V0RmxpcFNpZGVkKDA9PT1iKX07dGhpcy5hbGxvY1RleHR1cmVVbml0PWZ1bmN0aW9uKCl7dmFyIGE9WTthPj1ULm1heFRleHR1cmVzJiZjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBUcnlpbmcgdG8gdXNlIFwiK2ErXCIgdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5IFwiK1QubWF4VGV4dHVyZXMpO1krPTE7cmV0dXJuIGF9O3RoaXMuc2V0VGV4dHVyZTJEPVxuICAgIGZ1bmN0aW9uKCl7dmFyIGE9ITE7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YiYmYi5pc1dlYkdMUmVuZGVyVGFyZ2V0JiYoYXx8KGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXIuc2V0VGV4dHVyZTJEOiBkb24ndCB1c2UgcmVuZGVyIHRhcmdldHMgYXMgdGV4dHVyZXMuIFVzZSB0aGVpciAudGV4dHVyZSBwcm9wZXJ0eSBpbnN0ZWFkLlwiKSxhPSEwKSxiPWIudGV4dHVyZSk7Z2Euc2V0VGV4dHVyZTJEKGIsYyl9fSgpO3RoaXMuc2V0VGV4dHVyZT1mdW5jdGlvbigpe3ZhciBhPSExO3JldHVybiBmdW5jdGlvbihiLGMpe2F8fChjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZSBpcyBkZXByZWNhdGVkLCB1c2Ugc2V0VGV4dHVyZTJEIGluc3RlYWQuXCIpLGE9ITApO2dhLnNldFRleHR1cmUyRChiLGMpfX0oKTt0aGlzLnNldFRleHR1cmVDdWJlPWZ1bmN0aW9uKCl7dmFyIGE9ITE7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YiYmYi5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSYmXG4gICAgKGF8fChjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnNldFRleHR1cmVDdWJlOiBkb24ndCB1c2UgY3ViZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIpLGE9ITApLGI9Yi50ZXh0dXJlKTtiJiZiLmlzQ3ViZVRleHR1cmV8fEFycmF5LmlzQXJyYXkoYi5pbWFnZSkmJjY9PT1iLmltYWdlLmxlbmd0aD9nYS5zZXRUZXh0dXJlQ3ViZShiLGMpOmdhLnNldFRleHR1cmVDdWJlRHluYW1pYyhiLGMpfX0oKTt0aGlzLmdldFJlbmRlclRhcmdldD1mdW5jdGlvbigpe3JldHVybiBOfTt0aGlzLnNldFJlbmRlclRhcmdldD1mdW5jdGlvbihhKXsoTj1hKSYmdm9pZCAwPT09Y2EuZ2V0KGEpLl9fd2ViZ2xGcmFtZWJ1ZmZlciYmZ2Euc2V0dXBSZW5kZXJUYXJnZXQoYSk7dmFyIGI9bnVsbCxjPSExO2E/KGI9Y2EuZ2V0KGEpLl9fd2ViZ2xGcmFtZWJ1ZmZlcixhLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlJiYoYj1cbiAgICBiW2EuYWN0aXZlQ3ViZUZhY2VdLGM9ITApLG5iLmNvcHkoYS52aWV3cG9ydCksWC5jb3B5KGEuc2Npc3NvciksRz1hLnNjaXNzb3JUZXN0KToobmIuY29weShkYSkubXVsdGlwbHlTY2FsYXIod2EpLFguY29weShmYSkubXVsdGlwbHlTY2FsYXIod2EpLEc9JGUpO00hPT1iJiYoRi5iaW5kRnJhbWVidWZmZXIoRi5GUkFNRUJVRkZFUixiKSxNPWIpO1oudmlld3BvcnQobmIpO1ouc2Npc3NvcihYKTtaLnNldFNjaXNzb3JUZXN0KEcpO2MmJihjPWNhLmdldChhLnRleHR1cmUpLEYuZnJhbWVidWZmZXJUZXh0dXJlMkQoRi5GUkFNRUJVRkZFUixGLkNPTE9SX0FUVEFDSE1FTlQwLEYuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK2EuYWN0aXZlQ3ViZUZhY2UsYy5fX3dlYmdsVGV4dHVyZSxhLmFjdGl2ZU1pcE1hcExldmVsKSl9O3RoaXMucmVhZFJlbmRlclRhcmdldFBpeGVscz1mdW5jdGlvbihhLGIsYyxkLGUsZil7aWYoYSYmYS5pc1dlYkdMUmVuZGVyVGFyZ2V0KXt2YXIgZz1jYS5nZXQoYSkuX193ZWJnbEZyYW1lYnVmZmVyO1xuICAgIGlmKGcpe3ZhciBoPSExO2chPT1NJiYoRi5iaW5kRnJhbWVidWZmZXIoRi5GUkFNRUJVRkZFUixnKSxoPSEwKTt0cnl7dmFyIGs9YS50ZXh0dXJlLG09ay5mb3JtYXQscT1rLnR5cGU7MTAyMyE9PW0mJnBhLmNvbnZlcnQobSkhPT1GLmdldFBhcmFtZXRlcihGLklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfRk9STUFUKT9jb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFJHQkEgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBmb3JtYXQuXCIpOjEwMDk9PT1xfHxwYS5jb252ZXJ0KHEpPT09Ri5nZXRQYXJhbWV0ZXIoRi5JTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEUpfHwxMDE1PT09cSYmKGlhLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpfHxpYS5nZXQoXCJXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXRcIikpfHwxMDE2PT09cSYmaWEuZ2V0KFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpP1xuICAgIEYuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhGLkZSQU1FQlVGRkVSKT09PUYuRlJBTUVCVUZGRVJfQ09NUExFVEU/MDw9YiYmYjw9YS53aWR0aC1kJiYwPD1jJiZjPD1hLmhlaWdodC1lJiZGLnJlYWRQaXhlbHMoYixjLGQsZSxwYS5jb252ZXJ0KG0pLHBhLmNvbnZlcnQocSksZik6Y29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVhZFBpeGVscyBmcm9tIHJlbmRlclRhcmdldCBmYWlsZWQuIEZyYW1lYnVmZmVyIG5vdCBjb21wbGV0ZS5cIik6Y29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS5cIil9ZmluYWxseXtoJiZGLmJpbmRGcmFtZWJ1ZmZlcihGLkZSQU1FQlVGRkVSLE0pfX19ZWxzZSBjb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LlwiKX19XG4gICAgZnVuY3Rpb24gUGIoYSxiKXt0aGlzLm5hbWU9XCJcIjt0aGlzLmNvbG9yPW5ldyBIKGEpO3RoaXMuZGVuc2l0eT12b2lkIDAhPT1iP2I6Mi41RS00fWZ1bmN0aW9uIFFiKGEsYixjKXt0aGlzLm5hbWU9XCJcIjt0aGlzLmNvbG9yPW5ldyBIKGEpO3RoaXMubmVhcj12b2lkIDAhPT1iP2I6MTt0aGlzLmZhcj12b2lkIDAhPT1jP2M6MUUzfWZ1bmN0aW9uIHZkKCl7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNjZW5lXCI7dGhpcy5vdmVycmlkZU1hdGVyaWFsPXRoaXMuZm9nPXRoaXMuYmFja2dyb3VuZD1udWxsO3RoaXMuYXV0b1VwZGF0ZT0hMH1mdW5jdGlvbiBkZShhLGIsYyxkLGUpe3guY2FsbCh0aGlzKTt0aGlzLmxlbnNGbGFyZXM9W107dGhpcy5wb3NpdGlvblNjcmVlbj1uZXcgcDt0aGlzLmN1c3RvbVVwZGF0ZUNhbGxiYWNrPXZvaWQgMDt2b2lkIDAhPT1hJiZ0aGlzLmFkZChhLGIsYyxkLGUpfWZ1bmN0aW9uIGhiKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTcHJpdGVNYXRlcmlhbFwiO1xuICAgIHRoaXMuY29sb3I9bmV3IEgoMTY3NzcyMTUpO3RoaXMubWFwPW51bGw7dGhpcy5yb3RhdGlvbj0wO3RoaXMubGlnaHRzPXRoaXMuZm9nPSExO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIENjKGEpe3guY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTcHJpdGVcIjt0aGlzLm1hdGVyaWFsPXZvaWQgMCE9PWE/YTpuZXcgaGJ9ZnVuY3Rpb24gRGMoKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTE9EXCI7T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7bGV2ZWxzOntlbnVtZXJhYmxlOiEwLHZhbHVlOltdfX0pfWZ1bmN0aW9uIEVjKGEsYil7YT1hfHxbXTt0aGlzLmJvbmVzPWEuc2xpY2UoMCk7dGhpcy5ib25lTWF0cmljZXM9bmV3IEZsb2F0MzJBcnJheSgxNip0aGlzLmJvbmVzLmxlbmd0aCk7aWYodm9pZCAwPT09Yil0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7ZWxzZSBpZih0aGlzLmJvbmVzLmxlbmd0aD09PWIubGVuZ3RoKXRoaXMuYm9uZUludmVyc2VzPWIuc2xpY2UoMCk7ZWxzZSBmb3IoY29uc29sZS53YXJuKFwiVEhSRUUuU2tlbGV0b24gYm9uZUludmVyc2VzIGlzIHRoZSB3cm9uZyBsZW5ndGguXCIpLFxuICAgIHRoaXMuYm9uZUludmVyc2VzPVtdLGE9MCxiPXRoaXMuYm9uZXMubGVuZ3RoO2E8YjthKyspdGhpcy5ib25lSW52ZXJzZXMucHVzaChuZXcgTyl9ZnVuY3Rpb24gd2QoKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQm9uZVwifWZ1bmN0aW9uIHhkKGEsYil7cmEuY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiU2tpbm5lZE1lc2hcIjt0aGlzLmJpbmRNb2RlPVwiYXR0YWNoZWRcIjt0aGlzLmJpbmRNYXRyaXg9bmV3IE87dGhpcy5iaW5kTWF0cml4SW52ZXJzZT1uZXcgTzthPXRoaXMuaW5pdEJvbmVzKCk7YT1uZXcgRWMoYSk7dGhpcy5iaW5kKGEsdGhpcy5tYXRyaXhXb3JsZCk7dGhpcy5ub3JtYWxpemVTa2luV2VpZ2h0cygpfWZ1bmN0aW9uIFcoYSl7UC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpbmVCYXNpY01hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgSCgxNjc3NzIxNSk7dGhpcy5saW5ld2lkdGg9MTt0aGlzLmxpbmVqb2luPXRoaXMubGluZWNhcD1cInJvdW5kXCI7dGhpcy5saWdodHM9ITE7XG4gICAgdGhpcy5zZXRWYWx1ZXMoYSl9ZnVuY3Rpb24gc2EoYSxiLGMpe2lmKDE9PT1jKXJldHVybiBjb25zb2xlLndhcm4oXCJUSFJFRS5MaW5lOiBwYXJhbWV0ZXIgVEhSRUUuTGluZVBpZWNlcyBubyBsb25nZXIgc3VwcG9ydGVkLiBDcmVhdGVkIFRIUkVFLkxpbmVTZWdtZW50cyBpbnN0ZWFkLlwiKSxuZXcgWChhLGIpO3guY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lXCI7dGhpcy5nZW9tZXRyeT12b2lkIDAhPT1hP2E6bmV3IEU7dGhpcy5tYXRlcmlhbD12b2lkIDAhPT1iP2I6bmV3IFcoe2NvbG9yOjE2Nzc3MjE1Kk1hdGgucmFuZG9tKCl9KX1mdW5jdGlvbiBYKGEsYil7c2EuY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiTGluZVNlZ21lbnRzXCJ9ZnVuY3Rpb24geWQoYSxiKXtzYS5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJMaW5lTG9vcFwifWZ1bmN0aW9uIEthKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2ludHNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IEgoMTY3NzcyMTUpO1xuICAgIHRoaXMubWFwPW51bGw7dGhpcy5zaXplPTE7dGhpcy5zaXplQXR0ZW51YXRpb249ITA7dGhpcy5saWdodHM9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9ZnVuY3Rpb24gUmIoYSxiKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUG9pbnRzXCI7dGhpcy5nZW9tZXRyeT12b2lkIDAhPT1hP2E6bmV3IEU7dGhpcy5tYXRlcmlhbD12b2lkIDAhPT1iP2I6bmV3IEthKHtjb2xvcjoxNjc3NzIxNSpNYXRoLnJhbmRvbSgpfSl9ZnVuY3Rpb24gRmMoKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiR3JvdXBcIn1mdW5jdGlvbiBlZShhLGIsYyxkLGUsZixnLGgsayl7ZnVuY3Rpb24gbSgpe2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRlZGRhdGFcIixtLCExKTtxLm5lZWRzVXBkYXRlPSEwfVUuY2FsbCh0aGlzLGEsYixjLGQsZSxmLGcsaCxrKTt0aGlzLmdlbmVyYXRlTWlwbWFwcz0hMTt2YXIgcT10aGlzO2EuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZGRhdGFcIixtLCExKX1mdW5jdGlvbiBTYihhLGIsYyxkLFxuICAgIGUsZixnLGgsayxtLHEsbil7VS5jYWxsKHRoaXMsbnVsbCxmLGcsaCxrLG0sZCxlLHEsbik7dGhpcy5pbWFnZT17d2lkdGg6YixoZWlnaHQ6Y307dGhpcy5taXBtYXBzPWE7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9dGhpcy5mbGlwWT0hMX1mdW5jdGlvbiBHYyhhLGIsYyxkLGUsZixnLGgsayxtKXttPXZvaWQgMCE9PW0/bToxMDI2O2lmKDEwMjYhPT1tJiYxMDI3IT09bSl0aHJvdyBFcnJvcihcIkRlcHRoVGV4dHVyZSBmb3JtYXQgbXVzdCBiZSBlaXRoZXIgVEhSRUUuRGVwdGhGb3JtYXQgb3IgVEhSRUUuRGVwdGhTdGVuY2lsRm9ybWF0XCIpO3ZvaWQgMD09PWMmJjEwMjY9PT1tJiYoYz0xMDEyKTt2b2lkIDA9PT1jJiYxMDI3PT09bSYmKGM9MTAyMCk7VS5jYWxsKHRoaXMsbnVsbCxkLGUsZixnLGgsbSxjLGspO3RoaXMuaW1hZ2U9e3dpZHRoOmEsaGVpZ2h0OmJ9O3RoaXMubWFnRmlsdGVyPXZvaWQgMCE9PWc/ZzoxMDAzO3RoaXMubWluRmlsdGVyPXZvaWQgMCE9PWg/aDoxMDAzO3RoaXMuZ2VuZXJhdGVNaXBtYXBzPVxuICAgIHRoaXMuZmxpcFk9ITF9ZnVuY3Rpb24gVGIoYSl7RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIldpcmVmcmFtZUdlb21ldHJ5XCI7dmFyIGI9W10sYyxkLGUsZj1bMCwwXSxnPXt9LGg9W1wiYVwiLFwiYlwiLFwiY1wiXTtpZihhJiZhLmlzR2VvbWV0cnkpe3ZhciBrPWEuZmFjZXM7dmFyIG09MDtmb3IoZD1rLmxlbmd0aDttPGQ7bSsrKXt2YXIgcT1rW21dO2ZvcihjPTA7Mz5jO2MrKyl7dmFyIG49cVtoW2NdXTt2YXIgdT1xW2hbKGMrMSklM11dO2ZbMF09TWF0aC5taW4obix1KTtmWzFdPU1hdGgubWF4KG4sdSk7bj1mWzBdK1wiLFwiK2ZbMV07dm9pZCAwPT09Z1tuXSYmKGdbbl09e2luZGV4MTpmWzBdLGluZGV4MjpmWzFdfSl9fWZvcihuIGluIGcpbT1nW25dLGg9YS52ZXJ0aWNlc1ttLmluZGV4MV0sYi5wdXNoKGgueCxoLnksaC56KSxoPWEudmVydGljZXNbbS5pbmRleDJdLGIucHVzaChoLngsaC55LGgueil9ZWxzZSBpZihhJiZhLmlzQnVmZmVyR2VvbWV0cnkpe3ZhciBoPW5ldyBwO2lmKG51bGwhPT1cbiAgICBhLmluZGV4KXtrPWEuYXR0cmlidXRlcy5wb3NpdGlvbjtxPWEuaW5kZXg7dmFyIGw9YS5ncm91cHM7MD09PWwubGVuZ3RoJiYobD1be3N0YXJ0OjAsY291bnQ6cS5jb3VudCxtYXRlcmlhbEluZGV4OjB9XSk7YT0wO2ZvcihlPWwubGVuZ3RoO2E8ZTsrK2EpZm9yKG09bFthXSxjPW0uc3RhcnQsZD1tLmNvdW50LG09YyxkPWMrZDttPGQ7bSs9Mylmb3IoYz0wOzM+YztjKyspbj1xLmdldFgobStjKSx1PXEuZ2V0WChtKyhjKzEpJTMpLGZbMF09TWF0aC5taW4obix1KSxmWzFdPU1hdGgubWF4KG4sdSksbj1mWzBdK1wiLFwiK2ZbMV0sdm9pZCAwPT09Z1tuXSYmKGdbbl09e2luZGV4MTpmWzBdLGluZGV4MjpmWzFdfSk7Zm9yKG4gaW4gZyltPWdbbl0saC5mcm9tQnVmZmVyQXR0cmlidXRlKGssbS5pbmRleDEpLGIucHVzaChoLngsaC55LGgueiksaC5mcm9tQnVmZmVyQXR0cmlidXRlKGssbS5pbmRleDIpLGIucHVzaChoLngsaC55LGgueil9ZWxzZSBmb3Ioaz1hLmF0dHJpYnV0ZXMucG9zaXRpb24sXG4gICAgbT0wLGQ9ay5jb3VudC8zO208ZDttKyspZm9yKGM9MDszPmM7YysrKWc9MyptK2MsaC5mcm9tQnVmZmVyQXR0cmlidXRlKGssZyksYi5wdXNoKGgueCxoLnksaC56KSxnPTMqbSsoYysxKSUzLGguZnJvbUJ1ZmZlckF0dHJpYnV0ZShrLGcpLGIucHVzaChoLngsaC55LGgueil9dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGIsMykpfWZ1bmN0aW9uIEhjKGEsYixjKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUGFyYW1ldHJpY0dlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtmdW5jOmEsc2xpY2VzOmIsc3RhY2tzOmN9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBVYihhLGIsYykpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIFViKGEsYixjKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtmdW5jOmEsc2xpY2VzOmIsc3RhY2tzOmN9O3ZhciBkPVtdLGU9W10sZj1bXSxnPVtdLGg9XG4gICAgbmV3IHAsaz1uZXcgcCxtPW5ldyBwLHE9bmV3IHAsbj1uZXcgcCx1LGwsdD1iKzE7Zm9yKHU9MDt1PD1jO3UrKyl7dmFyIHY9dS9jO2ZvcihsPTA7bDw9YjtsKyspe3ZhciB3PWwvYixrPWEodyx2LGspO2UucHVzaChrLngsay55LGsueik7MDw9dy0xRS01PyhtPWEody0xRS01LHYsbSkscS5zdWJWZWN0b3JzKGssbSkpOihtPWEodysxRS01LHYsbSkscS5zdWJWZWN0b3JzKG0saykpOzA8PXYtMUUtNT8obT1hKHcsdi0xRS01LG0pLG4uc3ViVmVjdG9ycyhrLG0pKToobT1hKHcsdisxRS01LG0pLG4uc3ViVmVjdG9ycyhtLGspKTtoLmNyb3NzVmVjdG9ycyhxLG4pLm5vcm1hbGl6ZSgpO2YucHVzaChoLngsaC55LGgueik7Zy5wdXNoKHcsdil9fWZvcih1PTA7dTxjO3UrKylmb3IobD0wO2w8YjtsKyspYT11KnQrbCsxLGg9KHUrMSkqdCtsKzEsaz0odSsxKSp0K2wsZC5wdXNoKHUqdCtsLGEsayksZC5wdXNoKGEsaCxrKTt0aGlzLnNldEluZGV4KGQpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixcbiAgICBuZXcgQihlLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKGYsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQihnLDIpKX1mdW5jdGlvbiBJYyhhLGIsYyxkKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUG9seWhlZHJvbkdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt2ZXJ0aWNlczphLGluZGljZXM6YixyYWRpdXM6YyxkZXRhaWw6ZH07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IGphKGEsYixjLGQpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBqYShhLGIsYyxkKXtmdW5jdGlvbiBlKGEpe2gucHVzaChhLngsYS55LGEueil9ZnVuY3Rpb24gZihiLGMpe2IqPTM7Yy54PWFbYiswXTtjLnk9YVtiKzFdO2Muej1hW2IrMl19ZnVuY3Rpb24gZyhhLGIsYyxkKXswPmQmJjE9PT1hLngmJihrW2JdPWEueC0xKTswPT09Yy54JiYwPT09Yy56JiYoa1tiXT1kLzIvTWF0aC5QSSsuNSl9RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBvbHloZWRyb25CdWZmZXJHZW9tZXRyeVwiO1xuICAgIHRoaXMucGFyYW1ldGVycz17dmVydGljZXM6YSxpbmRpY2VzOmIscmFkaXVzOmMsZGV0YWlsOmR9O2M9Y3x8MTtkPWR8fDA7dmFyIGg9W10saz1bXTsoZnVuY3Rpb24oYSl7Zm9yKHZhciBjPW5ldyBwLGQ9bmV3IHAsZz1uZXcgcCxoPTA7aDxiLmxlbmd0aDtoKz0zKXtmKGJbaCswXSxjKTtmKGJbaCsxXSxkKTtmKGJbaCsyXSxnKTt2YXIgayxtLGw9Yyx6PWQseT1nLEk9TWF0aC5wb3coMixhKSxBPVtdO2ZvcihtPTA7bTw9STttKyspe0FbbV09W107dmFyIEo9bC5jbG9uZSgpLmxlcnAoeSxtL0kpLHg9ei5jbG9uZSgpLmxlcnAoeSxtL0kpLEI9SS1tO2ZvcihrPTA7azw9QjtrKyspQVttXVtrXT0wPT09ayYmbT09PUk/SjpKLmNsb25lKCkubGVycCh4LGsvQil9Zm9yKG09MDttPEk7bSsrKWZvcihrPTA7azwyKihJLW0pLTE7aysrKWw9TWF0aC5mbG9vcihrLzIpLDA9PT1rJTI/KGUoQVttXVtsKzFdKSxlKEFbbSsxXVtsXSksZShBW21dW2xdKSk6KGUoQVttXVtsKzFdKSxlKEFbbSsxXVtsK1xuICAgIDFdKSxlKEFbbSsxXVtsXSkpfX0pKGQpOyhmdW5jdGlvbihhKXtmb3IodmFyIGI9bmV3IHAsYz0wO2M8aC5sZW5ndGg7Yys9MyliLng9aFtjKzBdLGIueT1oW2MrMV0sYi56PWhbYysyXSxiLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKGEpLGhbYyswXT1iLngsaFtjKzFdPWIueSxoW2MrMl09Yi56fSkoYyk7KGZ1bmN0aW9uKCl7Zm9yKHZhciBhPW5ldyBwLGI9MDtiPGgubGVuZ3RoO2IrPTMpYS54PWhbYiswXSxhLnk9aFtiKzFdLGEuej1oW2IrMl0say5wdXNoKE1hdGguYXRhbjIoYS56LC1hLngpLzIvTWF0aC5QSSsuNSwxLShNYXRoLmF0YW4yKC1hLnksTWF0aC5zcXJ0KGEueCphLngrYS56KmEueikpL01hdGguUEkrLjUpKTtmb3IodmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBwLGQ9bmV3IHAsZT1uZXcgRCxmPW5ldyBELGw9bmV3IEQsdz0wLHo9MDt3PGgubGVuZ3RoO3crPTkseis9Nil7YS5zZXQoaFt3KzBdLGhbdysxXSxoW3crMl0pO2Iuc2V0KGhbdyszXSxoW3crNF0saFt3K1xuICAgIDVdKTtjLnNldChoW3crNl0saFt3KzddLGhbdys4XSk7ZS5zZXQoa1t6KzBdLGtbeisxXSk7Zi5zZXQoa1t6KzJdLGtbeiszXSk7bC5zZXQoa1t6KzRdLGtbeis1XSk7ZC5jb3B5KGEpLmFkZChiKS5hZGQoYykuZGl2aWRlU2NhbGFyKDMpO3ZhciB5PU1hdGguYXRhbjIoZC56LC1kLngpO2coZSx6KzAsYSx5KTtnKGYseisyLGIseSk7ZyhsLHorNCxjLHkpfWZvcihhPTA7YTxrLmxlbmd0aDthKz02KWI9a1thKzBdLGM9a1thKzJdLGQ9a1thKzRdLGU9TWF0aC5taW4oYixjLGQpLC45PE1hdGgubWF4KGIsYyxkKSYmLjE+ZSYmKC4yPmImJihrW2ErMF0rPTEpLC4yPmMmJihrW2ErMl0rPTEpLC4yPmQmJihrW2ErNF0rPTEpKX0pKCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGgsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIoaC5zbGljZSgpLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIoaywyKSk7MD09PWQ/dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpOlxuICAgIHRoaXMubm9ybWFsaXplTm9ybWFscygpfWZ1bmN0aW9uIEpjKGEsYil7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlRldHJhaGVkcm9uR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgVmIoYSxiKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gVmIoYSxiKXtqYS5jYWxsKHRoaXMsWzEsMSwxLC0xLC0xLDEsLTEsMSwtMSwxLC0xLC0xXSxbMiwxLDAsMCwzLDIsMSwzLDAsMiwzLDFdLGEsYik7dGhpcy50eXBlPVwiVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fWZ1bmN0aW9uIEtjKGEsYil7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk9jdGFoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyB1YihhLGIpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1cbiAgICBmdW5jdGlvbiB1YihhLGIpe2phLmNhbGwodGhpcyxbMSwwLDAsLTEsMCwwLDAsMSwwLDAsLTEsMCwwLDAsMSwwLDAsLTFdLFswLDIsNCwwLDQsMywwLDMsNSwwLDUsMiwxLDIsNSwxLDUsMywxLDMsNCwxLDQsMl0sYSxiKTt0aGlzLnR5cGU9XCJPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifX1mdW5jdGlvbiBMYyhhLGIpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJJY29zYWhlZHJvbkdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFdiKGEsYikpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIFdiKGEsYil7dmFyIGM9KDErTWF0aC5zcXJ0KDUpKS8yO2phLmNhbGwodGhpcyxbLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYywwLDAsLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYyxjLDAsLTEsYywwLDEsLWMsMCwtMSwtYywwLDFdLFswLDExLFxuICAgIDUsMCw1LDEsMCwxLDcsMCw3LDEwLDAsMTAsMTEsMSw1LDksNSwxMSw0LDExLDEwLDIsMTAsNyw2LDcsMSw4LDMsOSw0LDMsNCwyLDMsMiw2LDMsNiw4LDMsOCw5LDQsOSw1LDIsNCwxMSw2LDIsMTAsOCw2LDcsOSw4LDFdLGEsYik7dGhpcy50eXBlPVwiSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fWZ1bmN0aW9uIE1jKGEsYil7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkRvZGVjYWhlZHJvbkdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFhiKGEsYikpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIFhiKGEsYil7dmFyIGM9KDErTWF0aC5zcXJ0KDUpKS8yLGQ9MS9jO2phLmNhbGwodGhpcyxbLTEsLTEsLTEsLTEsLTEsMSwtMSwxLC0xLC0xLDEsMSwxLC0xLC0xLDEsLTEsMSwxLDEsLTEsMSwxLDEsMCwtZCwtYywwLC1kLGMsMCxcbiAgICBkLC1jLDAsZCxjLC1kLC1jLDAsLWQsYywwLGQsLWMsMCxkLGMsMCwtYywwLC1kLGMsMCwtZCwtYywwLGQsYywwLGRdLFszLDExLDcsMyw3LDE1LDMsMTUsMTMsNywxOSwxNyw3LDE3LDYsNyw2LDE1LDE3LDQsOCwxNyw4LDEwLDE3LDEwLDYsOCwwLDE2LDgsMTYsMiw4LDIsMTAsMCwxMiwxLDAsMSwxOCwwLDE4LDE2LDYsMTAsMiw2LDIsMTMsNiwxMywxNSwyLDE2LDE4LDIsMTgsMywyLDMsMTMsMTgsMSw5LDE4LDksMTEsMTgsMTEsMyw0LDE0LDEyLDQsMTIsMCw0LDAsOCwxMSw5LDUsMTEsNSwxOSwxMSwxOSw3LDE5LDUsMTQsMTksMTQsNCwxOSw0LDE3LDEsMTIsMTQsMSwxNCw1LDEsNSw5XSxhLGIpO3RoaXMudHlwZT1cIkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn19ZnVuY3Rpb24gTmMoYSxiLGMsZCxlLGYpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUdWJlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3BhdGg6YSxcbiAgICB0dWJ1bGFyU2VnbWVudHM6YixyYWRpdXM6YyxyYWRpYWxTZWdtZW50czpkLGNsb3NlZDplfTt2b2lkIDAhPT1mJiZjb25zb2xlLndhcm4oXCJUSFJFRS5UdWJlR2VvbWV0cnk6IHRhcGVyIGhhcyBiZWVuIHJlbW92ZWQuXCIpO2E9bmV3IFliKGEsYixjLGQsZSk7dGhpcy50YW5nZW50cz1hLnRhbmdlbnRzO3RoaXMubm9ybWFscz1hLm5vcm1hbHM7dGhpcy5iaW5vcm1hbHM9YS5iaW5vcm1hbHM7dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoYSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gWWIoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGUpe3E9YS5nZXRQb2ludEF0KGUvYixxKTt2YXIgZj1nLm5vcm1hbHNbZV07ZT1nLmJpbm9ybWFsc1tlXTtmb3IobD0wO2w8PWQ7bCsrKXt2YXIgbT1sL2QqTWF0aC5QSSoyLG49TWF0aC5zaW4obSksbT0tTWF0aC5jb3MobSk7ay54PW0qZi54K24qZS54O2sueT1tKmYueStuKmUueTtrLno9bSpmLnorbiplLno7ay5ub3JtYWxpemUoKTt0LnB1c2goay54LFxuICAgIGsueSxrLnopO2gueD1xLngrYyprLng7aC55PXEueStjKmsueTtoLno9cS56K2Mqay56O3IucHVzaChoLngsaC55LGgueil9fUUuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUdWJlQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3BhdGg6YSx0dWJ1bGFyU2VnbWVudHM6YixyYWRpdXM6YyxyYWRpYWxTZWdtZW50czpkLGNsb3NlZDplfTtiPWJ8fDY0O2M9Y3x8MTtkPWR8fDg7ZT1lfHwhMTt2YXIgZz1hLmNvbXB1dGVGcmVuZXRGcmFtZXMoYixlKTt0aGlzLnRhbmdlbnRzPWcudGFuZ2VudHM7dGhpcy5ub3JtYWxzPWcubm9ybWFsczt0aGlzLmJpbm9ybWFscz1nLmJpbm9ybWFsczt2YXIgaD1uZXcgcCxrPW5ldyBwLG09bmV3IEQscT1uZXcgcCxuLGwscj1bXSx0PVtdLHY9W10sdz1bXTtmb3Iobj0wO248YjtuKyspZihuKTtmKCExPT09ZT9iOjApO2ZvcihuPTA7bjw9YjtuKyspZm9yKGw9MDtsPD1kO2wrKyltLng9bi9iLG0ueT1sL2Qsdi5wdXNoKG0ueCxtLnkpOyhmdW5jdGlvbigpe2ZvcihsPVxuICAgIDE7bDw9YjtsKyspZm9yKG49MTtuPD1kO24rKyl7dmFyIGE9KGQrMSkqbCsobi0xKSxjPShkKzEpKmwrbixlPShkKzEpKihsLTEpK247dy5wdXNoKChkKzEpKihsLTEpKyhuLTEpLGEsZSk7dy5wdXNoKGEsYyxlKX19KSgpO3RoaXMuc2V0SW5kZXgodyk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKHIsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIodCwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKHYsMikpfWZ1bmN0aW9uIE9jKGEsYixjLGQsZSxmLGcpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUb3J1c0tub3RHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsdHViZTpiLHR1YnVsYXJTZWdtZW50czpjLHJhZGlhbFNlZ21lbnRzOmQscDplLHE6Zn07dm9pZCAwIT09ZyYmY29uc29sZS53YXJuKFwiVEhSRUUuVG9ydXNLbm90R2VvbWV0cnk6IGhlaWdodFNjYWxlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2NhbGUoIHgsIHksIHogKSBpbnN0ZWFkLlwiKTtcbiAgICB0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgWmIoYSxiLGMsZCxlLGYpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBaYihhLGIsYyxkLGUsZil7ZnVuY3Rpb24gZyhhLGIsYyxkLGUpe3ZhciBmPU1hdGguc2luKGEpO2I9Yy9iKmE7Yz1NYXRoLmNvcyhiKTtlLng9ZCooMitjKSouNSpNYXRoLmNvcyhhKTtlLnk9ZCooMitjKSpmKi41O2Uuej1kKk1hdGguc2luKGIpKi41fUUuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUb3J1c0tub3RCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsdHViZTpiLHR1YnVsYXJTZWdtZW50czpjLHJhZGlhbFNlZ21lbnRzOmQscDplLHE6Zn07YT1hfHwxO2I9Ynx8LjQ7Yz1NYXRoLmZsb29yKGMpfHw2NDtkPU1hdGguZmxvb3IoZCl8fDg7ZT1lfHwyO2Y9Znx8Mzt2YXIgaD1bXSxrPVtdLG09W10scT1bXSxuLGw9bmV3IHAscj1uZXcgcCx0PW5ldyBwLHY9bmV3IHAsdz1uZXcgcCx6PW5ldyBwLHk9bmV3IHA7Zm9yKG49MDtuPD1cbiAgICBjOysrbil7dmFyIEk9bi9jKmUqTWF0aC5QSSoyO2coSSxlLGYsYSx0KTtnKEkrLjAxLGUsZixhLHYpO3ouc3ViVmVjdG9ycyh2LHQpO3kuYWRkVmVjdG9ycyh2LHQpO3cuY3Jvc3NWZWN0b3JzKHoseSk7eS5jcm9zc1ZlY3RvcnModyx6KTt3Lm5vcm1hbGl6ZSgpO3kubm9ybWFsaXplKCk7Zm9yKEk9MDtJPD1kOysrSSl7dmFyIEE9SS9kKk1hdGguUEkqMixKPS1iKk1hdGguY29zKEEpLEE9YipNYXRoLnNpbihBKTtsLng9dC54KyhKKnkueCtBKncueCk7bC55PXQueSsoSip5LnkrQSp3LnkpO2wuej10LnorKEoqeS56K0Eqdy56KTtrLnB1c2gobC54LGwueSxsLnopO3Iuc3ViVmVjdG9ycyhsLHQpLm5vcm1hbGl6ZSgpO20ucHVzaChyLngsci55LHIueik7cS5wdXNoKG4vYyk7cS5wdXNoKEkvZCl9fWZvcihJPTE7STw9YztJKyspZm9yKG49MTtuPD1kO24rKylhPShkKzEpKkkrKG4tMSksYj0oZCsxKSpJK24sZT0oZCsxKSooSS0xKStuLGgucHVzaCgoZCsxKSooSS0xKSsobi0xKSxhLGUpLFxuICAgIGgucHVzaChhLGIsZSk7dGhpcy5zZXRJbmRleChoKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoaywzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixuZXcgQihtLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIocSwyKSl9ZnVuY3Rpb24gUGMoYSxiLGMsZCxlKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVG9ydXNHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsdHViZTpiLHJhZGlhbFNlZ21lbnRzOmMsdHVidWxhclNlZ21lbnRzOmQsYXJjOmV9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyAkYihhLGIsYyxkLGUpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiAkYihhLGIsYyxkLGUpe0UuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUb3J1c0J1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSx0dWJlOmIscmFkaWFsU2VnbWVudHM6Yyx0dWJ1bGFyU2VnbWVudHM6ZCxhcmM6ZX07YT1hfHwxO2I9Ynx8XG4gICAgLjQ7Yz1NYXRoLmZsb29yKGMpfHw4O2Q9TWF0aC5mbG9vcihkKXx8NjtlPWV8fDIqTWF0aC5QSTt2YXIgZj1bXSxnPVtdLGg9W10saz1bXSxtPW5ldyBwLHE9bmV3IHAsbj1uZXcgcCxsLHI7Zm9yKGw9MDtsPD1jO2wrKylmb3Iocj0wO3I8PWQ7cisrKXt2YXIgdD1yL2QqZSx2PWwvYypNYXRoLlBJKjI7cS54PShhK2IqTWF0aC5jb3ModikpKk1hdGguY29zKHQpO3EueT0oYStiKk1hdGguY29zKHYpKSpNYXRoLnNpbih0KTtxLno9YipNYXRoLnNpbih2KTtnLnB1c2gocS54LHEueSxxLnopO20ueD1hKk1hdGguY29zKHQpO20ueT1hKk1hdGguc2luKHQpO24uc3ViVmVjdG9ycyhxLG0pLm5vcm1hbGl6ZSgpO2gucHVzaChuLngsbi55LG4ueik7ay5wdXNoKHIvZCk7ay5wdXNoKGwvYyl9Zm9yKGw9MTtsPD1jO2wrKylmb3Iocj0xO3I8PWQ7cisrKWE9KGQrMSkqKGwtMSkrci0xLGI9KGQrMSkqKGwtMSkrcixlPShkKzEpKmwrcixmLnB1c2goKGQrMSkqbCtyLTEsYSxlKSxmLnB1c2goYSxiLFxuICAgIGUpO3RoaXMuc2V0SW5kZXgoZik7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGcsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIoaCwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKGssMikpfWZ1bmN0aW9uIGJmKGEsYixjLGQsZSl7Zm9yKHZhciBmLGc9MCxoPWIsaz1jLWQ7aDxjO2grPWQpZys9KGFba10tYVtoXSkqKGFbaCsxXSthW2srMV0pLGs9aDtpZihlPT09MDxnKWZvcihlPWI7ZTxjO2UrPWQpZj1jZihlLGFbZV0sYVtlKzFdLGYpO2Vsc2UgZm9yKGU9Yy1kO2U+PWI7ZS09ZClmPWNmKGUsYVtlXSxhW2UrMV0sZik7ZiYmdmIoZixmLm5leHQpJiYoUWMoZiksZj1mLm5leHQpO3JldHVybiBmfWZ1bmN0aW9uIFJjKGEsYil7aWYoIWEpcmV0dXJuIGE7Ynx8KGI9YSk7ZG97dmFyIGM9ITE7aWYoYS5zdGVpbmVyfHwhdmIoYSxhLm5leHQpJiYwIT09dGEoYS5wcmV2LGEsYS5uZXh0KSlhPWEubmV4dDtlbHNle1FjKGEpO2E9Yj1hLnByZXY7XG4gICAgaWYoYT09PWEubmV4dClicmVhaztjPSEwfX13aGlsZShjfHxhIT09Yik7cmV0dXJuIGJ9ZnVuY3Rpb24gU2MoYSxiLGMsZCxlLGYsZyl7aWYoYSl7aWYoIWcmJmYpe3ZhciBoPWEsaz1oO2RvIG51bGw9PT1rLnomJihrLno9ZmUoay54LGsueSxkLGUsZikpLGsucHJldlo9ay5wcmV2LGs9ay5uZXh0Wj1rLm5leHQ7d2hpbGUoayE9PWgpO2sucHJldloubmV4dFo9bnVsbDtrLnByZXZaPW51bGw7dmFyIGg9ayxtLHEsbixsLHI9MTtkb3trPWg7dmFyIHQ9aD1udWxsO2ZvcihxPTA7azspe3ErKzt2YXIgcD1rO2ZvcihtPW49MDttPHImJihuKysscD1wLm5leHRaLHApO20rKyk7Zm9yKGw9cjswPG58fDA8bCYmcDspMCE9PW4mJigwPT09bHx8IXB8fGsuejw9cC56KT8obT1rLGs9ay5uZXh0WixuLS0pOihtPXAscD1wLm5leHRaLGwtLSksdD90Lm5leHRaPW06aD1tLG0ucHJldlo9dCx0PW07az1wfXQubmV4dFo9bnVsbDtyKj0yfXdoaWxlKDE8cSl9Zm9yKGg9YTthLnByZXYhPT1hLm5leHQ7KXtrPVxuICAgIGEucHJldjtwPWEubmV4dDtpZihmKWE6e3Q9YTtsPWQ7dmFyIHc9ZSx6PWY7cT10LnByZXY7bj10O3I9dC5uZXh0O2lmKDA8PXRhKHEsbixyKSl0PSExO2Vsc2V7dmFyIHk9cS54Pm4ueD9xLng+ci54P3EueDpyLng6bi54PnIueD9uLng6ci54LEk9cS55Pm4ueT9xLnk+ci55P3EueTpyLnk6bi55PnIueT9uLnk6ci55O209ZmUocS54PG4ueD9xLng8ci54P3EueDpyLng6bi54PHIueD9uLng6ci54LHEueTxuLnk/cS55PHIueT9xLnk6ci55Om4ueTxyLnk/bi55OnIueSxsLHcseik7bD1mZSh5LEksbCx3LHopO2Zvcih3PXQubmV4dFo7dyYmdy56PD1sOyl7aWYodyE9PXQucHJldiYmdyE9PXQubmV4dCYmemQocS54LHEueSxuLngsbi55LHIueCxyLnksdy54LHcueSkmJjA8PXRhKHcucHJldix3LHcubmV4dCkpe3Q9ITE7YnJlYWsgYX13PXcubmV4dFp9Zm9yKHc9dC5wcmV2Wjt3JiZ3Lno+PW07KXtpZih3IT09dC5wcmV2JiZ3IT09dC5uZXh0JiZ6ZChxLngscS55LG4ueCxuLnksci54LFxuICAgIHIueSx3Lngsdy55KSYmMDw9dGEody5wcmV2LHcsdy5uZXh0KSl7dD0hMTticmVhayBhfXc9dy5wcmV2Wn10PSEwfX1lbHNlIGE6aWYodD1hLHE9dC5wcmV2LG49dCxyPXQubmV4dCwwPD10YShxLG4scikpdD0hMTtlbHNle2ZvcihtPXQubmV4dC5uZXh0O20hPT10LnByZXY7KXtpZih6ZChxLngscS55LG4ueCxuLnksci54LHIueSxtLngsbS55KSYmMDw9dGEobS5wcmV2LG0sbS5uZXh0KSl7dD0hMTticmVhayBhfW09bS5uZXh0fXQ9ITB9aWYodCliLnB1c2goay5pL2MpLGIucHVzaChhLmkvYyksYi5wdXNoKHAuaS9jKSxRYyhhKSxoPWE9cC5uZXh0O2Vsc2UgaWYoYT1wLGE9PT1oKXtpZighZylTYyhSYyhhKSxiLGMsZCxlLGYsMSk7ZWxzZSBpZigxPT09Zyl7Zz1iO2g9YztrPWE7ZG8gcD1rLnByZXYsdD1rLm5leHQubmV4dCwhdmIocCx0KSYmZGYocCxrLGsubmV4dCx0KSYmVGMocCx0KSYmVGModCxwKSYmKGcucHVzaChwLmkvaCksZy5wdXNoKGsuaS9oKSxnLnB1c2godC5pL2gpLFxuICAgIFFjKGspLFFjKGsubmV4dCksaz1hPXQpLGs9ay5uZXh0O3doaWxlKGshPT1hKTthPWs7U2MoYSxiLGMsZCxlLGYsMil9ZWxzZSBpZigyPT09ZylhOntnPWE7ZG97Zm9yKGg9Zy5uZXh0Lm5leHQ7aCE9PWcucHJldjspe2lmKGs9Zy5pIT09aC5pKXtrPWc7cD1oO2lmKHQ9ay5uZXh0LmkhPT1wLmkmJmsucHJldi5pIT09cC5pKXtiOnt0PWs7ZG97aWYodC5pIT09ay5pJiZ0Lm5leHQuaSE9PWsuaSYmdC5pIT09cC5pJiZ0Lm5leHQuaSE9PXAuaSYmZGYodCx0Lm5leHQsayxwKSl7dD0hMDticmVhayBifXQ9dC5uZXh0fXdoaWxlKHQhPT1rKTt0PSExfXQ9IXR9aWYodD10JiZUYyhrLHApJiZUYyhwLGspKXt0PWs7cT0hMTtuPShrLngrcC54KS8yO3A9KGsueStwLnkpLzI7ZG8gdC55PnAhPT10Lm5leHQueT5wJiZ0Lm5leHQueSE9PXQueSYmbjwodC5uZXh0LngtdC54KSoocC10LnkpLyh0Lm5leHQueS10LnkpK3QueCYmKHE9IXEpLHQ9dC5uZXh0O3doaWxlKHQhPT1rKTt0PXF9az10fWlmKGspe2E9XG4gICAgZWYoZyxoKTtnPVJjKGcsZy5uZXh0KTthPVJjKGEsYS5uZXh0KTtTYyhnLGIsYyxkLGUsZik7U2MoYSxiLGMsZCxlLGYpO2JyZWFrIGF9aD1oLm5leHR9Zz1nLm5leHR9d2hpbGUoZyE9PWEpfWJyZWFrfX19fWZ1bmN0aW9uIEhnKGEsYil7cmV0dXJuIGEueC1iLnh9ZnVuY3Rpb24gSWcoYSxiKXt2YXIgYz1iLGQ9YS54LGU9YS55LGY9LUluZmluaXR5O2Rve2lmKGU8PWMueSYmZT49Yy5uZXh0LnkmJmMubmV4dC55IT09Yy55KXt2YXIgZz1jLngrKGUtYy55KSooYy5uZXh0LngtYy54KS8oYy5uZXh0LnktYy55KTtpZihnPD1kJiZnPmYpe2Y9ZztpZihnPT09ZCl7aWYoZT09PWMueSlyZXR1cm4gYztpZihlPT09Yy5uZXh0LnkpcmV0dXJuIGMubmV4dH12YXIgaD1jLng8Yy5uZXh0Lng/YzpjLm5leHR9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKTtpZighaClyZXR1cm4gbnVsbDtpZihkPT09ZilyZXR1cm4gaC5wcmV2O2I9aDtmb3IodmFyIGc9aC54LGs9aC55LG09SW5maW5pdHkscSxjPWgubmV4dDtjIT09XG4gICAgYjspZD49Yy54JiZjLng+PWcmJmQhPT1jLngmJnpkKGU8az9kOmYsZSxnLGssZTxrP2Y6ZCxlLGMueCxjLnkpJiYocT1NYXRoLmFicyhlLWMueSkvKGQtYy54KSwocTxtfHxxPT09bSYmYy54PmgueCkmJlRjKGMsYSkmJihoPWMsbT1xKSksYz1jLm5leHQ7cmV0dXJuIGh9ZnVuY3Rpb24gZmUoYSxiLGMsZCxlKXthPTMyNzY3KihhLWMpKmU7Yj0zMjc2NyooYi1kKSplO2E9KGF8YTw8OCkmMTY3MTE5MzU7YT0oYXxhPDw0KSYyNTI2NDUxMzU7YT0oYXxhPDwyKSY4NTg5OTM0NTk7Yj0oYnxiPDw4KSYxNjcxMTkzNTtiPShifGI8PDQpJjI1MjY0NTEzNTtiPShifGI8PDIpJjg1ODk5MzQ1OTtyZXR1cm4oYXxhPDwxKSYxNDMxNjU1NzY1fCgoYnxiPDwxKSYxNDMxNjU1NzY1KTw8MX1mdW5jdGlvbiBKZyhhKXt2YXIgYj1hLGM9YTtkbyBiLng8Yy54JiYoYz1iKSxiPWIubmV4dDt3aGlsZShiIT09YSk7cmV0dXJuIGN9ZnVuY3Rpb24gemQoYSxiLGMsZCxlLGYsZyxoKXtyZXR1cm4gMDw9KGUtXG4gICAgZykqKGItaCktKGEtZykqKGYtaCkmJjA8PShhLWcpKihkLWgpLShjLWcpKihiLWgpJiYwPD0oYy1nKSooZi1oKS0oZS1nKSooZC1oKX1mdW5jdGlvbiB0YShhLGIsYyl7cmV0dXJuKGIueS1hLnkpKihjLngtYi54KS0oYi54LWEueCkqKGMueS1iLnkpfWZ1bmN0aW9uIHZiKGEsYil7cmV0dXJuIGEueD09PWIueCYmYS55PT09Yi55fWZ1bmN0aW9uIGRmKGEsYixjLGQpe3JldHVybiB2YihhLGIpJiZ2YihjLGQpfHx2YihhLGQpJiZ2YihjLGIpPyEwOjA8dGEoYSxiLGMpIT09MDx0YShhLGIsZCkmJjA8dGEoYyxkLGEpIT09MDx0YShjLGQsYil9ZnVuY3Rpb24gVGMoYSxiKXtyZXR1cm4gMD50YShhLnByZXYsYSxhLm5leHQpPzA8PXRhKGEsYixhLm5leHQpJiYwPD10YShhLGEucHJldixiKTowPnRhKGEsYixhLnByZXYpfHwwPnRhKGEsYS5uZXh0LGIpfWZ1bmN0aW9uIGVmKGEsYil7dmFyIGM9bmV3IGdlKGEuaSxhLngsYS55KSxkPW5ldyBnZShiLmksYi54LGIueSksZT1hLm5leHQsZj1iLnByZXY7XG4gICAgYS5uZXh0PWI7Yi5wcmV2PWE7Yy5uZXh0PWU7ZS5wcmV2PWM7ZC5uZXh0PWM7Yy5wcmV2PWQ7Zi5uZXh0PWQ7ZC5wcmV2PWY7cmV0dXJuIGR9ZnVuY3Rpb24gY2YoYSxiLGMsZCl7YT1uZXcgZ2UoYSxiLGMpO2Q/KGEubmV4dD1kLm5leHQsYS5wcmV2PWQsZC5uZXh0LnByZXY9YSxkLm5leHQ9YSk6KGEucHJldj1hLGEubmV4dD1hKTtyZXR1cm4gYX1mdW5jdGlvbiBRYyhhKXthLm5leHQucHJldj1hLnByZXY7YS5wcmV2Lm5leHQ9YS5uZXh0O2EucHJldlomJihhLnByZXZaLm5leHRaPWEubmV4dFopO2EubmV4dFomJihhLm5leHRaLnByZXZaPWEucHJldlopfWZ1bmN0aW9uIGdlKGEsYixjKXt0aGlzLmk9YTt0aGlzLng9Yjt0aGlzLnk9Yzt0aGlzLm5leHRaPXRoaXMucHJldlo9dGhpcy56PXRoaXMubmV4dD10aGlzLnByZXY9bnVsbDt0aGlzLnN0ZWluZXI9ITF9ZnVuY3Rpb24gaWIoYSxiKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiRXh0cnVkZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPVxuICAgIHtzaGFwZXM6YSxvcHRpb25zOmJ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBMYShhLGIpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBMYShhLGIpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmKEUuY2FsbCh0aGlzKSx0aGlzLnR5cGU9XCJFeHRydWRlQnVmZmVyR2VvbWV0cnlcIixhPUFycmF5LmlzQXJyYXkoYSk/YTpbYV0sdGhpcy5hZGRTaGFwZUxpc3QoYSxiKSx0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCkpfWZ1bmN0aW9uIFVjKGEsYil7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlRleHRHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17dGV4dDphLHBhcmFtZXRlcnM6Yn07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IGFjKGEsYikpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIGFjKGEsYil7Yj1ifHx7fTt2YXIgYz1iLmZvbnQ7aWYoIWN8fCFjLmlzRm9udClyZXR1cm4gY29uc29sZS5lcnJvcihcIlRIUkVFLlRleHRHZW9tZXRyeTogZm9udCBwYXJhbWV0ZXIgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkZvbnQuXCIpLFxuICAgIG5ldyBMO2E9Yy5nZW5lcmF0ZVNoYXBlcyhhLGIuc2l6ZSxiLmN1cnZlU2VnbWVudHMpO2IuYW1vdW50PXZvaWQgMCE9PWIuaGVpZ2h0P2IuaGVpZ2h0OjUwO3ZvaWQgMD09PWIuYmV2ZWxUaGlja25lc3MmJihiLmJldmVsVGhpY2tuZXNzPTEwKTt2b2lkIDA9PT1iLmJldmVsU2l6ZSYmKGIuYmV2ZWxTaXplPTgpO3ZvaWQgMD09PWIuYmV2ZWxFbmFibGVkJiYoYi5iZXZlbEVuYWJsZWQ9ITEpO0xhLmNhbGwodGhpcyxhLGIpO3RoaXMudHlwZT1cIlRleHRCdWZmZXJHZW9tZXRyeVwifWZ1bmN0aW9uIFZjKGEsYixjLGQsZSxmLGcpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTcGhlcmVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsd2lkdGhTZWdtZW50czpiLGhlaWdodFNlZ21lbnRzOmMscGhpU3RhcnQ6ZCxwaGlMZW5ndGg6ZSx0aGV0YVN0YXJ0OmYsdGhldGFMZW5ndGg6Z307dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IHdiKGEsYixjLGQsZSxmLGcpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1cbiAgICBmdW5jdGlvbiB3YihhLGIsYyxkLGUsZixnKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3BoZXJlQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHdpZHRoU2VnbWVudHM6YixoZWlnaHRTZWdtZW50czpjLHBoaVN0YXJ0OmQscGhpTGVuZ3RoOmUsdGhldGFTdGFydDpmLHRoZXRhTGVuZ3RoOmd9O2E9YXx8MTtiPU1hdGgubWF4KDMsTWF0aC5mbG9vcihiKXx8OCk7Yz1NYXRoLm1heCgyLE1hdGguZmxvb3IoYyl8fDYpO2Q9dm9pZCAwIT09ZD9kOjA7ZT12b2lkIDAhPT1lP2U6MipNYXRoLlBJO2Y9dm9pZCAwIT09Zj9mOjA7Zz12b2lkIDAhPT1nP2c6TWF0aC5QSTt2YXIgaD1mK2csayxtLHE9MCxuPVtdLGw9bmV3IHAscj1uZXcgcCx0PVtdLHY9W10sdz1bXSx6PVtdO2ZvcihtPTA7bTw9YzttKyspe3ZhciB5PVtdLEk9bS9jO2ZvcihrPTA7azw9YjtrKyspe3ZhciBBPWsvYjtsLng9LWEqTWF0aC5jb3MoZCtBKmUpKk1hdGguc2luKGYrSSpnKTtsLnk9YSpNYXRoLmNvcyhmK1xuICAgIEkqZyk7bC56PWEqTWF0aC5zaW4oZCtBKmUpKk1hdGguc2luKGYrSSpnKTt2LnB1c2gobC54LGwueSxsLnopO3Iuc2V0KGwueCxsLnksbC56KS5ub3JtYWxpemUoKTt3LnB1c2goci54LHIueSxyLnopO3oucHVzaChBLDEtSSk7eS5wdXNoKHErKyl9bi5wdXNoKHkpfWZvcihtPTA7bTxjO20rKylmb3Ioaz0wO2s8YjtrKyspYT1uW21dW2srMV0sZD1uW21dW2tdLGU9blttKzFdW2tdLGc9blttKzFdW2srMV0sKDAhPT1tfHwwPGYpJiZ0LnB1c2goYSxkLGcpLChtIT09Yy0xfHxoPE1hdGguUEkpJiZ0LnB1c2goZCxlLGcpO3RoaXMuc2V0SW5kZXgodCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKHYsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIodywzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKHosMikpfWZ1bmN0aW9uIFdjKGEsYixjLGQsZSxmKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUmluZ0dlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPVxuICAgIHtpbm5lclJhZGl1czphLG91dGVyUmFkaXVzOmIsdGhldGFTZWdtZW50czpjLHBoaVNlZ21lbnRzOmQsdGhldGFTdGFydDplLHRoZXRhTGVuZ3RoOmZ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBiYyhhLGIsYyxkLGUsZikpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIGJjKGEsYixjLGQsZSxmKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUmluZ0J1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtpbm5lclJhZGl1czphLG91dGVyUmFkaXVzOmIsdGhldGFTZWdtZW50czpjLHBoaVNlZ21lbnRzOmQsdGhldGFTdGFydDplLHRoZXRhTGVuZ3RoOmZ9O2E9YXx8LjU7Yj1ifHwxO2U9dm9pZCAwIT09ZT9lOjA7Zj12b2lkIDAhPT1mP2Y6MipNYXRoLlBJO2M9dm9pZCAwIT09Yz9NYXRoLm1heCgzLGMpOjg7ZD12b2lkIDAhPT1kP01hdGgubWF4KDEsZCk6MTt2YXIgZz1bXSxoPVtdLGs9W10sbT1bXSxxPWEsbj0oYi1hKS9kLGw9bmV3IHAscj1uZXcgRCx0LHY7Zm9yKHQ9XG4gICAgMDt0PD1kO3QrKyl7Zm9yKHY9MDt2PD1jO3YrKylhPWUrdi9jKmYsbC54PXEqTWF0aC5jb3MoYSksbC55PXEqTWF0aC5zaW4oYSksaC5wdXNoKGwueCxsLnksbC56KSxrLnB1c2goMCwwLDEpLHIueD0obC54L2IrMSkvMixyLnk9KGwueS9iKzEpLzIsbS5wdXNoKHIueCxyLnkpO3ErPW59Zm9yKHQ9MDt0PGQ7dCsrKWZvcihiPXQqKGMrMSksdj0wO3Y8Yzt2KyspYT12K2IsZT1hK2MrMSxmPWErYysyLHE9YSsxLGcucHVzaChhLGUscSksZy5wdXNoKGUsZixxKTt0aGlzLnNldEluZGV4KGcpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihoLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKGssMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQihtLDIpKX1mdW5jdGlvbiBYYyhhLGIsYyxkKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGF0aGVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cG9pbnRzOmEsc2VnbWVudHM6YixwaGlTdGFydDpjLHBoaUxlbmd0aDpkfTtcbiAgICB0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgY2MoYSxiLGMsZCkpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIGNjKGEsYixjLGQpe0UuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMYXRoZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtwb2ludHM6YSxzZWdtZW50czpiLHBoaVN0YXJ0OmMscGhpTGVuZ3RoOmR9O2I9TWF0aC5mbG9vcihiKXx8MTI7Yz1jfHwwO2Q9ZHx8MipNYXRoLlBJO2Q9US5jbGFtcChkLDAsMipNYXRoLlBJKTt2YXIgZT1bXSxmPVtdLGc9W10saD0xL2Isaz1uZXcgcCxtPW5ldyBELHE7Zm9yKHE9MDtxPD1iO3ErKyl7dmFyIG49YytxKmgqZDt2YXIgbD1NYXRoLnNpbihuKSxyPU1hdGguY29zKG4pO2ZvcihuPTA7bjw9YS5sZW5ndGgtMTtuKyspay54PWFbbl0ueCpsLGsueT1hW25dLnksay56PWFbbl0ueCpyLGYucHVzaChrLngsay55LGsueiksbS54PXEvYixtLnk9bi8oYS5sZW5ndGgtMSksZy5wdXNoKG0ueCxtLnkpfWZvcihxPTA7cTxiO3ErKylmb3Iobj1cbiAgICAwO248YS5sZW5ndGgtMTtuKyspYz1uK3EqYS5sZW5ndGgsaD1jK2EubGVuZ3RoLGs9YythLmxlbmd0aCsxLG09YysxLGUucHVzaChjLGgsbSksZS5wdXNoKGgsayxtKTt0aGlzLnNldEluZGV4KGUpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihmLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIoZywyKSk7dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO2lmKGQ9PT0yKk1hdGguUEkpZm9yKGQ9dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbC5hcnJheSxlPW5ldyBwLGY9bmV3IHAsZz1uZXcgcCxjPWIqYS5sZW5ndGgqMyxuPXE9MDtxPGEubGVuZ3RoO3ErKyxuKz0zKWUueD1kW24rMF0sZS55PWRbbisxXSxlLno9ZFtuKzJdLGYueD1kW2MrbiswXSxmLnk9ZFtjK24rMV0sZi56PWRbYytuKzJdLGcuYWRkVmVjdG9ycyhlLGYpLm5vcm1hbGl6ZSgpLGRbbiswXT1kW2MrbiswXT1nLngsZFtuKzFdPWRbYytuKzFdPWcueSxkW24rMl09ZFtjK24rMl09Zy56fWZ1bmN0aW9uIHhiKGEsXG4gICAgYil7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNoYXBlR2VvbWV0cnlcIjtcIm9iamVjdFwiPT09dHlwZW9mIGImJihjb25zb2xlLndhcm4oXCJUSFJFRS5TaGFwZUdlb21ldHJ5OiBPcHRpb25zIHBhcmFtZXRlciBoYXMgYmVlbiByZW1vdmVkLlwiKSxiPWIuY3VydmVTZWdtZW50cyk7dGhpcy5wYXJhbWV0ZXJzPXtzaGFwZXM6YSxjdXJ2ZVNlZ21lbnRzOmJ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyB5YihhLGIpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiB5YihhLGIpe2Z1bmN0aW9uIGMoYSl7dmFyIGMsaD1lLmxlbmd0aC8zO2E9YS5leHRyYWN0UG9pbnRzKGIpO3ZhciBtPWEuc2hhcGUscT1hLmhvbGVzO2lmKCExPT09JGEuaXNDbG9ja1dpc2UobSkpZm9yKG09bS5yZXZlcnNlKCksYT0wLGM9cS5sZW5ndGg7YTxjO2ErKyl7dmFyIGw9cVthXTshMD09PSRhLmlzQ2xvY2tXaXNlKGwpJiYocVthXT1sLnJldmVyc2UoKSl9dmFyIHA9JGEudHJpYW5ndWxhdGVTaGFwZShtLFxuICAgIHEpO2E9MDtmb3IoYz1xLmxlbmd0aDthPGM7YSsrKWw9cVthXSxtPW0uY29uY2F0KGwpO2E9MDtmb3IoYz1tLmxlbmd0aDthPGM7YSsrKWw9bVthXSxlLnB1c2gobC54LGwueSwwKSxmLnB1c2goMCwwLDEpLGcucHVzaChsLngsbC55KTthPTA7Zm9yKGM9cC5sZW5ndGg7YTxjO2ErKyltPXBbYV0sZC5wdXNoKG1bMF0raCxtWzFdK2gsbVsyXStoKSxrKz0zfUUuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTaGFwZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtzaGFwZXM6YSxjdXJ2ZVNlZ21lbnRzOmJ9O2I9Ynx8MTI7dmFyIGQ9W10sZT1bXSxmPVtdLGc9W10saD0wLGs9MDtpZighMT09PUFycmF5LmlzQXJyYXkoYSkpYyhhKTtlbHNlIGZvcih2YXIgbT0wO208YS5sZW5ndGg7bSsrKWMoYVttXSksdGhpcy5hZGRHcm91cChoLGssbSksaCs9ayxrPTA7dGhpcy5zZXRJbmRleChkKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoZSwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixcbiAgICBuZXcgQihmLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIoZywyKSl9ZnVuY3Rpb24gZmYoYSxiKXtiLnNoYXBlcz1bXTtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyliLnNoYXBlcy5wdXNoKGFbY10udXVpZCk7ZWxzZSBiLnNoYXBlcy5wdXNoKGEudXVpZCk7cmV0dXJuIGJ9ZnVuY3Rpb24gZGMoYSxiKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiRWRnZXNHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17dGhyZXNob2xkQW5nbGU6Yn07dmFyIGM9W107Yj1NYXRoLmNvcyhRLkRFRzJSQUQqKHZvaWQgMCE9PWI/YjoxKSk7dmFyIGQ9WzAsMF0sZT17fSxmPVtcImFcIixcImJcIixcImNcIl07aWYoYS5pc0J1ZmZlckdlb21ldHJ5KXt2YXIgZz1uZXcgTDtnLmZyb21CdWZmZXJHZW9tZXRyeShhKX1lbHNlIGc9YS5jbG9uZSgpO2cubWVyZ2VWZXJ0aWNlcygpO2cuY29tcHV0ZUZhY2VOb3JtYWxzKCk7YT1nLnZlcnRpY2VzO2c9Zy5mYWNlcztmb3IodmFyIGg9XG4gICAgMCxrPWcubGVuZ3RoO2g8aztoKyspZm9yKHZhciBtPWdbaF0scT0wOzM+cTtxKyspe3ZhciBuPW1bZltxXV07dmFyIGw9bVtmWyhxKzEpJTNdXTtkWzBdPU1hdGgubWluKG4sbCk7ZFsxXT1NYXRoLm1heChuLGwpO249ZFswXStcIixcIitkWzFdO3ZvaWQgMD09PWVbbl0/ZVtuXT17aW5kZXgxOmRbMF0saW5kZXgyOmRbMV0sZmFjZTE6aCxmYWNlMjp2b2lkIDB9OmVbbl0uZmFjZTI9aH1mb3IobiBpbiBlKWlmKGQ9ZVtuXSx2b2lkIDA9PT1kLmZhY2UyfHxnW2QuZmFjZTFdLm5vcm1hbC5kb3QoZ1tkLmZhY2UyXS5ub3JtYWwpPD1iKWY9YVtkLmluZGV4MV0sYy5wdXNoKGYueCxmLnksZi56KSxmPWFbZC5pbmRleDJdLGMucHVzaChmLngsZi55LGYueik7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGMsMykpfWZ1bmN0aW9uIHpiKGEsYixjLGQsZSxmLGcsaCl7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN5bGluZGVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1c1RvcDphLFxuICAgIHJhZGl1c0JvdHRvbTpiLGhlaWdodDpjLHJhZGlhbFNlZ21lbnRzOmQsaGVpZ2h0U2VnbWVudHM6ZSxvcGVuRW5kZWQ6Zix0aGV0YVN0YXJ0OmcsdGhldGFMZW5ndGg6aH07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IGFiKGEsYixjLGQsZSxmLGcsaCkpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIGFiKGEsYixjLGQsZSxmLGcsaCl7ZnVuY3Rpb24gayhjKXt2YXIgZSxmPW5ldyBELGs9bmV3IHAsdT0wLHY9ITA9PT1jP2E6Yix5PSEwPT09Yz8xOi0xO3ZhciB4PXQ7Zm9yKGU9MTtlPD1kO2UrKyluLnB1c2goMCx3KnksMCksbC5wdXNoKDAseSwwKSxyLnB1c2goLjUsLjUpLHQrKzt2YXIgQj10O2ZvcihlPTA7ZTw9ZDtlKyspe3ZhciBDPWUvZCpoK2csRT1NYXRoLmNvcyhDKSxDPU1hdGguc2luKEMpO2sueD12KkM7ay55PXcqeTtrLno9dipFO24ucHVzaChrLngsay55LGsueik7bC5wdXNoKDAseSwwKTtmLng9LjUqRSsuNTtmLnk9LjUqQyp5Ky41O3IucHVzaChmLngsZi55KTtcbiAgICB0Kyt9Zm9yKGU9MDtlPGQ7ZSsrKWY9eCtlLGs9QitlLCEwPT09Yz9xLnB1c2goayxrKzEsZik6cS5wdXNoKGsrMSxrLGYpLHUrPTM7bS5hZGRHcm91cCh6LHUsITA9PT1jPzE6Mik7eis9dX1FLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzVG9wOmEscmFkaXVzQm90dG9tOmIsaGVpZ2h0OmMscmFkaWFsU2VnbWVudHM6ZCxoZWlnaHRTZWdtZW50czplLG9wZW5FbmRlZDpmLHRoZXRhU3RhcnQ6Zyx0aGV0YUxlbmd0aDpofTt2YXIgbT10aGlzO2E9dm9pZCAwIT09YT9hOjE7Yj12b2lkIDAhPT1iP2I6MTtjPWN8fDE7ZD1NYXRoLmZsb29yKGQpfHw4O2U9TWF0aC5mbG9vcihlKXx8MTtmPXZvaWQgMCE9PWY/ZjohMTtnPXZvaWQgMCE9PWc/ZzowO2g9dm9pZCAwIT09aD9oOjIqTWF0aC5QSTt2YXIgcT1bXSxuPVtdLGw9W10scj1bXSx0PTAsdj1bXSx3PWMvMix6PTA7KGZ1bmN0aW9uKCl7dmFyIGYsayx1PW5ldyBwLFxuICAgIEo9bmV3IHAseD0wLEI9KGItYSkvYztmb3Ioaz0wO2s8PWU7aysrKXt2YXIgRD1bXSxDPWsvZSxFPUMqKGItYSkrYTtmb3IoZj0wO2Y8PWQ7ZisrKXt2YXIgSD1mL2QsSz1IKmgrZyxTPU1hdGguc2luKEspLEs9TWF0aC5jb3MoSyk7Si54PUUqUztKLnk9LUMqYyt3O0ouej1FKks7bi5wdXNoKEoueCxKLnksSi56KTt1LnNldChTLEIsSykubm9ybWFsaXplKCk7bC5wdXNoKHUueCx1LnksdS56KTtyLnB1c2goSCwxLUMpO0QucHVzaCh0KyspfXYucHVzaChEKX1mb3IoZj0wO2Y8ZDtmKyspZm9yKGs9MDtrPGU7aysrKXU9dltrKzFdW2ZdLEo9dltrKzFdW2YrMV0sQj12W2tdW2YrMV0scS5wdXNoKHZba11bZl0sdSxCKSxxLnB1c2godSxKLEIpLHgrPTY7bS5hZGRHcm91cCh6LHgsMCk7eis9eH0pKCk7ITE9PT1mJiYoMDxhJiZrKCEwKSwwPGImJmsoITEpKTt0aGlzLnNldEluZGV4KHEpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihuLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLFxuICAgIG5ldyBCKGwsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQihyLDIpKX1mdW5jdGlvbiBZYyhhLGIsYyxkLGUsZixnKXt6Yi5jYWxsKHRoaXMsMCxhLGIsYyxkLGUsZixnKTt0aGlzLnR5cGU9XCJDb25lR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGhlaWdodDpiLHJhZGlhbFNlZ21lbnRzOmMsaGVpZ2h0U2VnbWVudHM6ZCxvcGVuRW5kZWQ6ZSx0aGV0YVN0YXJ0OmYsdGhldGFMZW5ndGg6Z319ZnVuY3Rpb24gWmMoYSxiLGMsZCxlLGYsZyl7YWIuY2FsbCh0aGlzLDAsYSxiLGMsZCxlLGYsZyk7dGhpcy50eXBlPVwiQ29uZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxoZWlnaHQ6YixyYWRpYWxTZWdtZW50czpjLGhlaWdodFNlZ21lbnRzOmQsb3BlbkVuZGVkOmUsdGhldGFTdGFydDpmLHRoZXRhTGVuZ3RoOmd9fWZ1bmN0aW9uICRjKGEsYixjLGQpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDaXJjbGVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz1cbiAgICB7cmFkaXVzOmEsc2VnbWVudHM6Yix0aGV0YVN0YXJ0OmMsdGhldGFMZW5ndGg6ZH07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IGVjKGEsYixjLGQpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBlYyhhLGIsYyxkKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ2lyY2xlQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHNlZ21lbnRzOmIsdGhldGFTdGFydDpjLHRoZXRhTGVuZ3RoOmR9O2E9YXx8MTtiPXZvaWQgMCE9PWI/TWF0aC5tYXgoMyxiKTo4O2M9dm9pZCAwIT09Yz9jOjA7ZD12b2lkIDAhPT1kP2Q6MipNYXRoLlBJO3ZhciBlPVtdLGY9W10sZz1bXSxoPVtdLGssbT1uZXcgcCxxPW5ldyBEO2YucHVzaCgwLDAsMCk7Zy5wdXNoKDAsMCwxKTtoLnB1c2goLjUsLjUpO3ZhciBuPTA7Zm9yKGs9MztuPD1iO24rKyxrKz0zKXt2YXIgbD1jK24vYipkO20ueD1hKk1hdGguY29zKGwpO20ueT1hKk1hdGguc2luKGwpO2YucHVzaChtLngsbS55LFxuICAgIG0ueik7Zy5wdXNoKDAsMCwxKTtxLng9KGZba10vYSsxKS8yO3EueT0oZltrKzFdL2ErMSkvMjtoLnB1c2gocS54LHEueSl9Zm9yKGs9MTtrPD1iO2srKyllLnB1c2goayxrKzEsMCk7dGhpcy5zZXRJbmRleChlKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoZiwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixuZXcgQihnLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIoaCwyKSl9ZnVuY3Rpb24gZmMoYSl7UC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNoYWRvd01hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgSCgwKTt0aGlzLm9wYWNpdHk9MTt0aGlzLnRyYW5zcGFyZW50PXRoaXMubGlnaHRzPSEwO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIGdjKGEpe0ZhLmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJSYXdTaGFkZXJNYXRlcmlhbFwifWZ1bmN0aW9uIFVhKGEpe1AuY2FsbCh0aGlzKTt0aGlzLmRlZmluZXM9e1NUQU5EQVJEOlwiXCJ9O3RoaXMudHlwZT1cbiAgICBcIk1lc2hTdGFuZGFyZE1hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgSCgxNjc3NzIxNSk7dGhpcy5tZXRhbG5lc3M9dGhpcy5yb3VnaG5lc3M9LjU7dGhpcy5saWdodE1hcD10aGlzLm1hcD1udWxsO3RoaXMubGlnaHRNYXBJbnRlbnNpdHk9MTt0aGlzLmFvTWFwPW51bGw7dGhpcy5hb01hcEludGVuc2l0eT0xO3RoaXMuZW1pc3NpdmU9bmV3IEgoMCk7dGhpcy5lbWlzc2l2ZUludGVuc2l0eT0xO3RoaXMuYnVtcE1hcD10aGlzLmVtaXNzaXZlTWFwPW51bGw7dGhpcy5idW1wU2NhbGU9MTt0aGlzLm5vcm1hbE1hcD1udWxsO3RoaXMubm9ybWFsU2NhbGU9bmV3IEQoMSwxKTt0aGlzLmRpc3BsYWNlbWVudE1hcD1udWxsO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9MTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9MDt0aGlzLmVudk1hcD10aGlzLmFscGhhTWFwPXRoaXMubWV0YWxuZXNzTWFwPXRoaXMucm91Z2huZXNzTWFwPW51bGw7dGhpcy5lbnZNYXBJbnRlbnNpdHk9MTt0aGlzLnJlZnJhY3Rpb25SYXRpbz1cbiAgICAuOTg7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWNhcD1cInJvdW5kXCI7dGhpcy5tb3JwaE5vcm1hbHM9dGhpcy5tb3JwaFRhcmdldHM9dGhpcy5za2lubmluZz0hMTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBBYihhKXtVYS5jYWxsKHRoaXMpO3RoaXMuZGVmaW5lcz17UEhZU0lDQUw6XCJcIn07dGhpcy50eXBlPVwiTWVzaFBoeXNpY2FsTWF0ZXJpYWxcIjt0aGlzLnJlZmxlY3Rpdml0eT0uNTt0aGlzLmNsZWFyQ29hdFJvdWdobmVzcz10aGlzLmNsZWFyQ29hdD0wO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIE1hKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoUGhvbmdNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IEgoMTY3NzcyMTUpO3RoaXMuc3BlY3VsYXI9bmV3IEgoMTExODQ4MSk7dGhpcy5zaGluaW5lc3M9MzA7dGhpcy5saWdodE1hcD10aGlzLm1hcD1udWxsO1xuICAgIHRoaXMubGlnaHRNYXBJbnRlbnNpdHk9MTt0aGlzLmFvTWFwPW51bGw7dGhpcy5hb01hcEludGVuc2l0eT0xO3RoaXMuZW1pc3NpdmU9bmV3IEgoMCk7dGhpcy5lbWlzc2l2ZUludGVuc2l0eT0xO3RoaXMuYnVtcE1hcD10aGlzLmVtaXNzaXZlTWFwPW51bGw7dGhpcy5idW1wU2NhbGU9MTt0aGlzLm5vcm1hbE1hcD1udWxsO3RoaXMubm9ybWFsU2NhbGU9bmV3IEQoMSwxKTt0aGlzLmRpc3BsYWNlbWVudE1hcD1udWxsO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9MTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9MDt0aGlzLmVudk1hcD10aGlzLmFscGhhTWFwPXRoaXMuc3BlY3VsYXJNYXA9bnVsbDt0aGlzLmNvbWJpbmU9MDt0aGlzLnJlZmxlY3Rpdml0eT0xO3RoaXMucmVmcmFjdGlvblJhdGlvPS45ODt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMud2lyZWZyYW1lTGluZWpvaW49dGhpcy53aXJlZnJhbWVMaW5lY2FwPVwicm91bmRcIjt0aGlzLm1vcnBoTm9ybWFscz1cbiAgICB0aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIEJiKGEpe01hLmNhbGwodGhpcyk7dGhpcy5kZWZpbmVzPXtUT09OOlwiXCJ9O3RoaXMudHlwZT1cIk1lc2hUb29uTWF0ZXJpYWxcIjt0aGlzLmdyYWRpZW50TWFwPW51bGw7dGhpcy5zZXRWYWx1ZXMoYSl9ZnVuY3Rpb24gQ2IoYSl7UC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hOb3JtYWxNYXRlcmlhbFwiO3RoaXMuYnVtcE1hcD1udWxsO3RoaXMuYnVtcFNjYWxlPTE7dGhpcy5ub3JtYWxNYXA9bnVsbDt0aGlzLm5vcm1hbFNjYWxlPW5ldyBEKDEsMSk7dGhpcy5kaXNwbGFjZW1lbnRNYXA9bnVsbDt0aGlzLmRpc3BsYWNlbWVudFNjYWxlPTE7dGhpcy5kaXNwbGFjZW1lbnRCaWFzPTA7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLm1vcnBoTm9ybWFscz10aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPXRoaXMubGlnaHRzPXRoaXMuZm9nPVxuICAgICExO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIERiKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoTGFtYmVydE1hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgSCgxNjc3NzIxNSk7dGhpcy5saWdodE1hcD10aGlzLm1hcD1udWxsO3RoaXMubGlnaHRNYXBJbnRlbnNpdHk9MTt0aGlzLmFvTWFwPW51bGw7dGhpcy5hb01hcEludGVuc2l0eT0xO3RoaXMuZW1pc3NpdmU9bmV3IEgoMCk7dGhpcy5lbWlzc2l2ZUludGVuc2l0eT0xO3RoaXMuZW52TWFwPXRoaXMuYWxwaGFNYXA9dGhpcy5zcGVjdWxhck1hcD10aGlzLmVtaXNzaXZlTWFwPW51bGw7dGhpcy5jb21iaW5lPTA7dGhpcy5yZWZsZWN0aXZpdHk9MTt0aGlzLnJlZnJhY3Rpb25SYXRpbz0uOTg7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWNhcD1cInJvdW5kXCI7dGhpcy5tb3JwaE5vcm1hbHM9dGhpcy5tb3JwaFRhcmdldHM9XG4gICAgdGhpcy5za2lubmluZz0hMTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBFYihhKXtXLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGluZURhc2hlZE1hdGVyaWFsXCI7dGhpcy5zY2FsZT0xO3RoaXMuZGFzaFNpemU9Mzt0aGlzLmdhcFNpemU9MTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBoZShhLGIsYyl7dmFyIGQ9dGhpcyxlPSExLGY9MCxnPTAsaD12b2lkIDA7dGhpcy5vblN0YXJ0PXZvaWQgMDt0aGlzLm9uTG9hZD1hO3RoaXMub25Qcm9ncmVzcz1iO3RoaXMub25FcnJvcj1jO3RoaXMuaXRlbVN0YXJ0PWZ1bmN0aW9uKGEpe2crKztpZighMT09PWUmJnZvaWQgMCE9PWQub25TdGFydClkLm9uU3RhcnQoYSxmLGcpO2U9ITB9O3RoaXMuaXRlbUVuZD1mdW5jdGlvbihhKXtmKys7aWYodm9pZCAwIT09ZC5vblByb2dyZXNzKWQub25Qcm9ncmVzcyhhLGYsZyk7aWYoZj09PWcmJihlPSExLHZvaWQgMCE9PWQub25Mb2FkKSlkLm9uTG9hZCgpfTt0aGlzLml0ZW1FcnJvcj1mdW5jdGlvbihhKXtpZih2b2lkIDAhPT1cbiAgICBkLm9uRXJyb3IpZC5vbkVycm9yKGEpfTt0aGlzLnJlc29sdmVVUkw9ZnVuY3Rpb24oYSl7cmV0dXJuIGg/aChhKTphfTt0aGlzLnNldFVSTE1vZGlmaWVyPWZ1bmN0aW9uKGEpe2g9YTtyZXR1cm4gdGhpc319ZnVuY3Rpb24gTmEoYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YX1mdW5jdGlvbiBnZihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhO3RoaXMuX3BhcnNlcj1udWxsfWZ1bmN0aW9uIGllKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGE7dGhpcy5fcGFyc2VyPW51bGx9ZnVuY3Rpb24gYWQoYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YX1mdW5jdGlvbiBqZShhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhfWZ1bmN0aW9uIEFkKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGF9ZnVuY3Rpb24gQygpe3RoaXMudHlwZT1cIkN1cnZlXCI7dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM9MjAwfWZ1bmN0aW9uIEJhKGEsYixjLGQsZSxmLFxuICAgIGcsaCl7Qy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkVsbGlwc2VDdXJ2ZVwiO3RoaXMuYVg9YXx8MDt0aGlzLmFZPWJ8fDA7dGhpcy54UmFkaXVzPWN8fDE7dGhpcy55UmFkaXVzPWR8fDE7dGhpcy5hU3RhcnRBbmdsZT1lfHwwO3RoaXMuYUVuZEFuZ2xlPWZ8fDIqTWF0aC5QSTt0aGlzLmFDbG9ja3dpc2U9Z3x8ITE7dGhpcy5hUm90YXRpb249aHx8MH1mdW5jdGlvbiBoYyhhLGIsYyxkLGUsZil7QmEuY2FsbCh0aGlzLGEsYixjLGMsZCxlLGYpO3RoaXMudHlwZT1cIkFyY0N1cnZlXCJ9ZnVuY3Rpb24ga2UoKXt2YXIgYT0wLGI9MCxjPTAsZD0wO3JldHVybntpbml0Q2F0bXVsbFJvbTpmdW5jdGlvbihlLGYsZyxoLGspe2U9ayooZy1lKTtoPWsqKGgtZik7YT1mO2I9ZTtjPS0zKmYrMypnLTIqZS1oO2Q9MipmLTIqZytlK2h9LGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTpmdW5jdGlvbihlLGYsZyxoLGssbSxxKXtlPSgoZi1lKS9rLShnLWUpLyhrK20pKyhnLWYpL20pKm07aD0oKGctZikvbS1cbiAgICAoaC1mKS8obStxKSsoaC1nKS9xKSptO2E9ZjtiPWU7Yz0tMypmKzMqZy0yKmUtaDtkPTIqZi0yKmcrZStofSxjYWxjOmZ1bmN0aW9uKGUpe3ZhciBmPWUqZTtyZXR1cm4gYStiKmUrYypmK2QqZiplfX19ZnVuY3Rpb24gY2EoYSxiLGMsZCl7Qy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkNhdG11bGxSb21DdXJ2ZTNcIjt0aGlzLnBvaW50cz1hfHxbXTt0aGlzLmNsb3NlZD1ifHwhMTt0aGlzLmN1cnZlVHlwZT1jfHxcImNlbnRyaXBldGFsXCI7dGhpcy50ZW5zaW9uPWR8fC41fWZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Yj0uNSooZC1iKTtlPS41KihlLWMpO3ZhciBmPWEqYTtyZXR1cm4oMipjLTIqZCtiK2UpKmEqZisoLTMqYyszKmQtMipiLWUpKmYrYiphK2N9ZnVuY3Rpb24gYmQoYSxiLGMsZCl7dmFyIGU9MS1hO3JldHVybiBlKmUqYisyKigxLWEpKmEqYythKmEqZH1mdW5jdGlvbiBjZChhLGIsYyxkLGUpe3ZhciBmPTEtYSxnPTEtYTtyZXR1cm4gZipmKmYqYiszKmcqZyphKmMrMyooMS1hKSpcbiAgICBhKmEqZCthKmEqYSplfWZ1bmN0aW9uIE9hKGEsYixjLGQpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDdWJpY0JlemllckN1cnZlXCI7dGhpcy52MD1hfHxuZXcgRDt0aGlzLnYxPWJ8fG5ldyBEO3RoaXMudjI9Y3x8bmV3IEQ7dGhpcy52Mz1kfHxuZXcgRH1mdW5jdGlvbiBWYShhLGIsYyxkKXtDLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ3ViaWNCZXppZXJDdXJ2ZTNcIjt0aGlzLnYwPWF8fG5ldyBwO3RoaXMudjE9Ynx8bmV3IHA7dGhpcy52Mj1jfHxuZXcgcDt0aGlzLnYzPWR8fG5ldyBwfWZ1bmN0aW9uIHlhKGEsYil7Qy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpbmVDdXJ2ZVwiO3RoaXMudjE9YXx8bmV3IEQ7dGhpcy52Mj1ifHxuZXcgRH1mdW5jdGlvbiBQYShhLGIpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lQ3VydmUzXCI7dGhpcy52MT1hfHxuZXcgcDt0aGlzLnYyPWJ8fG5ldyBwfWZ1bmN0aW9uIFFhKGEsYixjKXtDLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUXVhZHJhdGljQmV6aWVyQ3VydmVcIjtcbiAgICB0aGlzLnYwPWF8fG5ldyBEO3RoaXMudjE9Ynx8bmV3IEQ7dGhpcy52Mj1jfHxuZXcgRH1mdW5jdGlvbiBXYShhLGIsYyl7Qy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlF1YWRyYXRpY0JlemllckN1cnZlM1wiO3RoaXMudjA9YXx8bmV3IHA7dGhpcy52MT1ifHxuZXcgcDt0aGlzLnYyPWN8fG5ldyBwfWZ1bmN0aW9uIFJhKGEpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTcGxpbmVDdXJ2ZVwiO3RoaXMucG9pbnRzPWF8fFtdfWZ1bmN0aW9uIGJiKCl7Qy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN1cnZlUGF0aFwiO3RoaXMuY3VydmVzPVtdO3RoaXMuYXV0b0Nsb3NlPSExfWZ1bmN0aW9uIFNhKGEpe2JiLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUGF0aFwiO3RoaXMuY3VycmVudFBvaW50PW5ldyBEO2EmJnRoaXMuc2V0RnJvbVBvaW50cyhhKX1mdW5jdGlvbiBqYihhKXtTYS5jYWxsKHRoaXMsYSk7dGhpcy51dWlkPVEuZ2VuZXJhdGVVVUlEKCk7dGhpcy50eXBlPVwiU2hhcGVcIjt0aGlzLmhvbGVzPVxuICAgIFtdfWZ1bmN0aW9uIGRhKGEsYil7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpZ2h0XCI7dGhpcy5jb2xvcj1uZXcgSChhKTt0aGlzLmludGVuc2l0eT12b2lkIDAhPT1iP2I6MTt0aGlzLnJlY2VpdmVTaGFkb3c9dm9pZCAwfWZ1bmN0aW9uIEJkKGEsYixjKXtkYS5jYWxsKHRoaXMsYSxjKTt0aGlzLnR5cGU9XCJIZW1pc3BoZXJlTGlnaHRcIjt0aGlzLmNhc3RTaGFkb3c9dm9pZCAwO3RoaXMucG9zaXRpb24uY29weSh4LkRlZmF1bHRVcCk7dGhpcy51cGRhdGVNYXRyaXgoKTt0aGlzLmdyb3VuZENvbG9yPW5ldyBIKGIpfWZ1bmN0aW9uIEZiKGEpe3RoaXMuY2FtZXJhPWE7dGhpcy5iaWFzPTA7dGhpcy5yYWRpdXM9MTt0aGlzLm1hcFNpemU9bmV3IEQoNTEyLDUxMik7dGhpcy5tYXA9bnVsbDt0aGlzLm1hdHJpeD1uZXcgT31mdW5jdGlvbiBDZCgpe0ZiLmNhbGwodGhpcyxuZXcgYmEoNTAsMSwuNSw1MDApKX1mdW5jdGlvbiBEZChhLGIsYyxkLGUsZil7ZGEuY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVxuICAgIFwiU3BvdExpZ2h0XCI7dGhpcy5wb3NpdGlvbi5jb3B5KHguRGVmYXVsdFVwKTt0aGlzLnVwZGF0ZU1hdHJpeCgpO3RoaXMudGFyZ2V0PW5ldyB4O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicG93ZXJcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW50ZW5zaXR5Kk1hdGguUEl9LHNldDpmdW5jdGlvbihhKXt0aGlzLmludGVuc2l0eT1hL01hdGguUEl9fSk7dGhpcy5kaXN0YW5jZT12b2lkIDAhPT1jP2M6MDt0aGlzLmFuZ2xlPXZvaWQgMCE9PWQ/ZDpNYXRoLlBJLzM7dGhpcy5wZW51bWJyYT12b2lkIDAhPT1lP2U6MDt0aGlzLmRlY2F5PXZvaWQgMCE9PWY/ZjoxO3RoaXMuc2hhZG93PW5ldyBDZH1mdW5jdGlvbiBFZChhLGIsYyxkKXtkYS5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJQb2ludExpZ2h0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwb3dlclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gNCp0aGlzLmludGVuc2l0eSpNYXRoLlBJfSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5pbnRlbnNpdHk9XG4gICAgYS8oNCpNYXRoLlBJKX19KTt0aGlzLmRpc3RhbmNlPXZvaWQgMCE9PWM/YzowO3RoaXMuZGVjYXk9dm9pZCAwIT09ZD9kOjE7dGhpcy5zaGFkb3c9bmV3IEZiKG5ldyBiYSg5MCwxLC41LDUwMCkpfWZ1bmN0aW9uIEZkKCl7RmIuY2FsbCh0aGlzLG5ldyBMYigtNSw1LDUsLTUsLjUsNTAwKSl9ZnVuY3Rpb24gR2QoYSxiKXtkYS5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJEaXJlY3Rpb25hbExpZ2h0XCI7dGhpcy5wb3NpdGlvbi5jb3B5KHguRGVmYXVsdFVwKTt0aGlzLnVwZGF0ZU1hdHJpeCgpO3RoaXMudGFyZ2V0PW5ldyB4O3RoaXMuc2hhZG93PW5ldyBGZH1mdW5jdGlvbiBIZChhLGIpe2RhLmNhbGwodGhpcyxhLGIpO3RoaXMudHlwZT1cIkFtYmllbnRMaWdodFwiO3RoaXMuY2FzdFNoYWRvdz12b2lkIDB9ZnVuY3Rpb24gSWQoYSxiLGMsZCl7ZGEuY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiUmVjdEFyZWFMaWdodFwiO3RoaXMucG9zaXRpb24uc2V0KDAsMSwwKTt0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuICAgIHRoaXMud2lkdGg9dm9pZCAwIT09Yz9jOjEwO3RoaXMuaGVpZ2h0PXZvaWQgMCE9PWQ/ZDoxMH1mdW5jdGlvbiBKZChhLGIsYyxkKXtULmNhbGwodGhpcyxhLGIsYyxkKX1mdW5jdGlvbiBLZChhLGIsYyl7VC5jYWxsKHRoaXMsYSxiLGMpfWZ1bmN0aW9uIHBhKGEsYixjLGQpe3RoaXMucGFyYW1ldGVyUG9zaXRpb25zPWE7dGhpcy5fY2FjaGVkSW5kZXg9MDt0aGlzLnJlc3VsdEJ1ZmZlcj12b2lkIDAhPT1kP2Q6bmV3IGIuY29uc3RydWN0b3IoYyk7dGhpcy5zYW1wbGVWYWx1ZXM9Yjt0aGlzLnZhbHVlU2l6ZT1jfWZ1bmN0aW9uIExkKGEsYixjLGQpe3BhLmNhbGwodGhpcyxhLGIsYyxkKX1mdW5jdGlvbiBkZChhLGIsYyxkKXtULmNhbGwodGhpcyxhLGIsYyxkKX1mdW5jdGlvbiBNZChhLGIsYyxkKXtULmNhbGwodGhpcyxhLGIsYyxkKX1mdW5jdGlvbiBpYyhhLGIsYyxkKXtULmNhbGwodGhpcyxhLGIsYyxkKX1mdW5jdGlvbiBOZChhLGIsYyxkKXtwYS5jYWxsKHRoaXMsYSxiLGMsZCk7XG4gICAgdGhpcy5fb2Zmc2V0TmV4dD10aGlzLl93ZWlnaHROZXh0PXRoaXMuX29mZnNldFByZXY9dGhpcy5fd2VpZ2h0UHJldj0tMH1mdW5jdGlvbiBlZChhLGIsYyxkKXtwYS5jYWxsKHRoaXMsYSxiLGMsZCl9ZnVuY3Rpb24gT2QoYSxiLGMsZCl7cGEuY2FsbCh0aGlzLGEsYixjLGQpfWZ1bmN0aW9uIFQoYSxiLGMsZCl7aWYodm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlRIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIG5hbWUgaXMgdW5kZWZpbmVkXCIpO2lmKHZvaWQgMD09PWJ8fDA9PT1iLmxlbmd0aCl0aHJvdyBFcnJvcihcIlRIUkVFLktleWZyYW1lVHJhY2s6IG5vIGtleWZyYW1lcyBpbiB0cmFjayBuYW1lZCBcIithKTt0aGlzLm5hbWU9YTt0aGlzLnRpbWVzPWdhLmNvbnZlcnRBcnJheShiLHRoaXMuVGltZUJ1ZmZlclR5cGUpO3RoaXMudmFsdWVzPWdhLmNvbnZlcnRBcnJheShjLHRoaXMuVmFsdWVCdWZmZXJUeXBlKTt0aGlzLnNldEludGVycG9sYXRpb24oZHx8dGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbik7XG4gICAgdGhpcy52YWxpZGF0ZSgpO3RoaXMub3B0aW1pemUoKX1mdW5jdGlvbiBqYyhhLGIsYyxkKXtULmNhbGwodGhpcyxhLGIsYyxkKX1mdW5jdGlvbiBDYShhLGIsYyl7dGhpcy5uYW1lPWE7dGhpcy50cmFja3M9Yzt0aGlzLmR1cmF0aW9uPXZvaWQgMCE9PWI/YjotMTt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTswPnRoaXMuZHVyYXRpb24mJnRoaXMucmVzZXREdXJhdGlvbigpO3RoaXMub3B0aW1pemUoKX1mdW5jdGlvbiBQZChhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhO3RoaXMudGV4dHVyZXM9e319ZnVuY3Rpb24gbGUoYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YX1mdW5jdGlvbiBrYygpe3RoaXMub25Mb2FkU3RhcnQ9ZnVuY3Rpb24oKXt9O3RoaXMub25Mb2FkUHJvZ3Jlc3M9ZnVuY3Rpb24oKXt9O3RoaXMub25Mb2FkQ29tcGxldGU9ZnVuY3Rpb24oKXt9fWZ1bmN0aW9uIG1lKGEpe1wiYm9vbGVhblwiPT09dHlwZW9mIGEmJihjb25zb2xlLndhcm4oXCJUSFJFRS5KU09OTG9hZGVyOiBzaG93U3RhdHVzIHBhcmFtZXRlciBoYXMgYmVlbiByZW1vdmVkIGZyb20gY29uc3RydWN0b3IuXCIpLFxuICAgIGE9dm9pZCAwKTt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhO3RoaXMud2l0aENyZWRlbnRpYWxzPSExfWZ1bmN0aW9uIGpmKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGE7dGhpcy50ZXh0dXJlUGF0aD1cIlwifWZ1bmN0aW9uIG5lKGEpe1widW5kZWZpbmVkXCI9PT10eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAmJmNvbnNvbGUud2FybihcIlRIUkVFLkltYWdlQml0bWFwTG9hZGVyOiBjcmVhdGVJbWFnZUJpdG1hcCgpIG5vdCBzdXBwb3J0ZWQuXCIpO1widW5kZWZpbmVkXCI9PT10eXBlb2YgZmV0Y2gmJmNvbnNvbGUud2FybihcIlRIUkVFLkltYWdlQml0bWFwTG9hZGVyOiBmZXRjaCgpIG5vdCBzdXBwb3J0ZWQuXCIpO3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGE7dGhpcy5vcHRpb25zPXZvaWQgMH1mdW5jdGlvbiBvZSgpe3RoaXMudHlwZT1cIlNoYXBlUGF0aFwiO3RoaXMuc3ViUGF0aHM9W107dGhpcy5jdXJyZW50UGF0aD1udWxsfWZ1bmN0aW9uIHBlKGEpe3RoaXMudHlwZT1cIkZvbnRcIjtcbiAgICB0aGlzLmRhdGE9YX1mdW5jdGlvbiBrZihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhfWZ1bmN0aW9uIHFlKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGF9ZnVuY3Rpb24gbGYoKXt0aGlzLnR5cGU9XCJTdGVyZW9DYW1lcmFcIjt0aGlzLmFzcGVjdD0xO3RoaXMuZXllU2VwPS4wNjQ7dGhpcy5jYW1lcmFMPW5ldyBiYTt0aGlzLmNhbWVyYUwubGF5ZXJzLmVuYWJsZSgxKTt0aGlzLmNhbWVyYUwubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLmNhbWVyYVI9bmV3IGJhO3RoaXMuY2FtZXJhUi5sYXllcnMuZW5hYmxlKDIpO3RoaXMuY2FtZXJhUi5tYXRyaXhBdXRvVXBkYXRlPSExfWZ1bmN0aW9uIGZkKGEsYixjKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ3ViZUNhbWVyYVwiO3ZhciBkPW5ldyBiYSg5MCwxLGEsYik7ZC51cC5zZXQoMCwtMSwwKTtkLmxvb2tBdChuZXcgcCgxLDAsMCkpO3RoaXMuYWRkKGQpO3ZhciBlPW5ldyBiYSg5MCwxLGEsYik7ZS51cC5zZXQoMCwtMSxcbiAgICAwKTtlLmxvb2tBdChuZXcgcCgtMSwwLDApKTt0aGlzLmFkZChlKTt2YXIgZj1uZXcgYmEoOTAsMSxhLGIpO2YudXAuc2V0KDAsMCwxKTtmLmxvb2tBdChuZXcgcCgwLDEsMCkpO3RoaXMuYWRkKGYpO3ZhciBnPW5ldyBiYSg5MCwxLGEsYik7Zy51cC5zZXQoMCwwLC0xKTtnLmxvb2tBdChuZXcgcCgwLC0xLDApKTt0aGlzLmFkZChnKTt2YXIgaD1uZXcgYmEoOTAsMSxhLGIpO2gudXAuc2V0KDAsLTEsMCk7aC5sb29rQXQobmV3IHAoMCwwLDEpKTt0aGlzLmFkZChoKTt2YXIgaz1uZXcgYmEoOTAsMSxhLGIpO2sudXAuc2V0KDAsLTEsMCk7ay5sb29rQXQobmV3IHAoMCwwLC0xKSk7dGhpcy5hZGQoayk7dGhpcy5yZW5kZXJUYXJnZXQ9bmV3IEpiKGMsYyx7Zm9ybWF0OjEwMjIsbWFnRmlsdGVyOjEwMDYsbWluRmlsdGVyOjEwMDZ9KTt0aGlzLnJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWU9XCJDdWJlQ2FtZXJhXCI7dGhpcy51cGRhdGU9ZnVuY3Rpb24oYSxiKXtudWxsPT09dGhpcy5wYXJlbnQmJlxuICAgIHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTt2YXIgYz10aGlzLnJlbmRlclRhcmdldCxtPWMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7Yy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcz0hMTtjLmFjdGl2ZUN1YmVGYWNlPTA7YS5yZW5kZXIoYixkLGMpO2MuYWN0aXZlQ3ViZUZhY2U9MTthLnJlbmRlcihiLGUsYyk7Yy5hY3RpdmVDdWJlRmFjZT0yO2EucmVuZGVyKGIsZixjKTtjLmFjdGl2ZUN1YmVGYWNlPTM7YS5yZW5kZXIoYixnLGMpO2MuYWN0aXZlQ3ViZUZhY2U9NDthLnJlbmRlcihiLGgsYyk7Yy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcz1tO2MuYWN0aXZlQ3ViZUZhY2U9NTthLnJlbmRlcihiLGssYyk7YS5zZXRSZW5kZXJUYXJnZXQobnVsbCl9O3RoaXMuY2xlYXI9ZnVuY3Rpb24oYSxiLGMsZCl7Zm9yKHZhciBlPXRoaXMucmVuZGVyVGFyZ2V0LGY9MDs2PmY7ZisrKWUuYWN0aXZlQ3ViZUZhY2U9ZixhLnNldFJlbmRlclRhcmdldChlKSxhLmNsZWFyKGIsYyxkKTthLnNldFJlbmRlclRhcmdldChudWxsKX19XG4gICAgZnVuY3Rpb24gcmUoKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQXVkaW9MaXN0ZW5lclwiO3RoaXMuY29udGV4dD1zZS5nZXRDb250ZXh0KCk7dGhpcy5nYWluPXRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7dGhpcy5nYWluLmNvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKTt0aGlzLmZpbHRlcj1udWxsfWZ1bmN0aW9uIGxjKGEpe3guY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJBdWRpb1wiO3RoaXMuY29udGV4dD1hLmNvbnRleHQ7dGhpcy5nYWluPXRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7dGhpcy5nYWluLmNvbm5lY3QoYS5nZXRJbnB1dCgpKTt0aGlzLmF1dG9wbGF5PSExO3RoaXMuYnVmZmVyPW51bGw7dGhpcy5sb29wPSExO3RoaXMub2Zmc2V0PXRoaXMuc3RhcnRUaW1lPTA7dGhpcy5wbGF5YmFja1JhdGU9MTt0aGlzLmlzUGxheWluZz0hMTt0aGlzLmhhc1BsYXliYWNrQ29udHJvbD0hMDt0aGlzLnNvdXJjZVR5cGU9XCJlbXB0eVwiO3RoaXMuZmlsdGVycz1bXX1mdW5jdGlvbiB0ZShhKXtsYy5jYWxsKHRoaXMsXG4gICAgYSk7dGhpcy5wYW5uZXI9dGhpcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpO3RoaXMucGFubmVyLmNvbm5lY3QodGhpcy5nYWluKX1mdW5jdGlvbiB1ZShhLGIpe3RoaXMuYW5hbHlzZXI9YS5jb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7dGhpcy5hbmFseXNlci5mZnRTaXplPXZvaWQgMCE9PWI/YjoyMDQ4O3RoaXMuZGF0YT1uZXcgVWludDhBcnJheSh0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50KTthLmdldE91dHB1dCgpLmNvbm5lY3QodGhpcy5hbmFseXNlcil9ZnVuY3Rpb24gdmUoYSxiLGMpe3RoaXMuYmluZGluZz1hO3RoaXMudmFsdWVTaXplPWM7YT1GbG9hdDY0QXJyYXk7c3dpdGNoKGIpe2Nhc2UgXCJxdWF0ZXJuaW9uXCI6Yj10aGlzLl9zbGVycDticmVhaztjYXNlIFwic3RyaW5nXCI6Y2FzZSBcImJvb2xcIjphPUFycmF5O2I9dGhpcy5fc2VsZWN0O2JyZWFrO2RlZmF1bHQ6Yj10aGlzLl9sZXJwfXRoaXMuYnVmZmVyPW5ldyBhKDQqYyk7dGhpcy5fbWl4QnVmZmVyUmVnaW9uPVxuICAgIGI7dGhpcy5yZWZlcmVuY2VDb3VudD10aGlzLnVzZUNvdW50PXRoaXMuY3VtdWxhdGl2ZVdlaWdodD0wfWZ1bmN0aW9uIG1mKGEsYixjKXtjPWN8fHFhLnBhcnNlVHJhY2tOYW1lKGIpO3RoaXMuX3RhcmdldEdyb3VwPWE7dGhpcy5fYmluZGluZ3M9YS5zdWJzY3JpYmVfKGIsYyl9ZnVuY3Rpb24gcWEoYSxiLGMpe3RoaXMucGF0aD1iO3RoaXMucGFyc2VkUGF0aD1jfHxxYS5wYXJzZVRyYWNrTmFtZShiKTt0aGlzLm5vZGU9cWEuZmluZE5vZGUoYSx0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUpfHxhO3RoaXMucm9vdE5vZGU9YX1mdW5jdGlvbiBuZigpe3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMuX29iamVjdHM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTt0aGlzLm5DYWNoZWRPYmplY3RzXz0wO3ZhciBhPXt9O3RoaXMuX2luZGljZXNCeVVVSUQ9YTtmb3IodmFyIGI9MCxjPWFyZ3VtZW50cy5sZW5ndGg7YiE9PWM7KytiKWFbYXJndW1lbnRzW2JdLnV1aWRdPVxuICAgIGI7dGhpcy5fcGF0aHM9W107dGhpcy5fcGFyc2VkUGF0aHM9W107dGhpcy5fYmluZGluZ3M9W107dGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoPXt9O3ZhciBkPXRoaXM7dGhpcy5zdGF0cz17b2JqZWN0czp7Z2V0IHRvdGFsKCl7cmV0dXJuIGQuX29iamVjdHMubGVuZ3RofSxnZXQgaW5Vc2UoKXtyZXR1cm4gdGhpcy50b3RhbC1kLm5DYWNoZWRPYmplY3RzX319LGdldCBiaW5kaW5nc1Blck9iamVjdCgpe3JldHVybiBkLl9iaW5kaW5ncy5sZW5ndGh9fX1mdW5jdGlvbiBvZihhLGIsYyl7dGhpcy5fbWl4ZXI9YTt0aGlzLl9jbGlwPWI7dGhpcy5fbG9jYWxSb290PWN8fG51bGw7YT1iLnRyYWNrcztiPWEubGVuZ3RoO2M9QXJyYXkoYik7Zm9yKHZhciBkPXtlbmRpbmdTdGFydDoyNDAwLGVuZGluZ0VuZDoyNDAwfSxlPTA7ZSE9PWI7KytlKXt2YXIgZj1hW2VdLmNyZWF0ZUludGVycG9sYW50KG51bGwpO2NbZV09ZjtmLnNldHRpbmdzPWR9dGhpcy5faW50ZXJwb2xhbnRTZXR0aW5ncz1cbiAgICBkO3RoaXMuX2ludGVycG9sYW50cz1jO3RoaXMuX3Byb3BlcnR5QmluZGluZ3M9QXJyYXkoYik7dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ9dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ9dGhpcy5fYnlDbGlwQ2FjaGVJbmRleD10aGlzLl9jYWNoZUluZGV4PW51bGw7dGhpcy5sb29wPTIyMDE7dGhpcy5fbG9vcENvdW50PS0xO3RoaXMuX3N0YXJ0VGltZT1udWxsO3RoaXMudGltZT0wO3RoaXMuX2VmZmVjdGl2ZVdlaWdodD10aGlzLndlaWdodD10aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGU9dGhpcy50aW1lU2NhbGU9MTt0aGlzLnJlcGV0aXRpb25zPUluZmluaXR5O3RoaXMucGF1c2VkPSExO3RoaXMuZW5hYmxlZD0hMDt0aGlzLmNsYW1wV2hlbkZpbmlzaGVkPSExO3RoaXMuemVyb1Nsb3BlQXRFbmQ9dGhpcy56ZXJvU2xvcGVBdFN0YXJ0PSEwfWZ1bmN0aW9uIHdlKGEpe3RoaXMuX3Jvb3Q9YTt0aGlzLl9pbml0TWVtb3J5TWFuYWdlcigpO3RoaXMudGltZT10aGlzLl9hY2N1SW5kZXg9XG4gICAgMDt0aGlzLnRpbWVTY2FsZT0xfWZ1bmN0aW9uIFFkKGEsYil7XCJzdHJpbmdcIj09PXR5cGVvZiBhJiYoY29uc29sZS53YXJuKFwiVEhSRUUuVW5pZm9ybTogVHlwZSBwYXJhbWV0ZXIgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cIiksYT1iKTt0aGlzLnZhbHVlPWF9ZnVuY3Rpb24geGUoKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnlcIjt0aGlzLm1heEluc3RhbmNlZENvdW50PXZvaWQgMH1mdW5jdGlvbiB5ZShhLGIsYyxkKXt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLmRhdGE9YTt0aGlzLml0ZW1TaXplPWI7dGhpcy5vZmZzZXQ9Yzt0aGlzLm5vcm1hbGl6ZWQ9ITA9PT1kfWZ1bmN0aW9uIG1jKGEsYil7dGhpcy51dWlkPVEuZ2VuZXJhdGVVVUlEKCk7dGhpcy5hcnJheT1hO3RoaXMuc3RyaWRlPWI7dGhpcy5jb3VudD12b2lkIDAhPT1hP2EubGVuZ3RoL2I6MDt0aGlzLmR5bmFtaWM9ITE7dGhpcy51cGRhdGVSYW5nZT17b2Zmc2V0OjAsY291bnQ6LTF9O1xuICAgIHRoaXMub25VcGxvYWRDYWxsYmFjaz1mdW5jdGlvbigpe307dGhpcy52ZXJzaW9uPTB9ZnVuY3Rpb24gemUoYSxiLGMpe21jLmNhbGwodGhpcyxhLGIpO3RoaXMubWVzaFBlckF0dHJpYnV0ZT1jfHwxfWZ1bmN0aW9uIEFlKGEsYixjKXtNLmNhbGwodGhpcyxhLGIpO3RoaXMubWVzaFBlckF0dHJpYnV0ZT1jfHwxfWZ1bmN0aW9uIHBmKGEsYixjLGQpe3RoaXMucmF5PW5ldyBzYihhLGIpO3RoaXMubmVhcj1jfHwwO3RoaXMuZmFyPWR8fEluZmluaXR5O3RoaXMucGFyYW1zPXtNZXNoOnt9LExpbmU6e30sTE9EOnt9LFBvaW50czp7dGhyZXNob2xkOjF9LFNwcml0ZTp7fX07T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcy5wYXJhbXMse1BvaW50Q2xvdWQ6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlJheWNhc3RlcjogcGFyYW1zLlBvaW50Q2xvdWQgaGFzIGJlZW4gcmVuYW1lZCB0byBwYXJhbXMuUG9pbnRzLlwiKTtyZXR1cm4gdGhpcy5Qb2ludHN9fX0pfWZ1bmN0aW9uIHFmKGEsXG4gICAgYil7cmV0dXJuIGEuZGlzdGFuY2UtYi5kaXN0YW5jZX1mdW5jdGlvbiBCZShhLGIsYyxkKXtpZighMSE9PWEudmlzaWJsZSYmKGEucmF5Y2FzdChiLGMpLCEwPT09ZCkpe2E9YS5jaGlsZHJlbjtkPTA7Zm9yKHZhciBlPWEubGVuZ3RoO2Q8ZTtkKyspQmUoYVtkXSxiLGMsITApfX1mdW5jdGlvbiByZihhKXt0aGlzLmF1dG9TdGFydD12b2lkIDAhPT1hP2E6ITA7dGhpcy5lbGFwc2VkVGltZT10aGlzLm9sZFRpbWU9dGhpcy5zdGFydFRpbWU9MDt0aGlzLnJ1bm5pbmc9ITF9ZnVuY3Rpb24gc2YoYSxiLGMpe3RoaXMucmFkaXVzPXZvaWQgMCE9PWE/YToxO3RoaXMucGhpPXZvaWQgMCE9PWI/YjowO3RoaXMudGhldGE9dm9pZCAwIT09Yz9jOjA7cmV0dXJuIHRoaXN9ZnVuY3Rpb24gdGYoYSxiLGMpe3RoaXMucmFkaXVzPXZvaWQgMCE9PWE/YToxO3RoaXMudGhldGE9dm9pZCAwIT09Yj9iOjA7dGhpcy55PXZvaWQgMCE9PWM/YzowO3JldHVybiB0aGlzfWZ1bmN0aW9uIGdkKGEpe3guY2FsbCh0aGlzKTtcbiAgICB0aGlzLm1hdGVyaWFsPWE7dGhpcy5yZW5kZXI9ZnVuY3Rpb24oKXt9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe3RoaXMub2JqZWN0PWE7dGhpcy5zaXplPXZvaWQgMCE9PWI/YjoxO2E9dm9pZCAwIT09Yz9jOjE2NzExNjgwO2Q9dm9pZCAwIT09ZD9kOjE7Yj0wOyhjPXRoaXMub2JqZWN0Lmdlb21ldHJ5KSYmYy5pc0dlb21ldHJ5P2I9MypjLmZhY2VzLmxlbmd0aDpjJiZjLmlzQnVmZmVyR2VvbWV0cnkmJihiPWMuYXR0cmlidXRlcy5ub3JtYWwuY291bnQpO2M9bmV3IEU7Yj1uZXcgQig2KmIsMyk7Yy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLGIpO1guY2FsbCh0aGlzLGMsbmV3IFcoe2NvbG9yOmEsbGluZXdpZHRoOmR9KSk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMudXBkYXRlKCl9ZnVuY3Rpb24gbmMoYSxiKXt4LmNhbGwodGhpcyk7dGhpcy5saWdodD1hO3RoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT1cbiAgICAhMTt0aGlzLmNvbG9yPWI7YT1uZXcgRTtiPVswLDAsMCwwLDAsMSwwLDAsMCwxLDAsMSwwLDAsMCwtMSwwLDEsMCwwLDAsMCwxLDEsMCwwLDAsMCwtMSwxXTtmb3IodmFyIGM9MCxkPTE7MzI+YztjKyssZCsrKXt2YXIgZT1jLzMyKk1hdGguUEkqMixmPWQvMzIqTWF0aC5QSSoyO2IucHVzaChNYXRoLmNvcyhlKSxNYXRoLnNpbihlKSwxLE1hdGguY29zKGYpLE1hdGguc2luKGYpLDEpfWEuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihiLDMpKTtiPW5ldyBXKHtmb2c6ITF9KTt0aGlzLmNvbmU9bmV3IFgoYSxiKTt0aGlzLmFkZCh0aGlzLmNvbmUpO3RoaXMudXBkYXRlKCl9ZnVuY3Rpb24gdWYoYSl7dmFyIGI9W107YSYmYS5pc0JvbmUmJmIucHVzaChhKTtmb3IodmFyIGM9MDtjPGEuY2hpbGRyZW4ubGVuZ3RoO2MrKyliLnB1c2guYXBwbHkoYix1ZihhLmNoaWxkcmVuW2NdKSk7cmV0dXJuIGJ9ZnVuY3Rpb24gb2MoYSl7Zm9yKHZhciBiPXVmKGEpLGM9bmV3IEUsZD1bXSxlPVxuICAgIFtdLGY9bmV3IEgoMCwwLDEpLGc9bmV3IEgoMCwxLDApLGg9MDtoPGIubGVuZ3RoO2grKyl7dmFyIGs9YltoXTtrLnBhcmVudCYmay5wYXJlbnQuaXNCb25lJiYoZC5wdXNoKDAsMCwwKSxkLnB1c2goMCwwLDApLGUucHVzaChmLnIsZi5nLGYuYiksZS5wdXNoKGcucixnLmcsZy5iKSl9Yy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGQsMykpO2MuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgQihlLDMpKTtkPW5ldyBXKHt2ZXJ0ZXhDb2xvcnM6MixkZXB0aFRlc3Q6ITEsZGVwdGhXcml0ZTohMSx0cmFuc3BhcmVudDohMH0pO1guY2FsbCh0aGlzLGMsZCk7dGhpcy5yb290PWE7dGhpcy5ib25lcz1iO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExfWZ1bmN0aW9uIHBjKGEsYixjKXt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3RoaXMuY29sb3I9YzthPW5ldyB3YihiLDQsMik7Yj1uZXcgQWEoe3dpcmVmcmFtZTohMCxcbiAgICBmb2c6ITF9KTtyYS5jYWxsKHRoaXMsYSxiKTt0aGlzLm1hdHJpeD10aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLnVwZGF0ZSgpfWZ1bmN0aW9uIHFjKGEsYil7eC5jYWxsKHRoaXMpO3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5jb2xvcj1iO2E9bmV3IFcoe2ZvZzohMX0pO2I9bmV3IEU7Yi5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBNKG5ldyBGbG9hdDMyQXJyYXkoMTUpLDMpKTt0aGlzLmxpbmU9bmV3IHNhKGIsYSk7dGhpcy5hZGQodGhpcy5saW5lKTt0aGlzLnVwZGF0ZSgpfWZ1bmN0aW9uIHJjKGEsYixjKXt4LmNhbGwodGhpcyk7dGhpcy5saWdodD1hO3RoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT1cbiAgICAhMTt0aGlzLmNvbG9yPWM7YT1uZXcgdWIoYik7YS5yb3RhdGVZKC41Kk1hdGguUEkpO3RoaXMubWF0ZXJpYWw9bmV3IEFhKHt3aXJlZnJhbWU6ITAsZm9nOiExfSk7dm9pZCAwPT09dGhpcy5jb2xvciYmKHRoaXMubWF0ZXJpYWwudmVydGV4Q29sb3JzPTIpO2I9YS5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKTtiPW5ldyBGbG9hdDMyQXJyYXkoMypiLmNvdW50KTthLmFkZEF0dHJpYnV0ZShcImNvbG9yXCIsbmV3IE0oYiwzKSk7dGhpcy5hZGQobmV3IHJhKGEsdGhpcy5tYXRlcmlhbCkpO3RoaXMudXBkYXRlKCl9ZnVuY3Rpb24gaWQoYSxiLGMsZCl7YT1hfHwxMDtiPWJ8fDEwO2M9bmV3IEgodm9pZCAwIT09Yz9jOjQ0NzM5MjQpO2Q9bmV3IEgodm9pZCAwIT09ZD9kOjg5NDc4NDgpO3ZhciBlPWIvMixmPWEvYixnPWEvMjthPVtdO2Zvcih2YXIgaD1bXSxrPTAsbT0wLHE9LWc7azw9YjtrKysscSs9Zil7YS5wdXNoKC1nLDAscSxnLDAscSk7YS5wdXNoKHEsMCwtZyxxLDAsZyk7dmFyIG49XG4gICAgaz09PWU/YzpkO24udG9BcnJheShoLG0pO20rPTM7bi50b0FycmF5KGgsbSk7bSs9MztuLnRvQXJyYXkoaCxtKTttKz0zO24udG9BcnJheShoLG0pO20rPTN9Yj1uZXcgRTtiLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoYSwzKSk7Yi5hZGRBdHRyaWJ1dGUoXCJjb2xvclwiLG5ldyBCKGgsMykpO2M9bmV3IFcoe3ZlcnRleENvbG9yczoyfSk7WC5jYWxsKHRoaXMsYixjKX1mdW5jdGlvbiBSZChhLGIsYyxkLGUsZil7YT1hfHwxMDtiPWJ8fDE2O2M9Y3x8ODtkPWR8fDY0O2U9bmV3IEgodm9pZCAwIT09ZT9lOjQ0NzM5MjQpO2Y9bmV3IEgodm9pZCAwIT09Zj9mOjg5NDc4NDgpO3ZhciBnPVtdLGg9W10saztmb3Ioaz0wO2s8PWI7aysrKXt2YXIgbT1rL2IqMipNYXRoLlBJO3ZhciBxPU1hdGguc2luKG0pKmE7bT1NYXRoLmNvcyhtKSphO2cucHVzaCgwLDAsMCk7Zy5wdXNoKHEsMCxtKTt2YXIgbj1rJjE/ZTpmO2gucHVzaChuLnIsbi5nLG4uYik7aC5wdXNoKG4ucixuLmcsbi5iKX1mb3Ioaz1cbiAgICAwO2s8PWM7aysrKXtuPWsmMT9lOmY7dmFyIGw9YS1hL2Mqaztmb3IoYj0wO2I8ZDtiKyspbT1iL2QqMipNYXRoLlBJLHE9TWF0aC5zaW4obSkqbCxtPU1hdGguY29zKG0pKmwsZy5wdXNoKHEsMCxtKSxoLnB1c2gobi5yLG4uZyxuLmIpLG09KGIrMSkvZCoyKk1hdGguUEkscT1NYXRoLnNpbihtKSpsLG09TWF0aC5jb3MobSkqbCxnLnB1c2gocSwwLG0pLGgucHVzaChuLnIsbi5nLG4uYil9YT1uZXcgRTthLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoZywzKSk7YS5hZGRBdHRyaWJ1dGUoXCJjb2xvclwiLG5ldyBCKGgsMykpO2c9bmV3IFcoe3ZlcnRleENvbG9yczoyfSk7WC5jYWxsKHRoaXMsYSxnKX1mdW5jdGlvbiBqZChhLGIsYyxkKXt0aGlzLm9iamVjdD1hO3RoaXMuc2l6ZT12b2lkIDAhPT1iP2I6MTthPXZvaWQgMCE9PWM/YzoxNjc3Njk2MDtkPXZvaWQgMCE9PWQ/ZDoxO2I9MDsoYz10aGlzLm9iamVjdC5nZW9tZXRyeSkmJmMuaXNHZW9tZXRyeT9iPWMuZmFjZXMubGVuZ3RoOlxuICAgIGNvbnNvbGUud2FybihcIlRIUkVFLkZhY2VOb3JtYWxzSGVscGVyOiBvbmx5IFRIUkVFLkdlb21ldHJ5IGlzIHN1cHBvcnRlZC4gVXNlIFRIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIsIGluc3RlYWQuXCIpO2M9bmV3IEU7Yj1uZXcgQig2KmIsMyk7Yy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLGIpO1guY2FsbCh0aGlzLGMsbmV3IFcoe2NvbG9yOmEsbGluZXdpZHRoOmR9KSk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMudXBkYXRlKCl9ZnVuY3Rpb24gc2MoYSxiLGMpe3guY2FsbCh0aGlzKTt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMuY29sb3I9Yzt2b2lkIDA9PT1iJiYoYj0xKTthPW5ldyBFO2EuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihbLWIsYiwwLGIsYiwwLGIsLWIsMCwtYiwtYiwwLC1iLGIsMF0sMykpO2I9bmV3IFcoe2ZvZzohMX0pO1xuICAgIHRoaXMubGlnaHRQbGFuZT1uZXcgc2EoYSxiKTt0aGlzLmFkZCh0aGlzLmxpZ2h0UGxhbmUpO2E9bmV3IEU7YS5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKFswLDAsMCwwLDAsMV0sMykpO3RoaXMudGFyZ2V0TGluZT1uZXcgc2EoYSxiKTt0aGlzLmFkZCh0aGlzLnRhcmdldExpbmUpO3RoaXMudXBkYXRlKCl9ZnVuY3Rpb24ga2QoYSl7ZnVuY3Rpb24gYihhLGIsZCl7YyhhLGQpO2MoYixkKX1mdW5jdGlvbiBjKGEsYil7Zi5wdXNoKDAsMCwwKTtnLnB1c2goYi5yLGIuZyxiLmIpO3ZvaWQgMD09PWhbYV0mJihoW2FdPVtdKTtoW2FdLnB1c2goZi5sZW5ndGgvMy0xKX12YXIgZD1uZXcgRSxlPW5ldyBXKHtjb2xvcjoxNjc3NzIxNSx2ZXJ0ZXhDb2xvcnM6MX0pLGY9W10sZz1bXSxoPXt9LGs9bmV3IEgoMTY3NTUyMDApLG09bmV3IEgoMTY3MTE2ODApLHE9bmV3IEgoNDM3NzUpLGw9bmV3IEgoMTY3NzcyMTUpLHU9bmV3IEgoMzM1NTQ0Myk7YihcIm4xXCIsXCJuMlwiLGspO2IoXCJuMlwiLFxuICAgIFwibjRcIixrKTtiKFwibjRcIixcIm4zXCIsayk7YihcIm4zXCIsXCJuMVwiLGspO2IoXCJmMVwiLFwiZjJcIixrKTtiKFwiZjJcIixcImY0XCIsayk7YihcImY0XCIsXCJmM1wiLGspO2IoXCJmM1wiLFwiZjFcIixrKTtiKFwibjFcIixcImYxXCIsayk7YihcIm4yXCIsXCJmMlwiLGspO2IoXCJuM1wiLFwiZjNcIixrKTtiKFwibjRcIixcImY0XCIsayk7YihcInBcIixcIm4xXCIsbSk7YihcInBcIixcIm4yXCIsbSk7YihcInBcIixcIm4zXCIsbSk7YihcInBcIixcIm40XCIsbSk7YihcInUxXCIsXCJ1MlwiLHEpO2IoXCJ1MlwiLFwidTNcIixxKTtiKFwidTNcIixcInUxXCIscSk7YihcImNcIixcInRcIixsKTtiKFwicFwiLFwiY1wiLHUpO2IoXCJjbjFcIixcImNuMlwiLHUpO2IoXCJjbjNcIixcImNuNFwiLHUpO2IoXCJjZjFcIixcImNmMlwiLHUpO2IoXCJjZjNcIixcImNmNFwiLHUpO2QuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihmLDMpKTtkLmFkZEF0dHJpYnV0ZShcImNvbG9yXCIsbmV3IEIoZywzKSk7WC5jYWxsKHRoaXMsZCxlKTt0aGlzLmNhbWVyYT1hO3RoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgmJnRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLnBvaW50TWFwPWg7dGhpcy51cGRhdGUoKX1mdW5jdGlvbiBHYihhLGIpe3RoaXMub2JqZWN0PWE7dm9pZCAwPT09YiYmKGI9MTY3NzY5NjApO2E9bmV3IFVpbnQxNkFycmF5KFswLDEsMSwyLDIsMywzLDAsNCw1LDUsNiw2LDcsNyw0LDAsNCwxLDUsMiw2LDMsN10pO3ZhciBjPW5ldyBGbG9hdDMyQXJyYXkoMjQpLGQ9bmV3IEU7ZC5zZXRJbmRleChuZXcgTShhLDEpKTtkLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IE0oYywzKSk7WC5jYWxsKHRoaXMsZCxuZXcgVyh7Y29sb3I6Yn0pKTt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy51cGRhdGUoKX1mdW5jdGlvbiBsZChhLGIpe3RoaXMudHlwZT1cIkJveDNIZWxwZXJcIjt0aGlzLmJveD1hO2E9dm9pZCAwIT09Yj9iOjE2Nzc2OTYwO2I9bmV3IFVpbnQxNkFycmF5KFswLDEsMSwyLDIsMywzLDAsNCw1LDUsNiw2LDcsNyw0LDAsXG4gICAgNCwxLDUsMiw2LDMsN10pO3ZhciBjPW5ldyBFO2Muc2V0SW5kZXgobmV3IE0oYiwxKSk7Yy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKFsxLDEsMSwtMSwxLDEsLTEsLTEsMSwxLC0xLDEsMSwxLC0xLC0xLDEsLTEsLTEsLTEsLTEsMSwtMSwtMV0sMykpO1guY2FsbCh0aGlzLGMsbmV3IFcoe2NvbG9yOmF9KSk7dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKX1mdW5jdGlvbiBtZChhLGIsYyl7dGhpcy50eXBlPVwiUGxhbmVIZWxwZXJcIjt0aGlzLnBsYW5lPWE7dGhpcy5zaXplPXZvaWQgMD09PWI/MTpiO2E9dm9pZCAwIT09Yz9jOjE2Nzc2OTYwO2I9bmV3IEU7Yi5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKFsxLC0xLDEsLTEsMSwxLC0xLC0xLDEsMSwxLDEsLTEsMSwxLC0xLC0xLDEsMSwtMSwxLDEsMSwxLDAsMCwxLDAsMCwwXSwzKSk7Yi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtzYS5jYWxsKHRoaXMsYixuZXcgVyh7Y29sb3I6YX0pKTtiPW5ldyBFO1xuICAgIGIuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihbMSwxLDEsLTEsMSwxLC0xLC0xLDEsMSwxLDEsLTEsLTEsMSwxLC0xLDFdLDMpKTtiLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO3RoaXMuYWRkKG5ldyByYShiLG5ldyBBYSh7Y29sb3I6YSxvcGFjaXR5Oi4yLHRyYW5zcGFyZW50OiEwLGRlcHRoV3JpdGU6ITF9KSkpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSxmKXt4LmNhbGwodGhpcyk7dm9pZCAwPT09ZCYmKGQ9MTY3NzY5NjApO3ZvaWQgMD09PWMmJihjPTEpO3ZvaWQgMD09PWUmJihlPS4yKmMpO3ZvaWQgMD09PWYmJihmPS4yKmUpO3ZvaWQgMD09PVNkJiYoU2Q9bmV3IEUsU2QuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihbMCwwLDAsMCwxLDBdLDMpKSxDZT1uZXcgYWIoMCwuNSwxLDUsMSksQ2UudHJhbnNsYXRlKDAsLS41LDApKTt0aGlzLnBvc2l0aW9uLmNvcHkoYik7dGhpcy5saW5lPW5ldyBzYShTZCxuZXcgVyh7Y29sb3I6ZH0pKTt0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZT1cbiAgICAhMTt0aGlzLmFkZCh0aGlzLmxpbmUpO3RoaXMuY29uZT1uZXcgcmEoQ2UsbmV3IEFhKHtjb2xvcjpkfSkpO3RoaXMuY29uZS5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMuYWRkKHRoaXMuY29uZSk7dGhpcy5zZXREaXJlY3Rpb24oYSk7dGhpcy5zZXRMZW5ndGgoYyxlLGYpfWZ1bmN0aW9uIG5kKGEpe2E9YXx8MTt2YXIgYj1bMCwwLDAsYSwwLDAsMCwwLDAsMCxhLDAsMCwwLDAsMCwwLGFdO2E9bmV3IEU7YS5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGIsMykpO2EuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgQihbMSwwLDAsMSwuNiwwLDAsMSwwLC42LDEsMCwwLDAsMSwwLC42LDFdLDMpKTtiPW5ldyBXKHt2ZXJ0ZXhDb2xvcnM6Mn0pO1guY2FsbCh0aGlzLGEsYil9ZnVuY3Rpb24gdmYoYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQ2xvc2VkU3BsaW5lQ3VydmUzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuXCIpO2NhLmNhbGwodGhpcyxcbiAgICBhKTt0aGlzLnR5cGU9XCJjYXRtdWxscm9tXCI7dGhpcy5jbG9zZWQ9ITB9ZnVuY3Rpb24gd2YoYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuU3BsaW5lQ3VydmUzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuXCIpO2NhLmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJjYXRtdWxscm9tXCJ9ZnVuY3Rpb24gRGUoYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuU3BsaW5lIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuXCIpO2NhLmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJjYXRtdWxscm9tXCJ9dm9pZCAwPT09TnVtYmVyLkVQU0lMT04mJihOdW1iZXIuRVBTSUxPTj1NYXRoLnBvdygyLC01MikpO3ZvaWQgMD09PU51bWJlci5pc0ludGVnZXImJihOdW1iZXIuaXNJbnRlZ2VyPWZ1bmN0aW9uKGEpe3JldHVyblwibnVtYmVyXCI9PT10eXBlb2YgYSYmaXNGaW5pdGUoYSkmJk1hdGguZmxvb3IoYSk9PT1hfSk7dm9pZCAwPT09XG4gICAgTWF0aC5zaWduJiYoTWF0aC5zaWduPWZ1bmN0aW9uKGEpe3JldHVybiAwPmE/LTE6MDxhPzE6K2F9KTshMT09PVwibmFtZVwiaW4gRnVuY3Rpb24ucHJvdG90eXBlJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLFwibmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uXFxzKihbXlxcKFxcc10qKS8pWzFdfX0pO3ZvaWQgMD09PU9iamVjdC5hc3NpZ24mJmZ1bmN0aW9uKCl7T2JqZWN0LmFzc2lnbj1mdW5jdGlvbihhKXtpZih2b2lkIDA9PT1hfHxudWxsPT09YSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0XCIpO2Zvcih2YXIgYj1PYmplY3QoYSksYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspe3ZhciBkPWFyZ3VtZW50c1tjXTtpZih2b2lkIDAhPT1kJiZudWxsIT09ZClmb3IodmFyIGUgaW4gZClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCxcbiAgICBlKSYmKGJbZV09ZFtlXSl9cmV0dXJuIGJ9fSgpO09iamVjdC5hc3NpZ24oemEucHJvdG90eXBlLHthZGRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09dGhpcy5fbGlzdGVuZXJzJiYodGhpcy5fbGlzdGVuZXJzPXt9KTt2YXIgYz10aGlzLl9saXN0ZW5lcnM7dm9pZCAwPT09Y1thXSYmKGNbYV09W10pOy0xPT09Y1thXS5pbmRleE9mKGIpJiZjW2FdLnB1c2goYil9LGhhc0V2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDA9PT10aGlzLl9saXN0ZW5lcnMpcmV0dXJuITE7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO3JldHVybiB2b2lkIDAhPT1jW2FdJiYtMSE9PWNbYV0uaW5kZXhPZihiKX0scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe3ZvaWQgMCE9PXRoaXMuX2xpc3RlbmVycyYmKGE9dGhpcy5fbGlzdGVuZXJzW2FdLHZvaWQgMCE9PWEmJihiPWEuaW5kZXhPZihiKSwtMSE9PWImJmEuc3BsaWNlKGIsMSkpKX0sZGlzcGF0Y2hFdmVudDpmdW5jdGlvbihhKXtpZih2b2lkIDAhPT1cbiAgICB0aGlzLl9saXN0ZW5lcnMpe3ZhciBiPXRoaXMuX2xpc3RlbmVyc1thLnR5cGVdO2lmKHZvaWQgMCE9PWIpe2EudGFyZ2V0PXRoaXM7Zm9yKHZhciBiPWIuc2xpY2UoMCksYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKyliW2NdLmNhbGwodGhpcyxhKX19fX0pO3ZhciBRPXtERUcyUkFEOk1hdGguUEkvMTgwLFJBRDJERUc6MTgwL01hdGguUEksZ2VuZXJhdGVVVUlEOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9MDsyNTY+YjtiKyspYVtiXT0oMTY+Yj9cIjBcIjpcIlwiKStiLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBiPTQyOTQ5NjcyOTUqTWF0aC5yYW5kb20oKXwwLGQ9NDI5NDk2NzI5NSpNYXRoLnJhbmRvbSgpfDAsZT00Mjk0OTY3Mjk1Kk1hdGgucmFuZG9tKCl8MCxmPTQyOTQ5NjcyOTUqTWF0aC5yYW5kb20oKXwwO3JldHVybiBhW2ImMjU1XSthW2I+PjgmMjU1XSthW2I+PjE2JjI1NV0rYVtiPj4yNCYyNTVdK1wiLVwiK2FbZCYyNTVdK2FbZD4+OCZcbiAgICAyNTVdK1wiLVwiK2FbZD4+MTYmMTV8NjRdK2FbZD4+MjQmMjU1XStcIi1cIithW2UmNjN8MTI4XSthW2U+PjgmMjU1XStcIi1cIithW2U+PjE2JjI1NV0rYVtlPj4yNCYyNTVdK2FbZiYyNTVdK2FbZj4+OCYyNTVdK2FbZj4+MTYmMjU1XSthW2Y+PjI0JjI1NV19fSgpLGNsYW1wOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gTWF0aC5tYXgoYixNYXRoLm1pbihjLGEpKX0sZXVjbGlkZWFuTW9kdWxvOmZ1bmN0aW9uKGEsYil7cmV0dXJuKGElYitiKSVifSxtYXBMaW5lYXI6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZCsoYS1iKSooZS1kKS8oYy1iKX0sbGVycDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuKDEtYykqYStjKmJ9LHNtb290aHN0ZXA6ZnVuY3Rpb24oYSxiLGMpe2lmKGE8PWIpcmV0dXJuIDA7aWYoYT49YylyZXR1cm4gMTthPShhLWIpLyhjLWIpO3JldHVybiBhKmEqKDMtMiphKX0sc21vb3RoZXJzdGVwOmZ1bmN0aW9uKGEsYixjKXtpZihhPD1iKXJldHVybiAwO2lmKGE+PWMpcmV0dXJuIDE7XG4gICAgYT0oYS1iKS8oYy1iKTtyZXR1cm4gYSphKmEqKGEqKDYqYS0xNSkrMTApfSxyYW5kSW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGErTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihiLWErMSkpfSxyYW5kRmxvYXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYStNYXRoLnJhbmRvbSgpKihiLWEpfSxyYW5kRmxvYXRTcHJlYWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEqKC41LU1hdGgucmFuZG9tKCkpfSxkZWdUb1JhZDpmdW5jdGlvbihhKXtyZXR1cm4gYSpRLkRFRzJSQUR9LHJhZFRvRGVnOmZ1bmN0aW9uKGEpe3JldHVybiBhKlEuUkFEMkRFR30saXNQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe3JldHVybiAwPT09KGEmYS0xKSYmMCE9PWF9LGNlaWxQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLnBvdygyLE1hdGguY2VpbChNYXRoLmxvZyhhKS9NYXRoLkxOMikpfSxmbG9vclBvd2VyT2ZUd286ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGgucG93KDIsTWF0aC5mbG9vcihNYXRoLmxvZyhhKS9cbiAgICBNYXRoLkxOMikpfX07T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRC5wcm90b3R5cGUse3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54fSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy54PWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnl9LHNldDpmdW5jdGlvbihhKXt0aGlzLnk9YX19fSk7T2JqZWN0LmFzc2lnbihELnByb3RvdHlwZSx7aXNWZWN0b3IyOiEwLHNldDpmdW5jdGlvbihhLGIpe3RoaXMueD1hO3RoaXMueT1iO3JldHVybiB0aGlzfSxzZXRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy55PXRoaXMueD1hO3JldHVybiB0aGlzfSxzZXRYOmZ1bmN0aW9uKGEpe3RoaXMueD1hO3JldHVybiB0aGlzfSxzZXRZOmZ1bmN0aW9uKGEpe3RoaXMueT1hO3JldHVybiB0aGlzfSxzZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAwOnRoaXMueD1iO2JyZWFrO2Nhc2UgMTp0aGlzLnk9YjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIitcbiAgICBhKTt9cmV0dXJuIHRoaXN9LGdldENvbXBvbmVudDpmdW5jdGlvbihhKXtzd2l0Y2goYSl7Y2FzZSAwOnJldHVybiB0aGlzLng7Y2FzZSAxOnJldHVybiB0aGlzLnk7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy54LHRoaXMueSl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy54PWEueDt0aGlzLnk9YS55O3JldHVybiB0aGlzfSxhZGQ6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IyOiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuYWRkVmVjdG9ycyhhLGIpO3RoaXMueCs9YS54O3RoaXMueSs9YS55O3JldHVybiB0aGlzfSxhZGRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54Kz1hO3RoaXMueSs9YTtyZXR1cm4gdGhpc30sXG4gICAgYWRkVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3JldHVybiB0aGlzfSxhZGRTY2FsZWRWZWN0b3I6ZnVuY3Rpb24oYSxiKXt0aGlzLngrPWEueCpiO3RoaXMueSs9YS55KmI7cmV0dXJuIHRoaXN9LHN1YjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5zdWJWZWN0b3JzKGEsYik7dGhpcy54LT1hLng7dGhpcy55LT1hLnk7cmV0dXJuIHRoaXN9LHN1YlNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngtPWE7dGhpcy55LT1hO3JldHVybiB0aGlzfSxzdWJWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueC1iLng7dGhpcy55PWEueS1iLnk7cmV0dXJuIHRoaXN9LG11bHRpcGx5OmZ1bmN0aW9uKGEpe3RoaXMueCo9YS54O3RoaXMueSo9XG4gICAgYS55O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPWE7dGhpcy55Kj1hO3JldHVybiB0aGlzfSxkaXZpZGU6ZnVuY3Rpb24oYSl7dGhpcy54Lz1hLng7dGhpcy55Lz1hLnk7cmV0dXJuIHRoaXN9LGRpdmlkZVNjYWxhcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxL2EpfSxhcHBseU1hdHJpeDM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55O2E9YS5lbGVtZW50czt0aGlzLng9YVswXSpiK2FbM10qYythWzZdO3RoaXMueT1hWzFdKmIrYVs0XSpjK2FbN107cmV0dXJuIHRoaXN9LG1pbjpmdW5jdGlvbihhKXt0aGlzLng9TWF0aC5taW4odGhpcy54LGEueCk7dGhpcy55PU1hdGgubWluKHRoaXMueSxhLnkpO3JldHVybiB0aGlzfSxtYXg6ZnVuY3Rpb24oYSl7dGhpcy54PU1hdGgubWF4KHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1heCh0aGlzLnksYS55KTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oYSxcbiAgICBiKXt0aGlzLng9TWF0aC5tYXgoYS54LE1hdGgubWluKGIueCx0aGlzLngpKTt0aGlzLnk9TWF0aC5tYXgoYS55LE1hdGgubWluKGIueSx0aGlzLnkpKTtyZXR1cm4gdGhpc30sY2xhbXBTY2FsYXI6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgRCxiPW5ldyBEO3JldHVybiBmdW5jdGlvbihjLGQpe2Euc2V0KGMsYyk7Yi5zZXQoZCxkKTtyZXR1cm4gdGhpcy5jbGFtcChhLGIpfX0oKSxjbGFtcExlbmd0aDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMubGVuZ3RoKCk7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKGN8fDEpLm11bHRpcGx5U2NhbGFyKE1hdGgubWF4KGEsTWF0aC5taW4oYixjKSkpfSxmbG9vcjpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PU1hdGguZmxvb3IodGhpcy55KTtyZXR1cm4gdGhpc30sY2VpbDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmNlaWwodGhpcy54KTt0aGlzLnk9TWF0aC5jZWlsKHRoaXMueSk7cmV0dXJuIHRoaXN9LHJvdW5kOmZ1bmN0aW9uKCl7dGhpcy54PVxuICAgIE1hdGgucm91bmQodGhpcy54KTt0aGlzLnk9TWF0aC5yb3VuZCh0aGlzLnkpO3JldHVybiB0aGlzfSxyb3VuZFRvWmVybzpmdW5jdGlvbigpe3RoaXMueD0wPnRoaXMueD9NYXRoLmNlaWwodGhpcy54KTpNYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PTA+dGhpcy55P01hdGguY2VpbCh0aGlzLnkpOk1hdGguZmxvb3IodGhpcy55KTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy54PS10aGlzLng7dGhpcy55PS10aGlzLnk7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54KmEueCt0aGlzLnkqYS55fSxsZW5ndGhTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnl9LGxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55KX0sbWFuaGF0dGFuTGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguYWJzKHRoaXMueCkrTWF0aC5hYnModGhpcy55KX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCl8fFxuICAgIDEpfSxhbmdsZTpmdW5jdGlvbigpe3ZhciBhPU1hdGguYXRhbjIodGhpcy55LHRoaXMueCk7MD5hJiYoYSs9MipNYXRoLlBJKTtyZXR1cm4gYX0sZGlzdGFuY2VUbzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoYSkpfSxkaXN0YW5jZVRvU3F1YXJlZDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngtYS54O2E9dGhpcy55LWEueTtyZXR1cm4gYipiK2EqYX0sbWFuaGF0dGFuRGlzdGFuY2VUbzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5hYnModGhpcy54LWEueCkrTWF0aC5hYnModGhpcy55LWEueSl9LHNldExlbmd0aDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcihhKX0sbGVycDpmdW5jdGlvbihhLGIpe3RoaXMueCs9KGEueC10aGlzLngpKmI7dGhpcy55Kz0oYS55LXRoaXMueSkqYjtyZXR1cm4gdGhpc30sbGVycFZlY3RvcnM6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLnN1YlZlY3RvcnMoYixcbiAgICBhKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSl9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS54PT09dGhpcy54JiZhLnk9PT10aGlzLnl9LGZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMueD1hW2JdO3RoaXMueT1hW2IrMV07cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7YVtiXT10aGlzLng7YVtiKzFdPXRoaXMueTtyZXR1cm4gYX0sZnJvbUJ1ZmZlckF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7dm9pZCAwIT09YyYmY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMjogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLlwiKTt0aGlzLng9YS5nZXRYKGIpO3RoaXMueT1hLmdldFkoYik7cmV0dXJuIHRoaXN9LHJvdGF0ZUFyb3VuZDpmdW5jdGlvbihhLGIpe3ZhciBjPU1hdGguY29zKGIpO2I9TWF0aC5zaW4oYik7dmFyIGQ9XG4gICAgdGhpcy54LWEueCxlPXRoaXMueS1hLnk7dGhpcy54PWQqYy1lKmIrYS54O3RoaXMueT1kKmIrZSpjK2EueTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKE8ucHJvdG90eXBlLHtpc01hdHJpeDQ6ITAsc2V0OmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrLG0scSxsLHUscix0LHApe3ZhciBuPXRoaXMuZWxlbWVudHM7blswXT1hO25bNF09YjtuWzhdPWM7blsxMl09ZDtuWzFdPWU7bls1XT1mO25bOV09ZztuWzEzXT1oO25bMl09aztuWzZdPW07blsxMF09cTtuWzE0XT1sO25bM109dTtuWzddPXI7blsxMV09dDtuWzE1XT1wO3JldHVybiB0aGlzfSxpZGVudGl0eTpmdW5jdGlvbigpe3RoaXMuc2V0KDEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgTykuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpfSxjb3B5OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YT1hLmVsZW1lbnRzO2JbMF09XG4gICAgYVswXTtiWzFdPWFbMV07YlsyXT1hWzJdO2JbM109YVszXTtiWzRdPWFbNF07Yls1XT1hWzVdO2JbNl09YVs2XTtiWzddPWFbN107Yls4XT1hWzhdO2JbOV09YVs5XTtiWzEwXT1hWzEwXTtiWzExXT1hWzExXTtiWzEyXT1hWzEyXTtiWzEzXT1hWzEzXTtiWzE0XT1hWzE0XTtiWzE1XT1hWzE1XTtyZXR1cm4gdGhpc30sY29weVBvc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YT1hLmVsZW1lbnRzO2JbMTJdPWFbMTJdO2JbMTNdPWFbMTNdO2JbMTRdPWFbMTRdO3JldHVybiB0aGlzfSxleHRyYWN0QmFzaXM6ZnVuY3Rpb24oYSxiLGMpe2Euc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLDApO2Iuc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLDEpO2Muc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLDIpO3JldHVybiB0aGlzfSxtYWtlQmFzaXM6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc2V0KGEueCxiLngsYy54LDAsYS55LGIueSxjLnksMCxhLnosYi56LGMueiwwLDAsMCwwLFxuICAgIDEpO3JldHVybiB0aGlzfSxleHRyYWN0Um90YXRpb246ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5lbGVtZW50cyxkPWIuZWxlbWVudHMsZT0xL2Euc2V0RnJvbU1hdHJpeENvbHVtbihiLDApLmxlbmd0aCgpLGY9MS9hLnNldEZyb21NYXRyaXhDb2x1bW4oYiwxKS5sZW5ndGgoKTtiPTEvYS5zZXRGcm9tTWF0cml4Q29sdW1uKGIsMikubGVuZ3RoKCk7Y1swXT1kWzBdKmU7Y1sxXT1kWzFdKmU7Y1syXT1kWzJdKmU7Y1s0XT1kWzRdKmY7Y1s1XT1kWzVdKmY7Y1s2XT1kWzZdKmY7Y1s4XT1kWzhdKmI7Y1s5XT1kWzldKmI7Y1sxMF09ZFsxMF0qYjtyZXR1cm4gdGhpc319KCksbWFrZVJvdGF0aW9uRnJvbUV1bGVyOmZ1bmN0aW9uKGEpe2EmJmEuaXNFdWxlcnx8Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5tYWtlUm90YXRpb25Gcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuXCIpO1xuICAgIHZhciBiPXRoaXMuZWxlbWVudHMsYz1hLngsZD1hLnksZT1hLnosZj1NYXRoLmNvcyhjKSxjPU1hdGguc2luKGMpLGc9TWF0aC5jb3MoZCksZD1NYXRoLnNpbihkKSxoPU1hdGguY29zKGUpLGU9TWF0aC5zaW4oZSk7aWYoXCJYWVpcIj09PWEub3JkZXIpe3ZhciBrPWYqaDt2YXIgbT1mKmU7dmFyIHE9YypoO2E9YyplO2JbMF09ZypoO2JbNF09LWcqZTtiWzhdPWQ7YlsxXT1tK3EqZDtiWzVdPWstYSpkO2JbOV09LWMqZztiWzJdPWEtaypkO2JbNl09cSttKmQ7YlsxMF09ZipnfWVsc2VcIllYWlwiPT09YS5vcmRlcj8oaz1nKmgsbT1nKmUscT1kKmgsYT1kKmUsYlswXT1rK2EqYyxiWzRdPXEqYy1tLGJbOF09ZipkLGJbMV09ZiplLGJbNV09ZipoLGJbOV09LWMsYlsyXT1tKmMtcSxiWzZdPWEraypjLGJbMTBdPWYqZyk6XCJaWFlcIj09PWEub3JkZXI/KGs9ZypoLG09ZyplLHE9ZCpoLGE9ZCplLGJbMF09ay1hKmMsYls0XT0tZiplLGJbOF09cSttKmMsYlsxXT1tK3EqYyxiWzVdPWYqaCxiWzldPVxuICAgIGEtaypjLGJbMl09LWYqZCxiWzZdPWMsYlsxMF09ZipnKTpcIlpZWFwiPT09YS5vcmRlcj8oaz1mKmgsbT1mKmUscT1jKmgsYT1jKmUsYlswXT1nKmgsYls0XT1xKmQtbSxiWzhdPWsqZCthLGJbMV09ZyplLGJbNV09YSpkK2ssYls5XT1tKmQtcSxiWzJdPS1kLGJbNl09YypnLGJbMTBdPWYqZyk6XCJZWlhcIj09PWEub3JkZXI/KGs9ZipnLG09ZipkLHE9YypnLGE9YypkLGJbMF09ZypoLGJbNF09YS1rKmUsYls4XT1xKmUrbSxiWzFdPWUsYls1XT1mKmgsYls5XT0tYypoLGJbMl09LWQqaCxiWzZdPW0qZStxLGJbMTBdPWstYSplKTpcIlhaWVwiPT09YS5vcmRlciYmKGs9ZipnLG09ZipkLHE9YypnLGE9YypkLGJbMF09ZypoLGJbNF09LWUsYls4XT1kKmgsYlsxXT1rKmUrYSxiWzVdPWYqaCxiWzldPW0qZS1xLGJbMl09cSplLW0sYls2XT1jKmgsYlsxMF09YSplK2spO2JbM109MDtiWzddPTA7YlsxMV09MDtiWzEyXT0wO2JbMTNdPTA7YlsxNF09MDtiWzE1XT0xO3JldHVybiB0aGlzfSxtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXt2YXIgYj1cbiAgICB0aGlzLmVsZW1lbnRzLGM9YS5feCxkPWEuX3ksZT1hLl96LGY9YS5fdyxnPWMrYyxoPWQrZCxrPWUrZTthPWMqZzt2YXIgbT1jKmgsYz1jKmsscT1kKmgsZD1kKmssZT1lKmssZz1mKmcsaD1mKmgsZj1mKms7YlswXT0xLShxK2UpO2JbNF09bS1mO2JbOF09YytoO2JbMV09bStmO2JbNV09MS0oYStlKTtiWzldPWQtZztiWzJdPWMtaDtiWzZdPWQrZztiWzEwXT0xLShhK3EpO2JbM109MDtiWzddPTA7YlsxMV09MDtiWzEyXT0wO2JbMTNdPTA7YlsxNF09MDtiWzE1XT0xO3JldHVybiB0aGlzfSxsb29rQXQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwLGM9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGQsZSxmKXt2YXIgZz10aGlzLmVsZW1lbnRzO2Muc3ViVmVjdG9ycyhkLGUpOzA9PT1jLmxlbmd0aFNxKCkmJihjLno9MSk7Yy5ub3JtYWxpemUoKTthLmNyb3NzVmVjdG9ycyhmLGMpOzA9PT1hLmxlbmd0aFNxKCkmJigxPT09TWF0aC5hYnMoZi56KT9jLngrPTFFLTQ6Yy56Kz0xRS00LFxuICAgIGMubm9ybWFsaXplKCksYS5jcm9zc1ZlY3RvcnMoZixjKSk7YS5ub3JtYWxpemUoKTtiLmNyb3NzVmVjdG9ycyhjLGEpO2dbMF09YS54O2dbNF09Yi54O2dbOF09Yy54O2dbMV09YS55O2dbNV09Yi55O2dbOV09Yy55O2dbMl09YS56O2dbNl09Yi56O2dbMTBdPWMuejtyZXR1cm4gdGhpc319KCksbXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwIT09Yj8oY29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMubXVsdGlwbHlNYXRyaWNlcyhhLGIpKTp0aGlzLm11bHRpcGx5TWF0cmljZXModGhpcyxhKX0scHJlbXVsdGlwbHk6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyhhLHRoaXMpfSxtdWx0aXBseU1hdHJpY2VzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5lbGVtZW50cyxkPWIuZWxlbWVudHM7XG4gICAgYj10aGlzLmVsZW1lbnRzO2E9Y1swXTt2YXIgZT1jWzRdLGY9Y1s4XSxnPWNbMTJdLGg9Y1sxXSxrPWNbNV0sbT1jWzldLHE9Y1sxM10sbj1jWzJdLGw9Y1s2XSxyPWNbMTBdLHQ9Y1sxNF0scD1jWzNdLHc9Y1s3XSx6PWNbMTFdLGM9Y1sxNV0seT1kWzBdLEk9ZFs0XSxBPWRbOF0sSj1kWzEyXSx4PWRbMV0sQj1kWzVdLEQ9ZFs5XSxDPWRbMTNdLEU9ZFsyXSxIPWRbNl0sSz1kWzEwXSxTPWRbMTRdLEw9ZFszXSxOPWRbN10sTT1kWzExXSxkPWRbMTVdO2JbMF09YSp5K2UqeCtmKkUrZypMO2JbNF09YSpJK2UqQitmKkgrZypOO2JbOF09YSpBK2UqRCtmKksrZypNO2JbMTJdPWEqSitlKkMrZipTK2cqZDtiWzFdPWgqeStrKngrbSpFK3EqTDtiWzVdPWgqSStrKkIrbSpIK3EqTjtiWzldPWgqQStrKkQrbSpLK3EqTTtiWzEzXT1oKkoraypDK20qUytxKmQ7YlsyXT1uKnkrbCp4K3IqRSt0Kkw7Yls2XT1uKkkrbCpCK3IqSCt0Kk47YlsxMF09bipBK2wqRCtyKksrdCpNO2JbMTRdPW4qSitsKlxuICAgIEMrcipTK3QqZDtiWzNdPXAqeSt3KngreipFK2MqTDtiWzddPXAqSSt3KkIreipIK2MqTjtiWzExXT1wKkErdypEK3oqSytjKk07YlsxNV09cCpKK3cqQyt6KlMrYypkO3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO2JbMF0qPWE7Yls0XSo9YTtiWzhdKj1hO2JbMTJdKj1hO2JbMV0qPWE7Yls1XSo9YTtiWzldKj1hO2JbMTNdKj1hO2JbMl0qPWE7Yls2XSo9YTtiWzEwXSo9YTtiWzE0XSo9YTtiWzNdKj1hO2JbN10qPWE7YlsxMV0qPWE7YlsxNV0qPWE7cmV0dXJuIHRoaXN9LGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYil7Zm9yKHZhciBjPTAsZD1iLmNvdW50O2M8ZDtjKyspYS54PWIuZ2V0WChjKSxhLnk9Yi5nZXRZKGMpLGEuej1iLmdldFooYyksYS5hcHBseU1hdHJpeDQodGhpcyksYi5zZXRYWVooYyxhLngsYS55LGEueik7cmV0dXJuIGJ9fSgpLGRldGVybWluYW50OmZ1bmN0aW9uKCl7dmFyIGE9XG4gICAgdGhpcy5lbGVtZW50cyxiPWFbMF0sYz1hWzRdLGQ9YVs4XSxlPWFbMTJdLGY9YVsxXSxnPWFbNV0saD1hWzldLGs9YVsxM10sbT1hWzJdLHE9YVs2XSxuPWFbMTBdLGw9YVsxNF07cmV0dXJuIGFbM10qKCtlKmgqcS1kKmsqcS1lKmcqbitjKmsqbitkKmcqbC1jKmgqbCkrYVs3XSooK2IqaCpsLWIqaypuK2UqZipuLWQqZipsK2QqayptLWUqaCptKSthWzExXSooK2IqaypxLWIqZypsLWUqZipxK2MqZipsK2UqZyptLWMqayptKSthWzE1XSooLWQqZyptLWIqaCpxK2IqZypuK2QqZipxLWMqZipuK2MqaCptKX0sdHJhbnNwb3NlOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50czt2YXIgYj1hWzFdO2FbMV09YVs0XTthWzRdPWI7Yj1hWzJdO2FbMl09YVs4XTthWzhdPWI7Yj1hWzZdO2FbNl09YVs5XTthWzldPWI7Yj1hWzNdO2FbM109YVsxMl07YVsxMl09YjtiPWFbN107YVs3XT1hWzEzXTthWzEzXT1iO2I9YVsxMV07YVsxMV09YVsxNF07YVsxNF09YjtyZXR1cm4gdGhpc30sc2V0UG9zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG4gICAgdGhpcy5lbGVtZW50cztiWzEyXT1hLng7YlsxM109YS55O2JbMTRdPWEuejtyZXR1cm4gdGhpc30sZ2V0SW52ZXJzZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZWxlbWVudHMsZD1hLmVsZW1lbnRzO2E9ZFswXTt2YXIgZT1kWzFdLGY9ZFsyXSxnPWRbM10saD1kWzRdLGs9ZFs1XSxtPWRbNl0scT1kWzddLGw9ZFs4XSx1PWRbOV0scj1kWzEwXSx0PWRbMTFdLHA9ZFsxMl0sdz1kWzEzXSx6PWRbMTRdLGQ9ZFsxNV0seT11KnoqcS13KnIqcSt3Km0qdC1rKnoqdC11Km0qZCtrKnIqZCx4PXAqcipxLWwqeipxLXAqbSp0K2gqeip0K2wqbSpkLWgqcipkLEE9bCp3KnEtcCp1KnErcCprKnQtaCp3KnQtbCprKmQraCp1KmQsSj1wKnUqbS1sKncqbS1wKmsqcitoKncqcitsKmsqei1oKnUqeixCPWEqeStlKngrZipBK2cqSjtpZigwPT09Qil7aWYoITA9PT1iKXRocm93IEVycm9yKFwiVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO1xuICAgIGNvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5nZXRJbnZlcnNlKCkgY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTtyZXR1cm4gdGhpcy5pZGVudGl0eSgpfWI9MS9CO2NbMF09eSpiO2NbMV09KHcqcipnLXUqeipnLXcqZip0K2Uqeip0K3UqZipkLWUqcipkKSpiO2NbMl09KGsqeipnLXcqbSpnK3cqZipxLWUqeipxLWsqZipkK2UqbSpkKSpiO2NbM109KHUqbSpnLWsqcipnLXUqZipxK2UqcipxK2sqZip0LWUqbSp0KSpiO2NbNF09eCpiO2NbNV09KGwqeipnLXAqcipnK3AqZip0LWEqeip0LWwqZipkK2EqcipkKSpiO2NbNl09KHAqbSpnLWgqeipnLXAqZipxK2EqeipxK2gqZipkLWEqbSpkKSpiO2NbN109KGgqcipnLWwqbSpnK2wqZipxLWEqcipxLWgqZip0K2EqbSp0KSpiO2NbOF09QSpiO2NbOV09KHAqdSpnLWwqdypnLXAqZSp0K2Eqdyp0K2wqZSpkLWEqdSpkKSpiO2NbMTBdPShoKncqZy1wKmsqZytwKmUqcS1hKncqcS1oKmUqZCthKmsqZCkqYjtjWzExXT1cbiAgICAobCprKmctaCp1KmctbCplKnErYSp1KnEraCplKnQtYSprKnQpKmI7Y1sxMl09SipiO2NbMTNdPShsKncqZi1wKnUqZitwKmUqci1hKncqci1sKmUqeithKnUqeikqYjtjWzE0XT0ocCprKmYtaCp3KmYtcCplKm0rYSp3Km0raCplKnotYSprKnopKmI7Y1sxNV09KGgqdSpmLWwqaypmK2wqZSptLWEqdSptLWgqZSpyK2EqaypyKSpiO3JldHVybiB0aGlzfSxzY2FsZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzLGM9YS54LGQ9YS55O2E9YS56O2JbMF0qPWM7Yls0XSo9ZDtiWzhdKj1hO2JbMV0qPWM7Yls1XSo9ZDtiWzldKj1hO2JbMl0qPWM7Yls2XSo9ZDtiWzEwXSo9YTtiWzNdKj1jO2JbN10qPWQ7YlsxMV0qPWE7cmV0dXJuIHRoaXN9LGdldE1heFNjYWxlT25BeGlzOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50cztyZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KGFbMF0qYVswXSthWzFdKmFbMV0rYVsyXSphWzJdLGFbNF0qYVs0XSthWzVdKmFbNV0rYVs2XSphWzZdLFxuICAgIGFbOF0qYVs4XSthWzldKmFbOV0rYVsxMF0qYVsxMF0pKX0sbWFrZVRyYW5zbGF0aW9uOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldCgxLDAsMCxhLDAsMSwwLGIsMCwwLDEsYywwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uWDpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmNvcyhhKTthPU1hdGguc2luKGEpO3RoaXMuc2V0KDEsMCwwLDAsMCxiLC1hLDAsMCxhLGIsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uWTpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmNvcyhhKTthPU1hdGguc2luKGEpO3RoaXMuc2V0KGIsMCxhLDAsMCwxLDAsMCwtYSwwLGIsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uWjpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmNvcyhhKTthPU1hdGguc2luKGEpO3RoaXMuc2V0KGIsLWEsMCwwLGEsYiwwLDAsMCwwLDEsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uQXhpczpmdW5jdGlvbihhLGIpe3ZhciBjPVxuICAgIE1hdGguY29zKGIpO2I9TWF0aC5zaW4oYik7dmFyIGQ9MS1jLGU9YS54LGY9YS55O2E9YS56O3ZhciBnPWQqZSxoPWQqZjt0aGlzLnNldChnKmUrYyxnKmYtYiphLGcqYStiKmYsMCxnKmYrYiphLGgqZitjLGgqYS1iKmUsMCxnKmEtYipmLGgqYStiKmUsZCphKmErYywwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxtYWtlU2NhbGU6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc2V0KGEsMCwwLDAsMCxiLDAsMCwwLDAsYywwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxtYWtlU2hlYXI6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuc2V0KDEsYixjLDAsYSwxLGMsMCxhLGIsMSwwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxjb21wb3NlOmZ1bmN0aW9uKGEsYixjKXt0aGlzLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGIpO3RoaXMuc2NhbGUoYyk7dGhpcy5zZXRQb3NpdGlvbihhKTtyZXR1cm4gdGhpc30sZGVjb21wb3NlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYyxcbiAgICBkLGUpe3ZhciBmPXRoaXMuZWxlbWVudHMsZz1hLnNldChmWzBdLGZbMV0sZlsyXSkubGVuZ3RoKCksaD1hLnNldChmWzRdLGZbNV0sZls2XSkubGVuZ3RoKCksaz1hLnNldChmWzhdLGZbOV0sZlsxMF0pLmxlbmd0aCgpOzA+dGhpcy5kZXRlcm1pbmFudCgpJiYoZz0tZyk7Yy54PWZbMTJdO2MueT1mWzEzXTtjLno9ZlsxNF07Yi5jb3B5KHRoaXMpO2M9MS9nO3ZhciBmPTEvaCxtPTEvaztiLmVsZW1lbnRzWzBdKj1jO2IuZWxlbWVudHNbMV0qPWM7Yi5lbGVtZW50c1syXSo9YztiLmVsZW1lbnRzWzRdKj1mO2IuZWxlbWVudHNbNV0qPWY7Yi5lbGVtZW50c1s2XSo9ZjtiLmVsZW1lbnRzWzhdKj1tO2IuZWxlbWVudHNbOV0qPW07Yi5lbGVtZW50c1sxMF0qPW07ZC5zZXRGcm9tUm90YXRpb25NYXRyaXgoYik7ZS54PWc7ZS55PWg7ZS56PWs7cmV0dXJuIHRoaXN9fSgpLG1ha2VQZXJzcGVjdGl2ZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7dm9pZCAwPT09ZiYmY29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm1ha2VQZXJzcGVjdGl2ZSgpIGhhcyBiZWVuIHJlZGVmaW5lZCBhbmQgaGFzIGEgbmV3IHNpZ25hdHVyZS4gUGxlYXNlIGNoZWNrIHRoZSBkb2NzLlwiKTtcbiAgICB2YXIgZz10aGlzLmVsZW1lbnRzO2dbMF09MiplLyhiLWEpO2dbNF09MDtnWzhdPShiK2EpLyhiLWEpO2dbMTJdPTA7Z1sxXT0wO2dbNV09MiplLyhjLWQpO2dbOV09KGMrZCkvKGMtZCk7Z1sxM109MDtnWzJdPTA7Z1s2XT0wO2dbMTBdPS0oZitlKS8oZi1lKTtnWzE0XT0tMipmKmUvKGYtZSk7Z1szXT0wO2dbN109MDtnWzExXT0tMTtnWzE1XT0wO3JldHVybiB0aGlzfSxtYWtlT3J0aG9ncmFwaGljOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz10aGlzLmVsZW1lbnRzLGg9MS8oYi1hKSxrPTEvKGMtZCksbT0xLyhmLWUpO2dbMF09MipoO2dbNF09MDtnWzhdPTA7Z1sxMl09LSgoYithKSpoKTtnWzFdPTA7Z1s1XT0yKms7Z1s5XT0wO2dbMTNdPS0oKGMrZCkqayk7Z1syXT0wO2dbNl09MDtnWzEwXT0tMiptO2dbMTRdPS0oKGYrZSkqbSk7Z1szXT0wO2dbN109MDtnWzExXT0wO2dbMTVdPTE7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO1xuICAgIGE9YS5lbGVtZW50cztmb3IodmFyIGM9MDsxNj5jO2MrKylpZihiW2NdIT09YVtjXSlyZXR1cm4hMTtyZXR1cm4hMH0sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7Zm9yKHZhciBjPTA7MTY+YztjKyspdGhpcy5lbGVtZW50c1tjXT1hW2MrYl07cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7dmFyIGM9dGhpcy5lbGVtZW50czthW2JdPWNbMF07YVtiKzFdPWNbMV07YVtiKzJdPWNbMl07YVtiKzNdPWNbM107YVtiKzRdPWNbNF07YVtiKzVdPWNbNV07YVtiKzZdPWNbNl07YVtiKzddPWNbN107YVtiKzhdPWNbOF07YVtiKzldPWNbOV07YVtiKzEwXT1jWzEwXTthW2IrMTFdPWNbMTFdO2FbYisxMl09Y1sxMl07YVtiKzEzXT1jWzEzXTthW2IrMTRdPWNbMTRdO2FbYisxNV09Y1sxNV07cmV0dXJuIGF9fSk7T2JqZWN0LmFzc2lnbihoYSx7c2xlcnA6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIGMuY29weShhKS5zbGVycChiLFxuICAgIGQpfSxzbGVycEZsYXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7dmFyIGg9Y1tkKzBdLGs9Y1tkKzFdLG09Y1tkKzJdO2M9Y1tkKzNdO2Q9ZVtmKzBdO3ZhciBxPWVbZisxXSxsPWVbZisyXTtlPWVbZiszXTtpZihjIT09ZXx8aCE9PWR8fGshPT1xfHxtIT09bCl7Zj0xLWc7dmFyIHU9aCpkK2sqcSttKmwrYyplLHI9MDw9dT8xOi0xLHA9MS11KnU7cD5OdW1iZXIuRVBTSUxPTiYmKHA9TWF0aC5zcXJ0KHApLHU9TWF0aC5hdGFuMihwLHUqciksZj1NYXRoLnNpbihmKnUpL3AsZz1NYXRoLnNpbihnKnUpL3ApO3IqPWc7aD1oKmYrZCpyO2s9aypmK3EqcjttPW0qZitsKnI7Yz1jKmYrZSpyO2Y9PT0xLWcmJihnPTEvTWF0aC5zcXJ0KGgqaCtrKmsrbSptK2MqYyksaCo9ZyxrKj1nLG0qPWcsYyo9Zyl9YVtiXT1oO2FbYisxXT1rO2FbYisyXT1tO2FbYiszXT1jfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGhhLnByb3RvdHlwZSx7eDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3h9LFxuICAgIHNldDpmdW5jdGlvbihhKXt0aGlzLl94PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9fSx5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5feX0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuX3k9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX19LHo6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl96fSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5fej1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfX0sdzp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3d9LHNldDpmdW5jdGlvbihhKXt0aGlzLl93PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9fX0pO09iamVjdC5hc3NpZ24oaGEucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5feD1hO3RoaXMuX3k9Yjt0aGlzLl96PWM7dGhpcy5fdz1kO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLl94LHRoaXMuX3ksdGhpcy5feixcbiAgICB0aGlzLl93KX0sY29weTpmdW5jdGlvbihhKXt0aGlzLl94PWEueDt0aGlzLl95PWEueTt0aGlzLl96PWEuejt0aGlzLl93PWEudzt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbUV1bGVyOmZ1bmN0aW9uKGEsYil7aWYoIWF8fCFhLmlzRXVsZXIpdGhyb3cgRXJyb3IoXCJUSFJFRS5RdWF0ZXJuaW9uOiAuc2V0RnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYW4gRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci5cIik7dmFyIGM9YS5feCxkPWEuX3ksZT1hLl96O2E9YS5vcmRlcjt2YXIgZj1NYXRoLmNvcyxnPU1hdGguc2luLGg9ZihjLzIpLGs9ZihkLzIpLGY9ZihlLzIpLGM9ZyhjLzIpLGQ9ZyhkLzIpLGU9ZyhlLzIpO1wiWFlaXCI9PT1hPyh0aGlzLl94PWMqaypmK2gqZCplLHRoaXMuX3k9aCpkKmYtYyprKmUsdGhpcy5fej1oKmsqZStjKmQqZix0aGlzLl93PWgqaypmLWMqZCplKTpcIllYWlwiPT09YT8odGhpcy5feD1jKmsqZitcbiAgICBoKmQqZSx0aGlzLl95PWgqZCpmLWMqayplLHRoaXMuX3o9aCprKmUtYypkKmYsdGhpcy5fdz1oKmsqZitjKmQqZSk6XCJaWFlcIj09PWE/KHRoaXMuX3g9YyprKmYtaCpkKmUsdGhpcy5feT1oKmQqZitjKmsqZSx0aGlzLl96PWgqayplK2MqZCpmLHRoaXMuX3c9aCprKmYtYypkKmUpOlwiWllYXCI9PT1hPyh0aGlzLl94PWMqaypmLWgqZCplLHRoaXMuX3k9aCpkKmYrYyprKmUsdGhpcy5fej1oKmsqZS1jKmQqZix0aGlzLl93PWgqaypmK2MqZCplKTpcIllaWFwiPT09YT8odGhpcy5feD1jKmsqZitoKmQqZSx0aGlzLl95PWgqZCpmK2MqayplLHRoaXMuX3o9aCprKmUtYypkKmYsdGhpcy5fdz1oKmsqZi1jKmQqZSk6XCJYWllcIj09PWEmJih0aGlzLl94PWMqaypmLWgqZCplLHRoaXMuX3k9aCpkKmYtYyprKmUsdGhpcy5fej1oKmsqZStjKmQqZix0aGlzLl93PWgqaypmK2MqZCplKTtpZighMSE9PWIpdGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21BeGlzQW5nbGU6ZnVuY3Rpb24oYSxcbiAgICBiKXtiLz0yO3ZhciBjPU1hdGguc2luKGIpO3RoaXMuX3g9YS54KmM7dGhpcy5feT1hLnkqYzt0aGlzLl96PWEueipjO3RoaXMuX3c9TWF0aC5jb3MoYik7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj1hLmVsZW1lbnRzLGM9YlswXTthPWJbNF07dmFyIGQ9Yls4XSxlPWJbMV0sZj1iWzVdLGc9Yls5XSxoPWJbMl0saz1iWzZdLGI9YlsxMF0sbT1jK2YrYjswPG0/KGM9LjUvTWF0aC5zcXJ0KG0rMSksdGhpcy5fdz0uMjUvYyx0aGlzLl94PShrLWcpKmMsdGhpcy5feT0oZC1oKSpjLHRoaXMuX3o9KGUtYSkqYyk6Yz5mJiZjPmI/KGM9MipNYXRoLnNxcnQoMStjLWYtYiksdGhpcy5fdz0oay1nKS9jLHRoaXMuX3g9LjI1KmMsdGhpcy5feT0oYStlKS9jLHRoaXMuX3o9KGQraCkvYyk6Zj5iPyhjPTIqTWF0aC5zcXJ0KDErZi1jLWIpLHRoaXMuX3c9KGQtaCkvYyx0aGlzLl94PShhK2UpL2MsdGhpcy5feT1cbiAgICAuMjUqYyx0aGlzLl96PShnK2spL2MpOihjPTIqTWF0aC5zcXJ0KDErYi1jLWYpLHRoaXMuX3c9KGUtYSkvYyx0aGlzLl94PShkK2gpL2MsdGhpcy5feT0oZytrKS9jLHRoaXMuX3o9LjI1KmMpO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tVW5pdFZlY3RvcnM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiO3JldHVybiBmdW5jdGlvbihjLGQpe3ZvaWQgMD09PWEmJihhPW5ldyBwKTtiPWMuZG90KGQpKzE7MUUtNj5iPyhiPTAsTWF0aC5hYnMoYy54KT5NYXRoLmFicyhjLnopP2Euc2V0KC1jLnksYy54LDApOmEuc2V0KDAsLWMueixjLnkpKTphLmNyb3NzVmVjdG9ycyhjLGQpO3RoaXMuX3g9YS54O3RoaXMuX3k9YS55O3RoaXMuX3o9YS56O3RoaXMuX3c9YjtyZXR1cm4gdGhpcy5ub3JtYWxpemUoKX19KCksaW52ZXJzZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbmp1Z2F0ZSgpLm5vcm1hbGl6ZSgpfSxjb25qdWdhdGU6ZnVuY3Rpb24oKXt0aGlzLl94Kj1cbiAgICAtMTt0aGlzLl95Kj0tMTt0aGlzLl96Kj0tMTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sZG90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl94KmEuX3grdGhpcy5feSphLl95K3RoaXMuX3oqYS5feit0aGlzLl93KmEuX3d9LGxlbmd0aFNxOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3gqdGhpcy5feCt0aGlzLl95KnRoaXMuX3krdGhpcy5feip0aGlzLl96K3RoaXMuX3cqdGhpcy5fd30sbGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLl94KnRoaXMuX3grdGhpcy5feSp0aGlzLl95K3RoaXMuX3oqdGhpcy5feit0aGlzLl93KnRoaXMuX3cpfSxub3JtYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmxlbmd0aCgpOzA9PT1hPyh0aGlzLl96PXRoaXMuX3k9dGhpcy5feD0wLHRoaXMuX3c9MSk6KGE9MS9hLHRoaXMuX3gqPWEsdGhpcy5feSo9YSx0aGlzLl96Kj1hLHRoaXMuX3cqPWEpO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxcbiAgICBtdWx0aXBseTpmdW5jdGlvbihhLGIpe3JldHVybiB2b2lkIDAhPT1iPyhjb25zb2xlLndhcm4oXCJUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVF1YXRlcm5pb25zKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKGEsYikpOnRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyh0aGlzLGEpfSxwcmVtdWx0aXBseTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKGEsdGhpcyl9LG11bHRpcGx5UXVhdGVybmlvbnM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLl94LGQ9YS5feSxlPWEuX3o7YT1hLl93O3ZhciBmPWIuX3gsZz1iLl95LGg9Yi5fejtiPWIuX3c7dGhpcy5feD1jKmIrYSpmK2QqaC1lKmc7dGhpcy5feT1kKmIrYSpnK2UqZi1jKmg7dGhpcy5fej1lKmIrYSpoK2MqZy1kKmY7dGhpcy5fdz1hKmItYypmLWQqZy1lKmg7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG4gICAgcmV0dXJuIHRoaXN9LHNsZXJwOmZ1bmN0aW9uKGEsYil7aWYoMD09PWIpcmV0dXJuIHRoaXM7aWYoMT09PWIpcmV0dXJuIHRoaXMuY29weShhKTt2YXIgYz10aGlzLl94LGQ9dGhpcy5feSxlPXRoaXMuX3osZj10aGlzLl93LGc9ZiphLl93K2MqYS5feCtkKmEuX3krZSphLl96OzA+Zz8odGhpcy5fdz0tYS5fdyx0aGlzLl94PS1hLl94LHRoaXMuX3k9LWEuX3ksdGhpcy5fej0tYS5feixnPS1nKTp0aGlzLmNvcHkoYSk7aWYoMTw9ZylyZXR1cm4gdGhpcy5fdz1mLHRoaXMuX3g9Yyx0aGlzLl95PWQsdGhpcy5fej1lLHRoaXM7YT1NYXRoLnNxcnQoMS1nKmcpO2lmKC4wMDE+TWF0aC5hYnMoYSkpcmV0dXJuIHRoaXMuX3c9LjUqKGYrdGhpcy5fdyksdGhpcy5feD0uNSooYyt0aGlzLl94KSx0aGlzLl95PS41KihkK3RoaXMuX3kpLHRoaXMuX3o9LjUqKGUrdGhpcy5feiksdGhpczt2YXIgaD1NYXRoLmF0YW4yKGEsZyksZz1NYXRoLnNpbigoMS1iKSpoKS9hO2I9TWF0aC5zaW4oYipoKS9hO1xuICAgIHRoaXMuX3c9ZipnK3RoaXMuX3cqYjt0aGlzLl94PWMqZyt0aGlzLl94KmI7dGhpcy5feT1kKmcrdGhpcy5feSpiO3RoaXMuX3o9ZSpnK3RoaXMuX3oqYjt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLl94PT09dGhpcy5feCYmYS5feT09PXRoaXMuX3kmJmEuX3o9PT10aGlzLl96JiZhLl93PT09dGhpcy5fd30sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy5feD1hW2JdO3RoaXMuX3k9YVtiKzFdO3RoaXMuX3o9YVtiKzJdO3RoaXMuX3c9YVtiKzNdO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy5feDthW2IrMV09dGhpcy5feTthW2IrMl09dGhpcy5fejthW2IrM109dGhpcy5fdztyZXR1cm4gYX0sb25DaGFuZ2U6ZnVuY3Rpb24oYSl7dGhpcy5vbkNoYW5nZUNhbGxiYWNrPVxuICAgIGE7cmV0dXJuIHRoaXN9LG9uQ2hhbmdlQ2FsbGJhY2s6ZnVuY3Rpb24oKXt9fSk7T2JqZWN0LmFzc2lnbihwLnByb3RvdHlwZSx7aXNWZWN0b3IzOiEwLHNldDpmdW5jdGlvbihhLGIsYyl7dGhpcy54PWE7dGhpcy55PWI7dGhpcy56PWM7cmV0dXJuIHRoaXN9LHNldFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLno9dGhpcy55PXRoaXMueD1hO3JldHVybiB0aGlzfSxzZXRYOmZ1bmN0aW9uKGEpe3RoaXMueD1hO3JldHVybiB0aGlzfSxzZXRZOmZ1bmN0aW9uKGEpe3RoaXMueT1hO3JldHVybiB0aGlzfSxzZXRaOmZ1bmN0aW9uKGEpe3RoaXMuej1hO3JldHVybiB0aGlzfSxzZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAwOnRoaXMueD1iO2JyZWFrO2Nhc2UgMTp0aGlzLnk9YjticmVhaztjYXNlIDI6dGhpcy56PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fXJldHVybiB0aGlzfSxnZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgMDpyZXR1cm4gdGhpcy54O1xuICAgIGNhc2UgMTpyZXR1cm4gdGhpcy55O2Nhc2UgMjpyZXR1cm4gdGhpcy56O2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCx0aGlzLnksdGhpcy56KX0sY29weTpmdW5jdGlvbihhKXt0aGlzLng9YS54O3RoaXMueT1hLnk7dGhpcy56PWEuejtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLmFkZFZlY3RvcnMoYSxiKTt0aGlzLngrPWEueDt0aGlzLnkrPWEueTt0aGlzLnorPWEuejtyZXR1cm4gdGhpc30sYWRkU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueCs9YTt0aGlzLnkrPWE7dGhpcy56Kz1hO3JldHVybiB0aGlzfSxcbiAgICBhZGRWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueCtiLng7dGhpcy55PWEueStiLnk7dGhpcy56PWEueitiLno7cmV0dXJuIHRoaXN9LGFkZFNjYWxlZFZlY3RvcjpmdW5jdGlvbihhLGIpe3RoaXMueCs9YS54KmI7dGhpcy55Kz1hLnkqYjt0aGlzLnorPWEueipiO3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuc3ViVmVjdG9ycyhhLGIpO3RoaXMueC09YS54O3RoaXMueS09YS55O3RoaXMuei09YS56O3JldHVybiB0aGlzfSxzdWJTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54LT1hO3RoaXMueS09YTt0aGlzLnotPWE7cmV0dXJuIHRoaXN9LHN1YlZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YS54LWIueDt0aGlzLnk9YS55LWIueTt0aGlzLno9XG4gICAgYS56LWIuejtyZXR1cm4gdGhpc30sbXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLm11bHRpcGx5VmVjdG9ycyhhLGIpO3RoaXMueCo9YS54O3RoaXMueSo9YS55O3RoaXMueio9YS56O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPWE7dGhpcy55Kj1hO3RoaXMueio9YTtyZXR1cm4gdGhpc30sbXVsdGlwbHlWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueCpiLng7dGhpcy55PWEueSpiLnk7dGhpcy56PWEueipiLno7cmV0dXJuIHRoaXN9LGFwcGx5RXVsZXI6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgaGE7cmV0dXJuIGZ1bmN0aW9uKGIpe2ImJmIuaXNFdWxlcnx8Y29uc29sZS5lcnJvcihcIlRIUkVFLlZlY3RvcjM6IC5hcHBseUV1bGVyKCkgbm93IGV4cGVjdHMgYW4gRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci5cIik7XG4gICAgcmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKGEuc2V0RnJvbUV1bGVyKGIpKX19KCksYXBwbHlBeGlzQW5nbGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgaGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKGEuc2V0RnJvbUF4aXNBbmdsZShiLGMpKX19KCksYXBwbHlNYXRyaXgzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMuejthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzNdKmMrYVs2XSpkO3RoaXMueT1hWzFdKmIrYVs0XSpjK2FbN10qZDt0aGlzLno9YVsyXSpiK2FbNV0qYythWzhdKmQ7cmV0dXJuIHRoaXN9LGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngsYz10aGlzLnksZD10aGlzLno7YT1hLmVsZW1lbnRzO3ZhciBlPTEvKGFbM10qYithWzddKmMrYVsxMV0qZCthWzE1XSk7dGhpcy54PShhWzBdKmIrYVs0XSpjK2FbOF0qZCthWzEyXSkqZTt0aGlzLnk9KGFbMV0qYithWzVdKmMrXG4gICAgYVs5XSpkK2FbMTNdKSplO3RoaXMuej0oYVsyXSpiK2FbNl0qYythWzEwXSpkK2FbMTRdKSplO3JldHVybiB0aGlzfSxhcHBseVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56LGU9YS54LGY9YS55LGc9YS56O2E9YS53O3ZhciBoPWEqYitmKmQtZypjLGs9YSpjK2cqYi1lKmQsbT1hKmQrZSpjLWYqYixiPS1lKmItZipjLWcqZDt0aGlzLng9aCphK2IqLWUrayotZy1tKi1mO3RoaXMueT1rKmErYiotZittKi1lLWgqLWc7dGhpcy56PW0qYStiKi1nK2gqLWYtayotZTtyZXR1cm4gdGhpc30scHJvamVjdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBPO3JldHVybiBmdW5jdGlvbihiKXthLm11bHRpcGx5TWF0cmljZXMoYi5wcm9qZWN0aW9uTWF0cml4LGEuZ2V0SW52ZXJzZShiLm1hdHJpeFdvcmxkKSk7cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KGEpfX0oKSx1bnByb2plY3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tdWx0aXBseU1hdHJpY2VzKGIubWF0cml4V29ybGQsXG4gICAgYS5nZXRJbnZlcnNlKGIucHJvamVjdGlvbk1hdHJpeCkpO3JldHVybiB0aGlzLmFwcGx5TWF0cml4NChhKX19KCksdHJhbnNmb3JtRGlyZWN0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMuejthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzRdKmMrYVs4XSpkO3RoaXMueT1hWzFdKmIrYVs1XSpjK2FbOV0qZDt0aGlzLno9YVsyXSpiK2FbNl0qYythWzEwXSpkO3JldHVybiB0aGlzLm5vcm1hbGl6ZSgpfSxkaXZpZGU6ZnVuY3Rpb24oYSl7dGhpcy54Lz1hLng7dGhpcy55Lz1hLnk7dGhpcy56Lz1hLno7cmV0dXJuIHRoaXN9LGRpdmlkZVNjYWxhcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxL2EpfSxtaW46ZnVuY3Rpb24oYSl7dGhpcy54PU1hdGgubWluKHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1pbih0aGlzLnksYS55KTt0aGlzLno9TWF0aC5taW4odGhpcy56LGEueik7cmV0dXJuIHRoaXN9LG1heDpmdW5jdGlvbihhKXt0aGlzLng9XG4gICAgTWF0aC5tYXgodGhpcy54LGEueCk7dGhpcy55PU1hdGgubWF4KHRoaXMueSxhLnkpO3RoaXMuej1NYXRoLm1heCh0aGlzLnosYS56KTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oYSxiKXt0aGlzLng9TWF0aC5tYXgoYS54LE1hdGgubWluKGIueCx0aGlzLngpKTt0aGlzLnk9TWF0aC5tYXgoYS55LE1hdGgubWluKGIueSx0aGlzLnkpKTt0aGlzLno9TWF0aC5tYXgoYS56LE1hdGgubWluKGIueix0aGlzLnopKTtyZXR1cm4gdGhpc30sY2xhbXBTY2FsYXI6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwO3JldHVybiBmdW5jdGlvbihjLGQpe2Euc2V0KGMsYyxjKTtiLnNldChkLGQsZCk7cmV0dXJuIHRoaXMuY2xhbXAoYSxiKX19KCksY2xhbXBMZW5ndGg6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmxlbmd0aCgpO3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcihjfHwxKS5tdWx0aXBseVNjYWxhcihNYXRoLm1heChhLE1hdGgubWluKGIsYykpKX0sZmxvb3I6ZnVuY3Rpb24oKXt0aGlzLng9XG4gICAgTWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT1NYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PU1hdGguZmxvb3IodGhpcy56KTtyZXR1cm4gdGhpc30sY2VpbDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmNlaWwodGhpcy54KTt0aGlzLnk9TWF0aC5jZWlsKHRoaXMueSk7dGhpcy56PU1hdGguY2VpbCh0aGlzLnopO3JldHVybiB0aGlzfSxyb3VuZDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLnJvdW5kKHRoaXMueCk7dGhpcy55PU1hdGgucm91bmQodGhpcy55KTt0aGlzLno9TWF0aC5yb3VuZCh0aGlzLnopO3JldHVybiB0aGlzfSxyb3VuZFRvWmVybzpmdW5jdGlvbigpe3RoaXMueD0wPnRoaXMueD9NYXRoLmNlaWwodGhpcy54KTpNYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PTA+dGhpcy55P01hdGguY2VpbCh0aGlzLnkpOk1hdGguZmxvb3IodGhpcy55KTt0aGlzLno9MD50aGlzLno/TWF0aC5jZWlsKHRoaXMueik6TWF0aC5mbG9vcih0aGlzLnopO3JldHVybiB0aGlzfSxuZWdhdGU6ZnVuY3Rpb24oKXt0aGlzLng9XG4gICAgLXRoaXMueDt0aGlzLnk9LXRoaXMueTt0aGlzLno9LXRoaXMuejtyZXR1cm4gdGhpc30sZG90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLngqYS54K3RoaXMueSphLnkrdGhpcy56KmEuen0sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnp9LGxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnopfSxtYW5oYXR0YW5MZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5hYnModGhpcy54KStNYXRoLmFicyh0aGlzLnkpK01hdGguYWJzKHRoaXMueil9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpfHwxKX0sc2V0TGVuZ3RoOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKGEpfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz0oYS54LVxuICAgIHRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3RoaXMueis9KGEuei10aGlzLnopKmI7cmV0dXJuIHRoaXN9LGxlcnBWZWN0b3JzOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKGIsYSkubXVsdGlwbHlTY2FsYXIoYykuYWRkKGEpfSxjcm9zczpmdW5jdGlvbihhLGIpe3JldHVybiB2b2lkIDAhPT1iPyhjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAuY3Jvc3MoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5jcm9zc1ZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLmNyb3NzVmVjdG9ycyhhLGIpKTp0aGlzLmNyb3NzVmVjdG9ycyh0aGlzLGEpfSxjcm9zc1ZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLngsZD1hLnk7YT1hLno7dmFyIGU9Yi54LGY9Yi55O2I9Yi56O3RoaXMueD1kKmItYSpmO3RoaXMueT1hKmUtYypiO3RoaXMuej1jKmYtZCplO3JldHVybiB0aGlzfSxwcm9qZWN0T25WZWN0b3I6ZnVuY3Rpb24oYSl7dmFyIGI9XG4gICAgYS5kb3QodGhpcykvYS5sZW5ndGhTcSgpO3JldHVybiB0aGlzLmNvcHkoYSkubXVsdGlwbHlTY2FsYXIoYil9LHByb2plY3RPblBsYW5lOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe2EuY29weSh0aGlzKS5wcm9qZWN0T25WZWN0b3IoYik7cmV0dXJuIHRoaXMuc3ViKGEpfX0oKSxyZWZsZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnN1YihhLmNvcHkoYikubXVsdGlwbHlTY2FsYXIoMip0aGlzLmRvdChiKSkpfX0oKSxhbmdsZVRvOmZ1bmN0aW9uKGEpe2E9dGhpcy5kb3QoYSkvTWF0aC5zcXJ0KHRoaXMubGVuZ3RoU3EoKSphLmxlbmd0aFNxKCkpO3JldHVybiBNYXRoLmFjb3MoUS5jbGFtcChhLC0xLDEpKX0sZGlzdGFuY2VUbzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoYSkpfSxkaXN0YW5jZVRvU3F1YXJlZDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngtXG4gICAgYS54LGM9dGhpcy55LWEueTthPXRoaXMuei1hLno7cmV0dXJuIGIqYitjKmMrYSphfSxtYW5oYXR0YW5EaXN0YW5jZVRvOmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLmFicyh0aGlzLngtYS54KStNYXRoLmFicyh0aGlzLnktYS55KStNYXRoLmFicyh0aGlzLnotYS56KX0sc2V0RnJvbVNwaGVyaWNhbDpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLnNpbihhLnBoaSkqYS5yYWRpdXM7dGhpcy54PWIqTWF0aC5zaW4oYS50aGV0YSk7dGhpcy55PU1hdGguY29zKGEucGhpKSphLnJhZGl1czt0aGlzLno9YipNYXRoLmNvcyhhLnRoZXRhKTtyZXR1cm4gdGhpc30sc2V0RnJvbUN5bGluZHJpY2FsOmZ1bmN0aW9uKGEpe3RoaXMueD1hLnJhZGl1cypNYXRoLnNpbihhLnRoZXRhKTt0aGlzLnk9YS55O3RoaXMuej1hLnJhZGl1cypNYXRoLmNvcyhhLnRoZXRhKTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeFBvc2l0aW9uOmZ1bmN0aW9uKGEpe2E9YS5lbGVtZW50czt0aGlzLng9YVsxMl07dGhpcy55PVxuICAgIGFbMTNdO3RoaXMuej1hWzE0XTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeFNjYWxlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbihhLDApLmxlbmd0aCgpLGM9dGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKGEsMSkubGVuZ3RoKCk7YT10aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oYSwyKS5sZW5ndGgoKTt0aGlzLng9Yjt0aGlzLnk9Yzt0aGlzLno9YTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeENvbHVtbjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmZyb21BcnJheShhLmVsZW1lbnRzLDQqYil9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS54PT09dGhpcy54JiZhLnk9PT10aGlzLnkmJmEuej09PXRoaXMuen0sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy54PWFbYl07dGhpcy55PWFbYisxXTt0aGlzLno9YVtiKzJdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9XG4gICAgW10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy54O2FbYisxXT10aGlzLnk7YVtiKzJdPXRoaXMuejtyZXR1cm4gYX0sZnJvbUJ1ZmZlckF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7dm9pZCAwIT09YyYmY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLlwiKTt0aGlzLng9YS5nZXRYKGIpO3RoaXMueT1hLmdldFkoYik7dGhpcy56PWEuZ2V0WihiKTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKG1hLnByb3RvdHlwZSx7aXNNYXRyaXgzOiEwLHNldDpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7dmFyIG09dGhpcy5lbGVtZW50czttWzBdPWE7bVsxXT1kO21bMl09ZzttWzNdPWI7bVs0XT1lO21bNV09aDttWzZdPWM7bVs3XT1mO21bOF09aztyZXR1cm4gdGhpc30saWRlbnRpdHk6ZnVuY3Rpb24oKXt0aGlzLnNldCgxLDAsMCwwLDEsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5mcm9tQXJyYXkodGhpcy5lbGVtZW50cyl9LFxuICAgIGNvcHk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthPWEuZWxlbWVudHM7YlswXT1hWzBdO2JbMV09YVsxXTtiWzJdPWFbMl07YlszXT1hWzNdO2JbNF09YVs0XTtiWzVdPWFbNV07Yls2XT1hWzZdO2JbN109YVs3XTtiWzhdPWFbOF07cmV0dXJuIHRoaXN9LHNldEZyb21NYXRyaXg0OmZ1bmN0aW9uKGEpe2E9YS5lbGVtZW50czt0aGlzLnNldChhWzBdLGFbNF0sYVs4XSxhWzFdLGFbNV0sYVs5XSxhWzJdLGFbNl0sYVsxMF0pO3JldHVybiB0aGlzfSxhcHBseVRvQnVmZmVyQXR0cmlidXRlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe2Zvcih2YXIgYz0wLGQ9Yi5jb3VudDtjPGQ7YysrKWEueD1iLmdldFgoYyksYS55PWIuZ2V0WShjKSxhLno9Yi5nZXRaKGMpLGEuYXBwbHlNYXRyaXgzKHRoaXMpLGIuc2V0WFlaKGMsYS54LGEueSxhLnopO3JldHVybiBifX0oKSxtdWx0aXBseTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKHRoaXMsXG4gICAgYSl9LHByZW11bHRpcGx5OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoYSx0aGlzKX0sbXVsdGlwbHlNYXRyaWNlczpmdW5jdGlvbihhLGIpe3ZhciBjPWEuZWxlbWVudHMsZD1iLmVsZW1lbnRzO2I9dGhpcy5lbGVtZW50czthPWNbMF07dmFyIGU9Y1szXSxmPWNbNl0sZz1jWzFdLGg9Y1s0XSxrPWNbN10sbT1jWzJdLHE9Y1s1XSxjPWNbOF0sbD1kWzBdLHA9ZFszXSxyPWRbNl0sdD1kWzFdLHY9ZFs0XSx3PWRbN10sej1kWzJdLHk9ZFs1XSxkPWRbOF07YlswXT1hKmwrZSp0K2YqejtiWzNdPWEqcCtlKnYrZip5O2JbNl09YSpyK2UqdytmKmQ7YlsxXT1nKmwraCp0K2sqejtiWzRdPWcqcCtoKnYrayp5O2JbN109ZypyK2gqdytrKmQ7YlsyXT1tKmwrcSp0K2MqejtiWzVdPW0qcCtxKnYrYyp5O2JbOF09bSpyK3EqdytjKmQ7cmV0dXJuIHRoaXN9LG11bHRpcGx5U2NhbGFyOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YlswXSo9YTtiWzNdKj1hO1xuICAgIGJbNl0qPWE7YlsxXSo9YTtiWzRdKj1hO2JbN10qPWE7YlsyXSo9YTtiWzVdKj1hO2JbOF0qPWE7cmV0dXJuIHRoaXN9LGRldGVybWluYW50OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50cyxiPWFbMF0sYz1hWzFdLGQ9YVsyXSxlPWFbM10sZj1hWzRdLGc9YVs1XSxoPWFbNl0saz1hWzddLGE9YVs4XTtyZXR1cm4gYipmKmEtYipnKmstYyplKmErYypnKmgrZCplKmstZCpmKmh9LGdldEludmVyc2U6ZnVuY3Rpb24oYSxiKXthJiZhLmlzTWF0cml4NCYmY29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDM6IC5nZXRJbnZlcnNlKCkgbm8gbG9uZ2VyIHRha2VzIGEgTWF0cml4NCBhcmd1bWVudC5cIik7dmFyIGM9YS5lbGVtZW50czthPXRoaXMuZWxlbWVudHM7dmFyIGQ9Y1swXSxlPWNbMV0sZj1jWzJdLGc9Y1szXSxoPWNbNF0saz1jWzVdLG09Y1s2XSxxPWNbN10sYz1jWzhdLGw9YypoLWsqcSxwPWsqbS1jKmcscj1xKmctaCptLHQ9ZCpsK2UqcCtmKnI7aWYoMD09PXQpe2lmKCEwPT09XG4gICAgYil0aHJvdyBFcnJvcihcIlRIUkVFLk1hdHJpeDM6IC5nZXRJbnZlcnNlKCkgY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIik7cmV0dXJuIHRoaXMuaWRlbnRpdHkoKX1iPTEvdDthWzBdPWwqYjthWzFdPShmKnEtYyplKSpiO2FbMl09KGsqZS1mKmgpKmI7YVszXT1wKmI7YVs0XT0oYypkLWYqbSkqYjthWzVdPShmKmctaypkKSpiO2FbNl09cipiO2FbN109KGUqbS1xKmQpKmI7YVs4XT0oaCpkLWUqZykqYjtyZXR1cm4gdGhpc30sdHJhbnNwb3NlOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50czt2YXIgYj1hWzFdO2FbMV09YVszXTthWzNdPWI7Yj1hWzJdO2FbMl09YVs2XTthWzZdPWI7Yj1hWzVdO2FbNV09YVs3XTthWzddPWI7cmV0dXJuIHRoaXN9LGdldE5vcm1hbE1hdHJpeDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4NChhKS5nZXRJbnZlcnNlKHRoaXMpLnRyYW5zcG9zZSgpfSxcbiAgICB0cmFuc3Bvc2VJbnRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthWzBdPWJbMF07YVsxXT1iWzNdO2FbMl09Yls2XTthWzNdPWJbMV07YVs0XT1iWzRdO2FbNV09Yls3XTthWzZdPWJbMl07YVs3XT1iWzVdO2FbOF09Yls4XTtyZXR1cm4gdGhpc30sc2V0VXZUcmFuc2Zvcm06ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7dmFyIGg9TWF0aC5jb3MoZSk7ZT1NYXRoLnNpbihlKTt0aGlzLnNldChjKmgsYyplLC1jKihoKmYrZSpnKStmK2EsLWQqZSxkKmgsLWQqKC1lKmYraCpnKStnK2IsMCwwLDEpfSxzY2FsZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZWxlbWVudHM7Y1swXSo9YTtjWzNdKj1hO2NbNl0qPWE7Y1sxXSo9YjtjWzRdKj1iO2NbN10qPWI7cmV0dXJuIHRoaXN9LHJvdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmNvcyhhKTthPU1hdGguc2luKGEpO3ZhciBjPXRoaXMuZWxlbWVudHMsZD1jWzBdLGU9Y1szXSxmPWNbNl0sZz1jWzFdLGg9Y1s0XSxcbiAgICBrPWNbN107Y1swXT1iKmQrYSpnO2NbM109YiplK2EqaDtjWzZdPWIqZithKms7Y1sxXT0tYSpkK2IqZztjWzRdPS1hKmUrYipoO2NbN109LWEqZitiKms7cmV0dXJuIHRoaXN9LHRyYW5zbGF0ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZWxlbWVudHM7Y1swXSs9YSpjWzJdO2NbM10rPWEqY1s1XTtjWzZdKz1hKmNbOF07Y1sxXSs9YipjWzJdO2NbNF0rPWIqY1s1XTtjWzddKz1iKmNbOF07cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO2E9YS5lbGVtZW50cztmb3IodmFyIGM9MDs5PmM7YysrKWlmKGJbY10hPT1hW2NdKXJldHVybiExO3JldHVybiEwfSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTtmb3IodmFyIGM9MDs5PmM7YysrKXRoaXMuZWxlbWVudHNbY109YVtjK2JdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO3ZhciBjPVxuICAgIHRoaXMuZWxlbWVudHM7YVtiXT1jWzBdO2FbYisxXT1jWzFdO2FbYisyXT1jWzJdO2FbYiszXT1jWzNdO2FbYis0XT1jWzRdO2FbYis1XT1jWzVdO2FbYis2XT1jWzZdO2FbYis3XT1jWzddO2FbYis4XT1jWzhdO3JldHVybiBhfX0pO3ZhciBBZj0wO1UuREVGQVVMVF9JTUFHRT12b2lkIDA7VS5ERUZBVUxUX01BUFBJTkc9MzAwO1UucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh6YS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpVLGlzVGV4dHVyZTohMCxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLm5hbWU9YS5uYW1lO3RoaXMuaW1hZ2U9YS5pbWFnZTt0aGlzLm1pcG1hcHM9YS5taXBtYXBzLnNsaWNlKDApO3RoaXMubWFwcGluZz1hLm1hcHBpbmc7dGhpcy53cmFwUz1hLndyYXBTO3RoaXMud3JhcFQ9YS53cmFwVDt0aGlzLm1hZ0ZpbHRlcj1hLm1hZ0ZpbHRlcjt0aGlzLm1pbkZpbHRlcj1cbiAgICBhLm1pbkZpbHRlcjt0aGlzLmFuaXNvdHJvcHk9YS5hbmlzb3Ryb3B5O3RoaXMuZm9ybWF0PWEuZm9ybWF0O3RoaXMudHlwZT1hLnR5cGU7dGhpcy5vZmZzZXQuY29weShhLm9mZnNldCk7dGhpcy5yZXBlYXQuY29weShhLnJlcGVhdCk7dGhpcy5jZW50ZXIuY29weShhLmNlbnRlcik7dGhpcy5yb3RhdGlvbj1hLnJvdGF0aW9uO3RoaXMubWF0cml4QXV0b1VwZGF0ZT1hLm1hdHJpeEF1dG9VcGRhdGU7dGhpcy5tYXRyaXguY29weShhLm1hdHJpeCk7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9YS5nZW5lcmF0ZU1pcG1hcHM7dGhpcy5wcmVtdWx0aXBseUFscGhhPWEucHJlbXVsdGlwbHlBbHBoYTt0aGlzLmZsaXBZPWEuZmxpcFk7dGhpcy51bnBhY2tBbGlnbm1lbnQ9YS51bnBhY2tBbGlnbm1lbnQ7dGhpcy5lbmNvZGluZz1hLmVuY29kaW5nO3JldHVybiB0aGlzfSx0b0pTT046ZnVuY3Rpb24oYSl7dmFyIGI9dm9pZCAwPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhO2lmKCFiJiZ2b2lkIDAhPT1cbiAgICBhLnRleHR1cmVzW3RoaXMudXVpZF0pcmV0dXJuIGEudGV4dHVyZXNbdGhpcy51dWlkXTt2YXIgYz17bWV0YWRhdGE6e3ZlcnNpb246NC41LHR5cGU6XCJUZXh0dXJlXCIsZ2VuZXJhdG9yOlwiVGV4dHVyZS50b0pTT05cIn0sdXVpZDp0aGlzLnV1aWQsbmFtZTp0aGlzLm5hbWUsbWFwcGluZzp0aGlzLm1hcHBpbmcscmVwZWF0Olt0aGlzLnJlcGVhdC54LHRoaXMucmVwZWF0LnldLG9mZnNldDpbdGhpcy5vZmZzZXQueCx0aGlzLm9mZnNldC55XSxjZW50ZXI6W3RoaXMuY2VudGVyLngsdGhpcy5jZW50ZXIueV0scm90YXRpb246dGhpcy5yb3RhdGlvbix3cmFwOlt0aGlzLndyYXBTLHRoaXMud3JhcFRdLG1pbkZpbHRlcjp0aGlzLm1pbkZpbHRlcixtYWdGaWx0ZXI6dGhpcy5tYWdGaWx0ZXIsYW5pc290cm9weTp0aGlzLmFuaXNvdHJvcHksZmxpcFk6dGhpcy5mbGlwWX07aWYodm9pZCAwIT09dGhpcy5pbWFnZSl7dmFyIGQ9dGhpcy5pbWFnZTt2b2lkIDA9PT1kLnV1aWQmJihkLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKSk7XG4gICAgaWYoIWImJnZvaWQgMD09PWEuaW1hZ2VzW2QudXVpZF0pe3ZhciBlPWEuaW1hZ2VzLGY9ZC51dWlkLGc9ZC51dWlkO2lmKGQgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCl2YXIgaD1kO2Vsc2V7aD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXCJjYW52YXNcIik7aC53aWR0aD1kLndpZHRoO2guaGVpZ2h0PWQuaGVpZ2h0O3ZhciBrPWguZ2V0Q29udGV4dChcIjJkXCIpO2QgaW5zdGFuY2VvZiBJbWFnZURhdGE/ay5wdXRJbWFnZURhdGEoZCwwLDApOmsuZHJhd0ltYWdlKGQsMCwwLGQud2lkdGgsZC5oZWlnaHQpfWg9MjA0ODxoLndpZHRofHwyMDQ4PGguaGVpZ2h0P2gudG9EYXRhVVJMKFwiaW1hZ2UvanBlZ1wiLC42KTpoLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtlW2ZdPXt1dWlkOmcsdXJsOmh9fWMuaW1hZ2U9ZC51dWlkfWJ8fChhLnRleHR1cmVzW3RoaXMudXVpZF09Yyk7cmV0dXJuIGN9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX0sXG4gICAgdHJhbnNmb3JtVXY6ZnVuY3Rpb24oYSl7aWYoMzAwPT09dGhpcy5tYXBwaW5nKXthLmFwcGx5TWF0cml4Myh0aGlzLm1hdHJpeCk7aWYoMD5hLnh8fDE8YS54KXN3aXRjaCh0aGlzLndyYXBTKXtjYXNlIDFFMzphLngtPU1hdGguZmxvb3IoYS54KTticmVhaztjYXNlIDEwMDE6YS54PTA+YS54PzA6MTticmVhaztjYXNlIDEwMDI6YS54PTE9PT1NYXRoLmFicyhNYXRoLmZsb29yKGEueCklMik/TWF0aC5jZWlsKGEueCktYS54OmEueC1NYXRoLmZsb29yKGEueCl9aWYoMD5hLnl8fDE8YS55KXN3aXRjaCh0aGlzLndyYXBUKXtjYXNlIDFFMzphLnktPU1hdGguZmxvb3IoYS55KTticmVhaztjYXNlIDEwMDE6YS55PTA+YS55PzA6MTticmVhaztjYXNlIDEwMDI6YS55PTE9PT1NYXRoLmFicyhNYXRoLmZsb29yKGEueSklMik/TWF0aC5jZWlsKGEueSktYS55OmEueS1NYXRoLmZsb29yKGEueSl9dGhpcy5mbGlwWSYmKGEueT0xLWEueSl9fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShVLnByb3RvdHlwZSxcbiAgICBcIm5lZWRzVXBkYXRlXCIse3NldDpmdW5jdGlvbihhKXshMD09PWEmJnRoaXMudmVyc2lvbisrfX0pO09iamVjdC5hc3NpZ24oYWEucHJvdG90eXBlLHtpc1ZlY3RvcjQ6ITAsc2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMueD1hO3RoaXMueT1iO3RoaXMuej1jO3RoaXMudz1kO3JldHVybiB0aGlzfSxzZXRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy53PXRoaXMuej10aGlzLnk9dGhpcy54PWE7cmV0dXJuIHRoaXN9LHNldFg6ZnVuY3Rpb24oYSl7dGhpcy54PWE7cmV0dXJuIHRoaXN9LHNldFk6ZnVuY3Rpb24oYSl7dGhpcy55PWE7cmV0dXJuIHRoaXN9LHNldFo6ZnVuY3Rpb24oYSl7dGhpcy56PWE7cmV0dXJuIHRoaXN9LHNldFc6ZnVuY3Rpb24oYSl7dGhpcy53PWE7cmV0dXJuIHRoaXN9LHNldENvbXBvbmVudDpmdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDA6dGhpcy54PWI7YnJlYWs7Y2FzZSAxOnRoaXMueT1iO2JyZWFrO2Nhc2UgMjp0aGlzLno9YjticmVhaztjYXNlIDM6dGhpcy53PVxuICAgIGI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fXJldHVybiB0aGlzfSxnZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgMDpyZXR1cm4gdGhpcy54O2Nhc2UgMTpyZXR1cm4gdGhpcy55O2Nhc2UgMjpyZXR1cm4gdGhpcy56O2Nhc2UgMzpyZXR1cm4gdGhpcy53O2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCx0aGlzLnksdGhpcy56LHRoaXMudyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy54PWEueDt0aGlzLnk9YS55O3RoaXMuej1hLno7dGhpcy53PXZvaWQgMCE9PWEudz9hLnc6MTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yNDogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSxcbiAgICB0aGlzLmFkZFZlY3RvcnMoYSxiKTt0aGlzLngrPWEueDt0aGlzLnkrPWEueTt0aGlzLnorPWEuejt0aGlzLncrPWEudztyZXR1cm4gdGhpc30sYWRkU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueCs9YTt0aGlzLnkrPWE7dGhpcy56Kz1hO3RoaXMudys9YTtyZXR1cm4gdGhpc30sYWRkVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3RoaXMuej1hLnorYi56O3RoaXMudz1hLncrYi53O3JldHVybiB0aGlzfSxhZGRTY2FsZWRWZWN0b3I6ZnVuY3Rpb24oYSxiKXt0aGlzLngrPWEueCpiO3RoaXMueSs9YS55KmI7dGhpcy56Kz1hLnoqYjt0aGlzLncrPWEudypiO3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3I0OiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuc3ViVmVjdG9ycyhhLFxuICAgIGIpO3RoaXMueC09YS54O3RoaXMueS09YS55O3RoaXMuei09YS56O3RoaXMudy09YS53O3JldHVybiB0aGlzfSxzdWJTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54LT1hO3RoaXMueS09YTt0aGlzLnotPWE7dGhpcy53LT1hO3JldHVybiB0aGlzfSxzdWJWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueC1iLng7dGhpcy55PWEueS1iLnk7dGhpcy56PWEuei1iLno7dGhpcy53PWEudy1iLnc7cmV0dXJuIHRoaXN9LG11bHRpcGx5U2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueCo9YTt0aGlzLnkqPWE7dGhpcy56Kj1hO3RoaXMudyo9YTtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMueixlPXRoaXMudzthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzRdKmMrYVs4XSpkK2FbMTJdKmU7dGhpcy55PWFbMV0qYithWzVdKmMrYVs5XSpkK2FbMTNdKmU7dGhpcy56PWFbMl0qYithWzZdKmMrYVsxMF0qZCthWzE0XSpcbiAgICBlO3RoaXMudz1hWzNdKmIrYVs3XSpjK2FbMTFdKmQrYVsxNV0qZTtyZXR1cm4gdGhpc30sZGl2aWRlU2NhbGFyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKDEvYSl9LHNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe3RoaXMudz0yKk1hdGguYWNvcyhhLncpO3ZhciBiPU1hdGguc3FydCgxLWEudyphLncpOzFFLTQ+Yj8odGhpcy54PTEsdGhpcy56PXRoaXMueT0wKToodGhpcy54PWEueC9iLHRoaXMueT1hLnkvYix0aGlzLno9YS56L2IpO3JldHVybiB0aGlzfSxzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXg6ZnVuY3Rpb24oYSl7YT1hLmVsZW1lbnRzO3ZhciBiPWFbMF07dmFyIGM9YVs0XTt2YXIgZD1hWzhdLGU9YVsxXSxmPWFbNV0sZz1hWzldO3ZhciBoPWFbMl07dmFyIGs9YVs2XTt2YXIgbT1hWzEwXTtpZiguMDE+TWF0aC5hYnMoYy1lKSYmLjAxPk1hdGguYWJzKGQtaCkmJi4wMT5NYXRoLmFicyhnLWspKXtpZiguMT5NYXRoLmFicyhjK1xuICAgIGUpJiYuMT5NYXRoLmFicyhkK2gpJiYuMT5NYXRoLmFicyhnK2spJiYuMT5NYXRoLmFicyhiK2YrbS0zKSlyZXR1cm4gdGhpcy5zZXQoMSwwLDAsMCksdGhpczthPU1hdGguUEk7Yj0oYisxKS8yO2Y9KGYrMSkvMjttPShtKzEpLzI7Yz0oYytlKS80O2Q9KGQraCkvNDtnPShnK2spLzQ7Yj5mJiZiPm0/LjAxPmI/KGs9MCxjPWg9LjcwNzEwNjc4MSk6KGs9TWF0aC5zcXJ0KGIpLGg9Yy9rLGM9ZC9rKTpmPm0/LjAxPmY/KGs9LjcwNzEwNjc4MSxoPTAsYz0uNzA3MTA2NzgxKTooaD1NYXRoLnNxcnQoZiksaz1jL2gsYz1nL2gpOi4wMT5tPyhoPWs9LjcwNzEwNjc4MSxjPTApOihjPU1hdGguc3FydChtKSxrPWQvYyxoPWcvYyk7dGhpcy5zZXQoayxoLGMsYSk7cmV0dXJuIHRoaXN9YT1NYXRoLnNxcnQoKGstZykqKGstZykrKGQtaCkqKGQtaCkrKGUtYykqKGUtYykpOy4wMDE+TWF0aC5hYnMoYSkmJihhPTEpO3RoaXMueD0oay1nKS9hO3RoaXMueT0oZC1oKS9hO3RoaXMuej0oZS1jKS9hO1xuICAgIHRoaXMudz1NYXRoLmFjb3MoKGIrZittLTEpLzIpO3JldHVybiB0aGlzfSxtaW46ZnVuY3Rpb24oYSl7dGhpcy54PU1hdGgubWluKHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1pbih0aGlzLnksYS55KTt0aGlzLno9TWF0aC5taW4odGhpcy56LGEueik7dGhpcy53PU1hdGgubWluKHRoaXMudyxhLncpO3JldHVybiB0aGlzfSxtYXg6ZnVuY3Rpb24oYSl7dGhpcy54PU1hdGgubWF4KHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1heCh0aGlzLnksYS55KTt0aGlzLno9TWF0aC5tYXgodGhpcy56LGEueik7dGhpcy53PU1hdGgubWF4KHRoaXMudyxhLncpO3JldHVybiB0aGlzfSxjbGFtcDpmdW5jdGlvbihhLGIpe3RoaXMueD1NYXRoLm1heChhLngsTWF0aC5taW4oYi54LHRoaXMueCkpO3RoaXMueT1NYXRoLm1heChhLnksTWF0aC5taW4oYi55LHRoaXMueSkpO3RoaXMuej1NYXRoLm1heChhLnosTWF0aC5taW4oYi56LHRoaXMueikpO3RoaXMudz1NYXRoLm1heChhLncsTWF0aC5taW4oYi53LFxuICAgIHRoaXMudykpO3JldHVybiB0aGlzfSxjbGFtcFNjYWxhcjpmdW5jdGlvbigpe3ZhciBhLGI7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7dm9pZCAwPT09YSYmKGE9bmV3IGFhLGI9bmV3IGFhKTthLnNldChjLGMsYyxjKTtiLnNldChkLGQsZCxkKTtyZXR1cm4gdGhpcy5jbGFtcChhLGIpfX0oKSxjbGFtcExlbmd0aDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMubGVuZ3RoKCk7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKGN8fDEpLm11bHRpcGx5U2NhbGFyKE1hdGgubWF4KGEsTWF0aC5taW4oYixjKSkpfSxmbG9vcjpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PU1hdGguZmxvb3IodGhpcy55KTt0aGlzLno9TWF0aC5mbG9vcih0aGlzLnopO3RoaXMudz1NYXRoLmZsb29yKHRoaXMudyk7cmV0dXJuIHRoaXN9LGNlaWw6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5jZWlsKHRoaXMueCk7dGhpcy55PU1hdGguY2VpbCh0aGlzLnkpO3RoaXMuej1NYXRoLmNlaWwodGhpcy56KTtcbiAgICB0aGlzLnc9TWF0aC5jZWlsKHRoaXMudyk7cmV0dXJuIHRoaXN9LHJvdW5kOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGgucm91bmQodGhpcy54KTt0aGlzLnk9TWF0aC5yb3VuZCh0aGlzLnkpO3RoaXMuej1NYXRoLnJvdW5kKHRoaXMueik7dGhpcy53PU1hdGgucm91bmQodGhpcy53KTtyZXR1cm4gdGhpc30scm91bmRUb1plcm86ZnVuY3Rpb24oKXt0aGlzLng9MD50aGlzLng/TWF0aC5jZWlsKHRoaXMueCk6TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT0wPnRoaXMueT9NYXRoLmNlaWwodGhpcy55KTpNYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PTA+dGhpcy56P01hdGguY2VpbCh0aGlzLnopOk1hdGguZmxvb3IodGhpcy56KTt0aGlzLnc9MD50aGlzLnc/TWF0aC5jZWlsKHRoaXMudyk6TWF0aC5mbG9vcih0aGlzLncpO3JldHVybiB0aGlzfSxuZWdhdGU6ZnVuY3Rpb24oKXt0aGlzLng9LXRoaXMueDt0aGlzLnk9LXRoaXMueTt0aGlzLno9LXRoaXMuejt0aGlzLnc9LXRoaXMudztyZXR1cm4gdGhpc30sXG4gICAgZG90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLngqYS54K3RoaXMueSphLnkrdGhpcy56KmEueit0aGlzLncqYS53fSxsZW5ndGhTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMueit0aGlzLncqdGhpcy53fSxsZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSt0aGlzLnoqdGhpcy56K3RoaXMudyp0aGlzLncpfSxtYW5oYXR0YW5MZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5hYnModGhpcy54KStNYXRoLmFicyh0aGlzLnkpK01hdGguYWJzKHRoaXMueikrTWF0aC5hYnModGhpcy53KX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCl8fDEpfSxzZXRMZW5ndGg6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoYSl9LGxlcnA6ZnVuY3Rpb24oYSxiKXt0aGlzLngrPVxuICAgIChhLngtdGhpcy54KSpiO3RoaXMueSs9KGEueS10aGlzLnkpKmI7dGhpcy56Kz0oYS56LXRoaXMueikqYjt0aGlzLncrPShhLnctdGhpcy53KSpiO3JldHVybiB0aGlzfSxsZXJwVmVjdG9yczpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyhiLGEpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKX0sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLng9PT10aGlzLngmJmEueT09PXRoaXMueSYmYS56PT09dGhpcy56JiZhLnc9PT10aGlzLnd9LGZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMueD1hW2JdO3RoaXMueT1hW2IrMV07dGhpcy56PWFbYisyXTt0aGlzLnc9YVtiKzNdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy54O2FbYisxXT10aGlzLnk7YVtiKzJdPXRoaXMuejthW2IrM109dGhpcy53O3JldHVybiBhfSxmcm9tQnVmZmVyQXR0cmlidXRlOmZ1bmN0aW9uKGEsXG4gICAgYixjKXt2b2lkIDAhPT1jJiZjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3I0OiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuXCIpO3RoaXMueD1hLmdldFgoYik7dGhpcy55PWEuZ2V0WShiKTt0aGlzLno9YS5nZXRaKGIpO3RoaXMudz1hLmdldFcoYik7cmV0dXJuIHRoaXN9fSk7a2IucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh6YS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjprYixpc1dlYkdMUmVuZGVyVGFyZ2V0OiEwLHNldFNpemU6ZnVuY3Rpb24oYSxiKXtpZih0aGlzLndpZHRoIT09YXx8dGhpcy5oZWlnaHQhPT1iKXRoaXMud2lkdGg9YSx0aGlzLmhlaWdodD1iLHRoaXMuZGlzcG9zZSgpO3RoaXMudmlld3BvcnQuc2V0KDAsMCxhLGIpO3RoaXMuc2Npc3Nvci5zZXQoMCwwLGEsYil9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMud2lkdGg9XG4gICAgYS53aWR0aDt0aGlzLmhlaWdodD1hLmhlaWdodDt0aGlzLnZpZXdwb3J0LmNvcHkoYS52aWV3cG9ydCk7dGhpcy50ZXh0dXJlPWEudGV4dHVyZS5jbG9uZSgpO3RoaXMuZGVwdGhCdWZmZXI9YS5kZXB0aEJ1ZmZlcjt0aGlzLnN0ZW5jaWxCdWZmZXI9YS5zdGVuY2lsQnVmZmVyO3RoaXMuZGVwdGhUZXh0dXJlPWEuZGVwdGhUZXh0dXJlO3JldHVybiB0aGlzfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9fSk7SmIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoa2IucHJvdG90eXBlKTtKYi5wcm90b3R5cGUuY29uc3RydWN0b3I9SmI7SmIucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlPSEwO2xiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFUucHJvdG90eXBlKTtsYi5wcm90b3R5cGUuY29uc3RydWN0b3I9bGI7bGIucHJvdG90eXBlLmlzRGF0YVRleHR1cmU9ITA7ZGIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVS5wcm90b3R5cGUpO1xuICAgIGRiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1kYjtkYi5wcm90b3R5cGUuaXNDdWJlVGV4dHVyZT0hMDtPYmplY3QuZGVmaW5lUHJvcGVydHkoZGIucHJvdG90eXBlLFwiaW1hZ2VzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmltYWdlfSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5pbWFnZT1hfX0pO3ZhciBOZT1uZXcgVSxPZT1uZXcgZGIsSWU9W10sS2U9W10sTWU9bmV3IEZsb2F0MzJBcnJheSgxNiksTGU9bmV3IEZsb2F0MzJBcnJheSg5KTtTZS5wcm90b3R5cGUuc2V0VmFsdWU9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5zZXEsZD0wLGU9Yy5sZW5ndGg7ZCE9PWU7KytkKXt2YXIgZj1jW2RdO2Yuc2V0VmFsdWUoYSxiW2YuaWRdKX19O3ZhciBWZD0vKFtcXHdcXGRfXSspKFxcXSk/KFxcW3xcXC4pPy9nO21iLnByb3RvdHlwZS5zZXRWYWx1ZT1mdW5jdGlvbihhLGIsYyl7Yj10aGlzLm1hcFtiXTt2b2lkIDAhPT1iJiZiLnNldFZhbHVlKGEsYyx0aGlzLnJlbmRlcmVyKX07bWIucHJvdG90eXBlLnNldE9wdGlvbmFsPVxuICAgIGZ1bmN0aW9uKGEsYixjKXtiPWJbY107dm9pZCAwIT09YiYmdGhpcy5zZXRWYWx1ZShhLGMsYil9O21iLnVwbG9hZD1mdW5jdGlvbihhLGIsYyxkKXtmb3IodmFyIGU9MCxmPWIubGVuZ3RoO2UhPT1mOysrZSl7dmFyIGc9YltlXSxoPWNbZy5pZF07ITEhPT1oLm5lZWRzVXBkYXRlJiZnLnNldFZhbHVlKGEsaC52YWx1ZSxkKX19O21iLnNlcVdpdGhWYWx1ZT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXSxkPTAsZT1hLmxlbmd0aDtkIT09ZTsrK2Qpe3ZhciBmPWFbZF07Zi5pZCBpbiBiJiZjLnB1c2goZil9cmV0dXJuIGN9O3ZhciBLZz17YWxpY2VibHVlOjE1NzkyMzgzLGFudGlxdWV3aGl0ZToxNjQ0NDM3NSxhcXVhOjY1NTM1LGFxdWFtYXJpbmU6ODM4ODU2NCxhenVyZToxNTc5NDE3NSxiZWlnZToxNjExOTI2MCxiaXNxdWU6MTY3NzAyNDQsYmxhY2s6MCxibGFuY2hlZGFsbW9uZDoxNjc3MjA0NSxibHVlOjI1NSxibHVldmlvbGV0OjkwNTUyMDIsYnJvd246MTA4MjQyMzQsYnVybHl3b29kOjE0NTk2MjMxLFxuICAgIGNhZGV0Ymx1ZTo2MjY2NTI4LGNoYXJ0cmV1c2U6ODM4ODM1MixjaG9jb2xhdGU6MTM3ODk0NzAsY29yYWw6MTY3NDQyNzIsY29ybmZsb3dlcmJsdWU6NjU5MTk4MSxjb3Juc2lsazoxNjc3NTM4OCxjcmltc29uOjE0NDIzMTAwLGN5YW46NjU1MzUsZGFya2JsdWU6MTM5LGRhcmtjeWFuOjM1NzIzLGRhcmtnb2xkZW5yb2Q6MTIwOTI5MzksZGFya2dyYXk6MTExMTkwMTcsZGFya2dyZWVuOjI1NjAwLGRhcmtncmV5OjExMTE5MDE3LGRhcmtraGFraToxMjQzMzI1OSxkYXJrbWFnZW50YTo5MTA5NjQzLGRhcmtvbGl2ZWdyZWVuOjU1OTc5OTksZGFya29yYW5nZToxNjc0NzUyMCxkYXJrb3JjaGlkOjEwMDQwMDEyLGRhcmtyZWQ6OTEwOTUwNCxkYXJrc2FsbW9uOjE1MzA4NDEwLGRhcmtzZWFncmVlbjo5NDE5OTE5LGRhcmtzbGF0ZWJsdWU6NDczNDM0NyxkYXJrc2xhdGVncmF5OjMxMDA0OTUsZGFya3NsYXRlZ3JleTozMTAwNDk1LGRhcmt0dXJxdW9pc2U6NTI5NDUsZGFya3Zpb2xldDo5Njk5NTM5LFxuICAgIGRlZXBwaW5rOjE2NzE2OTQ3LGRlZXBza3libHVlOjQ5MTUxLGRpbWdyYXk6NjkwODI2NSxkaW1ncmV5OjY5MDgyNjUsZG9kZ2VyYmx1ZToyMDAzMTk5LGZpcmVicmljazoxMTY3NDE0NixmbG9yYWx3aGl0ZToxNjc3NTkyMCxmb3Jlc3RncmVlbjoyMjYzODQyLGZ1Y2hzaWE6MTY3MTE5MzUsZ2FpbnNib3JvOjE0NDc0NDYwLGdob3N0d2hpdGU6MTYzMTY2NzEsZ29sZDoxNjc2NjcyMCxnb2xkZW5yb2Q6MTQzMjkxMjAsZ3JheTo4NDIxNTA0LGdyZWVuOjMyNzY4LGdyZWVueWVsbG93OjExNDAzMDU1LGdyZXk6ODQyMTUwNCxob25leWRldzoxNTc5NDE2MCxob3RwaW5rOjE2NzM4NzQwLGluZGlhbnJlZDoxMzQ1ODUyNCxpbmRpZ286NDkxNTMzMCxpdm9yeToxNjc3NzIwMCxraGFraToxNTc4NzY2MCxsYXZlbmRlcjoxNTEzMjQxMCxsYXZlbmRlcmJsdXNoOjE2NzczMzY1LGxhd25ncmVlbjo4MTkwOTc2LGxlbW9uY2hpZmZvbjoxNjc3NTg4NSxsaWdodGJsdWU6MTEzOTMyNTQsbGlnaHRjb3JhbDoxNTc2MTUzNixcbiAgICBsaWdodGN5YW46MTQ3NDU1OTksbGlnaHRnb2xkZW5yb2R5ZWxsb3c6MTY0NDgyMTAsbGlnaHRncmF5OjEzODgyMzIzLGxpZ2h0Z3JlZW46OTQ5ODI1NixsaWdodGdyZXk6MTM4ODIzMjMsbGlnaHRwaW5rOjE2NzU4NDY1LGxpZ2h0c2FsbW9uOjE2NzUyNzYyLGxpZ2h0c2VhZ3JlZW46MjE0Mjg5MCxsaWdodHNreWJsdWU6ODkwMDM0NixsaWdodHNsYXRlZ3JheTo3ODMzNzUzLGxpZ2h0c2xhdGVncmV5Ojc4MzM3NTMsbGlnaHRzdGVlbGJsdWU6MTE1ODQ3MzQsbGlnaHR5ZWxsb3c6MTY3NzcxODQsbGltZTo2NTI4MCxsaW1lZ3JlZW46MzMyOTMzMCxsaW5lbjoxNjQ0NTY3MCxtYWdlbnRhOjE2NzExOTM1LG1hcm9vbjo4Mzg4NjA4LG1lZGl1bWFxdWFtYXJpbmU6NjczNzMyMixtZWRpdW1ibHVlOjIwNSxtZWRpdW1vcmNoaWQ6MTIyMTE2NjcsbWVkaXVtcHVycGxlOjk2NjI2ODMsbWVkaXVtc2VhZ3JlZW46Mzk3ODA5NyxtZWRpdW1zbGF0ZWJsdWU6ODA4Nzc5MCxtZWRpdW1zcHJpbmdncmVlbjo2NDE1NCxcbiAgICBtZWRpdW10dXJxdW9pc2U6NDc3MjMwMCxtZWRpdW12aW9sZXRyZWQ6MTMwNDcxNzMsbWlkbmlnaHRibHVlOjE2NDQ5MTIsbWludGNyZWFtOjE2MTIxODUwLG1pc3R5cm9zZToxNjc3MDI3Myxtb2NjYXNpbjoxNjc3MDIyOSxuYXZham93aGl0ZToxNjc2ODY4NSxuYXZ5OjEyOCxvbGRsYWNlOjE2NjQzNTU4LG9saXZlOjg0MjEzNzYsb2xpdmVkcmFiOjcwNDg3Mzksb3JhbmdlOjE2NzUzOTIwLG9yYW5nZXJlZDoxNjcyOTM0NCxvcmNoaWQ6MTQzMTU3MzQscGFsZWdvbGRlbnJvZDoxNTY1NzEzMCxwYWxlZ3JlZW46MTAwMjU4ODAscGFsZXR1cnF1b2lzZToxMTUyOTk2NixwYWxldmlvbGV0cmVkOjE0MzgxMjAzLHBhcGF5YXdoaXA6MTY3NzMwNzcscGVhY2hwdWZmOjE2NzY3NjczLHBlcnU6MTM0Njg5OTEscGluazoxNjc2MTAzNSxwbHVtOjE0NTI0NjM3LHBvd2RlcmJsdWU6MTE1OTE5MTAscHVycGxlOjgzODg3MzYscmViZWNjYXB1cnBsZTo2Njk3ODgxLHJlZDoxNjcxMTY4MCxyb3N5YnJvd246MTIzNTc1MTksXG4gICAgcm95YWxibHVlOjQyODY5NDUsc2FkZGxlYnJvd246OTEyNzE4NyxzYWxtb246MTY0MTY4ODIsc2FuZHlicm93bjoxNjAzMjg2NCxzZWFncmVlbjozMDUwMzI3LHNlYXNoZWxsOjE2Nzc0NjM4LHNpZW5uYToxMDUwNjc5NyxzaWx2ZXI6MTI2MzIyNTYsc2t5Ymx1ZTo4OTAwMzMxLHNsYXRlYmx1ZTo2OTcwMDYxLHNsYXRlZ3JheTo3MzcyOTQ0LHNsYXRlZ3JleTo3MzcyOTQ0LHNub3c6MTY3NzU5MzAsc3ByaW5nZ3JlZW46NjU0MDcsc3RlZWxibHVlOjQ2MjA5ODAsdGFuOjEzODA4NzgwLHRlYWw6MzI4OTYsdGhpc3RsZToxNDIwNDg4OCx0b21hdG86MTY3MzcwOTUsdHVycXVvaXNlOjQyNTE4NTYsdmlvbGV0OjE1NjMxMDg2LHdoZWF0OjE2MTEzMzMxLHdoaXRlOjE2Nzc3MjE1LHdoaXRlc21va2U6MTYxMTkyODUseWVsbG93OjE2Nzc2OTYwLHllbGxvd2dyZWVuOjEwMTQ1MDc0fTtPYmplY3QuYXNzaWduKEgucHJvdG90eXBlLHtpc0NvbG9yOiEwLHI6MSxnOjEsYjoxLHNldDpmdW5jdGlvbihhKXthJiZcbiAgICBhLmlzQ29sb3I/dGhpcy5jb3B5KGEpOlwibnVtYmVyXCI9PT10eXBlb2YgYT90aGlzLnNldEhleChhKTpcInN0cmluZ1wiPT09dHlwZW9mIGEmJnRoaXMuc2V0U3R5bGUoYSk7cmV0dXJuIHRoaXN9LHNldFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLmI9dGhpcy5nPXRoaXMucj1hO3JldHVybiB0aGlzfSxzZXRIZXg6ZnVuY3Rpb24oYSl7YT1NYXRoLmZsb29yKGEpO3RoaXMucj0oYT4+MTYmMjU1KS8yNTU7dGhpcy5nPShhPj44JjI1NSkvMjU1O3RoaXMuYj0oYSYyNTUpLzI1NTtyZXR1cm4gdGhpc30sc2V0UkdCOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnI9YTt0aGlzLmc9Yjt0aGlzLmI9YztyZXR1cm4gdGhpc30sc2V0SFNMOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGMsZCl7MD5kJiYoZCs9MSk7MTxkJiYtLWQ7cmV0dXJuIGQ8MS82P2ErNiooYy1hKSpkOi41PmQ/YzpkPDIvMz9hKzYqKGMtYSkqKDIvMy1kKTphfXJldHVybiBmdW5jdGlvbihiLGMsZCl7Yj1RLmV1Y2xpZGVhbk1vZHVsbyhiLFxuICAgIDEpO2M9US5jbGFtcChjLDAsMSk7ZD1RLmNsYW1wKGQsMCwxKTswPT09Yz90aGlzLnI9dGhpcy5nPXRoaXMuYj1kOihjPS41Pj1kP2QqKDErYyk6ZCtjLWQqYyxkPTIqZC1jLHRoaXMucj1hKGQsYyxiKzEvMyksdGhpcy5nPWEoZCxjLGIpLHRoaXMuYj1hKGQsYyxiLTEvMykpO3JldHVybiB0aGlzfX0oKSxzZXRTdHlsZTpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGIpe3ZvaWQgMCE9PWImJjE+cGFyc2VGbG9hdChiKSYmY29uc29sZS53YXJuKFwiVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiBcIithK1wiIHdpbGwgYmUgaWdub3JlZC5cIil9dmFyIGM7aWYoYz0vXigoPzpyZ2J8aHNsKWE/KVxcKFxccyooW15cXCldKilcXCkvLmV4ZWMoYSkpe3ZhciBkPWNbMl07c3dpdGNoKGNbMV0pe2Nhc2UgXCJyZ2JcIjpjYXNlIFwicmdiYVwiOmlmKGM9L14oXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyhkKSlyZXR1cm4gdGhpcy5yPU1hdGgubWluKDI1NSxcbiAgICBwYXJzZUludChjWzFdLDEwKSkvMjU1LHRoaXMuZz1NYXRoLm1pbigyNTUscGFyc2VJbnQoY1syXSwxMCkpLzI1NSx0aGlzLmI9TWF0aC5taW4oMjU1LHBhcnNlSW50KGNbM10sMTApKS8yNTUsYihjWzVdKSx0aGlzO2lmKGM9L14oXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyhkKSlyZXR1cm4gdGhpcy5yPU1hdGgubWluKDEwMCxwYXJzZUludChjWzFdLDEwKSkvMTAwLHRoaXMuZz1NYXRoLm1pbigxMDAscGFyc2VJbnQoY1syXSwxMCkpLzEwMCx0aGlzLmI9TWF0aC5taW4oMTAwLHBhcnNlSW50KGNbM10sMTApKS8xMDAsYihjWzVdKSx0aGlzO2JyZWFrO2Nhc2UgXCJoc2xcIjpjYXNlIFwiaHNsYVwiOmlmKGM9L14oWzAtOV0qXFwuP1swLTldKylcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyhkKSl7dmFyIGQ9cGFyc2VGbG9hdChjWzFdKS8zNjAsXG4gICAgZT1wYXJzZUludChjWzJdLDEwKS8xMDAsZj1wYXJzZUludChjWzNdLDEwKS8xMDA7YihjWzVdKTtyZXR1cm4gdGhpcy5zZXRIU0woZCxlLGYpfX19ZWxzZSBpZihjPS9eXFwjKFtBLUZhLWYwLTldKykkLy5leGVjKGEpKXtjPWNbMV07ZD1jLmxlbmd0aDtpZigzPT09ZClyZXR1cm4gdGhpcy5yPXBhcnNlSW50KGMuY2hhckF0KDApK2MuY2hhckF0KDApLDE2KS8yNTUsdGhpcy5nPXBhcnNlSW50KGMuY2hhckF0KDEpK2MuY2hhckF0KDEpLDE2KS8yNTUsdGhpcy5iPXBhcnNlSW50KGMuY2hhckF0KDIpK2MuY2hhckF0KDIpLDE2KS8yNTUsdGhpcztpZig2PT09ZClyZXR1cm4gdGhpcy5yPXBhcnNlSW50KGMuY2hhckF0KDApK2MuY2hhckF0KDEpLDE2KS8yNTUsdGhpcy5nPXBhcnNlSW50KGMuY2hhckF0KDIpK2MuY2hhckF0KDMpLDE2KS8yNTUsdGhpcy5iPXBhcnNlSW50KGMuY2hhckF0KDQpK2MuY2hhckF0KDUpLDE2KS8yNTUsdGhpc31hJiYwPGEubGVuZ3RoJiYoYz1LZ1thXSx2b2lkIDAhPT1cbiAgICBjP3RoaXMuc2V0SGV4KGMpOmNvbnNvbGUud2FybihcIlRIUkVFLkNvbG9yOiBVbmtub3duIGNvbG9yIFwiK2EpKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5yLHRoaXMuZyx0aGlzLmIpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMucj1hLnI7dGhpcy5nPWEuZzt0aGlzLmI9YS5iO3JldHVybiB0aGlzfSxjb3B5R2FtbWFUb0xpbmVhcjpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTIpO3RoaXMucj1NYXRoLnBvdyhhLnIsYik7dGhpcy5nPU1hdGgucG93KGEuZyxiKTt0aGlzLmI9TWF0aC5wb3coYS5iLGIpO3JldHVybiB0aGlzfSxjb3B5TGluZWFyVG9HYW1tYTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTIpO2I9MDxiPzEvYjoxO3RoaXMucj1NYXRoLnBvdyhhLnIsYik7dGhpcy5nPU1hdGgucG93KGEuZyxiKTt0aGlzLmI9TWF0aC5wb3coYS5iLGIpO3JldHVybiB0aGlzfSxjb252ZXJ0R2FtbWFUb0xpbmVhcjpmdW5jdGlvbigpe3ZhciBhPVxuICAgIHRoaXMucixiPXRoaXMuZyxjPXRoaXMuYjt0aGlzLnI9YSphO3RoaXMuZz1iKmI7dGhpcy5iPWMqYztyZXR1cm4gdGhpc30sY29udmVydExpbmVhclRvR2FtbWE6ZnVuY3Rpb24oKXt0aGlzLnI9TWF0aC5zcXJ0KHRoaXMucik7dGhpcy5nPU1hdGguc3FydCh0aGlzLmcpO3RoaXMuYj1NYXRoLnNxcnQodGhpcy5iKTtyZXR1cm4gdGhpc30sZ2V0SGV4OmZ1bmN0aW9uKCl7cmV0dXJuIDI1NSp0aGlzLnI8PDE2XjI1NSp0aGlzLmc8PDheMjU1KnRoaXMuYjw8MH0sZ2V0SGV4U3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuKFwiMDAwMDAwXCIrdGhpcy5nZXRIZXgoKS50b1N0cmluZygxNikpLnNsaWNlKC02KX0sZ2V0SFNMOmZ1bmN0aW9uKGEpe2E9YXx8e2g6MCxzOjAsbDowfTt2YXIgYj10aGlzLnIsYz10aGlzLmcsZD10aGlzLmIsZT1NYXRoLm1heChiLGMsZCksZj1NYXRoLm1pbihiLGMsZCksZyxoPShmK2UpLzI7aWYoZj09PWUpZj1nPTA7ZWxzZXt2YXIgaz1lLWYsZj0uNT49aD9rLyhlK2YpOlxuICAgIGsvKDItZS1mKTtzd2l0Y2goZSl7Y2FzZSBiOmc9KGMtZCkvaysoYzxkPzY6MCk7YnJlYWs7Y2FzZSBjOmc9KGQtYikvaysyO2JyZWFrO2Nhc2UgZDpnPShiLWMpL2srNH1nLz02fWEuaD1nO2Eucz1mO2EubD1oO3JldHVybiBhfSxnZXRTdHlsZTpmdW5jdGlvbigpe3JldHVyblwicmdiKFwiKygyNTUqdGhpcy5yfDApK1wiLFwiKygyNTUqdGhpcy5nfDApK1wiLFwiKygyNTUqdGhpcy5ifDApK1wiKVwifSxvZmZzZXRIU0w6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuZ2V0SFNMKCk7ZC5oKz1hO2Qucys9YjtkLmwrPWM7dGhpcy5zZXRIU0woZC5oLGQucyxkLmwpO3JldHVybiB0aGlzfSxhZGQ6ZnVuY3Rpb24oYSl7dGhpcy5yKz1hLnI7dGhpcy5nKz1hLmc7dGhpcy5iKz1hLmI7cmV0dXJuIHRoaXN9LGFkZENvbG9yczpmdW5jdGlvbihhLGIpe3RoaXMucj1hLnIrYi5yO3RoaXMuZz1hLmcrYi5nO3RoaXMuYj1hLmIrYi5iO3JldHVybiB0aGlzfSxhZGRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5yKz1cbiAgICBhO3RoaXMuZys9YTt0aGlzLmIrPWE7cmV0dXJuIHRoaXN9LHN1YjpmdW5jdGlvbihhKXt0aGlzLnI9TWF0aC5tYXgoMCx0aGlzLnItYS5yKTt0aGlzLmc9TWF0aC5tYXgoMCx0aGlzLmctYS5nKTt0aGlzLmI9TWF0aC5tYXgoMCx0aGlzLmItYS5iKTtyZXR1cm4gdGhpc30sbXVsdGlwbHk6ZnVuY3Rpb24oYSl7dGhpcy5yKj1hLnI7dGhpcy5nKj1hLmc7dGhpcy5iKj1hLmI7cmV0dXJuIHRoaXN9LG11bHRpcGx5U2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMucio9YTt0aGlzLmcqPWE7dGhpcy5iKj1hO3JldHVybiB0aGlzfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy5yKz0oYS5yLXRoaXMucikqYjt0aGlzLmcrPShhLmctdGhpcy5nKSpiO3RoaXMuYis9KGEuYi10aGlzLmIpKmI7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5yPT09dGhpcy5yJiZhLmc9PT10aGlzLmcmJmEuYj09PXRoaXMuYn0sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9XG4gICAgMCk7dGhpcy5yPWFbYl07dGhpcy5nPWFbYisxXTt0aGlzLmI9YVtiKzJdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy5yO2FbYisxXT10aGlzLmc7YVtiKzJdPXRoaXMuYjtyZXR1cm4gYX0sdG9KU09OOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0SGV4KCl9fSk7dmFyIEs9e2NvbW1vbjp7ZGlmZnVzZTp7dmFsdWU6bmV3IEgoMTU2NTg3MzQpfSxvcGFjaXR5Ont2YWx1ZToxfSxtYXA6e3ZhbHVlOm51bGx9LHV2VHJhbnNmb3JtOnt2YWx1ZTpuZXcgbWF9LGFscGhhTWFwOnt2YWx1ZTpudWxsfX0sc3BlY3VsYXJtYXA6e3NwZWN1bGFyTWFwOnt2YWx1ZTpudWxsfX0sZW52bWFwOntlbnZNYXA6e3ZhbHVlOm51bGx9LGZsaXBFbnZNYXA6e3ZhbHVlOi0xfSxyZWZsZWN0aXZpdHk6e3ZhbHVlOjF9LHJlZnJhY3Rpb25SYXRpbzp7dmFsdWU6Ljk4fX0sYW9tYXA6e2FvTWFwOnt2YWx1ZTpudWxsfSxcbiAgICBhb01hcEludGVuc2l0eTp7dmFsdWU6MX19LGxpZ2h0bWFwOntsaWdodE1hcDp7dmFsdWU6bnVsbH0sbGlnaHRNYXBJbnRlbnNpdHk6e3ZhbHVlOjF9fSxlbWlzc2l2ZW1hcDp7ZW1pc3NpdmVNYXA6e3ZhbHVlOm51bGx9fSxidW1wbWFwOntidW1wTWFwOnt2YWx1ZTpudWxsfSxidW1wU2NhbGU6e3ZhbHVlOjF9fSxub3JtYWxtYXA6e25vcm1hbE1hcDp7dmFsdWU6bnVsbH0sbm9ybWFsU2NhbGU6e3ZhbHVlOm5ldyBEKDEsMSl9fSxkaXNwbGFjZW1lbnRtYXA6e2Rpc3BsYWNlbWVudE1hcDp7dmFsdWU6bnVsbH0sZGlzcGxhY2VtZW50U2NhbGU6e3ZhbHVlOjF9LGRpc3BsYWNlbWVudEJpYXM6e3ZhbHVlOjB9fSxyb3VnaG5lc3NtYXA6e3JvdWdobmVzc01hcDp7dmFsdWU6bnVsbH19LG1ldGFsbmVzc21hcDp7bWV0YWxuZXNzTWFwOnt2YWx1ZTpudWxsfX0sZ3JhZGllbnRtYXA6e2dyYWRpZW50TWFwOnt2YWx1ZTpudWxsfX0sZm9nOntmb2dEZW5zaXR5Ont2YWx1ZToyLjVFLTR9LGZvZ05lYXI6e3ZhbHVlOjF9LFxuICAgIGZvZ0Zhcjp7dmFsdWU6MkUzfSxmb2dDb2xvcjp7dmFsdWU6bmV3IEgoMTY3NzcyMTUpfX0sbGlnaHRzOnthbWJpZW50TGlnaHRDb2xvcjp7dmFsdWU6W119LGRpcmVjdGlvbmFsTGlnaHRzOnt2YWx1ZTpbXSxwcm9wZXJ0aWVzOntkaXJlY3Rpb246e30sY29sb3I6e30sc2hhZG93Ont9LHNoYWRvd0JpYXM6e30sc2hhZG93UmFkaXVzOnt9LHNoYWRvd01hcFNpemU6e319fSxkaXJlY3Rpb25hbFNoYWRvd01hcDp7dmFsdWU6W119LGRpcmVjdGlvbmFsU2hhZG93TWF0cml4Ont2YWx1ZTpbXX0sc3BvdExpZ2h0czp7dmFsdWU6W10scHJvcGVydGllczp7Y29sb3I6e30scG9zaXRpb246e30sZGlyZWN0aW9uOnt9LGRpc3RhbmNlOnt9LGNvbmVDb3M6e30scGVudW1icmFDb3M6e30sZGVjYXk6e30sc2hhZG93Ont9LHNoYWRvd0JpYXM6e30sc2hhZG93UmFkaXVzOnt9LHNoYWRvd01hcFNpemU6e319fSxzcG90U2hhZG93TWFwOnt2YWx1ZTpbXX0sc3BvdFNoYWRvd01hdHJpeDp7dmFsdWU6W119LFxuICAgIHBvaW50TGlnaHRzOnt2YWx1ZTpbXSxwcm9wZXJ0aWVzOntjb2xvcjp7fSxwb3NpdGlvbjp7fSxkZWNheTp7fSxkaXN0YW5jZTp7fSxzaGFkb3c6e30sc2hhZG93Qmlhczp7fSxzaGFkb3dSYWRpdXM6e30sc2hhZG93TWFwU2l6ZTp7fSxzaGFkb3dDYW1lcmFOZWFyOnt9LHNoYWRvd0NhbWVyYUZhcjp7fX19LHBvaW50U2hhZG93TWFwOnt2YWx1ZTpbXX0scG9pbnRTaGFkb3dNYXRyaXg6e3ZhbHVlOltdfSxoZW1pc3BoZXJlTGlnaHRzOnt2YWx1ZTpbXSxwcm9wZXJ0aWVzOntkaXJlY3Rpb246e30sc2t5Q29sb3I6e30sZ3JvdW5kQ29sb3I6e319fSxyZWN0QXJlYUxpZ2h0czp7dmFsdWU6W10scHJvcGVydGllczp7Y29sb3I6e30scG9zaXRpb246e30sd2lkdGg6e30saGVpZ2h0Ont9fX19LHBvaW50czp7ZGlmZnVzZTp7dmFsdWU6bmV3IEgoMTU2NTg3MzQpfSxvcGFjaXR5Ont2YWx1ZToxfSxzaXplOnt2YWx1ZToxfSxzY2FsZTp7dmFsdWU6MX0sbWFwOnt2YWx1ZTpudWxsfSx1dlRyYW5zZm9ybTp7dmFsdWU6bmV3IG1hfX19LFxuICAgIEdhPXttZXJnZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9e30sYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD10aGlzLmNsb25lKGFbY10pLGU7Zm9yKGUgaW4gZCliW2VdPWRbZV19cmV0dXJuIGJ9LGNsb25lOmZ1bmN0aW9uKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSl7YltjXT17fTtmb3IodmFyIGQgaW4gYVtjXSl7dmFyIGU9YVtjXVtkXTtlJiYoZS5pc0NvbG9yfHxlLmlzTWF0cml4M3x8ZS5pc01hdHJpeDR8fGUuaXNWZWN0b3IyfHxlLmlzVmVjdG9yM3x8ZS5pc1ZlY3RvcjR8fGUuaXNUZXh0dXJlKT9iW2NdW2RdPWUuY2xvbmUoKTpBcnJheS5pc0FycmF5KGUpP2JbY11bZF09ZS5zbGljZSgpOmJbY11bZF09ZX19cmV0dXJuIGJ9fSxSPXthbHBoYW1hcF9mcmFnbWVudDpcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcbiNlbmRpZlxcblwiLGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XFxuI2VuZGlmXFxuXCIsXG4gICAgYWxwaGF0ZXN0X2ZyYWdtZW50OlwiI2lmZGVmIEFMUEhBVEVTVFxcblxcdGlmICggZGlmZnVzZUNvbG9yLmEgPCBBTFBIQVRFU1QgKSBkaXNjYXJkO1xcbiNlbmRpZlxcblwiLGFvbWFwX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9BT01BUFxcblxcdGZsb2F0IGFtYmllbnRPY2NsdXNpb24gPSAoIHRleHR1cmUyRCggYW9NYXAsIHZVdjIgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciAqPSBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGRvdE5WLCBhbWJpZW50T2NjbHVzaW9uLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLFxuICAgIGFvbWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0FPTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYW9NYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBhb01hcEludGVuc2l0eTtcXG4jZW5kaWZcIixiZWdpbl92ZXJ0ZXg6XCJcXG52ZWMzIHRyYW5zZm9ybWVkID0gdmVjMyggcG9zaXRpb24gKTtcXG5cIixiZWdpbm5vcm1hbF92ZXJ0ZXg6XCJcXG52ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcblwiLGJzZGZzOlwiZmxvYXQgcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggY29uc3QgaW4gZmxvYXQgbGlnaHREaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XFxuXFx0aWYoIGRlY2F5RXhwb25lbnQgPiAwLjAgKSB7XFxuI2lmIGRlZmluZWQgKCBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTIClcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZUZhbGxvZmYgPSAxLjAgLyBtYXgoIHBvdyggbGlnaHREaXN0YW5jZSwgZGVjYXlFeHBvbmVudCApLCAwLjAxICk7XFxuXFx0XFx0ZmxvYXQgbWF4RGlzdGFuY2VDdXRvZmZGYWN0b3IgPSBwb3cyKCBzYXR1cmF0ZSggMS4wIC0gcG93NCggbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICkgKSApO1xcblxcdFxcdHJldHVybiBkaXN0YW5jZUZhbGxvZmYgKiBtYXhEaXN0YW5jZUN1dG9mZkZhY3RvcjtcXG4jZWxzZVxcblxcdFxcdHJldHVybiBwb3coIHNhdHVyYXRlKCAtbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICsgMS4wICksIGRlY2F5RXhwb25lbnQgKTtcXG4jZW5kaWZcXG5cXHR9XFxuXFx0cmV0dXJuIDEuMDtcXG59XFxudmVjMyBCUkRGX0RpZmZ1c2VfTGFtYmVydCggY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IgKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBkaWZmdXNlQ29sb3I7XFxufVxcbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IGRvdExIICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC01LjU1NDczICogZG90TEggLSA2Ljk4MzE2ICkgKiBkb3RMSCApO1xcblxcdHJldHVybiAoIDEuMCAtIHNwZWN1bGFyQ29sb3IgKSAqIGZyZXNuZWwgKyBzcGVjdWxhckNvbG9yO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROTCArIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdGZsb2F0IGd2ID0gZG90TlYgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRyZXR1cm4gMS4wIC8gKCBnbCAqIGd2ICk7XFxufVxcbmZsb2F0IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ3YgPSBkb3ROTCAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TlYgKSApO1xcblxcdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XFxufVxcbmZsb2F0IERfR0dYKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0dHWCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxudmVjMiBMVENfVXYoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NJWkUgID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyAgPSAwLjUgLyBMVVRfU0laRTtcXG5cXHRmbG9hdCB0aGV0YSA9IGFjb3MoIGRvdCggTiwgViApICk7XFxuXFx0dmVjMiB1diA9IHZlYzIoXFxuXFx0XFx0c3FydCggc2F0dXJhdGUoIHJvdWdobmVzcyApICksXFxuXFx0XFx0c2F0dXJhdGUoIHRoZXRhIC8gKCAwLjUgKiBQSSApICkgKTtcXG5cXHR1diA9IHV2ICogTFVUX1NDQUxFICsgTFVUX0JJQVM7XFxuXFx0cmV0dXJuIHV2O1xcbn1cXG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcXG5cXHRmbG9hdCBsID0gbGVuZ3RoKCBmICk7XFxuXFx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xcbn1cXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcXG5cXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcXG5cXHRmbG9hdCB5ID0gYWJzKCB4ICk7XFxuXFx0ZmxvYXQgYSA9IDAuODYyNjcgKyAoMC40OTc4OCArIDAuMDE0MzYgKiB5ICkgKiB5O1xcblxcdGZsb2F0IGIgPSAzLjQ1MDY4ICsgKDQuMTg4MTQgKyB5KSAqIHk7XFxuXFx0ZmxvYXQgdiA9IGEgLyBiO1xcblxcdGZsb2F0IHRoZXRhX3NpbnRoZXRhID0gKHggPiAwLjApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCAxLjAgLSB4ICogeCApIC0gdjtcXG5cXHRyZXR1cm4gY3Jvc3MoIHYxLCB2MiApICogdGhldGFfc2ludGhldGE7XFxufVxcbnZlYzMgTFRDX0V2YWx1YXRlKCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gdmVjMyBQLCBjb25zdCBpbiBtYXQzIG1JbnYsIGNvbnN0IGluIHZlYzMgcmVjdENvb3Jkc1sgNCBdICkge1xcblxcdHZlYzMgdjEgPSByZWN0Q29vcmRzWyAxIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyB2MiA9IHJlY3RDb29yZHNbIDMgXSAtIHJlY3RDb29yZHNbIDAgXTtcXG5cXHR2ZWMzIGxpZ2h0Tm9ybWFsID0gY3Jvc3MoIHYxLCB2MiApO1xcblxcdGlmKCBkb3QoIGxpZ2h0Tm9ybWFsLCBQIC0gcmVjdENvb3Jkc1sgMCBdICkgPCAwLjAgKSByZXR1cm4gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBUMSwgVDI7XFxuXFx0VDEgPSBub3JtYWxpemUoIFYgLSBOICogZG90KCBWLCBOICkgKTtcXG5cXHRUMiA9IC0gY3Jvc3MoIE4sIFQxICk7XFxuXFx0bWF0MyBtYXQgPSBtSW52ICogdHJhbnNwb3NlTWF0MyggbWF0MyggVDEsIFQyLCBOICkgKTtcXG5cXHR2ZWMzIGNvb3Jkc1sgNCBdO1xcblxcdGNvb3Jkc1sgMCBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAwIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAxIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDEgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDIgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMiBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMyBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAzIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAwIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMCBdICk7XFxuXFx0Y29vcmRzWyAxIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMSBdICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMiBdICk7XFxuXFx0Y29vcmRzWyAzIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMyBdICk7XFxuXFx0dmVjMyB2ZWN0b3JGb3JtRmFjdG9yID0gdmVjMyggMC4wICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMCBdLCBjb29yZHNbIDEgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDEgXSwgY29vcmRzWyAyIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAyIF0sIGNvb3Jkc1sgMyBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMyBdLCBjb29yZHNbIDAgXSApO1xcblxcdHZlYzMgcmVzdWx0ID0gdmVjMyggTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCB2ZWN0b3JGb3JtRmFjdG9yICkgKTtcXG5cXHRyZXR1cm4gcmVzdWx0O1xcbn1cXG52ZWMzIEJSREZfU3BlY3VsYXJfR0dYX0Vudmlyb25tZW50KCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0Y29uc3QgdmVjNCBjMCA9IHZlYzQoIC0gMSwgLSAwLjAyNzUsIC0gMC41NzIsIDAuMDIyICk7XFxuXFx0Y29uc3QgdmVjNCBjMSA9IHZlYzQoIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XFxuXFx0dmVjNCByID0gcm91Z2huZXNzICogYzAgKyBjMTtcXG5cXHRmbG9hdCBhMDA0ID0gbWluKCByLnggKiByLngsIGV4cDIoIC0gOS4yOCAqIGRvdE5WICkgKSAqIHIueCArIHIueTtcXG5cXHR2ZWMyIEFCID0gdmVjMiggLTEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xcblxcdHJldHVybiBzcGVjdWxhckNvbG9yICogQUIueCArIEFCLnk7XFxufVxcbmZsb2F0IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKSB7XFxuXFx0cmV0dXJuIDAuMjU7XFxufVxcbmZsb2F0IERfQmxpbm5QaG9uZyggY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzLCBjb25zdCBpbiBmbG9hdCBkb3ROSCApIHtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqICggc2hpbmluZXNzICogMC41ICsgMS4wICkgKiBwb3coIGRvdE5ILCBzaGluaW5lc3MgKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgaW5jaWRlbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MgKSB7XFxuXFx0dmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBpbmNpZGVudExpZ2h0LmRpcmVjdGlvbiArIGdlb21ldHJ5LnZpZXdEaXIgKTtcXG5cXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgaGFsZkRpciApICk7XFxuXFx0ZmxvYXQgZG90TEggPSBzYXR1cmF0ZSggZG90KCBpbmNpZGVudExpZ2h0LmRpcmVjdGlvbiwgaGFsZkRpciApICk7XFxuXFx0dmVjMyBGID0gRl9TY2hsaWNrKCBzcGVjdWxhckNvbG9yLCBkb3RMSCApO1xcblxcdGZsb2F0IEcgPSBHX0JsaW5uUGhvbmdfSW1wbGljaXQoICk7XFxuXFx0ZmxvYXQgRCA9IERfQmxpbm5QaG9uZyggc2hpbmluZXNzLCBkb3ROSCApO1xcblxcdHJldHVybiBGICogKCBHICogRCApO1xcbn1cXG5mbG9hdCBHR1hSb3VnaG5lc3NUb0JsaW5uRXhwb25lbnQoIGNvbnN0IGluIGZsb2F0IGdneFJvdWdobmVzcyApIHtcXG5cXHRyZXR1cm4gKCAyLjAgLyBwb3cyKCBnZ3hSb3VnaG5lc3MgKyAwLjAwMDEgKSAtIDIuMCApO1xcbn1cXG5mbG9hdCBCbGlubkV4cG9uZW50VG9HR1hSb3VnaG5lc3MoIGNvbnN0IGluIGZsb2F0IGJsaW5uRXhwb25lbnQgKSB7XFxuXFx0cmV0dXJuIHNxcnQoIDIuMCAvICggYmxpbm5FeHBvbmVudCArIDIuMCApICk7XFxufVxcblwiLFxuICAgIGJ1bXBtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XFxuXFx0dmVjMiBkSGR4eV9md2QoKSB7XFxuXFx0XFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2VXYgKTtcXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiApLng7XFxuXFx0XFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFx0fVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHkgKSB7XFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gdmVjMyggZEZkeCggc3VyZl9wb3MueCApLCBkRmR4KCBzdXJmX3Bvcy55ICksIGRGZHgoIHN1cmZfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgdlNpZ21hWSA9IHZlYzMoIGRGZHkoIHN1cmZfcG9zLnggKSwgZEZkeSggc3VyZl9wb3MueSApLCBkRmR5KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcXG5cXHRcXHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XFxuXFx0XFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKTtcXG5cXHRcXHR2ZWMzIHZHcmFkID0gc2lnbiggZkRldCApICogKCBkSGR4eS54ICogUjEgKyBkSGR4eS55ICogUjIgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCBhYnMoIGZEZXQgKSAqIHN1cmZfbm9ybSAtIHZHcmFkICk7XFxuXFx0fVxcbiNlbmRpZlxcblwiLFxuICAgIGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudDpcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgKysgaSApIHtcXG5cXHRcXHR2ZWM0IHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcXG5cXHRcXHRpZiAoIGRvdCggdlZpZXdQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgZGlzY2FyZDtcXG5cXHR9XFxuXFx0XFx0XFxuXFx0I2lmIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyA8IE5VTV9DTElQUElOR19QTEFORVNcXG5cXHRcXHRib29sIGNsaXBwZWQgPSB0cnVlO1xcblxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgKysgaSApIHtcXG5cXHRcXHRcXHR2ZWM0IHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcXG5cXHRcXHRcXHRjbGlwcGVkID0gKCBkb3QoIHZWaWV3UG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApICYmIGNsaXBwZWQ7XFxuXFx0XFx0fVxcblxcdFxcdGlmICggY2xpcHBlZCApIGRpc2NhcmQ7XFxuXFx0XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsXG4gICAgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ6XCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcXG5cXHQjaWYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICEgZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gdmVjNCBjbGlwcGluZ1BsYW5lc1sgTlVNX0NMSVBQSU5HX1BMQU5FUyBdO1xcbiNlbmRpZlxcblwiLGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleDpcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMCAmJiAhIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgISBkZWZpbmVkKCBQSE9ORyApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuXCIsY2xpcHBpbmdfcGxhbmVzX3ZlcnRleDpcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMCAmJiAhIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgISBkZWZpbmVkKCBQSE9ORyApXFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuI2VuZGlmXFxuXCIsXG4gICAgY29sb3JfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0NPTE9SXFxuXFx0ZGlmZnVzZUNvbG9yLnJnYiAqPSB2Q29sb3I7XFxuI2VuZGlmXCIsY29sb3JfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlxcblwiLGNvbG9yX3BhcnNfdmVydGV4OlwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCIsY29sb3JfdmVydGV4OlwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdHZDb2xvci54eXogPSBjb2xvci54eXo7XFxuI2VuZGlmXCIsY29tbW9uOlwiI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU5XFxuI2RlZmluZSBQSTIgNi4yODMxODUzMDcxOFxcbiNkZWZpbmUgUElfSEFMRiAxLjU3MDc5NjMyNjc5NDlcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFxcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuI2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNkZWZpbmUgd2hpdGVDb21wbGltZW50KGEpICggMS4wIC0gc2F0dXJhdGUoIGEgKSApXFxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxcbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxcbmZsb2F0IHBvdzQoIGNvbnN0IGluIGZsb2F0IHggKSB7IGZsb2F0IHgyID0geCp4OyByZXR1cm4geDIqeDI7IH1cXG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkgeyByZXR1cm4gZG90KCBjb2xvciwgdmVjMyggMC4zMzMzICkgKTsgfVxcbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XFxuXFx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xcblxcdGhpZ2hwIGZsb2F0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSxiICkgKSwgc24gPSBtb2QoIGR0LCBQSSApO1xcblxcdHJldHVybiBmcmFjdChzaW4oc24pICogYyk7XFxufVxcbnN0cnVjdCBJbmNpZGVudExpZ2h0IHtcXG5cXHR2ZWMzIGNvbG9yO1xcblxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdGJvb2wgdmlzaWJsZTtcXG59O1xcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XFxuXFx0dmVjMyBkaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgZGlyZWN0U3BlY3VsYXI7XFxuXFx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBpbmRpcmVjdFNwZWN1bGFyO1xcbn07XFxuc3RydWN0IEdlb21ldHJpY0NvbnRleHQge1xcblxcdHZlYzMgcG9zaXRpb247XFxuXFx0dmVjMyBub3JtYWw7XFxuXFx0dmVjMyB2aWV3RGlyO1xcbn07XFxudmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcXG59XFxudmVjMyBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XFxufVxcbnZlYzMgcHJvamVjdE9uUGxhbmUoaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0ZmxvYXQgZGlzdGFuY2UgPSBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludCAtIHBvaW50T25QbGFuZSApO1xcblxcdHJldHVybiAtIGRpc3RhbmNlICogcGxhbmVOb3JtYWwgKyBwb2ludDtcXG59XFxuZmxvYXQgc2lkZU9mUGxhbmUoIGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBzaWduKCBkb3QoIHBvaW50IC0gcG9pbnRPblBsYW5lLCBwbGFuZU5vcm1hbCApICk7XFxufVxcbnZlYzMgbGluZVBsYW5lSW50ZXJzZWN0KCBpbiB2ZWMzIHBvaW50T25MaW5lLCBpbiB2ZWMzIGxpbmVEaXJlY3Rpb24sIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBsaW5lRGlyZWN0aW9uICogKCBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludE9uUGxhbmUgLSBwb2ludE9uTGluZSApIC8gZG90KCBwbGFuZU5vcm1hbCwgbGluZURpcmVjdGlvbiApICkgKyBwb2ludE9uTGluZTtcXG59XFxubWF0MyB0cmFuc3Bvc2VNYXQzKCBjb25zdCBpbiBtYXQzIG0gKSB7XFxuXFx0bWF0MyB0bXA7XFxuXFx0dG1wWyAwIF0gPSB2ZWMzKCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XFxuXFx0dG1wWyAxIF0gPSB2ZWMzKCBtWyAwIF0ueSwgbVsgMSBdLnksIG1bIDIgXS55ICk7XFxuXFx0dG1wWyAyIF0gPSB2ZWMzKCBtWyAwIF0ueiwgbVsgMSBdLnosIG1bIDIgXS56ICk7XFxuXFx0cmV0dXJuIHRtcDtcXG59XFxuZmxvYXQgbGluZWFyVG9SZWxhdGl2ZUx1bWluYW5jZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHtcXG5cXHR2ZWMzIHdlaWdodHMgPSB2ZWMzKCAwLjIxMjYsIDAuNzE1MiwgMC4wNzIyICk7XFxuXFx0cmV0dXJuIGRvdCggd2VpZ2h0cywgY29sb3IucmdiICk7XFxufVxcblwiLFxuICAgIGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDpcIiNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXFxuI2RlZmluZSBjdWJlVVZfdGV4dHVyZVNpemUgKDEwMjQuMClcXG5pbnQgZ2V0RmFjZUZyb21EaXJlY3Rpb24odmVjMyBkaXJlY3Rpb24pIHtcXG5cXHR2ZWMzIGFic0RpcmVjdGlvbiA9IGFicyhkaXJlY3Rpb24pO1xcblxcdGludCBmYWNlID0gLTE7XFxuXFx0aWYoIGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnogKSB7XFxuXFx0XFx0aWYoYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi54ID4gMC4wID8gMCA6IDM7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEgOiA0O1xcblxcdH1cXG5cXHRlbHNlIHtcXG5cXHRcXHRpZihhYnNEaXJlY3Rpb24ueiA+IGFic0RpcmVjdGlvbi55IClcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnogPiAwLjAgPyAyIDogNTtcXG5cXHRcXHRlbHNlXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMSA6IDQ7XFxuXFx0fVxcblxcdHJldHVybiBmYWNlO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMSAgKGxvZzIoY3ViZVVWX3RleHR1cmVTaXplKjAuMjUpIC0gMS4wKVxcbiNkZWZpbmUgY3ViZVVWX3JhbmdlQ2xhbXAgKGV4cDIoKDYuMCAtIDEuMCkgKiAyLjApKVxcbnZlYzIgTWlwTGV2ZWxJbmZvKCB2ZWMzIHZlYywgZmxvYXQgcm91Z2huZXNzTGV2ZWwsIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBzY2FsZSA9IGV4cDIoY3ViZVVWX21heExvZHMxIC0gcm91Z2huZXNzTGV2ZWwpO1xcblxcdGZsb2F0IGR4Um91Z2huZXNzID0gZEZkeChyb3VnaG5lc3MpO1xcblxcdGZsb2F0IGR5Um91Z2huZXNzID0gZEZkeShyb3VnaG5lc3MpO1xcblxcdHZlYzMgZHggPSBkRmR4KCB2ZWMgKiBzY2FsZSAqIGR4Um91Z2huZXNzICk7XFxuXFx0dmVjMyBkeSA9IGRGZHkoIHZlYyAqIHNjYWxlICogZHlSb3VnaG5lc3MgKTtcXG5cXHRmbG9hdCBkID0gbWF4KCBkb3QoIGR4LCBkeCApLCBkb3QoIGR5LCBkeSApICk7XFxuXFx0ZCA9IGNsYW1wKGQsIDEuMCwgY3ViZVVWX3JhbmdlQ2xhbXApO1xcblxcdGZsb2F0IG1pcExldmVsID0gMC41ICogbG9nMihkKTtcXG5cXHRyZXR1cm4gdmVjMihmbG9vcihtaXBMZXZlbCksIGZyYWN0KG1pcExldmVsKSk7XFxufVxcbiNkZWZpbmUgY3ViZVVWX21heExvZHMyIChsb2cyKGN1YmVVVl90ZXh0dXJlU2l6ZSowLjI1KSAtIDIuMClcXG4jZGVmaW5lIGN1YmVVVl9yY3BUZXh0dXJlU2l6ZSAoMS4wIC8gY3ViZVVWX3RleHR1cmVTaXplKVxcbnZlYzIgZ2V0Q3ViZVVWKHZlYzMgZGlyZWN0aW9uLCBmbG9hdCByb3VnaG5lc3NMZXZlbCwgZmxvYXQgbWlwTGV2ZWwpIHtcXG5cXHRtaXBMZXZlbCA9IHJvdWdobmVzc0xldmVsID4gY3ViZVVWX21heExvZHMyIC0gMy4wID8gMC4wIDogbWlwTGV2ZWw7XFxuXFx0ZmxvYXQgYSA9IDE2LjAgKiBjdWJlVVZfcmNwVGV4dHVyZVNpemU7XFxuXFx0dmVjMiBleHAyX3BhY2tlZCA9IGV4cDIoIHZlYzIoIHJvdWdobmVzc0xldmVsLCBtaXBMZXZlbCApICk7XFxuXFx0dmVjMiByY3BfZXhwMl9wYWNrZWQgPSB2ZWMyKCAxLjAgKSAvIGV4cDJfcGFja2VkO1xcblxcdGZsb2F0IHBvd1NjYWxlID0gZXhwMl9wYWNrZWQueCAqIGV4cDJfcGFja2VkLnk7XFxuXFx0ZmxvYXQgc2NhbGUgPSByY3BfZXhwMl9wYWNrZWQueCAqIHJjcF9leHAyX3BhY2tlZC55ICogMC4yNTtcXG5cXHRmbG9hdCBtaXBPZmZzZXQgPSAwLjc1KigxLjAgLSByY3BfZXhwMl9wYWNrZWQueSkgKiByY3BfZXhwMl9wYWNrZWQueDtcXG5cXHRib29sIGJSZXMgPSBtaXBMZXZlbCA9PSAwLjA7XFxuXFx0c2NhbGUgPSAgYlJlcyAmJiAoc2NhbGUgPCBhKSA/IGEgOiBzY2FsZTtcXG5cXHR2ZWMzIHI7XFxuXFx0dmVjMiBvZmZzZXQ7XFxuXFx0aW50IGZhY2UgPSBnZXRGYWNlRnJvbURpcmVjdGlvbihkaXJlY3Rpb24pO1xcblxcdGZsb2F0IHJjcFBvd1NjYWxlID0gMS4wIC8gcG93U2NhbGU7XFxuXFx0aWYoIGZhY2UgPT0gMCkge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi54LCAtZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDAuMCttaXBPZmZzZXQsMC43NSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gYSA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDEpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueSwgZGlyZWN0aW9uLngsIGRpcmVjdGlvbi56KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKHNjYWxlK21pcE9mZnNldCwgMC43NSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gYSA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDIpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDIuMCpzY2FsZSttaXBPZmZzZXQsIDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAzKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLngsIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigwLjArbWlwT2Zmc2V0LDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gNCkge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi55LCBkaXJlY3Rpb24ueCwgLWRpcmVjdGlvbi56KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKHNjYWxlK21pcE9mZnNldCwgMC41ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyAwLjAgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnosIC1kaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMi4wKnNjYWxlK21pcE9mZnNldCwgMC41ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyAwLjAgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ciA9IG5vcm1hbGl6ZShyKTtcXG5cXHRmbG9hdCB0ZXhlbE9mZnNldCA9IDAuNSAqIGN1YmVVVl9yY3BUZXh0dXJlU2l6ZTtcXG5cXHR2ZWMyIHMgPSAoIHIueXogLyBhYnMoIHIueCApICsgdmVjMiggMS4wICkgKSAqIDAuNTtcXG5cXHR2ZWMyIGJhc2UgPSBvZmZzZXQgKyB2ZWMyKCB0ZXhlbE9mZnNldCApO1xcblxcdHJldHVybiBiYXNlICsgcyAqICggc2NhbGUgLSAyLjAgKiB0ZXhlbE9mZnNldCApO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMyAobG9nMihjdWJlVVZfdGV4dHVyZVNpemUqMC4yNSkgLSAzLjApXFxudmVjNCB0ZXh0dXJlQ3ViZVVWKHZlYzMgcmVmbGVjdGVkRGlyZWN0aW9uLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgcm91Z2huZXNzVmFsID0gcm91Z2huZXNzKiBjdWJlVVZfbWF4TG9kczM7XFxuXFx0ZmxvYXQgcjEgPSBmbG9vcihyb3VnaG5lc3NWYWwpO1xcblxcdGZsb2F0IHIyID0gcjEgKyAxLjA7XFxuXFx0ZmxvYXQgdCA9IGZyYWN0KHJvdWdobmVzc1ZhbCk7XFxuXFx0dmVjMiBtaXBJbmZvID0gTWlwTGV2ZWxJbmZvKHJlZmxlY3RlZERpcmVjdGlvbiwgcjEsIHJvdWdobmVzcyk7XFxuXFx0ZmxvYXQgcyA9IG1pcEluZm8ueTtcXG5cXHRmbG9hdCBsZXZlbDAgPSBtaXBJbmZvLng7XFxuXFx0ZmxvYXQgbGV2ZWwxID0gbGV2ZWwwICsgMS4wO1xcblxcdGxldmVsMSA9IGxldmVsMSA+IDUuMCA/IDUuMCA6IGxldmVsMTtcXG5cXHRsZXZlbDAgKz0gbWluKCBmbG9vciggcyArIDAuNSApLCA1LjAgKTtcXG5cXHR2ZWMyIHV2XzEwID0gZ2V0Q3ViZVVWKHJlZmxlY3RlZERpcmVjdGlvbiwgcjEsIGxldmVsMCk7XFxuXFx0dmVjNCBjb2xvcjEwID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dl8xMCkpO1xcblxcdHZlYzIgdXZfMjAgPSBnZXRDdWJlVVYocmVmbGVjdGVkRGlyZWN0aW9uLCByMiwgbGV2ZWwwKTtcXG5cXHR2ZWM0IGNvbG9yMjAgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2XzIwKSk7XFxuXFx0dmVjNCByZXN1bHQgPSBtaXgoY29sb3IxMCwgY29sb3IyMCwgdCk7XFxuXFx0cmV0dXJuIHZlYzQocmVzdWx0LnJnYiwgMS4wKTtcXG59XFxuI2VuZGlmXFxuXCIsXG4gICAgZGVmYXVsdG5vcm1hbF92ZXJ0ZXg6XCJ2ZWMzIHRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsTWF0cml4ICogb2JqZWN0Tm9ybWFsO1xcbiNpZmRlZiBGTElQX1NJREVEXFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSAtIHRyYW5zZm9ybWVkTm9ybWFsO1xcbiNlbmRpZlxcblwiLGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleDpcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50U2NhbGU7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRCaWFzO1xcbiNlbmRpZlxcblwiLGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg6XCIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHRyYW5zZm9ybWVkICs9IG5vcm1hbGl6ZSggb2JqZWN0Tm9ybWFsICkgKiAoIHRleHR1cmUyRCggZGlzcGxhY2VtZW50TWFwLCB1diApLnggKiBkaXNwbGFjZW1lbnRTY2FsZSArIGRpc3BsYWNlbWVudEJpYXMgKTtcXG4jZW5kaWZcXG5cIixcbiAgICBlbWlzc2l2ZW1hcF9mcmFnbWVudDpcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR2ZWM0IGVtaXNzaXZlQ29sb3IgPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCB2VXYgKTtcXG5cXHRlbWlzc2l2ZUNvbG9yLnJnYiA9IGVtaXNzaXZlTWFwVGV4ZWxUb0xpbmVhciggZW1pc3NpdmVDb2xvciApLnJnYjtcXG5cXHR0b3RhbEVtaXNzaXZlUmFkaWFuY2UgKj0gZW1pc3NpdmVDb2xvci5yZ2I7XFxuI2VuZGlmXFxuXCIsZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcXG4jZW5kaWZcXG5cIixlbmNvZGluZ3NfZnJhZ21lbnQ6XCIgIGdsX0ZyYWdDb2xvciA9IGxpbmVhclRvT3V0cHV0VGV4ZWwoIGdsX0ZyYWdDb2xvciApO1xcblwiLGVuY29kaW5nc19wYXJzX2ZyYWdtZW50OlwiXFxudmVjNCBMaW5lYXJUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmFsdWU7XFxufVxcbnZlYzQgR2FtbWFUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHBvdyggdmFsdWUueHl6LCB2ZWMzKCBnYW1tYUZhY3RvciApICksIHZhbHVlLncgKTtcXG59XFxudmVjNCBMaW5lYXJUb0dhbW1hKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBnYW1tYUZhY3RvciApIHtcXG5cXHRyZXR1cm4gdmVjNCggcG93KCB2YWx1ZS54eXosIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUudyApO1xcbn1cXG52ZWM0IHNSR0JUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCB2YWx1ZS5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCB2YWx1ZS53ICk7XFxufVxcbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLncgKTtcXG59XFxudmVjNCBSR0JFVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqIGV4cDIoIHZhbHVlLmEgKiAyNTUuMCAtIDEyOC4wICksIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCRSggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRmbG9hdCBtYXhDb21wb25lbnQgPSBtYXgoIG1heCggdmFsdWUuciwgdmFsdWUuZyApLCB2YWx1ZS5iICk7XFxuXFx0ZmxvYXQgZkV4cCA9IGNsYW1wKCBjZWlsKCBsb2cyKCBtYXhDb21wb25lbnQgKSApLCAtMTI4LjAsIDEyNy4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAvIGV4cDIoIGZFeHAgKSwgKCBmRXhwICsgMTI4LjAgKSAvIDI1NS4wICk7XFxufVxcbnZlYzQgUkdCTVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUueHl6ICogdmFsdWUudyAqIG1heFJhbmdlLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQk0oIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdGZsb2F0IG1heFJHQiA9IG1heCggdmFsdWUueCwgbWF4KCB2YWx1ZS5nLCB2YWx1ZS5iICkgKTtcXG5cXHRmbG9hdCBNICAgICAgPSBjbGFtcCggbWF4UkdCIC8gbWF4UmFuZ2UsIDAuMCwgMS4wICk7XFxuXFx0TSAgICAgICAgICAgID0gY2VpbCggTSAqIDI1NS4wICkgLyAyNTUuMDtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiIC8gKCBNICogbWF4UmFuZ2UgKSwgTSApO1xcbn1cXG52ZWM0IFJHQkRUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgbWF4UmFuZ2UgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggKCBtYXhSYW5nZSAvIDI1NS4wICkgLyB2YWx1ZS5hICksIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCRCggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgbWF4UmFuZ2UgKSB7XFxuXFx0ZmxvYXQgbWF4UkdCID0gbWF4KCB2YWx1ZS54LCBtYXgoIHZhbHVlLmcsIHZhbHVlLmIgKSApO1xcblxcdGZsb2F0IEQgICAgICA9IG1heCggbWF4UmFuZ2UgLyBtYXhSR0IsIDEuMCApO1xcblxcdEQgICAgICAgICAgICA9IG1pbiggZmxvb3IoIEQgKSAvIDI1NS4wLCAxLjAgKTtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogKCBEICogKCAyNTUuMCAvIG1heFJhbmdlICkgKSwgRCApO1xcbn1cXG5jb25zdCBtYXQzIGNMb2dMdXZNID0gbWF0MyggMC4yMjA5LCAwLjMzOTAsIDAuNDE4NCwgMC4xMTM4LCAwLjY3ODAsIDAuNzMxOSwgMC4wMTAyLCAwLjExMzAsIDAuMjk2OSApO1xcbnZlYzQgTGluZWFyVG9Mb2dMdXYoIGluIHZlYzQgdmFsdWUgKSAge1xcblxcdHZlYzMgWHBfWV9YWVpwID0gdmFsdWUucmdiICogY0xvZ0x1dk07XFxuXFx0WHBfWV9YWVpwID0gbWF4KFhwX1lfWFlacCwgdmVjMygxZS02LCAxZS02LCAxZS02KSk7XFxuXFx0dmVjNCB2UmVzdWx0O1xcblxcdHZSZXN1bHQueHkgPSBYcF9ZX1hZWnAueHkgLyBYcF9ZX1hZWnAuejtcXG5cXHRmbG9hdCBMZSA9IDIuMCAqIGxvZzIoWHBfWV9YWVpwLnkpICsgMTI3LjA7XFxuXFx0dlJlc3VsdC53ID0gZnJhY3QoTGUpO1xcblxcdHZSZXN1bHQueiA9IChMZSAtIChmbG9vcih2UmVzdWx0LncqMjU1LjApKS8yNTUuMCkvMjU1LjA7XFxuXFx0cmV0dXJuIHZSZXN1bHQ7XFxufVxcbmNvbnN0IG1hdDMgY0xvZ0x1dkludmVyc2VNID0gbWF0MyggNi4wMDE0LCAtMi43MDA4LCAtMS43OTk2LCAtMS4zMzIwLCAzLjEwMjksIC01Ljc3MjEsIDAuMzAwOCwgLTEuMDg4MiwgNS42MjY4ICk7XFxudmVjNCBMb2dMdXZUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRmbG9hdCBMZSA9IHZhbHVlLnogKiAyNTUuMCArIHZhbHVlLnc7XFxuXFx0dmVjMyBYcF9ZX1hZWnA7XFxuXFx0WHBfWV9YWVpwLnkgPSBleHAyKChMZSAtIDEyNy4wKSAvIDIuMCk7XFxuXFx0WHBfWV9YWVpwLnogPSBYcF9ZX1hZWnAueSAvIHZhbHVlLnk7XFxuXFx0WHBfWV9YWVpwLnggPSB2YWx1ZS54ICogWHBfWV9YWVpwLno7XFxuXFx0dmVjMyB2UkdCID0gWHBfWV9YWVpwLnJnYiAqIGNMb2dMdXZJbnZlcnNlTTtcXG5cXHRyZXR1cm4gdmVjNCggbWF4KHZSR0IsIDAuMCksIDEuMCApO1xcbn1cXG5cIixcbiAgICBlbnZtYXBfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0cmVmbGVjdFZlYyA9IG5vcm1hbGl6ZSggcmVmbGVjdFZlYyApO1xcblxcdFxcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggcmVmbGVjdFZlYy55LCAtIDEuMCwgMS4wICkgKSAqIFJFQ0lQUk9DQUxfUEkgKyAwLjU7XFxuXFx0XFx0c2FtcGxlVVYueCA9IGF0YW4oIHJlZmxlY3RWZWMueiwgcmVmbGVjdFZlYy54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCByZWZsZWN0VmVjICk7XFxuXFx0XFx0dmVjMyByZWZsZWN0VmlldyA9IG5vcm1hbGl6ZSggKCB2aWV3TWF0cml4ICogdmVjNCggcmVmbGVjdFZlYywgMC4wICkgKS54eXogKyB2ZWMzKCAwLjAsIDAuMCwgMS4wICkgKTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41ICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdmVjNCggMC4wICk7XFxuXFx0I2VuZGlmXFxuXFx0ZW52Q29sb3IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZDb2xvciApO1xcblxcdCNpZmRlZiBFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBvdXRnb2luZ0xpZ2h0ICogZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX01JWCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCArPSBlbnZDb2xvci54eXogKiBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLFxuICAgIGVudm1hcF9wYXJzX2ZyYWdtZW50OlwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XFxuXFx0dW5pZm9ybSBmbG9hdCBlbnZNYXBJbnRlbnNpdHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICggZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSApXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyQ3ViZSBlbnZNYXA7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBlbnZNYXA7XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApIHx8IGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBlbnZtYXBfcGFyc192ZXJ0ZXg6XCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdCNlbHNlXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLGVudm1hcF92ZXJ0ZXg6XCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgY2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHdvcmxkUG9zaXRpb24ueHl6IC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggdHJhbnNmb3JtZWROb3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZSZWZsZWN0ID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZnJhY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsXG4gICAgZm9nX3ZlcnRleDpcIlxcbiNpZmRlZiBVU0VfRk9HXFxuZm9nRGVwdGggPSAtbXZQb3NpdGlvbi56O1xcbiNlbmRpZlwiLGZvZ19wYXJzX3ZlcnRleDpcIiNpZmRlZiBVU0VfRk9HXFxuICB2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcbiNlbmRpZlxcblwiLGZvZ19mcmFnbWVudDpcIiNpZmRlZiBVU0VfRk9HXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gd2hpdGVDb21wbGltZW50KCBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZm9nRGVwdGggKiBmb2dEZXB0aCAqIExPRzIgKSApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBmb2dEZXB0aCApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgoIGdsX0ZyYWdDb2xvci5yZ2IsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG4jZW5kaWZcXG5cIixmb2dfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcblxcdHZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7XFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dEZW5zaXR5O1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRmFyO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLFxuICAgIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVE9PTlxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGdyYWRpZW50TWFwO1xcblxcdHZlYzMgZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCB2ZWMzIG5vcm1hbCwgdmVjMyBsaWdodERpcmVjdGlvbiApIHtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBsaWdodERpcmVjdGlvbiApO1xcblxcdFxcdHZlYzIgY29vcmQgPSB2ZWMyKCBkb3ROTCAqIDAuNSArIDAuNSwgMC4wICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9HUkFESUVOVE1BUFxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkQoIGdyYWRpZW50TWFwLCBjb29yZCApLnJnYjtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiAoIGNvb3JkLnggPCAwLjcgKSA/IHZlYzMoIDAuNyApIDogdmVjMyggMS4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcblwiLGxpZ2h0bWFwX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBQSSAqIHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG4jZW5kaWZcXG5cIixcbiAgICBsaWdodG1hcF9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGxpZ2h0TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgbGlnaHRNYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCIsbGlnaHRzX2xhbWJlcnRfdmVydGV4OlwidmVjMyBkaWZmdXNlID0gdmVjMyggMS4wICk7XFxuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcXG5nZW9tZXRyeS5wb3NpdGlvbiA9IG12UG9zaXRpb24ueHl6O1xcbmdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5nZW9tZXRyeS52aWV3RGlyID0gbm9ybWFsaXplKCAtbXZQb3NpdGlvbi54eXogKTtcXG5HZW9tZXRyaWNDb250ZXh0IGJhY2tHZW9tZXRyeTtcXG5iYWNrR2VvbWV0cnkucG9zaXRpb24gPSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5iYWNrR2VvbWV0cnkubm9ybWFsID0gLWdlb21ldHJ5Lm5vcm1hbDtcXG5iYWNrR2VvbWV0cnkudmlld0RpciA9IGdlb21ldHJ5LnZpZXdEaXI7XFxudkxpZ2h0RnJvbnQgPSB2ZWMzKCAwLjAgKTtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dkxpZ2h0QmFjayA9IHZlYzMoIDAuMCApO1xcbiNlbmRpZlxcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XFxuZmxvYXQgZG90Tkw7XFxudmVjMyBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggcG9pbnRMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIHNwb3RMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggZGlyZWN0aW9uYWxMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZMaWdodEZyb250ICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGJhY2tHZW9tZXRyeSApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG5cIixcbiAgICBsaWdodHNfcGFyczpcInVuaWZvcm0gdmVjMyBhbWJpZW50TGlnaHRDb2xvcjtcXG52ZWMzIGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgYW1iaWVudExpZ2h0Q29sb3IgKSB7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gYW1iaWVudExpZ2h0Q29sb3I7XFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG59XFxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0IHtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGludCBzaGFkb3c7XFxuXFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdH07XFxuXFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHRzWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQgKSB7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yO1xcblxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uO1xcblxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSB0cnVlO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgUG9pbnRMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdFxcdGludCBzaGFkb3c7XFxuXFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYU5lYXI7XFxuXFx0XFx0ZmxvYXQgc2hhZG93Q2FtZXJhRmFyO1xcblxcdH07XFxuXFx0dW5pZm9ybSBQb2ludExpZ2h0IHBvaW50TGlnaHRzWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0dm9pZCBnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gUG9pbnRMaWdodCBwb2ludExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBvdXQgSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBwb2ludExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0ZGlyZWN0TGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gcG9pbnRMaWdodC5jb2xvcjtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBwdW5jdHVhbExpZ2h0SW50ZW5zaXR5VG9JcnJhZGlhbmNlRmFjdG9yKCBsaWdodERpc3RhbmNlLCBwb2ludExpZ2h0LmRpc3RhbmNlLCBwb2ludExpZ2h0LmRlY2F5ICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9ICggZGlyZWN0TGlnaHQuY29sb3IgIT0gdmVjMyggMC4wICkgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgU3BvdExpZ2h0IHtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2U7XFxuXFx0XFx0ZmxvYXQgZGVjYXk7XFxuXFx0XFx0ZmxvYXQgY29uZUNvcztcXG5cXHRcXHRmbG9hdCBwZW51bWJyYUNvcztcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHR9O1xcblxcdHVuaWZvcm0gU3BvdExpZ2h0IHNwb3RMaWdodHNbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0U3BvdERpcmVjdExpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gU3BvdExpZ2h0IHNwb3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQgICkge1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IHNwb3RMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBhbmdsZUNvcyA9IGRvdCggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBzcG90TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0aWYgKCBhbmdsZUNvcyA+IHNwb3RMaWdodC5jb25lQ29zICkge1xcblxcdFxcdFxcdGZsb2F0IHNwb3RFZmZlY3QgPSBzbW9vdGhzdGVwKCBzcG90TGlnaHQuY29uZUNvcywgc3BvdExpZ2h0LnBlbnVtYnJhQ29zLCBhbmdsZUNvcyApO1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gc3BvdExpZ2h0LmNvbG9yO1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IHNwb3RFZmZlY3QgKiBwdW5jdHVhbExpZ2h0SW50ZW5zaXR5VG9JcnJhZGlhbmNlRmFjdG9yKCBsaWdodERpc3RhbmNlLCBzcG90TGlnaHQuZGlzdGFuY2UsIHNwb3RMaWdodC5kZWNheSApO1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSB0cnVlO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgPSB2ZWMzKCAwLjAgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gZmFsc2U7XFxuXFx0XFx0fVxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFJlY3RBcmVhTGlnaHQge1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQ7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNNYXQ7XFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjTWFnO1xcblxcdHVuaWZvcm0gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0c1sgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgXTtcXG4jZW5kaWZcXG4jaWYgTlVNX0hFTUlfTElHSFRTID4gMFxcblxcdHN0cnVjdCBIZW1pc3BoZXJlTGlnaHQge1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgc2t5Q29sb3I7XFxuXFx0XFx0dmVjMyBncm91bmRDb2xvcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gSGVtaXNwaGVyZUxpZ2h0IGhlbWlzcGhlcmVMaWdodHNbIE5VTV9IRU1JX0xJR0hUUyBdO1xcblxcdHZlYzMgZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gSGVtaXNwaGVyZUxpZ2h0IGhlbWlMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSApIHtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoZW1pTGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3ROTCArIDAuNTtcXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBtaXgoIGhlbWlMaWdodC5ncm91bmRDb2xvciwgaGVtaUxpZ2h0LnNreUNvbG9yLCBoZW1pRGlmZnVzZVdlaWdodCApO1xcblxcdFxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIGlycmFkaWFuY2U7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUEhZU0lDQUwgKVxcblxcdHZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gaW50IG1heE1JUExldmVsICkge1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBnZW9tZXRyeS5ub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggcXVlcnlWZWMsIDEuMCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHZlYzQoIDAuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJldHVybiBQSSAqIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0U3BlY3VsYXJNSVBMZXZlbCggY29uc3QgaW4gZmxvYXQgYmxpbm5TaGluaW5lc3NFeHBvbmVudCwgY29uc3QgaW4gaW50IG1heE1JUExldmVsICkge1xcblxcdFxcdGZsb2F0IG1heE1JUExldmVsU2NhbGFyID0gZmxvYXQoIG1heE1JUExldmVsICk7XFxuXFx0XFx0ZmxvYXQgZGVzaXJlZE1JUExldmVsID0gbWF4TUlQTGV2ZWxTY2FsYXIgKyAwLjc5MjQ4IC0gMC41ICogbG9nMiggcG93MiggYmxpbm5TaGluaW5lc3NFeHBvbmVudCApICsgMS4wICk7XFxuXFx0XFx0cmV0dXJuIGNsYW1wKCBkZXNpcmVkTUlQTGV2ZWwsIDAuMCwgbWF4TUlQTGV2ZWxTY2FsYXIgKTtcXG5cXHR9XFxuXFx0dmVjMyBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZSggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gZmxvYXQgYmxpbm5TaGluaW5lc3NFeHBvbmVudCwgY29uc3QgaW4gaW50IG1heE1JUExldmVsICkge1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggLWdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggLWdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmVmbGVjdFZlYyA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHJlZmxlY3RWZWMsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHRmbG9hdCBzcGVjdWxhck1JUExldmVsID0gZ2V0U3BlY3VsYXJNSVBMZXZlbCggYmxpbm5TaGluaW5lc3NFeHBvbmVudCwgbWF4TUlQTGV2ZWwgKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdFxcdHZlYzMgcXVlcnlSZWZsZWN0VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApO1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVMb2RFWFQoIGVudk1hcCwgcXVlcnlSZWZsZWN0VmVjLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgcXVlcnlSZWZsZWN0VmVjLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0XFx0dmVjMyBxdWVyeVJlZmxlY3RWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICk7XFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYocXVlcnlSZWZsZWN0VmVjLCBCbGlubkV4cG9uZW50VG9HR1hSb3VnaG5lc3MoYmxpbm5TaGluaW5lc3NFeHBvbmVudCkpO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJETG9kRVhUKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwwLjAsMS4wICkgKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRExvZEVYVCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJldHVybiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0fVxcbiNlbmRpZlxcblwiLFxuICAgIGxpZ2h0c19waG9uZ19mcmFnbWVudDpcIkJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiO1xcbm1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhcjtcXG5tYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyA9IHNoaW5pbmVzcztcXG5tYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoID0gc3BlY3VsYXJTdHJlbmd0aDtcXG5cIixsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudDpcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG5zdHJ1Y3QgQmxpbm5QaG9uZ01hdGVyaWFsIHtcXG5cXHR2ZWMzXFx0ZGlmZnVzZUNvbG9yO1xcblxcdHZlYzNcXHRzcGVjdWxhckNvbG9yO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJTaGluaW5lc3M7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclN0cmVuZ3RoO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHQjaWZkZWYgVE9PTlxcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IGdldEdyYWRpZW50SXJyYWRpYW5jZSggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0XFx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRpcnJhZGlhbmNlICo9IFBJO1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9CbGlublBob25nKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzICkgKiBtYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X0JsaW5uUGhvbmdcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nXFxuI2RlZmluZSBNYXRlcmlhbF9MaWdodFByb2JlTE9EKCBtYXRlcmlhbCApXFx0KDApXFxuXCIsXG4gICAgbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50OlwiUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcXG5tYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyA9IGNsYW1wKCByb3VnaG5lc3NGYWN0b3IsIDAuMDQsIDEuMCApO1xcbiNpZmRlZiBTVEFOREFSRFxcblxcdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuI2Vsc2VcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UICogcG93MiggcmVmbGVjdGl2aXR5ICkgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuXFx0bWF0ZXJpYWwuY2xlYXJDb2F0ID0gc2F0dXJhdGUoIGNsZWFyQ29hdCApO1xcdG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyA9IGNsYW1wKCBjbGVhckNvYXRSb3VnaG5lc3MsIDAuMDQsIDEuMCApO1xcbiNlbmRpZlxcblwiLFxuICAgIGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50Olwic3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xcblxcdHZlYzNcXHRkaWZmdXNlQ29sb3I7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclJvdWdobmVzcztcXG5cXHR2ZWMzXFx0c3BlY3VsYXJDb2xvcjtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0O1xcblxcdFxcdGZsb2F0IGNsZWFyQ29hdFJvdWdobmVzcztcXG5cXHQjZW5kaWZcXG59O1xcbiNkZWZpbmUgTUFYSU1VTV9TUEVDVUxBUl9DT0VGRklDSUVOVCAwLjE2XFxuI2RlZmluZSBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UIDAuMDRcXG5mbG9hdCBjbGVhckNvYXRESFJBcHByb3goIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkwgKSB7XFxuXFx0cmV0dXJuIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKyAoIDEuMCAtIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSAqICggcG93KCAxLjAgLSBkb3ROTCwgNS4wICkgKiBwb3coIDEuMCAtIHJvdWdobmVzcywgMi4wICkgKTtcXG59XFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHZvaWQgUkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsKCBjb25zdCBpbiBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdFxcdHZlYzMgbm9ybWFsID0gZ2VvbWV0cnkubm9ybWFsO1xcblxcdFxcdHZlYzMgdmlld0RpciA9IGdlb21ldHJ5LnZpZXdEaXI7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdHZlYzMgbGlnaHRQb3MgPSByZWN0QXJlYUxpZ2h0LnBvc2l0aW9uO1xcblxcdFxcdHZlYzMgaGFsZldpZHRoID0gcmVjdEFyZWFMaWdodC5oYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0ID0gcmVjdEFyZWFMaWdodC5oYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IHJlY3RBcmVhTGlnaHQuY29sb3I7XFxuXFx0XFx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3M7XFxuXFx0XFx0dmVjMyByZWN0Q29vcmRzWyA0IF07XFxuXFx0XFx0cmVjdENvb3Jkc1sgMCBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xcdFxcdHJlY3RDb29yZHNbIDEgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXG5cXHRcXHRyZWN0Q29vcmRzWyAyIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMyBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzIgdXYgPSBMVENfVXYoIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XFxuXFx0XFx0ZmxvYXQgbm9ybSA9IHRleHR1cmUyRCggbHRjTWFnLCB1diApLmE7XFxuXFx0XFx0dmVjNCB0ID0gdGV4dHVyZTJEKCBsdGNNYXQsIHV2ICk7XFxuXFx0XFx0bWF0MyBtSW52ID0gbWF0MyhcXG5cXHRcXHRcXHR2ZWMzKCAgIDEsICAgMCwgdC55ICksXFxuXFx0XFx0XFx0dmVjMyggICAwLCB0LnosICAgMCApLFxcblxcdFxcdFxcdHZlYzMoIHQudywgICAwLCB0LnggKVxcblxcdFxcdCk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gbGlnaHRDb2xvciAqIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKiBub3JtICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtSW52LCByZWN0Q29vcmRzICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBsaWdodENvbG9yICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtYXQzKCAxICksIHJlY3RDb29yZHMgKTtcXG5cXHR9XFxuI2VuZGlmXFxudm9pZCBSRV9EaXJlY3RfUGh5c2ljYWwoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJDb2F0ICogY2xlYXJDb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MsIGRvdE5MICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSAwLjA7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gKCAxLjAgLSBjbGVhckNvYXRESFIgKSAqIGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0dHWCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gKCAxLjAgLSBjbGVhckNvYXRESFIgKSAqIGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhckNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGNsZWFyQ29hdFJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90TlY7XFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJDb2F0ICogY2xlYXJDb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MsIGRvdE5MICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSAwLjA7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSAoIDEuMCAtIGNsZWFyQ29hdERIUiApICogcmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudCggZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzICk7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gY2xlYXJDb2F0UmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhckNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudCggZ2VvbWV0cnksIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X1BoeXNpY2FsXFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclxcdFxcdFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWxcXG4jZGVmaW5lIE1hdGVyaWFsX0JsaW5uU2hpbmluZXNzRXhwb25lbnQoIG1hdGVyaWFsICkgICBHR1hSb3VnaG5lc3NUb0JsaW5uRXhwb25lbnQoIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzIClcXG4jZGVmaW5lIE1hdGVyaWFsX0NsZWFyQ29hdF9CbGlublNoaW5pbmVzc0V4cG9uZW50KCBtYXRlcmlhbCApICAgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgKVxcbmZsb2F0IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggY29uc3QgaW4gZmxvYXQgZG90TlYsIGNvbnN0IGluIGZsb2F0IGFtYmllbnRPY2NsdXNpb24sIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIHBvdyggZG90TlYgKyBhbWJpZW50T2NjbHVzaW9uLCBleHAyKCAtIDE2LjAgKiByb3VnaG5lc3MgLSAxLjAgKSApIC0gMS4wICsgYW1iaWVudE9jY2x1c2lvbiApO1xcbn1cXG5cIixcbiAgICBsaWdodHNfdGVtcGxhdGU6XCJcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gLSB2Vmlld1Bvc2l0aW9uO1xcbmdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbDtcXG5nZW9tZXRyeS52aWV3RGlyID0gbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG4jaWYgKCBOVU1fUE9JTlRfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0UG9pbnRMaWdodCBwb2ludExpZ2h0O1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggcG9pbnRMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUgKSApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX1NQT1RfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0U3BvdExpZ2h0IHNwb3RMaWdodDtcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIHNwb3RMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBzcG90TGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlICkgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX0RJUl9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHREaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodElycmFkaWFuY2UoIGRpcmVjdGlvbmFsTGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggZGlyZWN0aW9uYWxMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUgKSApID8gZ2V0U2hhZG93KCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgaSBdLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd01hcFNpemUsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdF9SZWN0QXJlYSApXFxuXFx0UmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0O1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9SRUNUX0FSRUFfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHJlY3RBcmVhTGlnaHQgPSByZWN0QXJlYUxpZ2h0c1sgaSBdO1xcblxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYSggcmVjdEFyZWFMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdCNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRcXHR2ZWMzIGxpZ2h0TWFwSXJyYWRpYW5jZSA9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHRcXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRcXHRsaWdodE1hcElycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBsaWdodE1hcElycmFkaWFuY2U7XFxuXFx0I2VuZGlmXFxuXFx0I2lmICggTlVNX0hFTUlfTElHSFRTID4gMCApXFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdFxcdGlycmFkaWFuY2UgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBnZW9tZXRyeSApO1xcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSW5kaXJlY3RJcnJhZGlhbmNlKCBnZW9tZXRyeSwgOCApO1xcblxcdCNlbmRpZlxcblxcdFJFX0luZGlyZWN0RGlmZnVzZSggaXJyYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0dmVjMyByYWRpYW5jZSA9IGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBnZW9tZXRyeSwgTWF0ZXJpYWxfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSwgOCApO1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHR2ZWMzIGNsZWFyQ29hdFJhZGlhbmNlID0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGdlb21ldHJ5LCBNYXRlcmlhbF9DbGVhckNvYXRfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSwgOCApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyBjbGVhckNvYXRSYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcblxcdCNlbmRpZlxcblxcdFJFX0luZGlyZWN0U3BlY3VsYXIoIHJhZGlhbmNlLCBjbGVhckNvYXRSYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlxcblwiLFxuICAgIGxvZ2RlcHRoYnVmX2ZyYWdtZW50OlwiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApICYmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRl9FWFQgKVxcblxcdGdsX0ZyYWdEZXB0aEVYVCA9IGxvZzIoIHZGcmFnRGVwdGggKSAqIGxvZ0RlcHRoQnVmRkMgKiAwLjU7XFxuI2VuZGlmXCIsbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHR1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg6XCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcbiNlbmRpZlwiLGxvZ2RlcHRoYnVmX3ZlcnRleDpcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdHZGcmFnRGVwdGggPSAxLjAgKyBnbF9Qb3NpdGlvbi53O1xcblxcdCNlbHNlXFxuXFx0XFx0Z2xfUG9zaXRpb24ueiA9IGxvZzIoIG1heCggRVBTSUxPTiwgZ2xfUG9zaXRpb24udyArIDEuMCApICkgKiBsb2dEZXB0aEJ1ZkZDIC0gMS4wO1xcblxcdFxcdGdsX1Bvc2l0aW9uLnogKj0gZ2xfUG9zaXRpb24udztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBtYXBfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX01BUFxcblxcdHZlYzQgdGV4ZWxDb2xvciA9IHRleHR1cmUyRCggbWFwLCB2VXYgKTtcXG5cXHR0ZXhlbENvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4ZWxDb2xvciApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXhlbENvbG9yO1xcbiNlbmRpZlxcblwiLG1hcF9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXFxuXCIsbWFwX3BhcnRpY2xlX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWMyIHV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIGdsX1BvaW50Q29vcmQueCwgMS4wIC0gZ2xfUG9pbnRDb29yZC55LCAxICkgKS54eTtcXG5cXHR2ZWM0IG1hcFRleGVsID0gdGV4dHVyZTJEKCBtYXAsIHV2ICk7XFxuXFx0ZGlmZnVzZUNvbG9yICo9IG1hcFRleGVsVG9MaW5lYXIoIG1hcFRleGVsICk7XFxuI2VuZGlmXFxuXCIsbWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXFxuXCIsXG4gICAgbWV0YWxuZXNzbWFwX2ZyYWdtZW50OlwiZmxvYXQgbWV0YWxuZXNzRmFjdG9yID0gbWV0YWxuZXNzO1xcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dmVjNCB0ZXhlbE1ldGFsbmVzcyA9IHRleHR1cmUyRCggbWV0YWxuZXNzTWFwLCB2VXYgKTtcXG5cXHRtZXRhbG5lc3NGYWN0b3IgKj0gdGV4ZWxNZXRhbG5lc3MuYjtcXG4jZW5kaWZcXG5cIixtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWV0YWxuZXNzTWFwO1xcbiNlbmRpZlwiLG1vcnBobm9ybWFsX3ZlcnRleDpcIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwwIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDEgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMiAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwzIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG4jZW5kaWZcXG5cIixcbiAgICBtb3JwaHRhcmdldF9wYXJzX3ZlcnRleDpcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDggXTtcXG5cXHQjZWxzZVxcblxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCIsbW9ycGh0YXJnZXRfdmVydGV4OlwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MSAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MiAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NSAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDUgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NiAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDYgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDcgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBub3JtYWxfZnJhZ21lbnQ6XCIjaWZkZWYgRkxBVF9TSEFERURcXG5cXHR2ZWMzIGZkeCA9IHZlYzMoIGRGZHgoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeCggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIGZkeSA9IHZlYzMoIGRGZHkoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeSggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIGZkeCwgZmR5ICkgKTtcXG4jZWxzZVxcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsICk7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKVxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWxBcmIoIC12Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpICk7XFxuI2VuZGlmXFxuXCIsXG4gICAgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG5vcm1hbE1hcDtcXG5cXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XFxuXFx0dmVjMyBwZXJ0dXJiTm9ybWFsMkFyYiggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSApIHtcXG5cXHRcXHR2ZWMzIHEwID0gdmVjMyggZEZkeCggZXllX3Bvcy54ICksIGRGZHgoIGV5ZV9wb3MueSApLCBkRmR4KCBleWVfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgcTEgPSB2ZWMzKCBkRmR5KCBleWVfcG9zLnggKSwgZEZkeSggZXllX3Bvcy55ICksIGRGZHkoIGV5ZV9wb3MueiApICk7XFxuXFx0XFx0dmVjMiBzdDAgPSBkRmR4KCB2VXYuc3QgKTtcXG5cXHRcXHR2ZWMyIHN0MSA9IGRGZHkoIHZVdi5zdCApO1xcblxcdFxcdHZlYzMgUyA9IG5vcm1hbGl6ZSggcTAgKiBzdDEudCAtIHExICogc3QwLnQgKTtcXG5cXHRcXHR2ZWMzIFQgPSBub3JtYWxpemUoIC1xMCAqIHN0MS5zICsgcTEgKiBzdDAucyApO1xcblxcdFxcdHZlYzMgTiA9IG5vcm1hbGl6ZSggc3VyZl9ub3JtICk7XFxuXFx0XFx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRcXHRtYXBOLnh5ID0gbm9ybWFsU2NhbGUgKiBtYXBOLnh5O1xcblxcdFxcdG1hdDMgdHNuID0gbWF0MyggUywgVCwgTiApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIHRzbiAqIG1hcE4gKTtcXG5cXHR9XFxuI2VuZGlmXFxuXCIsXG4gICAgcGFja2luZzpcInZlYzMgcGFja05vcm1hbFRvUkdCKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCBub3JtYWwgKSAqIDAuNSArIDAuNTtcXG59XFxudmVjMyB1bnBhY2tSR0JUb05vcm1hbCggY29uc3QgaW4gdmVjMyByZ2IgKSB7XFxuXFx0cmV0dXJuIDIuMCAqIHJnYi54eXogLSAxLjA7XFxufVxcbmNvbnN0IGZsb2F0IFBhY2tVcHNjYWxlID0gMjU2LiAvIDI1NS47Y29uc3QgZmxvYXQgVW5wYWNrRG93bnNjYWxlID0gMjU1LiAvIDI1Ni47XFxuY29uc3QgdmVjMyBQYWNrRmFjdG9ycyA9IHZlYzMoIDI1Ni4gKiAyNTYuICogMjU2LiwgMjU2LiAqIDI1Ni4sICAyNTYuICk7XFxuY29uc3QgdmVjNCBVbnBhY2tGYWN0b3JzID0gVW5wYWNrRG93bnNjYWxlIC8gdmVjNCggUGFja0ZhY3RvcnMsIDEuICk7XFxuY29uc3QgZmxvYXQgU2hpZnRSaWdodDggPSAxLiAvIDI1Ni47XFxudmVjNCBwYWNrRGVwdGhUb1JHQkEoIGNvbnN0IGluIGZsb2F0IHYgKSB7XFxuXFx0dmVjNCByID0gdmVjNCggZnJhY3QoIHYgKiBQYWNrRmFjdG9ycyApLCB2ICk7XFxuXFx0ci55encgLT0gci54eXogKiBTaGlmdFJpZ2h0ODtcXHRyZXR1cm4gciAqIFBhY2tVcHNjYWxlO1xcbn1cXG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xcblxcdHJldHVybiBkb3QoIHYsIFVucGFja0ZhY3RvcnMgKTtcXG59XFxuZmxvYXQgdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIHZpZXdaICsgbmVhciApIC8gKCBuZWFyIC0gZmFyICk7XFxufVxcbmZsb2F0IG9ydGhvZ3JhcGhpY0RlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgbGluZWFyQ2xpcFosIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gbGluZWFyQ2xpcFogKiAoIG5lYXIgLSBmYXIgKSAtIG5lYXI7XFxufVxcbmZsb2F0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoKCBuZWFyICsgdmlld1ogKSAqIGZhciApIC8gKCggZmFyIC0gbmVhciApICogdmlld1ogKTtcXG59XFxuZmxvYXQgcGVyc3BlY3RpdmVEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGludkNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuICggbmVhciAqIGZhciApIC8gKCAoIGZhciAtIG5lYXIgKSAqIGludkNsaXBaIC0gZmFyICk7XFxufVxcblwiLFxuICAgIHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ6XCIjaWZkZWYgUFJFTVVMVElQTElFRF9BTFBIQVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XFxuI2VuZGlmXFxuXCIscHJvamVjdF92ZXJ0ZXg6XCJ2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cIixkaXRoZXJpbmdfZnJhZ21lbnQ6XCIjaWYgZGVmaW5lZCggRElUSEVSSU5HIClcXG4gIGdsX0ZyYWdDb2xvci5yZ2IgPSBkaXRoZXJpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcXG5cIixkaXRoZXJpbmdfcGFyc19mcmFnbWVudDpcIiNpZiBkZWZpbmVkKCBESVRIRVJJTkcgKVxcblxcdHZlYzMgZGl0aGVyaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdFxcdGZsb2F0IGdyaWRfcG9zaXRpb24gPSByYW5kKCBnbF9GcmFnQ29vcmQueHkgKTtcXG5cXHRcXHR2ZWMzIGRpdGhlcl9zaGlmdF9SR0IgPSB2ZWMzKCAwLjI1IC8gMjU1LjAsIC0wLjI1IC8gMjU1LjAsIDAuMjUgLyAyNTUuMCApO1xcblxcdFxcdGRpdGhlcl9zaGlmdF9SR0IgPSBtaXgoIDIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIC0yLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCBncmlkX3Bvc2l0aW9uICk7XFxuXFx0XFx0cmV0dXJuIGNvbG9yICsgZGl0aGVyX3NoaWZ0X1JHQjtcXG5cXHR9XFxuI2VuZGlmXFxuXCIsXG4gICAgcm91Z2huZXNzbWFwX2ZyYWdtZW50OlwiZmxvYXQgcm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzO1xcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dmVjNCB0ZXhlbFJvdWdobmVzcyA9IHRleHR1cmUyRCggcm91Z2huZXNzTWFwLCB2VXYgKTtcXG5cXHRyb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcXG4jZW5kaWZcXG5cIixyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgcm91Z2huZXNzTWFwO1xcbiNlbmRpZlwiLHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlyZWN0aW9uYWxTaGFkb3dNYXBbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdFNoYWRvd01hcFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHBvaW50U2hhZG93TWFwWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgdGV4dHVyZTJEQ29tcGFyZSggc2FtcGxlcjJEIGRlcHRocywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRyZXR1cm4gc3RlcCggY29tcGFyZSwgdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggZGVwdGhzLCB1diApICkgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgdGV4dHVyZTJEU2hhZG93TGVycCggc2FtcGxlcjJEIGRlcHRocywgdmVjMiBzaXplLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdGNvbnN0IHZlYzIgb2Zmc2V0ID0gdmVjMiggMC4wLCAxLjAgKTtcXG5cXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2l6ZTtcXG5cXHRcXHR2ZWMyIGNlbnRyb2lkVVYgPSBmbG9vciggdXYgKiBzaXplICsgMC41ICkgLyBzaXplO1xcblxcdFxcdGZsb2F0IGxiID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnh4LCBjb21wYXJlICk7XFxuXFx0XFx0ZmxvYXQgbHQgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueHksIGNvbXBhcmUgKTtcXG5cXHRcXHRmbG9hdCByYiA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC55eCwgY29tcGFyZSApO1xcblxcdFxcdGZsb2F0IHJ0ID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnl5LCBjb21wYXJlICk7XFxuXFx0XFx0dmVjMiBmID0gZnJhY3QoIHV2ICogc2l6ZSArIDAuNSApO1xcblxcdFxcdGZsb2F0IGEgPSBtaXgoIGxiLCBsdCwgZi55ICk7XFxuXFx0XFx0ZmxvYXQgYiA9IG1peCggcmIsIHJ0LCBmLnkgKTtcXG5cXHRcXHRmbG9hdCBjID0gbWl4KCBhLCBiLCBmLnggKTtcXG5cXHRcXHRyZXR1cm4gYztcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCApIHtcXG5cXHRcXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0XFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XFxuXFx0XFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xcblxcdFxcdGJ2ZWM0IGluRnJ1c3R1bVZlYyA9IGJ2ZWM0ICggc2hhZG93Q29vcmQueCA+PSAwLjAsIHNoYWRvd0Nvb3JkLnggPD0gMS4wLCBzaGFkb3dDb29yZC55ID49IDAuMCwgc2hhZG93Q29vcmQueSA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGluRnJ1c3R1bSA9IGFsbCggaW5GcnVzdHVtVmVjICk7XFxuXFx0XFx0YnZlYzIgZnJ1c3R1bVRlc3RWZWMgPSBidmVjMiggaW5GcnVzdHVtLCBzaGFkb3dDb29yZC56IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgZnJ1c3R1bVRlc3QgPSBhbGwoIGZydXN0dW1UZXN0VmVjICk7XFxuXFx0XFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApLCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApXFxuXFx0XFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0XFx0ZmxvYXQgZHgwID0gLSB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTAgPSAtIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MSA9ICsgdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkxID0gKyB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRzaGFkb3cgPSB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBzaGFkb3c7XFxuXFx0fVxcblxcdHZlYzIgY3ViZVRvVVYoIHZlYzMgdiwgZmxvYXQgdGV4ZWxTaXplWSApIHtcXG5cXHRcXHR2ZWMzIGFic1YgPSBhYnMoIHYgKTtcXG5cXHRcXHRmbG9hdCBzY2FsZVRvQ3ViZSA9IDEuMCAvIG1heCggYWJzVi54LCBtYXgoIGFic1YueSwgYWJzVi56ICkgKTtcXG5cXHRcXHRhYnNWICo9IHNjYWxlVG9DdWJlO1xcblxcdFxcdHYgKj0gc2NhbGVUb0N1YmUgKiAoIDEuMCAtIDIuMCAqIHRleGVsU2l6ZVkgKTtcXG5cXHRcXHR2ZWMyIHBsYW5hciA9IHYueHk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0QVRleGVsID0gMS41ICogdGV4ZWxTaXplWTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RPbmUgPSAxLjAgLSBhbG1vc3RBVGV4ZWw7XFxuXFx0XFx0aWYgKCBhYnNWLnogPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGlmICggdi56ID4gMC4wIClcXG5cXHRcXHRcXHRcXHRwbGFuYXIueCA9IDQuMCAtIHYueDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnggPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25YID0gc2lnbiggdi54ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnogKiBzaWduWCArIDIuMCAqIHNpZ25YO1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueSA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblkgPSBzaWduKCB2LnkgKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueCArIDIuMCAqIHNpZ25ZICsgMi4wO1xcblxcdFxcdFxcdHBsYW5hci55ID0gdi56ICogc2lnblkgLSAyLjA7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiB2ZWMyKCAwLjEyNSwgMC4yNSApICogcGxhbmFyICsgdmVjMiggMC4zNzUsIDAuNzUgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0UG9pbnRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkLCBmbG9hdCBzaGFkb3dDYW1lcmFOZWFyLCBmbG9hdCBzaGFkb3dDYW1lcmFGYXIgKSB7XFxuXFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvICggc2hhZG93TWFwU2l6ZSAqIHZlYzIoIDQuMCwgMi4wICkgKTtcXG5cXHRcXHR2ZWMzIGxpZ2h0VG9Qb3NpdGlvbiA9IHNoYWRvd0Nvb3JkLnh5ejtcXG5cXHRcXHRmbG9hdCBkcCA9ICggbGVuZ3RoKCBsaWdodFRvUG9zaXRpb24gKSAtIHNoYWRvd0NhbWVyYU5lYXIgKSAvICggc2hhZG93Q2FtZXJhRmFyIC0gc2hhZG93Q2FtZXJhTmVhciApO1xcdFxcdGRwICs9IHNoYWRvd0JpYXM7XFxuXFx0XFx0dmVjMyBiZDNEID0gbm9ybWFsaXplKCBsaWdodFRvUG9zaXRpb24gKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcdFxcdFxcdHZlYzIgb2Zmc2V0ID0gdmVjMiggLSAxLCAxICkgKiBzaGFkb3dSYWRpdXMgKiB0ZXhlbFNpemUueTtcXG5cXHRcXHRcXHRyZXR1cm4gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKVxcblxcdFxcdFxcdCkgKiAoIDEuMCAvIDkuMCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcblwiLFxuICAgIHNoYWRvd21hcF9wYXJzX3ZlcnRleDpcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgc3BvdFNoYWRvd01hdHJpeFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLFxuICAgIHNoYWRvd21hcF92ZXJ0ZXg6XCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdID0gZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZTcG90U2hhZG93Q29vcmRbIGkgXSA9IHNwb3RTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0dlBvaW50U2hhZG93Q29vcmRbIGkgXSA9IHBvaW50U2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ6XCJmbG9hdCBnZXRTaGFkb3dNYXNrKCkge1xcblxcdGZsb2F0IHNoYWRvdyA9IDEuMDtcXG5cXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHREaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93ICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gYm9vbCggc3BvdExpZ2h0LnNoYWRvdyApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodC5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHQuc2hhZG93Qmlhcywgc3BvdExpZ2h0LnNoYWRvd1JhZGl1cywgdlNwb3RTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSBib29sKCBwb2ludExpZ2h0LnNoYWRvdyApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG5cXHRyZXR1cm4gc2hhZG93O1xcbn1cXG5cIixcbiAgICBza2luYmFzZV92ZXJ0ZXg6XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBib25lTWF0WCA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC54ICk7XFxuXFx0bWF0NCBib25lTWF0WSA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC55ICk7XFxuXFx0bWF0NCBib25lTWF0WiA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC56ICk7XFxuXFx0bWF0NCBib25lTWF0VyA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC53ICk7XFxuI2VuZGlmXCIsc2tpbm5pbmdfcGFyc192ZXJ0ZXg6XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXg7XFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXhJbnZlcnNlO1xcblxcdCNpZmRlZiBCT05FX1RFWFRVUkVcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBib25lVGV4dHVyZTtcXG5cXHRcXHR1bmlmb3JtIGludCBib25lVGV4dHVyZVNpemU7XFxuXFx0XFx0bWF0NCBnZXRCb25lTWF0cml4KCBjb25zdCBpbiBmbG9hdCBpICkge1xcblxcdFxcdFxcdGZsb2F0IGogPSBpICogNC4wO1xcblxcdFxcdFxcdGZsb2F0IHggPSBtb2QoIGosIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKSApO1xcblxcdFxcdFxcdGZsb2F0IHkgPSBmbG9vciggaiAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKSApO1xcblxcdFxcdFxcdGZsb2F0IGR4ID0gMS4wIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApO1xcblxcdFxcdFxcdGZsb2F0IGR5ID0gMS4wIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApO1xcblxcdFxcdFxcdHkgPSBkeSAqICggeSArIDAuNSApO1xcblxcdFxcdFxcdHZlYzQgdjEgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDAuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHYyID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAxLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MyA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMi41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjQgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDMuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHRtYXQ0IGJvbmUgPSBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xcblxcdFxcdFxcdHJldHVybiBib25lO1xcblxcdFxcdH1cXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gbWF0NCBib25lTWF0cmljZXNbIE1BWF9CT05FUyBdO1xcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRcXHRtYXQ0IGJvbmUgPSBib25lTWF0cmljZXNbIGludChpKSBdO1xcblxcdFxcdFxcdHJldHVybiBib25lO1xcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBza2lubmluZ192ZXJ0ZXg6XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dmVjNCBza2luVmVydGV4ID0gYmluZE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXHR2ZWM0IHNraW5uZWQgPSB2ZWM0KCAwLjAgKTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRYICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueDtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRaICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQuejtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRXICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQudztcXG5cXHR0cmFuc2Zvcm1lZCA9ICggYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkICkueHl6O1xcbiNlbmRpZlxcblwiLHNraW5ub3JtYWxfdmVydGV4OlwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgc2tpbk1hdHJpeCA9IG1hdDQoIDAuMCApO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnkgKiBib25lTWF0WTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueiAqIGJvbmVNYXRaO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XFxuXFx0c2tpbk1hdHJpeCAgPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xcblxcdG9iamVjdE5vcm1hbCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3ROb3JtYWwsIDAuMCApICkueHl6O1xcbiNlbmRpZlxcblwiLFxuICAgIHNwZWN1bGFybWFwX2ZyYWdtZW50OlwiZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG4jZWxzZVxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuI2VuZGlmXCIsc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBzcGVjdWxhck1hcDtcXG4jZW5kaWZcIix0b25lbWFwcGluZ19mcmFnbWVudDpcIiNpZiBkZWZpbmVkKCBUT05FX01BUFBJTkcgKVxcbiAgZ2xfRnJhZ0NvbG9yLnJnYiA9IHRvbmVNYXBwaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXFxuXCIsdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDpcIiNpZm5kZWYgc2F0dXJhdGVcXG5cXHQjZGVmaW5lIHNhdHVyYXRlKGEpIGNsYW1wKCBhLCAwLjAsIDEuMCApXFxuI2VuZGlmXFxudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ0V4cG9zdXJlO1xcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdXaGl0ZVBvaW50O1xcbnZlYzMgTGluZWFyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0cmV0dXJuIHRvbmVNYXBwaW5nRXhwb3N1cmUgKiBjb2xvcjtcXG59XFxudmVjMyBSZWluaGFyZFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBjb2xvciAvICggdmVjMyggMS4wICkgKyBjb2xvciApICk7XFxufVxcbiNkZWZpbmUgVW5jaGFydGVkMkhlbHBlciggeCApIG1heCggKCAoIHggKiAoIDAuMTUgKiB4ICsgMC4xMCAqIDAuNTAgKSArIDAuMjAgKiAwLjAyICkgLyAoIHggKiAoIDAuMTUgKiB4ICsgMC41MCApICsgMC4yMCAqIDAuMzAgKSApIC0gMC4wMiAvIDAuMzAsIHZlYzMoIDAuMCApIClcXG52ZWMzIFVuY2hhcnRlZDJUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggVW5jaGFydGVkMkhlbHBlciggY29sb3IgKSAvIFVuY2hhcnRlZDJIZWxwZXIoIHZlYzMoIHRvbmVNYXBwaW5nV2hpdGVQb2ludCApICkgKTtcXG59XFxudmVjMyBPcHRpbWl6ZWRDaW5lb25Ub25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdGNvbG9yID0gbWF4KCB2ZWMzKCAwLjAgKSwgY29sb3IgLSAwLjAwNCApO1xcblxcdHJldHVybiBwb3coICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMC41ICkgKSAvICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMS43ICkgKyAwLjA2ICksIHZlYzMoIDIuMiApICk7XFxufVxcblwiLFxuICAgIHV2X3BhcnNfZnJhZ21lbnQ6XCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlwiLHV2X3BhcnNfdmVydGV4OlwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfU1BFQ1VMQVJNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKSB8fCBkZWZpbmVkKCBVU0VfRU1JU1NJVkVNQVAgKSB8fCBkZWZpbmVkKCBVU0VfUk9VR0hORVNTTUFQICkgfHwgZGVmaW5lZCggVVNFX01FVEFMTkVTU01BUCApXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG5cXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuI2VuZGlmXFxuXCIsXG4gICAgdXZfdmVydGV4OlwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfU1BFQ1VMQVJNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKSB8fCBkZWZpbmVkKCBVU0VfRU1JU1NJVkVNQVAgKSB8fCBkZWZpbmVkKCBVU0VfUk9VR0hORVNTTUFQICkgfHwgZGVmaW5lZCggVVNFX01FVEFMTkVTU01BUCApXFxuXFx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcXG4jZW5kaWZcIix1djJfcGFyc19mcmFnbWVudDpcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcbiNlbmRpZlwiLHV2Ml9wYXJzX3ZlcnRleDpcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdGF0dHJpYnV0ZSB2ZWMyIHV2MjtcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2MjtcXG4jZW5kaWZcIixcbiAgICB1djJfdmVydGV4OlwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFx0dlV2MiA9IHV2MjtcXG4jZW5kaWZcIix3b3JsZHBvc192ZXJ0ZXg6XCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKVxcblxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbiNlbmRpZlxcblwiLGN1YmVfZnJhZzpcInVuaWZvcm0gc2FtcGxlckN1YmUgdEN1YmU7XFxudW5pZm9ybSBmbG9hdCB0RmxpcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbnZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlQ3ViZSggdEN1YmUsIHZlYzMoIHRGbGlwICogdldvcmxkUG9zaXRpb24ueCwgdldvcmxkUG9zaXRpb24ueXogKSApO1xcblxcdGdsX0ZyYWdDb2xvci5hICo9IG9wYWNpdHk7XFxufVxcblwiLFxuICAgIGN1YmVfdmVydDpcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGRQb3NpdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XFxufVxcblwiLGRlcHRoX2ZyYWc6XCIjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRkaWZmdXNlQ29sb3IuYSA9IG9wYWNpdHk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZlYzMoIGdsX0ZyYWdDb29yZC56ICksIG9wYWNpdHkgKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDFcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGdsX0ZyYWdDb29yZC56ICk7XFxuXFx0I2VuZGlmXFxufVxcblwiLFxuICAgIGRlcHRoX3ZlcnQ6XCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxufVxcblwiLFxuICAgIGRpc3RhbmNlUkdCQV9mcmFnOlwiI2RlZmluZSBESVNUQU5DRVxcbnVuaWZvcm0gdmVjMyByZWZlcmVuY2VQb3NpdGlvbjtcXG51bmlmb3JtIGZsb2F0IG5lYXJEaXN0YW5jZTtcXG51bmlmb3JtIGZsb2F0IGZhckRpc3RhbmNlO1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluICgpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRmbG9hdCBkaXN0ID0gbGVuZ3RoKCB2V29ybGRQb3NpdGlvbiAtIHJlZmVyZW5jZVBvc2l0aW9uICk7XFxuXFx0ZGlzdCA9ICggZGlzdCAtIG5lYXJEaXN0YW5jZSApIC8gKCBmYXJEaXN0YW5jZSAtIG5lYXJEaXN0YW5jZSApO1xcblxcdGRpc3QgPSBzYXR1cmF0ZSggZGlzdCApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHBhY2tEZXB0aFRvUkdCQSggZGlzdCApO1xcbn1cXG5cIixcbiAgICBkaXN0YW5jZVJHQkFfdmVydDpcIiNkZWZpbmUgRElTVEFOQ0VcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG59XFxuXCIsXG4gICAgZXF1aXJlY3RfZnJhZzpcInVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uICk7XFxuXFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRzYW1wbGVVVi55ID0gYXNpbiggY2xhbXAoIGRpcmVjdGlvbi55LCAtIDEuMCwgMS4wICkgKSAqIFJFQ0lQUk9DQUxfUEkgKyAwLjU7XFxuXFx0c2FtcGxlVVYueCA9IGF0YW4oIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCB0RXF1aXJlY3QsIHNhbXBsZVVWICk7XFxufVxcblwiLGVxdWlyZWN0X3ZlcnQ6XCJ2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkUG9zaXRpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4Plxcbn1cXG5cIixcbiAgICBsaW5lZGFzaGVkX2ZyYWc6XCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIixcbiAgICBsaW5lZGFzaGVkX3ZlcnQ6XCJ1bmlmb3JtIGZsb2F0IHNjYWxlO1xcbmF0dHJpYnV0ZSBmbG9hdCBsaW5lRGlzdGFuY2U7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiLFxuICAgIG1lc2hiYXNpY19mcmFnOlwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdCNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApLnh5eiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xcblxcdCNlbHNlXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHZlYzMoIDEuMCApO1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2U7XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVxcblwiLFxuICAgIG1lc2hiYXNpY192ZXJ0OlwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCIsXG4gICAgbWVzaGxhbWJlcnRfZnJhZzpcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzPlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSA9IGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGFtYmllbnRMaWdodENvbG9yICk7XFxuXFx0I2luY2x1ZGUgPGxpZ2h0bWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBCUkRGX0RpZmZ1c2VfTGFtYmVydCggZGlmZnVzZUNvbG9yLnJnYiApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlID0gKCBnbF9Gcm9udEZhY2luZyApID8gdkxpZ2h0RnJvbnQgOiB2TGlnaHRCYWNrO1xcblxcdCNlbHNlXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9IHZMaWdodEZyb250O1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKSAqIGdldFNoYWRvd01hc2soKTtcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cXG5cIixcbiAgICBtZXNobGFtYmVydF92ZXJ0OlwiI2RlZmluZSBMQU1CRVJUXFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFycz5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19sYW1iZXJ0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCIsXG4gICAgbWVzaHBob25nX2ZyYWc6XCIjZGVmaW5lIFBIT05HXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcXG51bmlmb3JtIGZsb2F0IHNoaW5pbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19waG9uZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3RlbXBsYXRlPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVxcblwiLFxuICAgIG1lc2hwaG9uZ192ZXJ0OlwiI2RlZmluZSBQSE9OR1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiLFxuICAgIG1lc2hwaHlzaWNhbF9mcmFnOlwiI2RlZmluZSBQSFlTSUNBTFxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IHJvdWdobmVzcztcXG51bmlmb3JtIGZsb2F0IG1ldGFsbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmbmRlZiBTVEFOREFSRFxcblxcdHVuaWZvcm0gZmxvYXQgY2xlYXJDb2F0O1xcblxcdHVuaWZvcm0gZmxvYXQgY2xlYXJDb2F0Um91Z2huZXNzO1xcbiNlbmRpZlxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cm91Z2huZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3RlbXBsYXRlPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cXG5cIixcbiAgICBtZXNocGh5c2ljYWxfdmVydDpcIiNkZWZpbmUgUEhZU0lDQUxcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCIsXG4gICAgbm9ybWFsX2ZyYWc6XCIjZGVmaW5lIE5PUk1BTFxcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgb3BhY2l0eSApO1xcbn1cXG5cIixcbiAgICBub3JtYWxfdmVydDpcIiNkZWZpbmUgTk9STUFMXFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cXG5cIixcbiAgICBwb2ludHNfZnJhZzpcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVxcblwiLFxuICAgIHBvaW50c192ZXJ0OlwidW5pZm9ybSBmbG9hdCBzaXplO1xcbnVuaWZvcm0gZmxvYXQgc2NhbGU7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Z2xfUG9pbnRTaXplID0gc2l6ZSAqICggc2NhbGUgLyAtIG12UG9zaXRpb24ueiApO1xcblxcdCNlbHNlXFxuXFx0XFx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiLFxuICAgIHNoYWRvd19mcmFnOlwidW5pZm9ybSB2ZWMzIGNvbG9yO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzPlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFza19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgb3BhY2l0eSAqICggMS4wIC0gZ2V0U2hhZG93TWFzaygpICkgKTtcXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIixzaGFkb3dfdmVydDpcIiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCJ9LFxuICAgIHRiPXtiYXNpYzp7dW5pZm9ybXM6R2EubWVyZ2UoW0suY29tbW9uLEsuc3BlY3VsYXJtYXAsSy5lbnZtYXAsSy5hb21hcCxLLmxpZ2h0bWFwLEsuZm9nXSksdmVydGV4U2hhZGVyOlIubWVzaGJhc2ljX3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5tZXNoYmFzaWNfZnJhZ30sbGFtYmVydDp7dW5pZm9ybXM6R2EubWVyZ2UoW0suY29tbW9uLEsuc3BlY3VsYXJtYXAsSy5lbnZtYXAsSy5hb21hcCxLLmxpZ2h0bWFwLEsuZW1pc3NpdmVtYXAsSy5mb2csSy5saWdodHMse2VtaXNzaXZlOnt2YWx1ZTpuZXcgSCgwKX19XSksdmVydGV4U2hhZGVyOlIubWVzaGxhbWJlcnRfdmVydCxmcmFnbWVudFNoYWRlcjpSLm1lc2hsYW1iZXJ0X2ZyYWd9LHBob25nOnt1bmlmb3JtczpHYS5tZXJnZShbSy5jb21tb24sSy5zcGVjdWxhcm1hcCxLLmVudm1hcCxLLmFvbWFwLEsubGlnaHRtYXAsSy5lbWlzc2l2ZW1hcCxLLmJ1bXBtYXAsSy5ub3JtYWxtYXAsSy5kaXNwbGFjZW1lbnRtYXAsSy5ncmFkaWVudG1hcCxcbiAgICBLLmZvZyxLLmxpZ2h0cyx7ZW1pc3NpdmU6e3ZhbHVlOm5ldyBIKDApfSxzcGVjdWxhcjp7dmFsdWU6bmV3IEgoMTExODQ4MSl9LHNoaW5pbmVzczp7dmFsdWU6MzB9fV0pLHZlcnRleFNoYWRlcjpSLm1lc2hwaG9uZ192ZXJ0LGZyYWdtZW50U2hhZGVyOlIubWVzaHBob25nX2ZyYWd9LHN0YW5kYXJkOnt1bmlmb3JtczpHYS5tZXJnZShbSy5jb21tb24sSy5lbnZtYXAsSy5hb21hcCxLLmxpZ2h0bWFwLEsuZW1pc3NpdmVtYXAsSy5idW1wbWFwLEsubm9ybWFsbWFwLEsuZGlzcGxhY2VtZW50bWFwLEsucm91Z2huZXNzbWFwLEsubWV0YWxuZXNzbWFwLEsuZm9nLEsubGlnaHRzLHtlbWlzc2l2ZTp7dmFsdWU6bmV3IEgoMCl9LHJvdWdobmVzczp7dmFsdWU6LjV9LG1ldGFsbmVzczp7dmFsdWU6LjV9LGVudk1hcEludGVuc2l0eTp7dmFsdWU6MX19XSksdmVydGV4U2hhZGVyOlIubWVzaHBoeXNpY2FsX3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5tZXNocGh5c2ljYWxfZnJhZ30scG9pbnRzOnt1bmlmb3JtczpHYS5tZXJnZShbSy5wb2ludHMsXG4gICAgSy5mb2ddKSx2ZXJ0ZXhTaGFkZXI6Ui5wb2ludHNfdmVydCxmcmFnbWVudFNoYWRlcjpSLnBvaW50c19mcmFnfSxkYXNoZWQ6e3VuaWZvcm1zOkdhLm1lcmdlKFtLLmNvbW1vbixLLmZvZyx7c2NhbGU6e3ZhbHVlOjF9LGRhc2hTaXplOnt2YWx1ZToxfSx0b3RhbFNpemU6e3ZhbHVlOjJ9fV0pLHZlcnRleFNoYWRlcjpSLmxpbmVkYXNoZWRfdmVydCxmcmFnbWVudFNoYWRlcjpSLmxpbmVkYXNoZWRfZnJhZ30sZGVwdGg6e3VuaWZvcm1zOkdhLm1lcmdlKFtLLmNvbW1vbixLLmRpc3BsYWNlbWVudG1hcF0pLHZlcnRleFNoYWRlcjpSLmRlcHRoX3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5kZXB0aF9mcmFnfSxub3JtYWw6e3VuaWZvcm1zOkdhLm1lcmdlKFtLLmNvbW1vbixLLmJ1bXBtYXAsSy5ub3JtYWxtYXAsSy5kaXNwbGFjZW1lbnRtYXAse29wYWNpdHk6e3ZhbHVlOjF9fV0pLHZlcnRleFNoYWRlcjpSLm5vcm1hbF92ZXJ0LGZyYWdtZW50U2hhZGVyOlIubm9ybWFsX2ZyYWd9LGN1YmU6e3VuaWZvcm1zOnt0Q3ViZTp7dmFsdWU6bnVsbH0sXG4gICAgdEZsaXA6e3ZhbHVlOi0xfSxvcGFjaXR5Ont2YWx1ZToxfX0sdmVydGV4U2hhZGVyOlIuY3ViZV92ZXJ0LGZyYWdtZW50U2hhZGVyOlIuY3ViZV9mcmFnfSxlcXVpcmVjdDp7dW5pZm9ybXM6e3RFcXVpcmVjdDp7dmFsdWU6bnVsbH19LHZlcnRleFNoYWRlcjpSLmVxdWlyZWN0X3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5lcXVpcmVjdF9mcmFnfSxkaXN0YW5jZVJHQkE6e3VuaWZvcm1zOkdhLm1lcmdlKFtLLmNvbW1vbixLLmRpc3BsYWNlbWVudG1hcCx7cmVmZXJlbmNlUG9zaXRpb246e3ZhbHVlOm5ldyBwfSxuZWFyRGlzdGFuY2U6e3ZhbHVlOjF9LGZhckRpc3RhbmNlOnt2YWx1ZToxRTN9fV0pLHZlcnRleFNoYWRlcjpSLmRpc3RhbmNlUkdCQV92ZXJ0LGZyYWdtZW50U2hhZGVyOlIuZGlzdGFuY2VSR0JBX2ZyYWd9LHNoYWRvdzp7dW5pZm9ybXM6R2EubWVyZ2UoW0subGlnaHRzLEsuZm9nLHtjb2xvcjp7dmFsdWU6bmV3IEgoMCl9LG9wYWNpdHk6e3ZhbHVlOjF9fV0pLHZlcnRleFNoYWRlcjpSLnNoYWRvd192ZXJ0LFxuICAgIGZyYWdtZW50U2hhZGVyOlIuc2hhZG93X2ZyYWd9fTt0Yi5waHlzaWNhbD17dW5pZm9ybXM6R2EubWVyZ2UoW3RiLnN0YW5kYXJkLnVuaWZvcm1zLHtjbGVhckNvYXQ6e3ZhbHVlOjB9LGNsZWFyQ29hdFJvdWdobmVzczp7dmFsdWU6MH19XSksdmVydGV4U2hhZGVyOlIubWVzaHBoeXNpY2FsX3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5tZXNocGh5c2ljYWxfZnJhZ307T2JqZWN0LmFzc2lnbihvZC5wcm90b3R5cGUse3NldDpmdW5jdGlvbihhLGIpe3RoaXMubWluLmNvcHkoYSk7dGhpcy5tYXguY29weShiKTtyZXR1cm4gdGhpc30sc2V0RnJvbVBvaW50czpmdW5jdGlvbihhKXt0aGlzLm1ha2VFbXB0eSgpO2Zvcih2YXIgYj0wLGM9YS5sZW5ndGg7YjxjO2IrKyl0aGlzLmV4cGFuZEJ5UG9pbnQoYVtiXSk7cmV0dXJuIHRoaXN9LHNldEZyb21DZW50ZXJBbmRTaXplOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IEQ7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7Yz1hLmNvcHkoYykubXVsdGlwbHlTY2FsYXIoLjUpO1xuICAgIHRoaXMubWluLmNvcHkoYikuc3ViKGMpO3RoaXMubWF4LmNvcHkoYikuYWRkKGMpO3JldHVybiB0aGlzfX0oKSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLm1pbi5jb3B5KGEubWluKTt0aGlzLm1heC5jb3B5KGEubWF4KTtyZXR1cm4gdGhpc30sbWFrZUVtcHR5OmZ1bmN0aW9uKCl7dGhpcy5taW4ueD10aGlzLm1pbi55PUluZmluaXR5O3RoaXMubWF4Lng9dGhpcy5tYXgueT0tSW5maW5pdHk7cmV0dXJuIHRoaXN9LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXgueDx0aGlzLm1pbi54fHx0aGlzLm1heC55PHRoaXMubWluLnl9LGdldENlbnRlcjpmdW5jdGlvbihhKXthPWF8fG5ldyBEO3JldHVybiB0aGlzLmlzRW1wdHkoKT9hLnNldCgwLDApOmEuYWRkVmVjdG9ycyh0aGlzLm1pbix0aGlzLm1heCkubXVsdGlwbHlTY2FsYXIoLjUpfSxnZXRTaXplOmZ1bmN0aW9uKGEpe2E9XG4gICAgYXx8bmV3IEQ7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP2Euc2V0KDAsMCk6YS5zdWJWZWN0b3JzKHRoaXMubWF4LHRoaXMubWluKX0sZXhwYW5kQnlQb2ludDpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYSk7dGhpcy5tYXgubWF4KGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVZlY3RvcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5zdWIoYSk7dGhpcy5tYXguYWRkKGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5hZGRTY2FsYXIoLWEpO3RoaXMubWF4LmFkZFNjYWxhcihhKTtyZXR1cm4gdGhpc30sY29udGFpbnNQb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gYS54PHRoaXMubWluLnh8fGEueD50aGlzLm1heC54fHxhLnk8dGhpcy5taW4ueXx8YS55PnRoaXMubWF4Lnk/ITE6ITB9LGNvbnRhaW5zQm94OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm1pbi54PD1hLm1pbi54JiZhLm1heC54PD10aGlzLm1heC54JiZ0aGlzLm1pbi55PD1hLm1pbi55JiZhLm1heC55PD1cbiAgICB0aGlzLm1heC55fSxnZXRQYXJhbWV0ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IEQpLnNldCgoYS54LXRoaXMubWluLngpLyh0aGlzLm1heC54LXRoaXMubWluLngpLChhLnktdGhpcy5taW4ueSkvKHRoaXMubWF4LnktdGhpcy5taW4ueSkpfSxpbnRlcnNlY3RzQm94OmZ1bmN0aW9uKGEpe3JldHVybiBhLm1heC54PHRoaXMubWluLnh8fGEubWluLng+dGhpcy5tYXgueHx8YS5tYXgueTx0aGlzLm1pbi55fHxhLm1pbi55PnRoaXMubWF4Lnk/ITE6ITB9LGNsYW1wUG9pbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IEQpLmNvcHkoYSkuY2xhbXAodGhpcy5taW4sdGhpcy5tYXgpfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgRDtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGEuY29weShiKS5jbGFtcCh0aGlzLm1pbix0aGlzLm1heCkuc3ViKGIpLmxlbmd0aCgpfX0oKSxpbnRlcnNlY3Q6ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWF4KGEubWluKTtcbiAgICB0aGlzLm1heC5taW4oYS5tYXgpO3JldHVybiB0aGlzfSx1bmlvbjpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYS5taW4pO3RoaXMubWF4Lm1heChhLm1heCk7cmV0dXJuIHRoaXN9LHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLm1pbi5hZGQoYSk7dGhpcy5tYXguYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubWluLmVxdWFscyh0aGlzLm1pbikmJmEubWF4LmVxdWFscyh0aGlzLm1heCl9fSk7dGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVS5wcm90b3R5cGUpO3RjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10Yzt2YXIgYWc9MDtQLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoemEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6UCxpc01hdGVyaWFsOiEwLG9uQmVmb3JlQ29tcGlsZTpmdW5jdGlvbigpe30sc2V0VmFsdWVzOmZ1bmN0aW9uKGEpe2lmKHZvaWQgMCE9PWEpZm9yKHZhciBiIGluIGEpe3ZhciBjPWFbYl07aWYodm9pZCAwPT09XG4gICAgYyljb25zb2xlLndhcm4oXCJUSFJFRS5NYXRlcmlhbDogJ1wiK2IrXCInIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuXCIpO2Vsc2UgaWYoXCJzaGFkaW5nXCI9PT1iKWNvbnNvbGUud2FybihcIlRIUkVFLlwiK3RoaXMudHlwZStcIjogLnNoYWRpbmcgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHRoZSBib29sZWFuIC5mbGF0U2hhZGluZyBpbnN0ZWFkLlwiKSx0aGlzLmZsYXRTaGFkaW5nPTE9PT1jPyEwOiExO2Vsc2V7dmFyIGQ9dGhpc1tiXTt2b2lkIDA9PT1kP2NvbnNvbGUud2FybihcIlRIUkVFLlwiK3RoaXMudHlwZStcIjogJ1wiK2IrXCInIGlzIG5vdCBhIHByb3BlcnR5IG9mIHRoaXMgbWF0ZXJpYWwuXCIpOmQmJmQuaXNDb2xvcj9kLnNldChjKTpkJiZkLmlzVmVjdG9yMyYmYyYmYy5pc1ZlY3RvcjM/ZC5jb3B5KGMpOnRoaXNbYl09XCJvdmVyZHJhd1wiPT09Yj9OdW1iZXIoYyk6Y319fSx0b0pTT046ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhKXt2YXIgYj1bXSxjO2ZvcihjIGluIGEpe3ZhciBkPWFbY107ZGVsZXRlIGQubWV0YWRhdGE7XG4gICAgYi5wdXNoKGQpfXJldHVybiBifXZhciBjPXZvaWQgMD09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYTtjJiYoYT17dGV4dHVyZXM6e30saW1hZ2VzOnt9fSk7dmFyIGQ9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNSx0eXBlOlwiTWF0ZXJpYWxcIixnZW5lcmF0b3I6XCJNYXRlcmlhbC50b0pTT05cIn19O2QudXVpZD10aGlzLnV1aWQ7ZC50eXBlPXRoaXMudHlwZTtcIlwiIT09dGhpcy5uYW1lJiYoZC5uYW1lPXRoaXMubmFtZSk7dGhpcy5jb2xvciYmdGhpcy5jb2xvci5pc0NvbG9yJiYoZC5jb2xvcj10aGlzLmNvbG9yLmdldEhleCgpKTt2b2lkIDAhPT10aGlzLnJvdWdobmVzcyYmKGQucm91Z2huZXNzPXRoaXMucm91Z2huZXNzKTt2b2lkIDAhPT10aGlzLm1ldGFsbmVzcyYmKGQubWV0YWxuZXNzPXRoaXMubWV0YWxuZXNzKTt0aGlzLmVtaXNzaXZlJiZ0aGlzLmVtaXNzaXZlLmlzQ29sb3ImJihkLmVtaXNzaXZlPXRoaXMuZW1pc3NpdmUuZ2V0SGV4KCkpOzEhPT10aGlzLmVtaXNzaXZlSW50ZW5zaXR5JiZcbiAgICAoZC5lbWlzc2l2ZUludGVuc2l0eT10aGlzLmVtaXNzaXZlSW50ZW5zaXR5KTt0aGlzLnNwZWN1bGFyJiZ0aGlzLnNwZWN1bGFyLmlzQ29sb3ImJihkLnNwZWN1bGFyPXRoaXMuc3BlY3VsYXIuZ2V0SGV4KCkpO3ZvaWQgMCE9PXRoaXMuc2hpbmluZXNzJiYoZC5zaGluaW5lc3M9dGhpcy5zaGluaW5lc3MpO3ZvaWQgMCE9PXRoaXMuY2xlYXJDb2F0JiYoZC5jbGVhckNvYXQ9dGhpcy5jbGVhckNvYXQpO3ZvaWQgMCE9PXRoaXMuY2xlYXJDb2F0Um91Z2huZXNzJiYoZC5jbGVhckNvYXRSb3VnaG5lc3M9dGhpcy5jbGVhckNvYXRSb3VnaG5lc3MpO3RoaXMubWFwJiZ0aGlzLm1hcC5pc1RleHR1cmUmJihkLm1hcD10aGlzLm1hcC50b0pTT04oYSkudXVpZCk7dGhpcy5hbHBoYU1hcCYmdGhpcy5hbHBoYU1hcC5pc1RleHR1cmUmJihkLmFscGhhTWFwPXRoaXMuYWxwaGFNYXAudG9KU09OKGEpLnV1aWQpO3RoaXMubGlnaHRNYXAmJnRoaXMubGlnaHRNYXAuaXNUZXh0dXJlJiYoZC5saWdodE1hcD1cbiAgICB0aGlzLmxpZ2h0TWFwLnRvSlNPTihhKS51dWlkKTt0aGlzLmJ1bXBNYXAmJnRoaXMuYnVtcE1hcC5pc1RleHR1cmUmJihkLmJ1bXBNYXA9dGhpcy5idW1wTWFwLnRvSlNPTihhKS51dWlkLGQuYnVtcFNjYWxlPXRoaXMuYnVtcFNjYWxlKTt0aGlzLm5vcm1hbE1hcCYmdGhpcy5ub3JtYWxNYXAuaXNUZXh0dXJlJiYoZC5ub3JtYWxNYXA9dGhpcy5ub3JtYWxNYXAudG9KU09OKGEpLnV1aWQsZC5ub3JtYWxTY2FsZT10aGlzLm5vcm1hbFNjYWxlLnRvQXJyYXkoKSk7dGhpcy5kaXNwbGFjZW1lbnRNYXAmJnRoaXMuZGlzcGxhY2VtZW50TWFwLmlzVGV4dHVyZSYmKGQuZGlzcGxhY2VtZW50TWFwPXRoaXMuZGlzcGxhY2VtZW50TWFwLnRvSlNPTihhKS51dWlkLGQuZGlzcGxhY2VtZW50U2NhbGU9dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSxkLmRpc3BsYWNlbWVudEJpYXM9dGhpcy5kaXNwbGFjZW1lbnRCaWFzKTt0aGlzLnJvdWdobmVzc01hcCYmdGhpcy5yb3VnaG5lc3NNYXAuaXNUZXh0dXJlJiZcbiAgICAoZC5yb3VnaG5lc3NNYXA9dGhpcy5yb3VnaG5lc3NNYXAudG9KU09OKGEpLnV1aWQpO3RoaXMubWV0YWxuZXNzTWFwJiZ0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUmJihkLm1ldGFsbmVzc01hcD10aGlzLm1ldGFsbmVzc01hcC50b0pTT04oYSkudXVpZCk7dGhpcy5lbWlzc2l2ZU1hcCYmdGhpcy5lbWlzc2l2ZU1hcC5pc1RleHR1cmUmJihkLmVtaXNzaXZlTWFwPXRoaXMuZW1pc3NpdmVNYXAudG9KU09OKGEpLnV1aWQpO3RoaXMuc3BlY3VsYXJNYXAmJnRoaXMuc3BlY3VsYXJNYXAuaXNUZXh0dXJlJiYoZC5zcGVjdWxhck1hcD10aGlzLnNwZWN1bGFyTWFwLnRvSlNPTihhKS51dWlkKTt0aGlzLmVudk1hcCYmdGhpcy5lbnZNYXAuaXNUZXh0dXJlJiYoZC5lbnZNYXA9dGhpcy5lbnZNYXAudG9KU09OKGEpLnV1aWQsZC5yZWZsZWN0aXZpdHk9dGhpcy5yZWZsZWN0aXZpdHkpO3RoaXMuZ3JhZGllbnRNYXAmJnRoaXMuZ3JhZGllbnRNYXAuaXNUZXh0dXJlJiYoZC5ncmFkaWVudE1hcD1cbiAgICB0aGlzLmdyYWRpZW50TWFwLnRvSlNPTihhKS51dWlkKTt2b2lkIDAhPT10aGlzLnNpemUmJihkLnNpemU9dGhpcy5zaXplKTt2b2lkIDAhPT10aGlzLnNpemVBdHRlbnVhdGlvbiYmKGQuc2l6ZUF0dGVudWF0aW9uPXRoaXMuc2l6ZUF0dGVudWF0aW9uKTsxIT09dGhpcy5ibGVuZGluZyYmKGQuYmxlbmRpbmc9dGhpcy5ibGVuZGluZyk7ITA9PT10aGlzLmZsYXRTaGFkaW5nJiYoZC5mbGF0U2hhZGluZz10aGlzLmZsYXRTaGFkaW5nKTswIT09dGhpcy5zaWRlJiYoZC5zaWRlPXRoaXMuc2lkZSk7MCE9PXRoaXMudmVydGV4Q29sb3JzJiYoZC52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnMpOzE+dGhpcy5vcGFjaXR5JiYoZC5vcGFjaXR5PXRoaXMub3BhY2l0eSk7ITA9PT10aGlzLnRyYW5zcGFyZW50JiYoZC50cmFuc3BhcmVudD10aGlzLnRyYW5zcGFyZW50KTtkLmRlcHRoRnVuYz10aGlzLmRlcHRoRnVuYztkLmRlcHRoVGVzdD10aGlzLmRlcHRoVGVzdDtkLmRlcHRoV3JpdGU9XG4gICAgdGhpcy5kZXB0aFdyaXRlOzAhPT10aGlzLnJvdGF0aW9uJiYoZC5yb3RhdGlvbj10aGlzLnJvdGF0aW9uKTsxIT09dGhpcy5saW5ld2lkdGgmJihkLmxpbmV3aWR0aD10aGlzLmxpbmV3aWR0aCk7dm9pZCAwIT09dGhpcy5kYXNoU2l6ZSYmKGQuZGFzaFNpemU9dGhpcy5kYXNoU2l6ZSk7dm9pZCAwIT09dGhpcy5nYXBTaXplJiYoZC5nYXBTaXplPXRoaXMuZ2FwU2l6ZSk7dm9pZCAwIT09dGhpcy5zY2FsZSYmKGQuc2NhbGU9dGhpcy5zY2FsZSk7ITA9PT10aGlzLmRpdGhlcmluZyYmKGQuZGl0aGVyaW5nPSEwKTswPHRoaXMuYWxwaGFUZXN0JiYoZC5hbHBoYVRlc3Q9dGhpcy5hbHBoYVRlc3QpOyEwPT09dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEmJihkLnByZW11bHRpcGxpZWRBbHBoYT10aGlzLnByZW11bHRpcGxpZWRBbHBoYSk7ITA9PT10aGlzLndpcmVmcmFtZSYmKGQud2lyZWZyYW1lPXRoaXMud2lyZWZyYW1lKTsxPHRoaXMud2lyZWZyYW1lTGluZXdpZHRoJiYoZC53aXJlZnJhbWVMaW5ld2lkdGg9XG4gICAgdGhpcy53aXJlZnJhbWVMaW5ld2lkdGgpO1wicm91bmRcIiE9PXRoaXMud2lyZWZyYW1lTGluZWNhcCYmKGQud2lyZWZyYW1lTGluZWNhcD10aGlzLndpcmVmcmFtZUxpbmVjYXApO1wicm91bmRcIiE9PXRoaXMud2lyZWZyYW1lTGluZWpvaW4mJihkLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWpvaW4pOyEwPT09dGhpcy5tb3JwaFRhcmdldHMmJihkLm1vcnBoVGFyZ2V0cz0hMCk7ITA9PT10aGlzLnNraW5uaW5nJiYoZC5za2lubmluZz0hMCk7ITE9PT10aGlzLnZpc2libGUmJihkLnZpc2libGU9ITEpO1wie31cIiE9PUpTT04uc3RyaW5naWZ5KHRoaXMudXNlckRhdGEpJiYoZC51c2VyRGF0YT10aGlzLnVzZXJEYXRhKTtjJiYoYz1iKGEudGV4dHVyZXMpLGE9YihhLmltYWdlcyksMDxjLmxlbmd0aCYmKGQudGV4dHVyZXM9YyksMDxhLmxlbmd0aCYmKGQuaW1hZ2VzPWEpKTtyZXR1cm4gZH0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LFxuICAgIGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5uYW1lPWEubmFtZTt0aGlzLmZvZz1hLmZvZzt0aGlzLmxpZ2h0cz1hLmxpZ2h0czt0aGlzLmJsZW5kaW5nPWEuYmxlbmRpbmc7dGhpcy5zaWRlPWEuc2lkZTt0aGlzLmZsYXRTaGFkaW5nPWEuZmxhdFNoYWRpbmc7dGhpcy52ZXJ0ZXhDb2xvcnM9YS52ZXJ0ZXhDb2xvcnM7dGhpcy5vcGFjaXR5PWEub3BhY2l0eTt0aGlzLnRyYW5zcGFyZW50PWEudHJhbnNwYXJlbnQ7dGhpcy5ibGVuZFNyYz1hLmJsZW5kU3JjO3RoaXMuYmxlbmREc3Q9YS5ibGVuZERzdDt0aGlzLmJsZW5kRXF1YXRpb249YS5ibGVuZEVxdWF0aW9uO3RoaXMuYmxlbmRTcmNBbHBoYT1hLmJsZW5kU3JjQWxwaGE7dGhpcy5ibGVuZERzdEFscGhhPWEuYmxlbmREc3RBbHBoYTt0aGlzLmJsZW5kRXF1YXRpb25BbHBoYT1hLmJsZW5kRXF1YXRpb25BbHBoYTt0aGlzLmRlcHRoRnVuYz1hLmRlcHRoRnVuYzt0aGlzLmRlcHRoVGVzdD1hLmRlcHRoVGVzdDt0aGlzLmRlcHRoV3JpdGU9YS5kZXB0aFdyaXRlO1xuICAgIHRoaXMuY29sb3JXcml0ZT1hLmNvbG9yV3JpdGU7dGhpcy5wcmVjaXNpb249YS5wcmVjaXNpb247dGhpcy5wb2x5Z29uT2Zmc2V0PWEucG9seWdvbk9mZnNldDt0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I9YS5wb2x5Z29uT2Zmc2V0RmFjdG9yO3RoaXMucG9seWdvbk9mZnNldFVuaXRzPWEucG9seWdvbk9mZnNldFVuaXRzO3RoaXMuZGl0aGVyaW5nPWEuZGl0aGVyaW5nO3RoaXMuYWxwaGFUZXN0PWEuYWxwaGFUZXN0O3RoaXMucHJlbXVsdGlwbGllZEFscGhhPWEucHJlbXVsdGlwbGllZEFscGhhO3RoaXMub3ZlcmRyYXc9YS5vdmVyZHJhdzt0aGlzLnZpc2libGU9YS52aXNpYmxlO3RoaXMudXNlckRhdGE9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhLnVzZXJEYXRhKSk7dGhpcy5jbGlwU2hhZG93cz1hLmNsaXBTaGFkb3dzO3RoaXMuY2xpcEludGVyc2VjdGlvbj1hLmNsaXBJbnRlcnNlY3Rpb247YT1hLmNsaXBwaW5nUGxhbmVzO3ZhciBiPW51bGw7aWYobnVsbCE9PWEpZm9yKHZhciBjPVxuICAgIGEubGVuZ3RoLGI9QXJyYXkoYyksZD0wO2QhPT1jOysrZCliW2RdPWFbZF0uY2xvbmUoKTt0aGlzLmNsaXBwaW5nUGxhbmVzPWI7cmV0dXJuIHRoaXN9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19KTtlYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7ZWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPWViO2ViLnByb3RvdHlwZS5pc01lc2hEZXB0aE1hdGVyaWFsPSEwO2ViLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1AucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuZGVwdGhQYWNraW5nPWEuZGVwdGhQYWNraW5nO3RoaXMuc2tpbm5pbmc9YS5za2lubmluZzt0aGlzLm1vcnBoVGFyZ2V0cz1hLm1vcnBoVGFyZ2V0czt0aGlzLm1hcD1hLm1hcDt0aGlzLmFscGhhTWFwPWEuYWxwaGFNYXA7dGhpcy5kaXNwbGFjZW1lbnRNYXA9YS5kaXNwbGFjZW1lbnRNYXA7dGhpcy5kaXNwbGFjZW1lbnRTY2FsZT1cbiAgICBhLmRpc3BsYWNlbWVudFNjYWxlO3RoaXMuZGlzcGxhY2VtZW50Qmlhcz1hLmRpc3BsYWNlbWVudEJpYXM7dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7cmV0dXJuIHRoaXN9O2ZiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtmYi5wcm90b3R5cGUuY29uc3RydWN0b3I9ZmI7ZmIucHJvdG90eXBlLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWw9ITA7ZmIucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5yZWZlcmVuY2VQb3NpdGlvbi5jb3B5KGEucmVmZXJlbmNlUG9zaXRpb24pO3RoaXMubmVhckRpc3RhbmNlPWEubmVhckRpc3RhbmNlO3RoaXMuZmFyRGlzdGFuY2U9YS5mYXJEaXN0YW5jZTt0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9YS5tb3JwaFRhcmdldHM7dGhpcy5tYXA9YS5tYXA7dGhpcy5hbHBoYU1hcD1cbiAgICBhLmFscGhhTWFwO3RoaXMuZGlzcGxhY2VtZW50TWFwPWEuZGlzcGxhY2VtZW50TWFwO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9YS5kaXNwbGFjZW1lbnRTY2FsZTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9YS5kaXNwbGFjZW1lbnRCaWFzO3JldHVybiB0aGlzfTtPYmplY3QuYXNzaWduKFhhLnByb3RvdHlwZSx7aXNCb3gzOiEwLHNldDpmdW5jdGlvbihhLGIpe3RoaXMubWluLmNvcHkoYSk7dGhpcy5tYXguY29weShiKTtyZXR1cm4gdGhpc30sc2V0RnJvbUFycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1JbmZpbml0eSxjPUluZmluaXR5LGQ9SW5maW5pdHksZT0tSW5maW5pdHksZj0tSW5maW5pdHksZz0tSW5maW5pdHksaD0wLGs9YS5sZW5ndGg7aDxrO2grPTMpe3ZhciBtPWFbaF0scT1hW2grMV0sbD1hW2grMl07bTxiJiYoYj1tKTtxPGMmJihjPXEpO2w8ZCYmKGQ9bCk7bT5lJiYoZT1tKTtxPmYmJihmPXEpO2w+ZyYmKGc9bCl9dGhpcy5taW4uc2V0KGIsYyxkKTt0aGlzLm1heC5zZXQoZSxcbiAgICBmLGcpO3JldHVybiB0aGlzfSxzZXRGcm9tQnVmZmVyQXR0cmlidXRlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1JbmZpbml0eSxjPUluZmluaXR5LGQ9SW5maW5pdHksZT0tSW5maW5pdHksZj0tSW5maW5pdHksZz0tSW5maW5pdHksaD0wLGs9YS5jb3VudDtoPGs7aCsrKXt2YXIgbT1hLmdldFgoaCkscT1hLmdldFkoaCksbD1hLmdldFooaCk7bTxiJiYoYj1tKTtxPGMmJihjPXEpO2w8ZCYmKGQ9bCk7bT5lJiYoZT1tKTtxPmYmJihmPXEpO2w+ZyYmKGc9bCl9dGhpcy5taW4uc2V0KGIsYyxkKTt0aGlzLm1heC5zZXQoZSxmLGcpO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzOmZ1bmN0aW9uKGEpe3RoaXMubWFrZUVtcHR5KCk7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtiPGM7YisrKXRoaXMuZXhwYW5kQnlQb2ludChhW2JdKTtyZXR1cm4gdGhpc30sc2V0RnJvbUNlbnRlckFuZFNpemU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYixjKXtjPWEuY29weShjKS5tdWx0aXBseVNjYWxhciguNSk7XG4gICAgdGhpcy5taW4uY29weShiKS5zdWIoYyk7dGhpcy5tYXguY29weShiKS5hZGQoYyk7cmV0dXJuIHRoaXN9fSgpLHNldEZyb21PYmplY3Q6ZnVuY3Rpb24oYSl7dGhpcy5tYWtlRW1wdHkoKTtyZXR1cm4gdGhpcy5leHBhbmRCeU9iamVjdChhKX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5taW4uY29weShhLm1pbik7dGhpcy5tYXguY29weShhLm1heCk7cmV0dXJuIHRoaXN9LG1ha2VFbXB0eTpmdW5jdGlvbigpe3RoaXMubWluLng9dGhpcy5taW4ueT10aGlzLm1pbi56PUluZmluaXR5O3RoaXMubWF4Lng9dGhpcy5tYXgueT10aGlzLm1heC56PS1JbmZpbml0eTtyZXR1cm4gdGhpc30saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heC54PHRoaXMubWluLnh8fHRoaXMubWF4Lnk8dGhpcy5taW4ueXx8dGhpcy5tYXguejx0aGlzLm1pbi56fSxnZXRDZW50ZXI6ZnVuY3Rpb24oYSl7YT1cbiAgICBhfHxuZXcgcDtyZXR1cm4gdGhpcy5pc0VtcHR5KCk/YS5zZXQoMCwwLDApOmEuYWRkVmVjdG9ycyh0aGlzLm1pbix0aGlzLm1heCkubXVsdGlwbHlTY2FsYXIoLjUpfSxnZXRTaXplOmZ1bmN0aW9uKGEpe2E9YXx8bmV3IHA7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP2Euc2V0KDAsMCwwKTphLnN1YlZlY3RvcnModGhpcy5tYXgsdGhpcy5taW4pfSxleHBhbmRCeVBvaW50OmZ1bmN0aW9uKGEpe3RoaXMubWluLm1pbihhKTt0aGlzLm1heC5tYXgoYSk7cmV0dXJuIHRoaXN9LGV4cGFuZEJ5VmVjdG9yOmZ1bmN0aW9uKGEpe3RoaXMubWluLnN1YihhKTt0aGlzLm1heC5hZGQoYSk7cmV0dXJuIHRoaXN9LGV4cGFuZEJ5U2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMubWluLmFkZFNjYWxhcigtYSk7dGhpcy5tYXguYWRkU2NhbGFyKGEpO3JldHVybiB0aGlzfSxleHBhbmRCeU9iamVjdDpmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7dmFyIGY9YS5nZW9tZXRyeTtpZih2b2lkIDAhPT1mKWlmKGYuaXNHZW9tZXRyeSlmb3IoZj1cbiAgICBmLnZlcnRpY2VzLGM9MCxkPWYubGVuZ3RoO2M8ZDtjKyspZS5jb3B5KGZbY10pLGUuYXBwbHlNYXRyaXg0KGEubWF0cml4V29ybGQpLGIuZXhwYW5kQnlQb2ludChlKTtlbHNlIGlmKGYuaXNCdWZmZXJHZW9tZXRyeSYmKGY9Zi5hdHRyaWJ1dGVzLnBvc2l0aW9uLHZvaWQgMCE9PWYpKWZvcihjPTAsZD1mLmNvdW50O2M8ZDtjKyspZS5mcm9tQnVmZmVyQXR0cmlidXRlKGYsYykuYXBwbHlNYXRyaXg0KGEubWF0cml4V29ybGQpLGIuZXhwYW5kQnlQb2ludChlKX12YXIgYixjLGQsZT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYyl7Yj10aGlzO2MudXBkYXRlTWF0cml4V29ybGQoITApO2MudHJhdmVyc2UoYSk7cmV0dXJuIHRoaXN9fSgpLGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueDx0aGlzLm1pbi54fHxhLng+dGhpcy5tYXgueHx8YS55PHRoaXMubWluLnl8fGEueT50aGlzLm1heC55fHxhLno8dGhpcy5taW4uenx8YS56PnRoaXMubWF4Lno/ITE6ITB9LGNvbnRhaW5zQm94OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm1pbi54PD1cbiAgICBhLm1pbi54JiZhLm1heC54PD10aGlzLm1heC54JiZ0aGlzLm1pbi55PD1hLm1pbi55JiZhLm1heC55PD10aGlzLm1heC55JiZ0aGlzLm1pbi56PD1hLm1pbi56JiZhLm1heC56PD10aGlzLm1heC56fSxnZXRQYXJhbWV0ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IHApLnNldCgoYS54LXRoaXMubWluLngpLyh0aGlzLm1heC54LXRoaXMubWluLngpLChhLnktdGhpcy5taW4ueSkvKHRoaXMubWF4LnktdGhpcy5taW4ueSksKGEuei10aGlzLm1pbi56KS8odGhpcy5tYXguei10aGlzLm1pbi56KSl9LGludGVyc2VjdHNCb3g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubWF4Lng8dGhpcy5taW4ueHx8YS5taW4ueD50aGlzLm1heC54fHxhLm1heC55PHRoaXMubWluLnl8fGEubWluLnk+dGhpcy5tYXgueXx8YS5tYXguejx0aGlzLm1pbi56fHxhLm1pbi56PnRoaXMubWF4Lno/ITE6ITB9LGludGVyc2VjdHNTcGhlcmU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYil7dGhpcy5jbGFtcFBvaW50KGIuY2VudGVyLFxuICAgIGEpO3JldHVybiBhLmRpc3RhbmNlVG9TcXVhcmVkKGIuY2VudGVyKTw9Yi5yYWRpdXMqYi5yYWRpdXN9fSgpLGludGVyc2VjdHNQbGFuZTpmdW5jdGlvbihhKXtpZigwPGEubm9ybWFsLngpe3ZhciBiPWEubm9ybWFsLngqdGhpcy5taW4ueDt2YXIgYz1hLm5vcm1hbC54KnRoaXMubWF4Lnh9ZWxzZSBiPWEubm9ybWFsLngqdGhpcy5tYXgueCxjPWEubm9ybWFsLngqdGhpcy5taW4ueDswPGEubm9ybWFsLnk/KGIrPWEubm9ybWFsLnkqdGhpcy5taW4ueSxjKz1hLm5vcm1hbC55KnRoaXMubWF4LnkpOihiKz1hLm5vcm1hbC55KnRoaXMubWF4LnksYys9YS5ub3JtYWwueSp0aGlzLm1pbi55KTswPGEubm9ybWFsLno/KGIrPWEubm9ybWFsLnoqdGhpcy5taW4ueixjKz1hLm5vcm1hbC56KnRoaXMubWF4LnopOihiKz1hLm5vcm1hbC56KnRoaXMubWF4LnosYys9YS5ub3JtYWwueip0aGlzLm1pbi56KTtyZXR1cm4gYjw9YS5jb25zdGFudCYmYz49YS5jb25zdGFudH0sY2xhbXBQb2ludDpmdW5jdGlvbihhLFxuICAgIGIpe3JldHVybihifHxuZXcgcCkuY29weShhKS5jbGFtcCh0aGlzLm1pbix0aGlzLm1heCl9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gYS5jb3B5KGIpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KS5zdWIoYikubGVuZ3RoKCl9fSgpLGdldEJvdW5kaW5nU3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IElhO3RoaXMuZ2V0Q2VudGVyKGIuY2VudGVyKTtiLnJhZGl1cz0uNSp0aGlzLmdldFNpemUoYSkubGVuZ3RoKCk7cmV0dXJuIGJ9fSgpLGludGVyc2VjdDpmdW5jdGlvbihhKXt0aGlzLm1pbi5tYXgoYS5taW4pO3RoaXMubWF4Lm1pbihhLm1heCk7dGhpcy5pc0VtcHR5KCkmJnRoaXMubWFrZUVtcHR5KCk7cmV0dXJuIHRoaXN9LHVuaW9uOmZ1bmN0aW9uKGEpe3RoaXMubWluLm1pbihhLm1pbik7dGhpcy5tYXgubWF4KGEubWF4KTtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKCl7dmFyIGE9XG4gICAgW25ldyBwLG5ldyBwLG5ldyBwLG5ldyBwLG5ldyBwLG5ldyBwLG5ldyBwLG5ldyBwXTtyZXR1cm4gZnVuY3Rpb24oYil7aWYodGhpcy5pc0VtcHR5KCkpcmV0dXJuIHRoaXM7YVswXS5zZXQodGhpcy5taW4ueCx0aGlzLm1pbi55LHRoaXMubWluLnopLmFwcGx5TWF0cml4NChiKTthWzFdLnNldCh0aGlzLm1pbi54LHRoaXMubWluLnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KGIpO2FbMl0uc2V0KHRoaXMubWluLngsdGhpcy5tYXgueSx0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7YVszXS5zZXQodGhpcy5taW4ueCx0aGlzLm1heC55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTthWzRdLnNldCh0aGlzLm1heC54LHRoaXMubWluLnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KGIpO2FbNV0uc2V0KHRoaXMubWF4LngsdGhpcy5taW4ueSx0aGlzLm1heC56KS5hcHBseU1hdHJpeDQoYik7YVs2XS5zZXQodGhpcy5tYXgueCx0aGlzLm1heC55LHRoaXMubWluLnopLmFwcGx5TWF0cml4NChiKTtcbiAgICBhWzddLnNldCh0aGlzLm1heC54LHRoaXMubWF4LnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KGIpO3RoaXMuc2V0RnJvbVBvaW50cyhhKTtyZXR1cm4gdGhpc319KCksdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe3RoaXMubWluLmFkZChhKTt0aGlzLm1heC5hZGQoYSk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5taW4uZXF1YWxzKHRoaXMubWluKSYmYS5tYXguZXF1YWxzKHRoaXMubWF4KX19KTtPYmplY3QuYXNzaWduKElhLnByb3RvdHlwZSx7c2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5jZW50ZXIuY29weShhKTt0aGlzLnJhZGl1cz1iO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFhhO3JldHVybiBmdW5jdGlvbihiLGMpe3ZhciBkPXRoaXMuY2VudGVyO3ZvaWQgMCE9PWM/ZC5jb3B5KGMpOmEuc2V0RnJvbVBvaW50cyhiKS5nZXRDZW50ZXIoZCk7Zm9yKHZhciBlPWM9MCxmPWIubGVuZ3RoO2U8ZjtlKyspYz1NYXRoLm1heChjLFxuICAgIGQuZGlzdGFuY2VUb1NxdWFyZWQoYltlXSkpO3RoaXMucmFkaXVzPU1hdGguc3FydChjKTtyZXR1cm4gdGhpc319KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5jZW50ZXIuY29weShhLmNlbnRlcik7dGhpcy5yYWRpdXM9YS5yYWRpdXM7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIDA+PXRoaXMucmFkaXVzfSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuY2VudGVyKTw9dGhpcy5yYWRpdXMqdGhpcy5yYWRpdXN9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXN0YW5jZVRvKHRoaXMuY2VudGVyKS10aGlzLnJhZGl1c30saW50ZXJzZWN0c1NwaGVyZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnJhZGl1cythLnJhZGl1cztyZXR1cm4gYS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQodGhpcy5jZW50ZXIpPD1cbiAgICBiKmJ9LGludGVyc2VjdHNCb3g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW50ZXJzZWN0c1NwaGVyZSh0aGlzKX0saW50ZXJzZWN0c1BsYW5lOmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLmFicyhhLmRpc3RhbmNlVG9Qb2ludCh0aGlzLmNlbnRlcikpPD10aGlzLnJhZGl1c30sY2xhbXBQb2ludDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKGEpO2I9Ynx8bmV3IHA7Yi5jb3B5KGEpO2M+dGhpcy5yYWRpdXMqdGhpcy5yYWRpdXMmJihiLnN1Yih0aGlzLmNlbnRlcikubm9ybWFsaXplKCksYi5tdWx0aXBseVNjYWxhcih0aGlzLnJhZGl1cykuYWRkKHRoaXMuY2VudGVyKSk7cmV0dXJuIGJ9LGdldEJvdW5kaW5nQm94OmZ1bmN0aW9uKGEpe2E9YXx8bmV3IFhhO2Euc2V0KHRoaXMuY2VudGVyLHRoaXMuY2VudGVyKTthLmV4cGFuZEJ5U2NhbGFyKHRoaXMucmFkaXVzKTtyZXR1cm4gYX0sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3RoaXMuY2VudGVyLmFwcGx5TWF0cml4NChhKTtcbiAgICB0aGlzLnJhZGl1cyo9YS5nZXRNYXhTY2FsZU9uQXhpcygpO3JldHVybiB0aGlzfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSl7dGhpcy5jZW50ZXIuYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2VudGVyLmVxdWFscyh0aGlzLmNlbnRlcikmJmEucmFkaXVzPT09dGhpcy5yYWRpdXN9fSk7T2JqZWN0LmFzc2lnbihFYS5wcm90b3R5cGUse3NldDpmdW5jdGlvbihhLGIpe3RoaXMubm9ybWFsLmNvcHkoYSk7dGhpcy5jb25zdGFudD1iO3JldHVybiB0aGlzfSxzZXRDb21wb25lbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMubm9ybWFsLnNldChhLGIsYyk7dGhpcy5jb25zdGFudD1kO3JldHVybiB0aGlzfSxzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludDpmdW5jdGlvbihhLGIpe3RoaXMubm9ybWFsLmNvcHkoYSk7dGhpcy5jb25zdGFudD0tYi5kb3QodGhpcy5ub3JtYWwpO3JldHVybiB0aGlzfSxzZXRGcm9tQ29wbGFuYXJQb2ludHM6ZnVuY3Rpb24oKXt2YXIgYT1cbiAgICBuZXcgcCxiPW5ldyBwO3JldHVybiBmdW5jdGlvbihjLGQsZSl7ZD1hLnN1YlZlY3RvcnMoZSxkKS5jcm9zcyhiLnN1YlZlY3RvcnMoYyxkKSkubm9ybWFsaXplKCk7dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChkLGMpO3JldHVybiB0aGlzfX0oKSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLm5vcm1hbC5jb3B5KGEubm9ybWFsKTt0aGlzLmNvbnN0YW50PWEuY29uc3RhbnQ7cmV0dXJuIHRoaXN9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPTEvdGhpcy5ub3JtYWwubGVuZ3RoKCk7dGhpcy5ub3JtYWwubXVsdGlwbHlTY2FsYXIoYSk7dGhpcy5jb25zdGFudCo9YTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy5jb25zdGFudCo9LTE7dGhpcy5ub3JtYWwubmVnYXRlKCk7cmV0dXJuIHRoaXN9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5ub3JtYWwuZG90KGEpK1xuICAgIHRoaXMuY29uc3RhbnR9LGRpc3RhbmNlVG9TcGhlcmU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KGEuY2VudGVyKS1hLnJhZGl1c30scHJvamVjdFBvaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuKGJ8fG5ldyBwKS5jb3B5KHRoaXMubm9ybWFsKS5tdWx0aXBseVNjYWxhcigtdGhpcy5kaXN0YW5jZVRvUG9pbnQoYSkpLmFkZChhKX0saW50ZXJzZWN0TGluZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiLGMpe2M9Y3x8bmV3IHA7dmFyIGQ9Yi5kZWx0YShhKSxlPXRoaXMubm9ybWFsLmRvdChkKTtpZigwPT09ZSl7aWYoMD09PXRoaXMuZGlzdGFuY2VUb1BvaW50KGIuc3RhcnQpKXJldHVybiBjLmNvcHkoYi5zdGFydCl9ZWxzZSBpZihlPS0oYi5zdGFydC5kb3QodGhpcy5ub3JtYWwpK3RoaXMuY29uc3RhbnQpL2UsISgwPmV8fDE8ZSkpcmV0dXJuIGMuY29weShkKS5tdWx0aXBseVNjYWxhcihlKS5hZGQoYi5zdGFydCl9fSgpLGludGVyc2VjdHNMaW5lOmZ1bmN0aW9uKGEpe3ZhciBiPVxuICAgIHRoaXMuZGlzdGFuY2VUb1BvaW50KGEuc3RhcnQpO2E9dGhpcy5kaXN0YW5jZVRvUG9pbnQoYS5lbmQpO3JldHVybiAwPmImJjA8YXx8MD5hJiYwPGJ9LGludGVyc2VjdHNCb3g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW50ZXJzZWN0c1BsYW5lKHRoaXMpfSxpbnRlcnNlY3RzU3BoZXJlOmZ1bmN0aW9uKGEpe3JldHVybiBhLmludGVyc2VjdHNQbGFuZSh0aGlzKX0sY29wbGFuYXJQb2ludDpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IHApLmNvcHkodGhpcy5ub3JtYWwpLm11bHRpcGx5U2NhbGFyKC10aGlzLmNvbnN0YW50KX0sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgbWE7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7ZD1kfHxiLmdldE5vcm1hbE1hdHJpeChjKTtjPXRoaXMuY29wbGFuYXJQb2ludChhKS5hcHBseU1hdHJpeDQoYyk7ZD10aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoZCkubm9ybWFsaXplKCk7dGhpcy5jb25zdGFudD0tYy5kb3QoZCk7cmV0dXJuIHRoaXN9fSgpLFxuICAgIHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLmNvbnN0YW50LT1hLmRvdCh0aGlzLm5vcm1hbCk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub3JtYWwuZXF1YWxzKHRoaXMubm9ybWFsKSYmYS5jb25zdGFudD09PXRoaXMuY29uc3RhbnR9fSk7T2JqZWN0LmFzc2lnbihyZC5wcm90b3R5cGUse3NldDpmdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9dGhpcy5wbGFuZXM7Z1swXS5jb3B5KGEpO2dbMV0uY29weShiKTtnWzJdLmNvcHkoYyk7Z1szXS5jb3B5KGQpO2dbNF0uY29weShlKTtnWzVdLmNvcHkoZik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLnBsYW5lcyxjPTA7Nj5jO2MrKyliW2NdLmNvcHkoYS5wbGFuZXNbY10pO3JldHVybiB0aGlzfSxzZXRGcm9tTWF0cml4OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucGxhbmVzLFxuICAgIGM9YS5lbGVtZW50czthPWNbMF07dmFyIGQ9Y1sxXSxlPWNbMl0sZj1jWzNdLGc9Y1s0XSxoPWNbNV0saz1jWzZdLG09Y1s3XSxxPWNbOF0sbD1jWzldLHA9Y1sxMF0scj1jWzExXSx0PWNbMTJdLHY9Y1sxM10sdz1jWzE0XSxjPWNbMTVdO2JbMF0uc2V0Q29tcG9uZW50cyhmLWEsbS1nLHItcSxjLXQpLm5vcm1hbGl6ZSgpO2JbMV0uc2V0Q29tcG9uZW50cyhmK2EsbStnLHIrcSxjK3QpLm5vcm1hbGl6ZSgpO2JbMl0uc2V0Q29tcG9uZW50cyhmK2QsbStoLHIrbCxjK3YpLm5vcm1hbGl6ZSgpO2JbM10uc2V0Q29tcG9uZW50cyhmLWQsbS1oLHItbCxjLXYpLm5vcm1hbGl6ZSgpO2JbNF0uc2V0Q29tcG9uZW50cyhmLWUsbS1rLHItcCxjLXcpLm5vcm1hbGl6ZSgpO2JbNV0uc2V0Q29tcG9uZW50cyhmK2UsbStrLHIrcCxjK3cpLm5vcm1hbGl6ZSgpO3JldHVybiB0aGlzfSxpbnRlcnNlY3RzT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IElhO3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1cbiAgICBiLmdlb21ldHJ5O251bGw9PT1jLmJvdW5kaW5nU3BoZXJlJiZjLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2EuY29weShjLmJvdW5kaW5nU3BoZXJlKS5hcHBseU1hdHJpeDQoYi5tYXRyaXhXb3JsZCk7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZShhKX19KCksaW50ZXJzZWN0c1Nwcml0ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBJYTtyZXR1cm4gZnVuY3Rpb24oYil7YS5jZW50ZXIuc2V0KDAsMCwwKTthLnJhZGl1cz0uNzA3MTA2NzgxMTg2NTQ3NjthLmFwcGx5TWF0cml4NChiLm1hdHJpeFdvcmxkKTtyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKGEpfX0oKSxpbnRlcnNlY3RzU3BoZXJlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucGxhbmVzLGM9YS5jZW50ZXI7YT0tYS5yYWRpdXM7Zm9yKHZhciBkPTA7Nj5kO2QrKylpZihiW2RdLmRpc3RhbmNlVG9Qb2ludChjKTxhKXJldHVybiExO3JldHVybiEwfSxpbnRlcnNlY3RzQm94OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1cbiAgICBuZXcgcDtyZXR1cm4gZnVuY3Rpb24oYyl7Zm9yKHZhciBkPXRoaXMucGxhbmVzLGU9MDs2PmU7ZSsrKXt2YXIgZj1kW2VdO2EueD0wPGYubm9ybWFsLng/Yy5taW4ueDpjLm1heC54O2IueD0wPGYubm9ybWFsLng/Yy5tYXgueDpjLm1pbi54O2EueT0wPGYubm9ybWFsLnk/Yy5taW4ueTpjLm1heC55O2IueT0wPGYubm9ybWFsLnk/Yy5tYXgueTpjLm1pbi55O2Euej0wPGYubm9ybWFsLno/Yy5taW4uejpjLm1heC56O2Iuej0wPGYubm9ybWFsLno/Yy5tYXguejpjLm1pbi56O3ZhciBnPWYuZGlzdGFuY2VUb1BvaW50KGEpLGY9Zi5kaXN0YW5jZVRvUG9pbnQoYik7aWYoMD5nJiYwPmYpcmV0dXJuITF9cmV0dXJuITB9fSgpLGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMucGxhbmVzLGM9MDs2PmM7YysrKWlmKDA+YltjXS5kaXN0YW5jZVRvUG9pbnQoYSkpcmV0dXJuITE7cmV0dXJuITB9fSk7Z2IuUm90YXRpb25PcmRlcnM9XCJYWVogWVpYIFpYWSBYWlkgWVhaIFpZWFwiLnNwbGl0KFwiIFwiKTtcbiAgICBnYi5EZWZhdWx0T3JkZXI9XCJYWVpcIjtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhnYi5wcm90b3R5cGUse3g6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl94fSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5feD1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfX0seTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3l9LHNldDpmdW5jdGlvbihhKXt0aGlzLl95PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9fSx6OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fen0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuX3o9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX19LG9yZGVyOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3JkZXJ9LHNldDpmdW5jdGlvbihhKXt0aGlzLl9vcmRlcj1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfX19KTtPYmplY3QuYXNzaWduKGdiLnByb3RvdHlwZSx7aXNFdWxlcjohMCxzZXQ6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5feD1hO3RoaXMuX3k9Yjt0aGlzLl96PVxuICAgIGM7dGhpcy5fb3JkZXI9ZHx8dGhpcy5fb3JkZXI7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuX3gsdGhpcy5feSx0aGlzLl96LHRoaXMuX29yZGVyKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLl94PWEuX3g7dGhpcy5feT1hLl95O3RoaXMuX3o9YS5fejt0aGlzLl9vcmRlcj1hLl9vcmRlcjt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbVJvdGF0aW9uTWF0cml4OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1RLmNsYW1wLGU9YS5lbGVtZW50czthPWVbMF07dmFyIGY9ZVs0XSxnPWVbOF0saD1lWzFdLGs9ZVs1XSxtPWVbOV0sbD1lWzJdLG49ZVs2XSxlPWVbMTBdO2I9Ynx8dGhpcy5fb3JkZXI7XCJYWVpcIj09PWI/KHRoaXMuX3k9TWF0aC5hc2luKGQoZywtMSwxKSksLjk5OTk5Pk1hdGguYWJzKGcpPyh0aGlzLl94PU1hdGguYXRhbjIoLW0sZSksdGhpcy5fej1cbiAgICBNYXRoLmF0YW4yKC1mLGEpKToodGhpcy5feD1NYXRoLmF0YW4yKG4sayksdGhpcy5fej0wKSk6XCJZWFpcIj09PWI/KHRoaXMuX3g9TWF0aC5hc2luKC1kKG0sLTEsMSkpLC45OTk5OT5NYXRoLmFicyhtKT8odGhpcy5feT1NYXRoLmF0YW4yKGcsZSksdGhpcy5fej1NYXRoLmF0YW4yKGgsaykpOih0aGlzLl95PU1hdGguYXRhbjIoLWwsYSksdGhpcy5fej0wKSk6XCJaWFlcIj09PWI/KHRoaXMuX3g9TWF0aC5hc2luKGQobiwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKG4pPyh0aGlzLl95PU1hdGguYXRhbjIoLWwsZSksdGhpcy5fej1NYXRoLmF0YW4yKC1mLGspKToodGhpcy5feT0wLHRoaXMuX3o9TWF0aC5hdGFuMihoLGEpKSk6XCJaWVhcIj09PWI/KHRoaXMuX3k9TWF0aC5hc2luKC1kKGwsLTEsMSkpLC45OTk5OT5NYXRoLmFicyhsKT8odGhpcy5feD1NYXRoLmF0YW4yKG4sZSksdGhpcy5fej1NYXRoLmF0YW4yKGgsYSkpOih0aGlzLl94PTAsdGhpcy5fej1NYXRoLmF0YW4yKC1mLGspKSk6XCJZWlhcIj09PVxuICAgIGI/KHRoaXMuX3o9TWF0aC5hc2luKGQoaCwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKGgpPyh0aGlzLl94PU1hdGguYXRhbjIoLW0sayksdGhpcy5feT1NYXRoLmF0YW4yKC1sLGEpKToodGhpcy5feD0wLHRoaXMuX3k9TWF0aC5hdGFuMihnLGUpKSk6XCJYWllcIj09PWI/KHRoaXMuX3o9TWF0aC5hc2luKC1kKGYsLTEsMSkpLC45OTk5OT5NYXRoLmFicyhmKT8odGhpcy5feD1NYXRoLmF0YW4yKG4sayksdGhpcy5feT1NYXRoLmF0YW4yKGcsYSkpOih0aGlzLl94PU1hdGguYXRhbjIoLW0sZSksdGhpcy5feT0wKSk6Y29uc29sZS53YXJuKFwiVEhSRUUuRXVsZXI6IC5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBnaXZlbiB1bnN1cHBvcnRlZCBvcmRlcjogXCIrYik7dGhpcy5fb3JkZXI9YjtpZighMSE9PWMpdGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXthLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGIpO1xuICAgIHJldHVybiB0aGlzLnNldEZyb21Sb3RhdGlvbk1hdHJpeChhLGMsZCl9fSgpLHNldEZyb21WZWN0b3IzOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuc2V0KGEueCxhLnksYS56LGJ8fHRoaXMuX29yZGVyKX0scmVvcmRlcjpmdW5jdGlvbigpe3ZhciBhPW5ldyBoYTtyZXR1cm4gZnVuY3Rpb24oYil7YS5zZXRGcm9tRXVsZXIodGhpcyk7cmV0dXJuIHRoaXMuc2V0RnJvbVF1YXRlcm5pb24oYSxiKX19KCksZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLl94PT09dGhpcy5feCYmYS5feT09PXRoaXMuX3kmJmEuX3o9PT10aGlzLl96JiZhLl9vcmRlcj09PXRoaXMuX29yZGVyfSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSl7dGhpcy5feD1hWzBdO3RoaXMuX3k9YVsxXTt0aGlzLl96PWFbMl07dm9pZCAwIT09YVszXSYmKHRoaXMuX29yZGVyPWFbM10pO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO1xuICAgIHZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy5feDthW2IrMV09dGhpcy5feTthW2IrMl09dGhpcy5fejthW2IrM109dGhpcy5fb3JkZXI7cmV0dXJuIGF9LHRvVmVjdG9yMzpmdW5jdGlvbihhKXtyZXR1cm4gYT9hLnNldCh0aGlzLl94LHRoaXMuX3ksdGhpcy5feik6bmV3IHAodGhpcy5feCx0aGlzLl95LHRoaXMuX3opfSxvbkNoYW5nZTpmdW5jdGlvbihhKXt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2s9YTtyZXR1cm4gdGhpc30sb25DaGFuZ2VDYWxsYmFjazpmdW5jdGlvbigpe319KTtPYmplY3QuYXNzaWduKFdkLnByb3RvdHlwZSx7c2V0OmZ1bmN0aW9uKGEpe3RoaXMubWFzaz0xPDxhfDB9LGVuYWJsZTpmdW5jdGlvbihhKXt0aGlzLm1hc2s9dGhpcy5tYXNrfDE8PGF8MH0sdG9nZ2xlOmZ1bmN0aW9uKGEpe3RoaXMubWFza149MTw8YXwwfSxkaXNhYmxlOmZ1bmN0aW9uKGEpe3RoaXMubWFzayY9figxPDxhfDApfSx0ZXN0OmZ1bmN0aW9uKGEpe3JldHVybiAwIT09KHRoaXMubWFzayZcbiAgICBhLm1hc2spfX0pO3ZhciBjZz0wO3guRGVmYXVsdFVwPW5ldyBwKDAsMSwwKTt4LkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlPSEwO3gucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh6YS5wcm90b3R5cGUpLHtjb25zdHJ1Y3Rvcjp4LGlzT2JqZWN0M0Q6ITAsb25CZWZvcmVSZW5kZXI6ZnVuY3Rpb24oKXt9LG9uQWZ0ZXJSZW5kZXI6ZnVuY3Rpb24oKXt9LGFwcGx5TWF0cml4OmZ1bmN0aW9uKGEpe3RoaXMubWF0cml4Lm11bHRpcGx5TWF0cmljZXMoYSx0aGlzLm1hdHJpeCk7dGhpcy5tYXRyaXguZGVjb21wb3NlKHRoaXMucG9zaXRpb24sdGhpcy5xdWF0ZXJuaW9uLHRoaXMuc2NhbGUpfSxhcHBseVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KGEpO3JldHVybiB0aGlzfSxzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGU6ZnVuY3Rpb24oYSxiKXt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZShhLGIpfSxzZXRSb3RhdGlvbkZyb21FdWxlcjpmdW5jdGlvbihhKXt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKGEsXG4gICAgITApfSxzZXRSb3RhdGlvbkZyb21NYXRyaXg6ZnVuY3Rpb24oYSl7dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeChhKX0sc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXt0aGlzLnF1YXRlcm5pb24uY29weShhKX0scm90YXRlT25BeGlzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IGhhO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc2V0RnJvbUF4aXNBbmdsZShiLGMpO3RoaXMucXVhdGVybmlvbi5tdWx0aXBseShhKTtyZXR1cm4gdGhpc319KCkscm90YXRlT25Xb3JsZEF4aXM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgaGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5zZXRGcm9tQXhpc0FuZ2xlKGIsYyk7dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVYOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAoMSwwLDApO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoYSxiKX19KCkscm90YXRlWTpmdW5jdGlvbigpe3ZhciBhPVxuICAgIG5ldyBwKDAsMSwwKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKGEsYil9fSgpLHJvdGF0ZVo6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCgwLDAsMSk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhhLGIpfX0oKSx0cmFuc2xhdGVPbkF4aXM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYixjKXthLmNvcHkoYikuYXBwbHlRdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7dGhpcy5wb3NpdGlvbi5hZGQoYS5tdWx0aXBseVNjYWxhcihjKSk7cmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZVg6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCgxLDAsMCk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhhLGIpfX0oKSx0cmFuc2xhdGVZOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAoMCwxLDApO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoYSxcbiAgICBiKX19KCksdHJhbnNsYXRlWjpmdW5jdGlvbigpe3ZhciBhPW5ldyBwKDAsMCwxKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGEsYil9fSgpLGxvY2FsVG9Xb3JsZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCl9LHdvcmxkVG9Mb2NhbDpmdW5jdGlvbigpe3ZhciBhPW5ldyBPO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gYi5hcHBseU1hdHJpeDQoYS5nZXRJbnZlcnNlKHRoaXMubWF0cml4V29ybGQpKX19KCksbG9va0F0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE8sYj1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe2MuaXNWZWN0b3IzP2IuY29weShjKTpiLnNldChjLGQsZSk7dGhpcy5pc0NhbWVyYT9hLmxvb2tBdCh0aGlzLnBvc2l0aW9uLGIsdGhpcy51cCk6YS5sb29rQXQoYix0aGlzLnBvc2l0aW9uLHRoaXMudXApO3RoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoYSl9fSgpLFxuICAgIGFkZDpmdW5jdGlvbihhKXtpZigxPGFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgYj0wO2I8YXJndW1lbnRzLmxlbmd0aDtiKyspdGhpcy5hZGQoYXJndW1lbnRzW2JdKTtyZXR1cm4gdGhpc31pZihhPT09dGhpcylyZXR1cm4gY29uc29sZS5lcnJvcihcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhbid0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLlwiLGEpLHRoaXM7YSYmYS5pc09iamVjdDNEPyhudWxsIT09YS5wYXJlbnQmJmEucGFyZW50LnJlbW92ZShhKSxhLnBhcmVudD10aGlzLGEuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImFkZGVkXCJ9KSx0aGlzLmNoaWxkcmVuLnB1c2goYSkpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuT2JqZWN0M0QuXCIsYSk7cmV0dXJuIHRoaXN9LHJlbW92ZTpmdW5jdGlvbihhKXtpZigxPGFyZ3VtZW50cy5sZW5ndGgpe2Zvcih2YXIgYj0wO2I8YXJndW1lbnRzLmxlbmd0aDtiKyspdGhpcy5yZW1vdmUoYXJndW1lbnRzW2JdKTtcbiAgICByZXR1cm4gdGhpc31iPXRoaXMuY2hpbGRyZW4uaW5kZXhPZihhKTstMSE9PWImJihhLnBhcmVudD1udWxsLGEuZGlzcGF0Y2hFdmVudCh7dHlwZTpcInJlbW92ZWRcIn0pLHRoaXMuY2hpbGRyZW4uc3BsaWNlKGIsMSkpO3JldHVybiB0aGlzfSxnZXRPYmplY3RCeUlkOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoXCJpZFwiLGEpfSxnZXRPYmplY3RCeU5hbWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eShcIm5hbWVcIixhKX0sZ2V0T2JqZWN0QnlQcm9wZXJ0eTpmdW5jdGlvbihhLGIpe2lmKHRoaXNbYV09PT1iKXJldHVybiB0aGlzO2Zvcih2YXIgYz0wLGQ9dGhpcy5jaGlsZHJlbi5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9dGhpcy5jaGlsZHJlbltjXS5nZXRPYmplY3RCeVByb3BlcnR5KGEsYik7aWYodm9pZCAwIT09ZSlyZXR1cm4gZX19LGdldFdvcmxkUG9zaXRpb246ZnVuY3Rpb24oYSl7YT1hfHxuZXcgcDt0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTtcbiAgICByZXR1cm4gYS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCl9LGdldFdvcmxkUXVhdGVybmlvbjpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGMpe2M9Y3x8bmV3IGhhO3RoaXMudXBkYXRlTWF0cml4V29ybGQoITApO3RoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGEsYyxiKTtyZXR1cm4gY319KCksZ2V0V29ybGRSb3RhdGlvbjpmdW5jdGlvbigpe3ZhciBhPW5ldyBoYTtyZXR1cm4gZnVuY3Rpb24oYil7Yj1ifHxuZXcgZ2I7dGhpcy5nZXRXb3JsZFF1YXRlcm5pb24oYSk7cmV0dXJuIGIuc2V0RnJvbVF1YXRlcm5pb24oYSx0aGlzLnJvdGF0aW9uLm9yZGVyLCExKX19KCksZ2V0V29ybGRTY2FsZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IGhhO3JldHVybiBmdW5jdGlvbihjKXtjPWN8fG5ldyBwO3RoaXMudXBkYXRlTWF0cml4V29ybGQoITApO3RoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGEsYixjKTtyZXR1cm4gY319KCksXG4gICAgZ2V0V29ybGREaXJlY3Rpb246ZnVuY3Rpb24oKXt2YXIgYT1uZXcgaGE7cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IHA7dGhpcy5nZXRXb3JsZFF1YXRlcm5pb24oYSk7cmV0dXJuIGIuc2V0KDAsMCwxKS5hcHBseVF1YXRlcm5pb24oYSl9fSgpLHJheWNhc3Q6ZnVuY3Rpb24oKXt9LHRyYXZlcnNlOmZ1bmN0aW9uKGEpe2EodGhpcyk7Zm9yKHZhciBiPXRoaXMuY2hpbGRyZW4sYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKyliW2NdLnRyYXZlcnNlKGEpfSx0cmF2ZXJzZVZpc2libGU6ZnVuY3Rpb24oYSl7aWYoITEhPT10aGlzLnZpc2libGUpe2EodGhpcyk7Zm9yKHZhciBiPXRoaXMuY2hpbGRyZW4sYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKyliW2NdLnRyYXZlcnNlVmlzaWJsZShhKX19LHRyYXZlcnNlQW5jZXN0b3JzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucGFyZW50O251bGwhPT1iJiYoYShiKSxiLnRyYXZlcnNlQW5jZXN0b3JzKGEpKX0sdXBkYXRlTWF0cml4OmZ1bmN0aW9uKCl7dGhpcy5tYXRyaXguY29tcG9zZSh0aGlzLnBvc2l0aW9uLFxuICAgIHRoaXMucXVhdGVybmlvbix0aGlzLnNjYWxlKTt0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITB9LHVwZGF0ZU1hdHJpeFdvcmxkOmZ1bmN0aW9uKGEpe3RoaXMubWF0cml4QXV0b1VwZGF0ZSYmdGhpcy51cGRhdGVNYXRyaXgoKTtpZih0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGV8fGEpbnVsbD09PXRoaXMucGFyZW50P3RoaXMubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeCk6dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLHRoaXMubWF0cml4KSx0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITEsYT0hMDtmb3IodmFyIGI9dGhpcy5jaGlsZHJlbixjPTAsZD1iLmxlbmd0aDtjPGQ7YysrKWJbY10udXBkYXRlTWF0cml4V29ybGQoYSl9LHRvSlNPTjpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGIsYyl7dm9pZCAwPT09YltjLnV1aWRdJiYoYltjLnV1aWRdPWMudG9KU09OKGEpKTtyZXR1cm4gYy51dWlkfWZ1bmN0aW9uIGMoYSl7dmFyIGI9XG4gICAgW10sYztmb3IoYyBpbiBhKXt2YXIgZD1hW2NdO2RlbGV0ZSBkLm1ldGFkYXRhO2IucHVzaChkKX1yZXR1cm4gYn12YXIgZD12b2lkIDA9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGEsZT17fTtkJiYoYT17Z2VvbWV0cmllczp7fSxtYXRlcmlhbHM6e30sdGV4dHVyZXM6e30saW1hZ2VzOnt9LHNoYXBlczp7fX0sZS5tZXRhZGF0YT17dmVyc2lvbjo0LjUsdHlwZTpcIk9iamVjdFwiLGdlbmVyYXRvcjpcIk9iamVjdDNELnRvSlNPTlwifSk7dmFyIGY9e307Zi51dWlkPXRoaXMudXVpZDtmLnR5cGU9dGhpcy50eXBlO1wiXCIhPT10aGlzLm5hbWUmJihmLm5hbWU9dGhpcy5uYW1lKTshMD09PXRoaXMuY2FzdFNoYWRvdyYmKGYuY2FzdFNoYWRvdz0hMCk7ITA9PT10aGlzLnJlY2VpdmVTaGFkb3cmJihmLnJlY2VpdmVTaGFkb3c9ITApOyExPT09dGhpcy52aXNpYmxlJiYoZi52aXNpYmxlPSExKTtcInt9XCIhPT1KU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJEYXRhKSYmKGYudXNlckRhdGE9dGhpcy51c2VyRGF0YSk7XG4gICAgZi5tYXRyaXg9dGhpcy5tYXRyaXgudG9BcnJheSgpO2lmKHZvaWQgMCE9PXRoaXMuZ2VvbWV0cnkpe2YuZ2VvbWV0cnk9YihhLmdlb21ldHJpZXMsdGhpcy5nZW9tZXRyeSk7dmFyIGc9dGhpcy5nZW9tZXRyeS5wYXJhbWV0ZXJzO2lmKHZvaWQgMCE9PWcmJnZvaWQgMCE9PWcuc2hhcGVzKWlmKGc9Zy5zaGFwZXMsQXJyYXkuaXNBcnJheShnKSlmb3IodmFyIGg9MCxrPWcubGVuZ3RoO2g8aztoKyspYihhLnNoYXBlcyxnW2hdKTtlbHNlIGIoYS5zaGFwZXMsZyl9aWYodm9pZCAwIT09dGhpcy5tYXRlcmlhbClpZihBcnJheS5pc0FycmF5KHRoaXMubWF0ZXJpYWwpKXtnPVtdO2g9MDtmb3Ioaz10aGlzLm1hdGVyaWFsLmxlbmd0aDtoPGs7aCsrKWcucHVzaChiKGEubWF0ZXJpYWxzLHRoaXMubWF0ZXJpYWxbaF0pKTtmLm1hdGVyaWFsPWd9ZWxzZSBmLm1hdGVyaWFsPWIoYS5tYXRlcmlhbHMsdGhpcy5tYXRlcmlhbCk7aWYoMDx0aGlzLmNoaWxkcmVuLmxlbmd0aClmb3IoZi5jaGlsZHJlbj1cbiAgICBbXSxoPTA7aDx0aGlzLmNoaWxkcmVuLmxlbmd0aDtoKyspZi5jaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baF0udG9KU09OKGEpLm9iamVjdCk7aWYoZCl7dmFyIGQ9YyhhLmdlb21ldHJpZXMpLGg9YyhhLm1hdGVyaWFscyksaz1jKGEudGV4dHVyZXMpLG09YyhhLmltYWdlcyk7Zz1jKGEuc2hhcGVzKTswPGQubGVuZ3RoJiYoZS5nZW9tZXRyaWVzPWQpOzA8aC5sZW5ndGgmJihlLm1hdGVyaWFscz1oKTswPGsubGVuZ3RoJiYoZS50ZXh0dXJlcz1rKTswPG0ubGVuZ3RoJiYoZS5pbWFnZXM9bSk7MDxnLmxlbmd0aCYmKGUuc2hhcGVzPWcpfWUub2JqZWN0PWY7cmV0dXJuIGV9LGNsb25lOmZ1bmN0aW9uKGEpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzLGEpfSxjb3B5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9ITApO3RoaXMubmFtZT1hLm5hbWU7dGhpcy51cC5jb3B5KGEudXApO3RoaXMucG9zaXRpb24uY29weShhLnBvc2l0aW9uKTt0aGlzLnF1YXRlcm5pb24uY29weShhLnF1YXRlcm5pb24pO1xuICAgIHRoaXMuc2NhbGUuY29weShhLnNjYWxlKTt0aGlzLm1hdHJpeC5jb3B5KGEubWF0cml4KTt0aGlzLm1hdHJpeFdvcmxkLmNvcHkoYS5tYXRyaXhXb3JsZCk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPWEubWF0cml4QXV0b1VwZGF0ZTt0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9YS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlO3RoaXMubGF5ZXJzLm1hc2s9YS5sYXllcnMubWFzazt0aGlzLnZpc2libGU9YS52aXNpYmxlO3RoaXMuY2FzdFNoYWRvdz1hLmNhc3RTaGFkb3c7dGhpcy5yZWNlaXZlU2hhZG93PWEucmVjZWl2ZVNoYWRvdzt0aGlzLmZydXN0dW1DdWxsZWQ9YS5mcnVzdHVtQ3VsbGVkO3RoaXMucmVuZGVyT3JkZXI9YS5yZW5kZXJPcmRlcjt0aGlzLnVzZXJEYXRhPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYS51c2VyRGF0YSkpO2lmKCEwPT09Yilmb3IoYj0wO2I8YS5jaGlsZHJlbi5sZW5ndGg7YisrKXRoaXMuYWRkKGEuY2hpbGRyZW5bYl0uY2xvbmUoKSk7cmV0dXJuIHRoaXN9fSk7XG4gICAgVGEucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOlRhLGlzQ2FtZXJhOiEwLGNvcHk6ZnVuY3Rpb24oYSxiKXt4LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhLGIpO3RoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoYS5tYXRyaXhXb3JsZEludmVyc2UpO3RoaXMucHJvamVjdGlvbk1hdHJpeC5jb3B5KGEucHJvamVjdGlvbk1hdHJpeCk7cmV0dXJuIHRoaXN9LGdldFdvcmxkRGlyZWN0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IGhhO3JldHVybiBmdW5jdGlvbihiKXtiPWJ8fG5ldyBwO3RoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKGEpO3JldHVybiBiLnNldCgwLDAsLTEpLmFwcGx5UXVhdGVybmlvbihhKX19KCksdXBkYXRlTWF0cml4V29ybGQ6ZnVuY3Rpb24oYSl7eC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLGEpO3RoaXMubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UodGhpcy5tYXRyaXhXb3JsZCl9LFxuICAgIGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfX0pO0xiLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6TGIsaXNPcnRob2dyYXBoaWNDYW1lcmE6ITAsY29weTpmdW5jdGlvbihhLGIpe1RhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhLGIpO3RoaXMubGVmdD1hLmxlZnQ7dGhpcy5yaWdodD1hLnJpZ2h0O3RoaXMudG9wPWEudG9wO3RoaXMuYm90dG9tPWEuYm90dG9tO3RoaXMubmVhcj1hLm5lYXI7dGhpcy5mYXI9YS5mYXI7dGhpcy56b29tPWEuem9vbTt0aGlzLnZpZXc9bnVsbD09PWEudmlldz9udWxsOk9iamVjdC5hc3NpZ24oe30sYS52aWV3KTtyZXR1cm4gdGhpc30sc2V0Vmlld09mZnNldDpmdW5jdGlvbihhLGIsYyxkLGUsZil7bnVsbD09PXRoaXMudmlldyYmKHRoaXMudmlldz17ZW5hYmxlZDohMCxmdWxsV2lkdGg6MSxmdWxsSGVpZ2h0OjEsb2Zmc2V0WDowLFxuICAgIG9mZnNldFk6MCx3aWR0aDoxLGhlaWdodDoxfSk7dGhpcy52aWV3LmVuYWJsZWQ9ITA7dGhpcy52aWV3LmZ1bGxXaWR0aD1hO3RoaXMudmlldy5mdWxsSGVpZ2h0PWI7dGhpcy52aWV3Lm9mZnNldFg9Yzt0aGlzLnZpZXcub2Zmc2V0WT1kO3RoaXMudmlldy53aWR0aD1lO3RoaXMudmlldy5oZWlnaHQ9Zjt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX0sY2xlYXJWaWV3T2Zmc2V0OmZ1bmN0aW9uKCl7bnVsbCE9PXRoaXMudmlldyYmKHRoaXMudmlldy5lbmFibGVkPSExKTt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX0sdXBkYXRlUHJvamVjdGlvbk1hdHJpeDpmdW5jdGlvbigpe3ZhciBhPSh0aGlzLnJpZ2h0LXRoaXMubGVmdCkvKDIqdGhpcy56b29tKSxiPSh0aGlzLnRvcC10aGlzLmJvdHRvbSkvKDIqdGhpcy56b29tKSxjPSh0aGlzLnJpZ2h0K3RoaXMubGVmdCkvMixkPSh0aGlzLnRvcCt0aGlzLmJvdHRvbSkvMixlPWMtYSxjPWMrYSxhPWQrYixiPWQtYjtpZihudWxsIT09XG4gICAgdGhpcy52aWV3JiZ0aGlzLnZpZXcuZW5hYmxlZCl2YXIgYz10aGlzLnpvb20vKHRoaXMudmlldy53aWR0aC90aGlzLnZpZXcuZnVsbFdpZHRoKSxiPXRoaXMuem9vbS8odGhpcy52aWV3LmhlaWdodC90aGlzLnZpZXcuZnVsbEhlaWdodCksZj0odGhpcy5yaWdodC10aGlzLmxlZnQpL3RoaXMudmlldy53aWR0aCxkPSh0aGlzLnRvcC10aGlzLmJvdHRvbSkvdGhpcy52aWV3LmhlaWdodCxlPWUrdGhpcy52aWV3Lm9mZnNldFgvYypmLGM9ZSt0aGlzLnZpZXcud2lkdGgvYypmLGE9YS10aGlzLnZpZXcub2Zmc2V0WS9iKmQsYj1hLXRoaXMudmlldy5oZWlnaHQvYipkO3RoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKGUsYyxhLGIsdGhpcy5uZWFyLHRoaXMuZmFyKX0sdG9KU09OOmZ1bmN0aW9uKGEpe2E9eC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC56b29tPXRoaXMuem9vbTthLm9iamVjdC5sZWZ0PXRoaXMubGVmdDthLm9iamVjdC5yaWdodD1cbiAgICB0aGlzLnJpZ2h0O2Eub2JqZWN0LnRvcD10aGlzLnRvcDthLm9iamVjdC5ib3R0b209dGhpcy5ib3R0b207YS5vYmplY3QubmVhcj10aGlzLm5lYXI7YS5vYmplY3QuZmFyPXRoaXMuZmFyO251bGwhPT10aGlzLnZpZXcmJihhLm9iamVjdC52aWV3PU9iamVjdC5hc3NpZ24oe30sdGhpcy52aWV3KSk7cmV0dXJuIGF9fSk7T2JqZWN0LmFzc2lnbihZYS5wcm90b3R5cGUse2Nsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYT1hLmE7dGhpcy5iPWEuYjt0aGlzLmM9YS5jO3RoaXMubm9ybWFsLmNvcHkoYS5ub3JtYWwpO3RoaXMuY29sb3IuY29weShhLmNvbG9yKTt0aGlzLm1hdGVyaWFsSW5kZXg9YS5tYXRlcmlhbEluZGV4O2Zvcih2YXIgYj0wLGM9YS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDtiPGM7YisrKXRoaXMudmVydGV4Tm9ybWFsc1tiXT1hLnZlcnRleE5vcm1hbHNbYl0uY2xvbmUoKTtiPTA7XG4gICAgZm9yKGM9YS52ZXJ0ZXhDb2xvcnMubGVuZ3RoO2I8YztiKyspdGhpcy52ZXJ0ZXhDb2xvcnNbYl09YS52ZXJ0ZXhDb2xvcnNbYl0uY2xvbmUoKTtyZXR1cm4gdGhpc319KTt2YXIgZGc9MDtMLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoemEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6TCxpc0dlb21ldHJ5OiEwLGFwcGx5TWF0cml4OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0obmV3IG1hKS5nZXROb3JtYWxNYXRyaXgoYSksYz0wLGQ9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7YzxkO2MrKyl0aGlzLnZlcnRpY2VzW2NdLmFwcGx5TWF0cml4NChhKTtjPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxkO2MrKyl7YT10aGlzLmZhY2VzW2NdO2Eubm9ybWFsLmFwcGx5TWF0cml4MyhiKS5ub3JtYWxpemUoKTtmb3IodmFyIGU9MCxmPWEudmVydGV4Tm9ybWFscy5sZW5ndGg7ZTxmO2UrKylhLnZlcnRleE5vcm1hbHNbZV0uYXBwbHlNYXRyaXgzKGIpLm5vcm1hbGl6ZSgpfW51bGwhPT1cbiAgICB0aGlzLmJvdW5kaW5nQm94JiZ0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO251bGwhPT10aGlzLmJvdW5kaW5nU3BoZXJlJiZ0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO3RoaXMubm9ybWFsc05lZWRVcGRhdGU9dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7cmV0dXJuIHRoaXN9LHJvdGF0ZVg6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tYWtlUm90YXRpb25YKGIpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHJvdGF0ZVk6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tYWtlUm90YXRpb25ZKGIpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHJvdGF0ZVo6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tYWtlUm90YXRpb25aKGIpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbigpe3ZhciBhPVxuICAgIG5ldyBPO3JldHVybiBmdW5jdGlvbihiLGMsZCl7YS5tYWtlVHJhbnNsYXRpb24oYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHNjYWxlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXthLm1ha2VTY2FsZShiLGMsZCk7dGhpcy5hcHBseU1hdHJpeChhKTtyZXR1cm4gdGhpc319KCksbG9va0F0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHg7cmV0dXJuIGZ1bmN0aW9uKGIpe2EubG9va0F0KGIpO2EudXBkYXRlTWF0cml4KCk7dGhpcy5hcHBseU1hdHJpeChhLm1hdHJpeCl9fSgpLGZyb21CdWZmZXJHZW9tZXRyeTpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYixkLGUpe3ZhciBmPXZvaWQgMCE9PWc/W2xbYV0uY2xvbmUoKSxsW2JdLmNsb25lKCksbFtkXS5jbG9uZSgpXTpbXSxxPXZvaWQgMCE9PWg/W2MuY29sb3JzW2FdLmNsb25lKCksYy5jb2xvcnNbYl0uY2xvbmUoKSxjLmNvbG9yc1tkXS5jbG9uZSgpXTpbXTtlPW5ldyBZYShhLFxuICAgIGIsZCxmLHEsZSk7Yy5mYWNlcy5wdXNoKGUpO3ZvaWQgMCE9PWsmJmMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtuW2FdLmNsb25lKCksbltiXS5jbG9uZSgpLG5bZF0uY2xvbmUoKV0pO3ZvaWQgMCE9PW0mJmMuZmFjZVZlcnRleFV2c1sxXS5wdXNoKFt1W2FdLmNsb25lKCksdVtiXS5jbG9uZSgpLHVbZF0uY2xvbmUoKV0pfXZhciBjPXRoaXMsZD1udWxsIT09YS5pbmRleD9hLmluZGV4LmFycmF5OnZvaWQgMCxlPWEuYXR0cmlidXRlcyxmPWUucG9zaXRpb24uYXJyYXksZz12b2lkIDAhPT1lLm5vcm1hbD9lLm5vcm1hbC5hcnJheTp2b2lkIDAsaD12b2lkIDAhPT1lLmNvbG9yP2UuY29sb3IuYXJyYXk6dm9pZCAwLGs9dm9pZCAwIT09ZS51dj9lLnV2LmFycmF5OnZvaWQgMCxtPXZvaWQgMCE9PWUudXYyP2UudXYyLmFycmF5OnZvaWQgMDt2b2lkIDAhPT1tJiYodGhpcy5mYWNlVmVydGV4VXZzWzFdPVtdKTtmb3IodmFyIGw9W10sbj1bXSx1PVtdLHI9ZT0wO2U8Zi5sZW5ndGg7ZSs9MyxcbiAgICByKz0yKWMudmVydGljZXMucHVzaChuZXcgcChmW2VdLGZbZSsxXSxmW2UrMl0pKSx2b2lkIDAhPT1nJiZsLnB1c2gobmV3IHAoZ1tlXSxnW2UrMV0sZ1tlKzJdKSksdm9pZCAwIT09aCYmYy5jb2xvcnMucHVzaChuZXcgSChoW2VdLGhbZSsxXSxoW2UrMl0pKSx2b2lkIDAhPT1rJiZuLnB1c2gobmV3IEQoa1tyXSxrW3IrMV0pKSx2b2lkIDAhPT1tJiZ1LnB1c2gobmV3IEQobVtyXSxtW3IrMV0pKTt2YXIgdD1hLmdyb3VwcztpZigwPHQubGVuZ3RoKWZvcihlPTA7ZTx0Lmxlbmd0aDtlKyspZm9yKHZhciBmPXRbZV0sdj1mLnN0YXJ0LHc9Zi5jb3VudCxyPXYsdj12K3c7cjx2O3IrPTMpdm9pZCAwIT09ZD9iKGRbcl0sZFtyKzFdLGRbcisyXSxmLm1hdGVyaWFsSW5kZXgpOmIocixyKzEscisyLGYubWF0ZXJpYWxJbmRleCk7ZWxzZSBpZih2b2lkIDAhPT1kKWZvcihlPTA7ZTxkLmxlbmd0aDtlKz0zKWIoZFtlXSxkW2UrMV0sZFtlKzJdKTtlbHNlIGZvcihlPTA7ZTxmLmxlbmd0aC8zO2UrPVxuICAgIDMpYihlLGUrMSxlKzIpO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7bnVsbCE9PWEuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PWEuYm91bmRpbmdCb3guY2xvbmUoKSk7bnVsbCE9PWEuYm91bmRpbmdTcGhlcmUmJih0aGlzLmJvdW5kaW5nU3BoZXJlPWEuYm91bmRpbmdTcGhlcmUuY2xvbmUoKSk7cmV0dXJuIHRoaXN9LGNlbnRlcjpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7dmFyIGE9dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoKS5uZWdhdGUoKTt0aGlzLnRyYW5zbGF0ZShhLngsYS55LGEueik7cmV0dXJuIGF9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7dmFyIGE9dGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXIsYj10aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyxiPTA9PT1iPzE6MS9iLGM9bmV3IE87Yy5zZXQoYiwwLDAsLWIqYS54LDAsYiwwLC1iKmEueSwwLDAsYiwtYiphLnosMCwwLDAsMSk7XG4gICAgdGhpcy5hcHBseU1hdHJpeChjKTtyZXR1cm4gdGhpc30sY29tcHV0ZUZhY2VOb3JtYWxzOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPW5ldyBwLGI9bmV3IHAsYz0wLGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9dGhpcy5mYWNlc1tjXSxmPXRoaXMudmVydGljZXNbZS5hXSxnPXRoaXMudmVydGljZXNbZS5iXTthLnN1YlZlY3RvcnModGhpcy52ZXJ0aWNlc1tlLmNdLGcpO2Iuc3ViVmVjdG9ycyhmLGcpO2EuY3Jvc3MoYik7YS5ub3JtYWxpemUoKTtlLm5vcm1hbC5jb3B5KGEpfX0sY29tcHV0ZVZlcnRleE5vcm1hbHM6ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9ITApO3ZhciBiO3ZhciBjPUFycmF5KHRoaXMudmVydGljZXMubGVuZ3RoKTt2YXIgZD0wO2ZvcihiPXRoaXMudmVydGljZXMubGVuZ3RoO2Q8YjtkKyspY1tkXT1uZXcgcDtpZihhKXt2YXIgZT1uZXcgcCxmPW5ldyBwO2E9MDtmb3IoZD10aGlzLmZhY2VzLmxlbmd0aDthPGQ7YSsrKXtiPXRoaXMuZmFjZXNbYV07XG4gICAgdmFyIGc9dGhpcy52ZXJ0aWNlc1tiLmFdO3ZhciBoPXRoaXMudmVydGljZXNbYi5iXTt2YXIgaz10aGlzLnZlcnRpY2VzW2IuY107ZS5zdWJWZWN0b3JzKGssaCk7Zi5zdWJWZWN0b3JzKGcsaCk7ZS5jcm9zcyhmKTtjW2IuYV0uYWRkKGUpO2NbYi5iXS5hZGQoZSk7Y1tiLmNdLmFkZChlKX19ZWxzZSBmb3IodGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKSxhPTAsZD10aGlzLmZhY2VzLmxlbmd0aDthPGQ7YSsrKWI9dGhpcy5mYWNlc1thXSxjW2IuYV0uYWRkKGIubm9ybWFsKSxjW2IuYl0uYWRkKGIubm9ybWFsKSxjW2IuY10uYWRkKGIubm9ybWFsKTtkPTA7Zm9yKGI9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7ZDxiO2QrKyljW2RdLm5vcm1hbGl6ZSgpO2E9MDtmb3IoZD10aGlzLmZhY2VzLmxlbmd0aDthPGQ7YSsrKWI9dGhpcy5mYWNlc1thXSxnPWIudmVydGV4Tm9ybWFscywzPT09Zy5sZW5ndGg/KGdbMF0uY29weShjW2IuYV0pLGdbMV0uY29weShjW2IuYl0pLGdbMl0uY29weShjW2IuY10pKTpcbiAgICAoZ1swXT1jW2IuYV0uY2xvbmUoKSxnWzFdPWNbYi5iXS5jbG9uZSgpLGdbMl09Y1tiLmNdLmNsb25lKCkpOzA8dGhpcy5mYWNlcy5sZW5ndGgmJih0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPSEwKX0sY29tcHV0ZUZsYXRWZXJ0ZXhOb3JtYWxzOmZ1bmN0aW9uKCl7dmFyIGE7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt2YXIgYj0wO2ZvcihhPXRoaXMuZmFjZXMubGVuZ3RoO2I8YTtiKyspe3ZhciBjPXRoaXMuZmFjZXNbYl07dmFyIGQ9Yy52ZXJ0ZXhOb3JtYWxzOzM9PT1kLmxlbmd0aD8oZFswXS5jb3B5KGMubm9ybWFsKSxkWzFdLmNvcHkoYy5ub3JtYWwpLGRbMl0uY29weShjLm5vcm1hbCkpOihkWzBdPWMubm9ybWFsLmNsb25lKCksZFsxXT1jLm5vcm1hbC5jbG9uZSgpLGRbMl09Yy5ub3JtYWwuY2xvbmUoKSl9MDx0aGlzLmZhY2VzLmxlbmd0aCYmKHRoaXMubm9ybWFsc05lZWRVcGRhdGU9ITApfSxjb21wdXRlTW9ycGhOb3JtYWxzOmZ1bmN0aW9uKCl7dmFyIGEsYjt2YXIgYz1cbiAgICAwO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2M8YjtjKyspe3ZhciBkPXRoaXMuZmFjZXNbY107ZC5fX29yaWdpbmFsRmFjZU5vcm1hbD9kLl9fb3JpZ2luYWxGYWNlTm9ybWFsLmNvcHkoZC5ub3JtYWwpOmQuX19vcmlnaW5hbEZhY2VOb3JtYWw9ZC5ub3JtYWwuY2xvbmUoKTtkLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzfHwoZC5fX29yaWdpbmFsVmVydGV4Tm9ybWFscz1bXSk7dmFyIGU9MDtmb3IoYT1kLnZlcnRleE5vcm1hbHMubGVuZ3RoO2U8YTtlKyspZC5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1tlXT9kLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzW2VdLmNvcHkoZC52ZXJ0ZXhOb3JtYWxzW2VdKTpkLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzW2VdPWQudmVydGV4Tm9ybWFsc1tlXS5jbG9uZSgpfXZhciBmPW5ldyBMO2YuZmFjZXM9dGhpcy5mYWNlcztlPTA7Zm9yKGE9dGhpcy5tb3JwaFRhcmdldHMubGVuZ3RoO2U8YTtlKyspe2lmKCF0aGlzLm1vcnBoTm9ybWFsc1tlXSl7dGhpcy5tb3JwaE5vcm1hbHNbZV09XG4gICAge307dGhpcy5tb3JwaE5vcm1hbHNbZV0uZmFjZU5vcm1hbHM9W107dGhpcy5tb3JwaE5vcm1hbHNbZV0udmVydGV4Tm9ybWFscz1bXTtkPXRoaXMubW9ycGhOb3JtYWxzW2VdLmZhY2VOb3JtYWxzO3ZhciBnPXRoaXMubW9ycGhOb3JtYWxzW2VdLnZlcnRleE5vcm1hbHM7Yz0wO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2M8YjtjKyspe3ZhciBoPW5ldyBwO3ZhciBrPXthOm5ldyBwLGI6bmV3IHAsYzpuZXcgcH07ZC5wdXNoKGgpO2cucHVzaChrKX19Zz10aGlzLm1vcnBoTm9ybWFsc1tlXTtmLnZlcnRpY2VzPXRoaXMubW9ycGhUYXJnZXRzW2VdLnZlcnRpY2VzO2YuY29tcHV0ZUZhY2VOb3JtYWxzKCk7Zi5jb21wdXRlVmVydGV4Tm9ybWFscygpO2M9MDtmb3IoYj10aGlzLmZhY2VzLmxlbmd0aDtjPGI7YysrKWQ9dGhpcy5mYWNlc1tjXSxoPWcuZmFjZU5vcm1hbHNbY10saz1nLnZlcnRleE5vcm1hbHNbY10saC5jb3B5KGQubm9ybWFsKSxrLmEuY29weShkLnZlcnRleE5vcm1hbHNbMF0pLFxuICAgIGsuYi5jb3B5KGQudmVydGV4Tm9ybWFsc1sxXSksay5jLmNvcHkoZC52ZXJ0ZXhOb3JtYWxzWzJdKX1jPTA7Zm9yKGI9dGhpcy5mYWNlcy5sZW5ndGg7YzxiO2MrKylkPXRoaXMuZmFjZXNbY10sZC5ub3JtYWw9ZC5fX29yaWdpbmFsRmFjZU5vcm1hbCxkLnZlcnRleE5vcm1hbHM9ZC5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc30sY29tcHV0ZUxpbmVEaXN0YW5jZXM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXRoaXMudmVydGljZXMsYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKykwPGMmJihhKz1iW2NdLmRpc3RhbmNlVG8oYltjLTFdKSksdGhpcy5saW5lRGlzdGFuY2VzW2NdPWF9LGNvbXB1dGVCb3VuZGluZ0JveDpmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nQm94JiYodGhpcy5ib3VuZGluZ0JveD1uZXcgWGEpO3RoaXMuYm91bmRpbmdCb3guc2V0RnJvbVBvaW50cyh0aGlzLnZlcnRpY2VzKX0sY29tcHV0ZUJvdW5kaW5nU3BoZXJlOmZ1bmN0aW9uKCl7bnVsbD09PXRoaXMuYm91bmRpbmdTcGhlcmUmJlxuICAgICh0aGlzLmJvdW5kaW5nU3BoZXJlPW5ldyBJYSk7dGhpcy5ib3VuZGluZ1NwaGVyZS5zZXRGcm9tUG9pbnRzKHRoaXMudmVydGljZXMpfSxtZXJnZTpmdW5jdGlvbihhLGIsYyl7aWYoYSYmYS5pc0dlb21ldHJ5KXt2YXIgZCxlPXRoaXMudmVydGljZXMubGVuZ3RoLGY9dGhpcy52ZXJ0aWNlcyxnPWEudmVydGljZXMsaD10aGlzLmZhY2VzLGs9YS5mYWNlcyxtPXRoaXMuZmFjZVZlcnRleFV2c1swXSxsPWEuZmFjZVZlcnRleFV2c1swXSxuPXRoaXMuY29sb3JzLHA9YS5jb2xvcnM7dm9pZCAwPT09YyYmKGM9MCk7dm9pZCAwIT09YiYmKGQ9KG5ldyBtYSkuZ2V0Tm9ybWFsTWF0cml4KGIpKTthPTA7Zm9yKHZhciByPWcubGVuZ3RoO2E8cjthKyspe3ZhciB0PWdbYV0uY2xvbmUoKTt2b2lkIDAhPT1iJiZ0LmFwcGx5TWF0cml4NChiKTtmLnB1c2godCl9YT0wO2ZvcihyPXAubGVuZ3RoO2E8cjthKyspbi5wdXNoKHBbYV0uY2xvbmUoKSk7YT0wO2ZvcihyPWsubGVuZ3RoO2E8cjthKyspe3ZhciBnPVxuICAgIGtbYV0sdj1nLnZlcnRleE5vcm1hbHMscD1nLnZlcnRleENvbG9ycyxuPW5ldyBZYShnLmErZSxnLmIrZSxnLmMrZSk7bi5ub3JtYWwuY29weShnLm5vcm1hbCk7dm9pZCAwIT09ZCYmbi5ub3JtYWwuYXBwbHlNYXRyaXgzKGQpLm5vcm1hbGl6ZSgpO2I9MDtmb3IoZj12Lmxlbmd0aDtiPGY7YisrKXQ9dltiXS5jbG9uZSgpLHZvaWQgMCE9PWQmJnQuYXBwbHlNYXRyaXgzKGQpLm5vcm1hbGl6ZSgpLG4udmVydGV4Tm9ybWFscy5wdXNoKHQpO24uY29sb3IuY29weShnLmNvbG9yKTtiPTA7Zm9yKGY9cC5sZW5ndGg7YjxmO2IrKyl0PXBbYl0sbi52ZXJ0ZXhDb2xvcnMucHVzaCh0LmNsb25lKCkpO24ubWF0ZXJpYWxJbmRleD1nLm1hdGVyaWFsSW5kZXgrYztoLnB1c2gobil9YT0wO2ZvcihyPWwubGVuZ3RoO2E8cjthKyspaWYoYz1sW2FdLGQ9W10sdm9pZCAwIT09Yyl7Yj0wO2ZvcihmPWMubGVuZ3RoO2I8ZjtiKyspZC5wdXNoKGNbYl0uY2xvbmUoKSk7bS5wdXNoKGQpfX1lbHNlIGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5HZW9tZXRyeS5tZXJnZSgpOiBnZW9tZXRyeSBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuR2VvbWV0cnkuXCIsXG4gICAgYSl9LG1lcmdlTWVzaDpmdW5jdGlvbihhKXthJiZhLmlzTWVzaD8oYS5tYXRyaXhBdXRvVXBkYXRlJiZhLnVwZGF0ZU1hdHJpeCgpLHRoaXMubWVyZ2UoYS5nZW9tZXRyeSxhLm1hdHJpeCkpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5HZW9tZXRyeS5tZXJnZU1lc2goKTogbWVzaCBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuTWVzaC5cIixhKX0sbWVyZ2VWZXJ0aWNlczpmdW5jdGlvbigpe3ZhciBhPXt9LGI9W10sYz1bXSxkPU1hdGgucG93KDEwLDQpLGU7dmFyIGY9MDtmb3IoZT10aGlzLnZlcnRpY2VzLmxlbmd0aDtmPGU7ZisrKXt2YXIgZz10aGlzLnZlcnRpY2VzW2ZdO2c9TWF0aC5yb3VuZChnLngqZCkrXCJfXCIrTWF0aC5yb3VuZChnLnkqZCkrXCJfXCIrTWF0aC5yb3VuZChnLnoqZCk7dm9pZCAwPT09YVtnXT8oYVtnXT1mLGIucHVzaCh0aGlzLnZlcnRpY2VzW2ZdKSxjW2ZdPWIubGVuZ3RoLTEpOmNbZl09Y1thW2ddXX1hPVtdO2Y9MDtmb3IoZT10aGlzLmZhY2VzLmxlbmd0aDtmPGU7ZisrKWZvcihkPVxuICAgIHRoaXMuZmFjZXNbZl0sZC5hPWNbZC5hXSxkLmI9Y1tkLmJdLGQuYz1jW2QuY10sZD1bZC5hLGQuYixkLmNdLGc9MDszPmc7ZysrKWlmKGRbZ109PT1kWyhnKzEpJTNdKXthLnB1c2goZik7YnJlYWt9Zm9yKGY9YS5sZW5ndGgtMTswPD1mO2YtLSlmb3IoZD1hW2ZdLHRoaXMuZmFjZXMuc3BsaWNlKGQsMSksYz0wLGU9dGhpcy5mYWNlVmVydGV4VXZzLmxlbmd0aDtjPGU7YysrKXRoaXMuZmFjZVZlcnRleFV2c1tjXS5zcGxpY2UoZCwxKTtmPXRoaXMudmVydGljZXMubGVuZ3RoLWIubGVuZ3RoO3RoaXMudmVydGljZXM9YjtyZXR1cm4gZn0sc2V0RnJvbVBvaW50czpmdW5jdGlvbihhKXt0aGlzLnZlcnRpY2VzPVtdO2Zvcih2YXIgYj0wLGM9YS5sZW5ndGg7YjxjO2IrKyl7dmFyIGQ9YVtiXTt0aGlzLnZlcnRpY2VzLnB1c2gobmV3IHAoZC54LGQueSxkLnp8fDApKX1yZXR1cm4gdGhpc30sc29ydEZhY2VzQnlNYXRlcmlhbEluZGV4OmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuZmFjZXMsXG4gICAgYj1hLmxlbmd0aCxjPTA7YzxiO2MrKylhW2NdLl9pZD1jO2Euc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhLm1hdGVyaWFsSW5kZXgtYi5tYXRlcmlhbEluZGV4fSk7dmFyIGQ9dGhpcy5mYWNlVmVydGV4VXZzWzBdLGU9dGhpcy5mYWNlVmVydGV4VXZzWzFdLGYsZztkJiZkLmxlbmd0aD09PWImJihmPVtdKTtlJiZlLmxlbmd0aD09PWImJihnPVtdKTtmb3IoYz0wO2M8YjtjKyspe3ZhciBoPWFbY10uX2lkO2YmJmYucHVzaChkW2hdKTtnJiZnLnB1c2goZVtoXSl9ZiYmKHRoaXMuZmFjZVZlcnRleFV2c1swXT1mKTtnJiYodGhpcy5mYWNlVmVydGV4VXZzWzFdPWcpfSx0b0pTT046ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYixjKXtyZXR1cm4gYz9hfDE8PGI6YSZ+KDE8PGIpfWZ1bmN0aW9uIGIoYSl7dmFyIGI9YS54LnRvU3RyaW5nKCkrYS55LnRvU3RyaW5nKCkrYS56LnRvU3RyaW5nKCk7aWYodm9pZCAwIT09bVtiXSlyZXR1cm4gbVtiXTttW2JdPWsubGVuZ3RoLzM7ay5wdXNoKGEueCxcbiAgICBhLnksYS56KTtyZXR1cm4gbVtiXX1mdW5jdGlvbiBjKGEpe3ZhciBiPWEuci50b1N0cmluZygpK2EuZy50b1N0cmluZygpK2EuYi50b1N0cmluZygpO2lmKHZvaWQgMCE9PW5bYl0pcmV0dXJuIG5bYl07bltiXT1sLmxlbmd0aDtsLnB1c2goYS5nZXRIZXgoKSk7cmV0dXJuIG5bYl19ZnVuY3Rpb24gZChhKXt2YXIgYj1hLngudG9TdHJpbmcoKSthLnkudG9TdHJpbmcoKTtpZih2b2lkIDAhPT1yW2JdKXJldHVybiByW2JdO3JbYl09cC5sZW5ndGgvMjtwLnB1c2goYS54LGEueSk7cmV0dXJuIHJbYl19dmFyIGU9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNSx0eXBlOlwiR2VvbWV0cnlcIixnZW5lcmF0b3I6XCJHZW9tZXRyeS50b0pTT05cIn19O2UudXVpZD10aGlzLnV1aWQ7ZS50eXBlPXRoaXMudHlwZTtcIlwiIT09dGhpcy5uYW1lJiYoZS5uYW1lPXRoaXMubmFtZSk7aWYodm9pZCAwIT09dGhpcy5wYXJhbWV0ZXJzKXt2YXIgZj10aGlzLnBhcmFtZXRlcnMsZztmb3IoZyBpbiBmKXZvaWQgMCE9PWZbZ10mJlxuICAgIChlW2ddPWZbZ10pO3JldHVybiBlfWY9W107Zm9yKGc9MDtnPHRoaXMudmVydGljZXMubGVuZ3RoO2crKyl7dmFyIGg9dGhpcy52ZXJ0aWNlc1tnXTtmLnB1c2goaC54LGgueSxoLnopfXZhciBoPVtdLGs9W10sbT17fSxsPVtdLG49e30scD1bXSxyPXt9O2ZvcihnPTA7Zzx0aGlzLmZhY2VzLmxlbmd0aDtnKyspe3ZhciB0PXRoaXMuZmFjZXNbZ10sdj12b2lkIDAhPT10aGlzLmZhY2VWZXJ0ZXhVdnNbMF1bZ10sdz0wPHQubm9ybWFsLmxlbmd0aCgpLHo9MDx0LnZlcnRleE5vcm1hbHMubGVuZ3RoLHk9MSE9PXQuY29sb3Iucnx8MSE9PXQuY29sb3IuZ3x8MSE9PXQuY29sb3IuYix4PTA8dC52ZXJ0ZXhDb2xvcnMubGVuZ3RoLEE9MCxBPWEoQSwwLDApLEE9YShBLDEsITApLEE9YShBLDIsITEpLEE9YShBLDMsdiksQT1hKEEsNCx3KSxBPWEoQSw1LHopLEE9YShBLDYseSksQT1hKEEsNyx4KTtoLnB1c2goQSk7aC5wdXNoKHQuYSx0LmIsdC5jKTtoLnB1c2godC5tYXRlcmlhbEluZGV4KTtcbiAgICB2JiYodj10aGlzLmZhY2VWZXJ0ZXhVdnNbMF1bZ10saC5wdXNoKGQodlswXSksZCh2WzFdKSxkKHZbMl0pKSk7dyYmaC5wdXNoKGIodC5ub3JtYWwpKTt6JiYodz10LnZlcnRleE5vcm1hbHMsaC5wdXNoKGIod1swXSksYih3WzFdKSxiKHdbMl0pKSk7eSYmaC5wdXNoKGModC5jb2xvcikpO3gmJih0PXQudmVydGV4Q29sb3JzLGgucHVzaChjKHRbMF0pLGModFsxXSksYyh0WzJdKSkpfWUuZGF0YT17fTtlLmRhdGEudmVydGljZXM9ZjtlLmRhdGEubm9ybWFscz1rOzA8bC5sZW5ndGgmJihlLmRhdGEuY29sb3JzPWwpOzA8cC5sZW5ndGgmJihlLmRhdGEudXZzPVtwXSk7ZS5kYXRhLmZhY2VzPWg7cmV0dXJuIGV9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBMKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3ZhciBiLGMsZDt0aGlzLnZlcnRpY2VzPVtdO3RoaXMuY29sb3JzPVtdO3RoaXMuZmFjZXM9W107dGhpcy5mYWNlVmVydGV4VXZzPVtbXV07dGhpcy5tb3JwaFRhcmdldHM9XG4gICAgW107dGhpcy5tb3JwaE5vcm1hbHM9W107dGhpcy5za2luV2VpZ2h0cz1bXTt0aGlzLnNraW5JbmRpY2VzPVtdO3RoaXMubGluZURpc3RhbmNlcz1bXTt0aGlzLmJvdW5kaW5nU3BoZXJlPXRoaXMuYm91bmRpbmdCb3g9bnVsbDt0aGlzLm5hbWU9YS5uYW1lO3ZhciBlPWEudmVydGljZXM7dmFyIGY9MDtmb3IoYj1lLmxlbmd0aDtmPGI7ZisrKXRoaXMudmVydGljZXMucHVzaChlW2ZdLmNsb25lKCkpO2U9YS5jb2xvcnM7Zj0wO2ZvcihiPWUubGVuZ3RoO2Y8YjtmKyspdGhpcy5jb2xvcnMucHVzaChlW2ZdLmNsb25lKCkpO2U9YS5mYWNlcztmPTA7Zm9yKGI9ZS5sZW5ndGg7ZjxiO2YrKyl0aGlzLmZhY2VzLnB1c2goZVtmXS5jbG9uZSgpKTtmPTA7Zm9yKGI9YS5mYWNlVmVydGV4VXZzLmxlbmd0aDtmPGI7ZisrKXt2YXIgZz1hLmZhY2VWZXJ0ZXhVdnNbZl07dm9pZCAwPT09dGhpcy5mYWNlVmVydGV4VXZzW2ZdJiYodGhpcy5mYWNlVmVydGV4VXZzW2ZdPVtdKTtlPTA7Zm9yKGM9Zy5sZW5ndGg7ZTxcbiAgICBjO2UrKyl7dmFyIGg9Z1tlXSxrPVtdO3ZhciBtPTA7Zm9yKGQ9aC5sZW5ndGg7bTxkO20rKylrLnB1c2goaFttXS5jbG9uZSgpKTt0aGlzLmZhY2VWZXJ0ZXhVdnNbZl0ucHVzaChrKX19bT1hLm1vcnBoVGFyZ2V0cztmPTA7Zm9yKGI9bS5sZW5ndGg7ZjxiO2YrKyl7ZD17fTtkLm5hbWU9bVtmXS5uYW1lO2lmKHZvaWQgMCE9PW1bZl0udmVydGljZXMpZm9yKGQudmVydGljZXM9W10sZT0wLGM9bVtmXS52ZXJ0aWNlcy5sZW5ndGg7ZTxjO2UrKylkLnZlcnRpY2VzLnB1c2gobVtmXS52ZXJ0aWNlc1tlXS5jbG9uZSgpKTtpZih2b2lkIDAhPT1tW2ZdLm5vcm1hbHMpZm9yKGQubm9ybWFscz1bXSxlPTAsYz1tW2ZdLm5vcm1hbHMubGVuZ3RoO2U8YztlKyspZC5ub3JtYWxzLnB1c2gobVtmXS5ub3JtYWxzW2VdLmNsb25lKCkpO3RoaXMubW9ycGhUYXJnZXRzLnB1c2goZCl9bT1hLm1vcnBoTm9ybWFscztmPTA7Zm9yKGI9bS5sZW5ndGg7ZjxiO2YrKyl7ZD17fTtpZih2b2lkIDAhPT1tW2ZdLnZlcnRleE5vcm1hbHMpZm9yKGQudmVydGV4Tm9ybWFscz1cbiAgICBbXSxlPTAsYz1tW2ZdLnZlcnRleE5vcm1hbHMubGVuZ3RoO2U8YztlKyspZz1tW2ZdLnZlcnRleE5vcm1hbHNbZV0saD17fSxoLmE9Zy5hLmNsb25lKCksaC5iPWcuYi5jbG9uZSgpLGguYz1nLmMuY2xvbmUoKSxkLnZlcnRleE5vcm1hbHMucHVzaChoKTtpZih2b2lkIDAhPT1tW2ZdLmZhY2VOb3JtYWxzKWZvcihkLmZhY2VOb3JtYWxzPVtdLGU9MCxjPW1bZl0uZmFjZU5vcm1hbHMubGVuZ3RoO2U8YztlKyspZC5mYWNlTm9ybWFscy5wdXNoKG1bZl0uZmFjZU5vcm1hbHNbZV0uY2xvbmUoKSk7dGhpcy5tb3JwaE5vcm1hbHMucHVzaChkKX1lPWEuc2tpbldlaWdodHM7Zj0wO2ZvcihiPWUubGVuZ3RoO2Y8YjtmKyspdGhpcy5za2luV2VpZ2h0cy5wdXNoKGVbZl0uY2xvbmUoKSk7ZT1hLnNraW5JbmRpY2VzO2Y9MDtmb3IoYj1lLmxlbmd0aDtmPGI7ZisrKXRoaXMuc2tpbkluZGljZXMucHVzaChlW2ZdLmNsb25lKCkpO2U9YS5saW5lRGlzdGFuY2VzO2Y9MDtmb3IoYj1lLmxlbmd0aDtmPFxuICAgIGI7ZisrKXRoaXMubGluZURpc3RhbmNlcy5wdXNoKGVbZl0pO2Y9YS5ib3VuZGluZ0JveDtudWxsIT09ZiYmKHRoaXMuYm91bmRpbmdCb3g9Zi5jbG9uZSgpKTtmPWEuYm91bmRpbmdTcGhlcmU7bnVsbCE9PWYmJih0aGlzLmJvdW5kaW5nU3BoZXJlPWYuY2xvbmUoKSk7dGhpcy5lbGVtZW50c05lZWRVcGRhdGU9YS5lbGVtZW50c05lZWRVcGRhdGU7dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9YS52ZXJ0aWNlc05lZWRVcGRhdGU7dGhpcy51dnNOZWVkVXBkYXRlPWEudXZzTmVlZFVwZGF0ZTt0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPWEubm9ybWFsc05lZWRVcGRhdGU7dGhpcy5jb2xvcnNOZWVkVXBkYXRlPWEuY29sb3JzTmVlZFVwZGF0ZTt0aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlPWEubGluZURpc3RhbmNlc05lZWRVcGRhdGU7dGhpcy5ncm91cHNOZWVkVXBkYXRlPWEuZ3JvdXBzTmVlZFVwZGF0ZTtyZXR1cm4gdGhpc30sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfX0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNLnByb3RvdHlwZSxcIm5lZWRzVXBkYXRlXCIse3NldDpmdW5jdGlvbihhKXshMD09PWEmJnRoaXMudmVyc2lvbisrfX0pO09iamVjdC5hc3NpZ24oTS5wcm90b3R5cGUse2lzQnVmZmVyQXR0cmlidXRlOiEwLHNldEFycmF5OmZ1bmN0aW9uKGEpe2lmKEFycmF5LmlzQXJyYXkoYSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuXCIpO3RoaXMuY291bnQ9dm9pZCAwIT09YT9hLmxlbmd0aC90aGlzLml0ZW1TaXplOjA7dGhpcy5hcnJheT1hfSxzZXREeW5hbWljOmZ1bmN0aW9uKGEpe3RoaXMuZHluYW1pYz1hO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYXJyYXk9bmV3IGEuYXJyYXkuY29uc3RydWN0b3IoYS5hcnJheSk7dGhpcy5pdGVtU2l6ZT1hLml0ZW1TaXplO3RoaXMuY291bnQ9YS5jb3VudDt0aGlzLm5vcm1hbGl6ZWQ9YS5ub3JtYWxpemVkO1xuICAgIHRoaXMuZHluYW1pYz1hLmR5bmFtaWM7cmV0dXJuIHRoaXN9LGNvcHlBdDpmdW5jdGlvbihhLGIsYyl7YSo9dGhpcy5pdGVtU2l6ZTtjKj1iLml0ZW1TaXplO2Zvcih2YXIgZD0wLGU9dGhpcy5pdGVtU2l6ZTtkPGU7ZCsrKXRoaXMuYXJyYXlbYStkXT1iLmFycmF5W2MrZF07cmV0dXJuIHRoaXN9LGNvcHlBcnJheTpmdW5jdGlvbihhKXt0aGlzLmFycmF5LnNldChhKTtyZXR1cm4gdGhpc30sY29weUNvbG9yc0FycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmFycmF5LGM9MCxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZj1hW2RdO3ZvaWQgMD09PWYmJihjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KCk6IGNvbG9yIGlzIHVuZGVmaW5lZFwiLGQpLGY9bmV3IEgpO2JbYysrXT1mLnI7YltjKytdPWYuZztiW2MrK109Zi5ifXJldHVybiB0aGlzfSxjb3B5SW5kaWNlc0FycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmFycmF5LFxuICAgIGM9MCxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZj1hW2RdO2JbYysrXT1mLmE7YltjKytdPWYuYjtiW2MrK109Zi5jfXJldHVybiB0aGlzfSxjb3B5VmVjdG9yMnNBcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5hcnJheSxjPTAsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGY9YVtkXTt2b2lkIDA9PT1mJiYoY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Iyc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWRcIixkKSxmPW5ldyBEKTtiW2MrK109Zi54O2JbYysrXT1mLnl9cmV0dXJuIHRoaXN9LGNvcHlWZWN0b3Izc0FycmF5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmFycmF5LGM9MCxkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKXt2YXIgZj1hW2RdO3ZvaWQgMD09PWYmJihjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZFwiLGQpLGY9bmV3IHApO1xuICAgIGJbYysrXT1mLng7YltjKytdPWYueTtiW2MrK109Zi56fXJldHVybiB0aGlzfSxjb3B5VmVjdG9yNHNBcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5hcnJheSxjPTAsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGY9YVtkXTt2b2lkIDA9PT1mJiYoY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3I0c0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWRcIixkKSxmPW5ldyBhYSk7YltjKytdPWYueDtiW2MrK109Zi55O2JbYysrXT1mLno7YltjKytdPWYud31yZXR1cm4gdGhpc30sc2V0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy5hcnJheS5zZXQoYSxiKTtyZXR1cm4gdGhpc30sZ2V0WDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemVdfSxzZXRYOmZ1bmN0aW9uKGEsYil7dGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemVdPWI7cmV0dXJuIHRoaXN9LGdldFk6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXJyYXlbYSpcbiAgICB0aGlzLml0ZW1TaXplKzFdfSxzZXRZOmZ1bmN0aW9uKGEsYil7dGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemUrMV09YjtyZXR1cm4gdGhpc30sZ2V0WjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemUrMl19LHNldFo6ZnVuY3Rpb24oYSxiKXt0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZSsyXT1iO3JldHVybiB0aGlzfSxnZXRXOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZSszXX0sc2V0VzpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplKzNdPWI7cmV0dXJuIHRoaXN9LHNldFhZOmZ1bmN0aW9uKGEsYixjKXthKj10aGlzLml0ZW1TaXplO3RoaXMuYXJyYXlbYSswXT1iO3RoaXMuYXJyYXlbYSsxXT1jO3JldHVybiB0aGlzfSxzZXRYWVo6ZnVuY3Rpb24oYSxiLGMsZCl7YSo9dGhpcy5pdGVtU2l6ZTt0aGlzLmFycmF5W2ErMF09Yjt0aGlzLmFycmF5W2ErMV09Yzt0aGlzLmFycmF5W2ErMl09XG4gICAgZDtyZXR1cm4gdGhpc30sc2V0WFlaVzpmdW5jdGlvbihhLGIsYyxkLGUpe2EqPXRoaXMuaXRlbVNpemU7dGhpcy5hcnJheVthKzBdPWI7dGhpcy5hcnJheVthKzFdPWM7dGhpcy5hcnJheVthKzJdPWQ7dGhpcy5hcnJheVthKzNdPWU7cmV0dXJuIHRoaXN9LG9uVXBsb2FkOmZ1bmN0aW9uKGEpe3RoaXMub25VcGxvYWRDYWxsYmFjaz1hO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmFycmF5LHRoaXMuaXRlbVNpemUpKS5jb3B5KHRoaXMpfX0pO3VjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKE0ucHJvdG90eXBlKTt1Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9dWM7dmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTS5wcm90b3R5cGUpO3ZjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj12Yzt3Yy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSk7d2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPXdjO3hjLnByb3RvdHlwZT1cbiAgICBPYmplY3QuY3JlYXRlKE0ucHJvdG90eXBlKTt4Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9eGM7b2IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTS5wcm90b3R5cGUpO29iLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1vYjt5Yy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSk7eWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXljO3BiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKE0ucHJvdG90eXBlKTtwYi5wcm90b3R5cGUuY29uc3RydWN0b3I9cGI7Qi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSk7Qi5wcm90b3R5cGUuY29uc3RydWN0b3I9Qjt6Yy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSk7emMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXpjO09iamVjdC5hc3NpZ24oVmUucHJvdG90eXBlLHtjb21wdXRlR3JvdXBzOmZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9dm9pZCAwO2E9YS5mYWNlcztmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrKyl7dmFyIGU9XG4gICAgYVtkXTtpZihlLm1hdGVyaWFsSW5kZXghPT1jKXtjPWUubWF0ZXJpYWxJbmRleDt2b2lkIDAhPT1mJiYoZi5jb3VudD0zKmQtZi5zdGFydCxiLnB1c2goZikpO3ZhciBmPXtzdGFydDozKmQsbWF0ZXJpYWxJbmRleDpjfX19dm9pZCAwIT09ZiYmKGYuY291bnQ9MypkLWYuc3RhcnQsYi5wdXNoKGYpKTt0aGlzLmdyb3Vwcz1ifSxmcm9tR2VvbWV0cnk6ZnVuY3Rpb24oYSl7dmFyIGI9YS5mYWNlcyxjPWEudmVydGljZXMsZD1hLmZhY2VWZXJ0ZXhVdnMsZT1kWzBdJiYwPGRbMF0ubGVuZ3RoLGY9ZFsxXSYmMDxkWzFdLmxlbmd0aCxnPWEubW9ycGhUYXJnZXRzLGg9Zy5sZW5ndGg7aWYoMDxoKXt2YXIgaz1bXTtmb3IodmFyIG09MDttPGg7bSsrKWtbbV09W107dGhpcy5tb3JwaFRhcmdldHMucG9zaXRpb249a312YXIgbD1hLm1vcnBoTm9ybWFscyxuPWwubGVuZ3RoO2lmKDA8bil7dmFyIHA9W107Zm9yKG09MDttPG47bSsrKXBbbV09W107dGhpcy5tb3JwaFRhcmdldHMubm9ybWFsPXB9Zm9yKHZhciByPVxuICAgIGEuc2tpbkluZGljZXMsdD1hLnNraW5XZWlnaHRzLHY9ci5sZW5ndGg9PT1jLmxlbmd0aCx3PXQubGVuZ3RoPT09Yy5sZW5ndGgsbT0wO208Yi5sZW5ndGg7bSsrKXt2YXIgej1iW21dO3RoaXMudmVydGljZXMucHVzaChjW3ouYV0sY1t6LmJdLGNbei5jXSk7dmFyIHk9ei52ZXJ0ZXhOb3JtYWxzOzM9PT15Lmxlbmd0aD90aGlzLm5vcm1hbHMucHVzaCh5WzBdLHlbMV0seVsyXSk6KHk9ei5ub3JtYWwsdGhpcy5ub3JtYWxzLnB1c2goeSx5LHkpKTt5PXoudmVydGV4Q29sb3JzOzM9PT15Lmxlbmd0aD90aGlzLmNvbG9ycy5wdXNoKHlbMF0seVsxXSx5WzJdKTooeT16LmNvbG9yLHRoaXMuY29sb3JzLnB1c2goeSx5LHkpKTshMD09PWUmJih5PWRbMF1bbV0sdm9pZCAwIT09eT90aGlzLnV2cy5wdXNoKHlbMF0seVsxXSx5WzJdKTooY29uc29sZS53YXJuKFwiVEhSRUUuRGlyZWN0R2VvbWV0cnkuZnJvbUdlb21ldHJ5KCk6IFVuZGVmaW5lZCB2ZXJ0ZXhVdiBcIixtKSx0aGlzLnV2cy5wdXNoKG5ldyBELFxuICAgIG5ldyBELG5ldyBEKSkpOyEwPT09ZiYmKHk9ZFsxXVttXSx2b2lkIDAhPT15P3RoaXMudXZzMi5wdXNoKHlbMF0seVsxXSx5WzJdKTooY29uc29sZS53YXJuKFwiVEhSRUUuRGlyZWN0R2VvbWV0cnkuZnJvbUdlb21ldHJ5KCk6IFVuZGVmaW5lZCB2ZXJ0ZXhVdjIgXCIsbSksdGhpcy51dnMyLnB1c2gobmV3IEQsbmV3IEQsbmV3IEQpKSk7Zm9yKHk9MDt5PGg7eSsrKXt2YXIgeD1nW3ldLnZlcnRpY2VzO2tbeV0ucHVzaCh4W3ouYV0seFt6LmJdLHhbei5jXSl9Zm9yKHk9MDt5PG47eSsrKXg9bFt5XS52ZXJ0ZXhOb3JtYWxzW21dLHBbeV0ucHVzaCh4LmEseC5iLHguYyk7diYmdGhpcy5za2luSW5kaWNlcy5wdXNoKHJbei5hXSxyW3ouYl0sclt6LmNdKTt3JiZ0aGlzLnNraW5XZWlnaHRzLnB1c2godFt6LmFdLHRbei5iXSx0W3ouY10pfXRoaXMuY29tcHV0ZUdyb3VwcyhhKTt0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZT1hLnZlcnRpY2VzTmVlZFVwZGF0ZTt0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPVxuICAgIGEubm9ybWFsc05lZWRVcGRhdGU7dGhpcy5jb2xvcnNOZWVkVXBkYXRlPWEuY29sb3JzTmVlZFVwZGF0ZTt0aGlzLnV2c05lZWRVcGRhdGU9YS51dnNOZWVkVXBkYXRlO3RoaXMuZ3JvdXBzTmVlZFVwZGF0ZT1hLmdyb3Vwc05lZWRVcGRhdGU7cmV0dXJuIHRoaXN9fSk7dmFyIGVnPTE7RS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHphLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkUsaXNCdWZmZXJHZW9tZXRyeTohMCxnZXRJbmRleDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluZGV4fSxzZXRJbmRleDpmdW5jdGlvbihhKXtBcnJheS5pc0FycmF5KGEpP3RoaXMuaW5kZXg9bmV3ICg2NTUzNTxYZChhKT9wYjpvYikoYSwxKTp0aGlzLmluZGV4PWF9LGFkZEF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7aWYoYiYmYi5pc0J1ZmZlckF0dHJpYnV0ZXx8YiYmYi5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKWlmKFwiaW5kZXhcIj09PWEpY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnkuYWRkQXR0cmlidXRlOiBVc2UgLnNldEluZGV4KCkgZm9yIGluZGV4IGF0dHJpYnV0ZS5cIiksXG4gICAgdGhpcy5zZXRJbmRleChiKTtlbHNlIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYV09Yix0aGlzO2Vsc2UgY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRBdHRyaWJ1dGUoKSBub3cgZXhwZWN0cyAoIG5hbWUsIGF0dHJpYnV0ZSApLlwiKSx0aGlzLmFkZEF0dHJpYnV0ZShhLG5ldyBNKGIsYykpfSxnZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXR0cmlidXRlc1thXX0scmVtb3ZlQXR0cmlidXRlOmZ1bmN0aW9uKGEpe2RlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbYV07cmV0dXJuIHRoaXN9LGFkZEdyb3VwOmZ1bmN0aW9uKGEsYixjKXt0aGlzLmdyb3Vwcy5wdXNoKHtzdGFydDphLGNvdW50OmIsbWF0ZXJpYWxJbmRleDp2b2lkIDAhPT1jP2M6MH0pfSxjbGVhckdyb3VwczpmdW5jdGlvbigpe3RoaXMuZ3JvdXBzPVtdfSxzZXREcmF3UmFuZ2U6ZnVuY3Rpb24oYSxiKXt0aGlzLmRyYXdSYW5nZS5zdGFydD1hO3RoaXMuZHJhd1JhbmdlLmNvdW50PWJ9LFxuICAgIGFwcGx5TWF0cml4OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjt2b2lkIDAhPT1iJiYoYS5hcHBseVRvQnVmZmVyQXR0cmlidXRlKGIpLGIubmVlZHNVcGRhdGU9ITApO2I9dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDt2b2lkIDAhPT1iJiYoKG5ldyBtYSkuZ2V0Tm9ybWFsTWF0cml4KGEpLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoYiksYi5uZWVkc1VwZGF0ZT0hMCk7bnVsbCE9PXRoaXMuYm91bmRpbmdCb3gmJnRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7bnVsbCE9PXRoaXMuYm91bmRpbmdTcGhlcmUmJnRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7cmV0dXJuIHRoaXN9LHJvdGF0ZVg6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tYWtlUm90YXRpb25YKGIpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHJvdGF0ZVk6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tYWtlUm90YXRpb25ZKGIpO1xuICAgIHRoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHJvdGF0ZVo6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tYWtlUm90YXRpb25aKGIpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBPO3JldHVybiBmdW5jdGlvbihiLGMsZCl7YS5tYWtlVHJhbnNsYXRpb24oYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLHNjYWxlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXthLm1ha2VTY2FsZShiLGMsZCk7dGhpcy5hcHBseU1hdHJpeChhKTtyZXR1cm4gdGhpc319KCksbG9va0F0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHg7cmV0dXJuIGZ1bmN0aW9uKGIpe2EubG9va0F0KGIpO2EudXBkYXRlTWF0cml4KCk7dGhpcy5hcHBseU1hdHJpeChhLm1hdHJpeCl9fSgpLGNlbnRlcjpmdW5jdGlvbigpe3RoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG4gICAgdmFyIGE9dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoKS5uZWdhdGUoKTt0aGlzLnRyYW5zbGF0ZShhLngsYS55LGEueik7cmV0dXJuIGF9LHNldEZyb21PYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI9YS5nZW9tZXRyeTtpZihhLmlzUG9pbnRzfHxhLmlzTGluZSl7YT1uZXcgQigzKmIudmVydGljZXMubGVuZ3RoLDMpO3ZhciBjPW5ldyBCKDMqYi5jb2xvcnMubGVuZ3RoLDMpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixhLmNvcHlWZWN0b3Izc0FycmF5KGIudmVydGljZXMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcImNvbG9yXCIsYy5jb3B5Q29sb3JzQXJyYXkoYi5jb2xvcnMpKTtiLmxpbmVEaXN0YW5jZXMmJmIubGluZURpc3RhbmNlcy5sZW5ndGg9PT1iLnZlcnRpY2VzLmxlbmd0aCYmKGE9bmV3IEIoYi5saW5lRGlzdGFuY2VzLmxlbmd0aCwxKSx0aGlzLmFkZEF0dHJpYnV0ZShcImxpbmVEaXN0YW5jZVwiLGEuY29weUFycmF5KGIubGluZURpc3RhbmNlcykpKTtudWxsIT09Yi5ib3VuZGluZ1NwaGVyZSYmXG4gICAgKHRoaXMuYm91bmRpbmdTcGhlcmU9Yi5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpKTtudWxsIT09Yi5ib3VuZGluZ0JveCYmKHRoaXMuYm91bmRpbmdCb3g9Yi5ib3VuZGluZ0JveC5jbG9uZSgpKX1lbHNlIGEuaXNNZXNoJiZiJiZiLmlzR2VvbWV0cnkmJnRoaXMuZnJvbUdlb21ldHJ5KGIpO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT1hW2NdO2IucHVzaChlLngsZS55LGUuenx8MCl9dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGIsMykpO3JldHVybiB0aGlzfSx1cGRhdGVGcm9tT2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiPWEuZ2VvbWV0cnk7aWYoYS5pc01lc2gpe3ZhciBjPWIuX19kaXJlY3RHZW9tZXRyeTshMD09PWIuZWxlbWVudHNOZWVkVXBkYXRlJiYoYz12b2lkIDAsYi5lbGVtZW50c05lZWRVcGRhdGU9ITEpO2lmKHZvaWQgMD09PWMpcmV0dXJuIHRoaXMuZnJvbUdlb21ldHJ5KGIpO1xuICAgIGMudmVydGljZXNOZWVkVXBkYXRlPWIudmVydGljZXNOZWVkVXBkYXRlO2Mubm9ybWFsc05lZWRVcGRhdGU9Yi5ub3JtYWxzTmVlZFVwZGF0ZTtjLmNvbG9yc05lZWRVcGRhdGU9Yi5jb2xvcnNOZWVkVXBkYXRlO2MudXZzTmVlZFVwZGF0ZT1iLnV2c05lZWRVcGRhdGU7Yy5ncm91cHNOZWVkVXBkYXRlPWIuZ3JvdXBzTmVlZFVwZGF0ZTtiLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMTtiLm5vcm1hbHNOZWVkVXBkYXRlPSExO2IuY29sb3JzTmVlZFVwZGF0ZT0hMTtiLnV2c05lZWRVcGRhdGU9ITE7Yi5ncm91cHNOZWVkVXBkYXRlPSExO2I9Y30hMD09PWIudmVydGljZXNOZWVkVXBkYXRlJiYoYz10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24sdm9pZCAwIT09YyYmKGMuY29weVZlY3RvcjNzQXJyYXkoYi52ZXJ0aWNlcyksYy5uZWVkc1VwZGF0ZT0hMCksYi52ZXJ0aWNlc05lZWRVcGRhdGU9ITEpOyEwPT09Yi5ub3JtYWxzTmVlZFVwZGF0ZSYmKGM9dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbCx2b2lkIDAhPT1cbiAgICBjJiYoYy5jb3B5VmVjdG9yM3NBcnJheShiLm5vcm1hbHMpLGMubmVlZHNVcGRhdGU9ITApLGIubm9ybWFsc05lZWRVcGRhdGU9ITEpOyEwPT09Yi5jb2xvcnNOZWVkVXBkYXRlJiYoYz10aGlzLmF0dHJpYnV0ZXMuY29sb3Isdm9pZCAwIT09YyYmKGMuY29weUNvbG9yc0FycmF5KGIuY29sb3JzKSxjLm5lZWRzVXBkYXRlPSEwKSxiLmNvbG9yc05lZWRVcGRhdGU9ITEpO2IudXZzTmVlZFVwZGF0ZSYmKGM9dGhpcy5hdHRyaWJ1dGVzLnV2LHZvaWQgMCE9PWMmJihjLmNvcHlWZWN0b3Iyc0FycmF5KGIudXZzKSxjLm5lZWRzVXBkYXRlPSEwKSxiLnV2c05lZWRVcGRhdGU9ITEpO2IubGluZURpc3RhbmNlc05lZWRVcGRhdGUmJihjPXRoaXMuYXR0cmlidXRlcy5saW5lRGlzdGFuY2Usdm9pZCAwIT09YyYmKGMuY29weUFycmF5KGIubGluZURpc3RhbmNlcyksYy5uZWVkc1VwZGF0ZT0hMCksYi5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZT0hMSk7Yi5ncm91cHNOZWVkVXBkYXRlJiYoYi5jb21wdXRlR3JvdXBzKGEuZ2VvbWV0cnkpLFxuICAgIHRoaXMuZ3JvdXBzPWIuZ3JvdXBzLGIuZ3JvdXBzTmVlZFVwZGF0ZT0hMSk7cmV0dXJuIHRoaXN9LGZyb21HZW9tZXRyeTpmdW5jdGlvbihhKXthLl9fZGlyZWN0R2VvbWV0cnk9KG5ldyBWZSkuZnJvbUdlb21ldHJ5KGEpO3JldHVybiB0aGlzLmZyb21EaXJlY3RHZW9tZXRyeShhLl9fZGlyZWN0R2VvbWV0cnkpfSxmcm9tRGlyZWN0R2VvbWV0cnk6ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEZsb2F0MzJBcnJheSgzKmEudmVydGljZXMubGVuZ3RoKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsKG5ldyBNKGIsMykpLmNvcHlWZWN0b3Izc0FycmF5KGEudmVydGljZXMpKTswPGEubm9ybWFscy5sZW5ndGgmJihiPW5ldyBGbG9hdDMyQXJyYXkoMyphLm5vcm1hbHMubGVuZ3RoKSx0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLChuZXcgTShiLDMpKS5jb3B5VmVjdG9yM3NBcnJheShhLm5vcm1hbHMpKSk7MDxhLmNvbG9ycy5sZW5ndGgmJihiPW5ldyBGbG9hdDMyQXJyYXkoMyphLmNvbG9ycy5sZW5ndGgpLFxuICAgIHRoaXMuYWRkQXR0cmlidXRlKFwiY29sb3JcIiwobmV3IE0oYiwzKSkuY29weUNvbG9yc0FycmF5KGEuY29sb3JzKSkpOzA8YS51dnMubGVuZ3RoJiYoYj1uZXcgRmxvYXQzMkFycmF5KDIqYS51dnMubGVuZ3RoKSx0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsKG5ldyBNKGIsMikpLmNvcHlWZWN0b3Iyc0FycmF5KGEudXZzKSkpOzA8YS51dnMyLmxlbmd0aCYmKGI9bmV3IEZsb2F0MzJBcnJheSgyKmEudXZzMi5sZW5ndGgpLHRoaXMuYWRkQXR0cmlidXRlKFwidXYyXCIsKG5ldyBNKGIsMikpLmNvcHlWZWN0b3Iyc0FycmF5KGEudXZzMikpKTswPGEuaW5kaWNlcy5sZW5ndGgmJihiPW5ldyAoNjU1MzU8WGQoYS5pbmRpY2VzKT9VaW50MzJBcnJheTpVaW50MTZBcnJheSkoMyphLmluZGljZXMubGVuZ3RoKSx0aGlzLnNldEluZGV4KChuZXcgTShiLDEpKS5jb3B5SW5kaWNlc0FycmF5KGEuaW5kaWNlcykpKTt0aGlzLmdyb3Vwcz1hLmdyb3Vwcztmb3IodmFyIGMgaW4gYS5tb3JwaFRhcmdldHMpe2Zvcih2YXIgYj1cbiAgICBbXSxkPWEubW9ycGhUYXJnZXRzW2NdLGU9MCxmPWQubGVuZ3RoO2U8ZjtlKyspe3ZhciBnPWRbZV0saD1uZXcgQigzKmcubGVuZ3RoLDMpO2IucHVzaChoLmNvcHlWZWN0b3Izc0FycmF5KGcpKX10aGlzLm1vcnBoQXR0cmlidXRlc1tjXT1ifTA8YS5za2luSW5kaWNlcy5sZW5ndGgmJihjPW5ldyBCKDQqYS5za2luSW5kaWNlcy5sZW5ndGgsNCksdGhpcy5hZGRBdHRyaWJ1dGUoXCJza2luSW5kZXhcIixjLmNvcHlWZWN0b3I0c0FycmF5KGEuc2tpbkluZGljZXMpKSk7MDxhLnNraW5XZWlnaHRzLmxlbmd0aCYmKGM9bmV3IEIoNCphLnNraW5XZWlnaHRzLmxlbmd0aCw0KSx0aGlzLmFkZEF0dHJpYnV0ZShcInNraW5XZWlnaHRcIixjLmNvcHlWZWN0b3I0c0FycmF5KGEuc2tpbldlaWdodHMpKSk7bnVsbCE9PWEuYm91bmRpbmdTcGhlcmUmJih0aGlzLmJvdW5kaW5nU3BoZXJlPWEuYm91bmRpbmdTcGhlcmUuY2xvbmUoKSk7bnVsbCE9PWEuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PVxuICAgIGEuYm91bmRpbmdCb3guY2xvbmUoKSk7cmV0dXJuIHRoaXN9LGNvbXB1dGVCb3VuZGluZ0JveDpmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nQm94JiYodGhpcy5ib3VuZGluZ0JveD1uZXcgWGEpO3ZhciBhPXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjt2b2lkIDAhPT1hP3RoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShhKTp0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpOyhpc05hTih0aGlzLmJvdW5kaW5nQm94Lm1pbi54KXx8aXNOYU4odGhpcy5ib3VuZGluZ0JveC5taW4ueSl8fGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnopKSYmY29uc29sZS5lcnJvcignVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94OiBDb21wdXRlZCBtaW4vbWF4IGhhdmUgTmFOIHZhbHVlcy4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLHRoaXMpfSxjb21wdXRlQm91bmRpbmdTcGhlcmU6ZnVuY3Rpb24oKXt2YXIgYT1cbiAgICBuZXcgWGEsYj1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oKXtudWxsPT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmKHRoaXMuYm91bmRpbmdTcGhlcmU9bmV3IElhKTt2YXIgYz10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247aWYoYyl7dmFyIGQ9dGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7YS5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKGMpO2EuZ2V0Q2VudGVyKGQpO2Zvcih2YXIgZT0wLGY9MCxnPWMuY291bnQ7ZjxnO2YrKyliLng9Yy5nZXRYKGYpLGIueT1jLmdldFkoZiksYi56PWMuZ2V0WihmKSxlPU1hdGgubWF4KGUsZC5kaXN0YW5jZVRvU3F1YXJlZChiKSk7dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXM9TWF0aC5zcXJ0KGUpO2lzTmFOKHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzKSYmY29uc29sZS5lcnJvcignVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IENvbXB1dGVkIHJhZGl1cyBpcyBOYU4uIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJyxcbiAgICB0aGlzKX19fSgpLGNvbXB1dGVGYWNlTm9ybWFsczpmdW5jdGlvbigpe30sY29tcHV0ZVZlcnRleE5vcm1hbHM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmluZGV4LGI9dGhpcy5hdHRyaWJ1dGVzLGM9dGhpcy5ncm91cHM7aWYoYi5wb3NpdGlvbil7dmFyIGQ9Yi5wb3NpdGlvbi5hcnJheTtpZih2b2lkIDA9PT1iLm5vcm1hbCl0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBNKG5ldyBGbG9hdDMyQXJyYXkoZC5sZW5ndGgpLDMpKTtlbHNlIGZvcih2YXIgZT1iLm5vcm1hbC5hcnJheSxmPTAsZz1lLmxlbmd0aDtmPGc7ZisrKWVbZl09MDt2YXIgZT1iLm5vcm1hbC5hcnJheSxoPW5ldyBwLGs9bmV3IHAsbT1uZXcgcCxsPW5ldyBwLG49bmV3IHA7aWYoYSl7YT1hLmFycmF5OzA9PT1jLmxlbmd0aCYmdGhpcy5hZGRHcm91cCgwLGEubGVuZ3RoKTtmb3IodmFyIHU9MCxyPWMubGVuZ3RoO3U8cjsrK3Upe2Y9Y1t1XTtnPWYuc3RhcnQ7dmFyIHQ9Zi5jb3VudDtmPWc7Zm9yKGcrPXQ7ZjxcbiAgICBnO2YrPTMpe3Q9MyphW2YrMF07dmFyIHY9MyphW2YrMV07dmFyIHc9MyphW2YrMl07aC5mcm9tQXJyYXkoZCx0KTtrLmZyb21BcnJheShkLHYpO20uZnJvbUFycmF5KGQsdyk7bC5zdWJWZWN0b3JzKG0sayk7bi5zdWJWZWN0b3JzKGgsayk7bC5jcm9zcyhuKTtlW3RdKz1sLng7ZVt0KzFdKz1sLnk7ZVt0KzJdKz1sLno7ZVt2XSs9bC54O2VbdisxXSs9bC55O2VbdisyXSs9bC56O2Vbd10rPWwueDtlW3crMV0rPWwueTtlW3crMl0rPWwuen19fWVsc2UgZm9yKGY9MCxnPWQubGVuZ3RoO2Y8ZztmKz05KWguZnJvbUFycmF5KGQsZiksay5mcm9tQXJyYXkoZCxmKzMpLG0uZnJvbUFycmF5KGQsZis2KSxsLnN1YlZlY3RvcnMobSxrKSxuLnN1YlZlY3RvcnMoaCxrKSxsLmNyb3NzKG4pLGVbZl09bC54LGVbZisxXT1sLnksZVtmKzJdPWwueixlW2YrM109bC54LGVbZis0XT1sLnksZVtmKzVdPWwueixlW2YrNl09bC54LGVbZis3XT1sLnksZVtmKzhdPWwuejt0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcbiAgICBiLm5vcm1hbC5uZWVkc1VwZGF0ZT0hMH19LG1lcmdlOmZ1bmN0aW9uKGEsYil7aWYoYSYmYS5pc0J1ZmZlckdlb21ldHJ5KXt2b2lkIDA9PT1iJiYoYj0wKTt2YXIgYz10aGlzLmF0dHJpYnV0ZXMsZDtmb3IoZCBpbiBjKWlmKHZvaWQgMCE9PWEuYXR0cmlidXRlc1tkXSlmb3IodmFyIGU9Y1tkXS5hcnJheSxmPWEuYXR0cmlidXRlc1tkXSxnPWYuYXJyYXksaD0wLGY9Zi5pdGVtU2l6ZSpiO2g8Zy5sZW5ndGg7aCsrLGYrKyllW2ZdPWdbaF07cmV0dXJuIHRoaXN9Y29uc29sZS5lcnJvcihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS5cIixhKX0sbm9ybWFsaXplTm9ybWFsczpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgYj10aGlzLmF0dHJpYnV0ZXMubm9ybWFsLGM9MCxkPWIuY291bnQ7YzxkO2MrKylhLng9Yi5nZXRYKGMpLGEueT1iLmdldFkoYyksXG4gICAgYS56PWIuZ2V0WihjKSxhLm5vcm1hbGl6ZSgpLGIuc2V0WFlaKGMsYS54LGEueSxhLnopfX0oKSx0b05vbkluZGV4ZWQ6ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5pbmRleClyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuXCIpLHRoaXM7dmFyIGE9bmV3IEUsYj10aGlzLmluZGV4LmFycmF5LGM9dGhpcy5hdHRyaWJ1dGVzLGQ7Zm9yKGQgaW4gYyl7Zm9yKHZhciBlPWNbZF0sZj1lLmFycmF5LGU9ZS5pdGVtU2l6ZSxnPW5ldyBmLmNvbnN0cnVjdG9yKGIubGVuZ3RoKmUpLGgsaz0wLG09MCxsPWIubGVuZ3RoO208bDttKyspe2g9YlttXSplO2Zvcih2YXIgbj0wO248ZTtuKyspZ1trKytdPWZbaCsrXX1hLmFkZEF0dHJpYnV0ZShkLG5ldyBNKGcsZSkpfXJldHVybiBhfSx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT17bWV0YWRhdGE6e3ZlcnNpb246NC41LHR5cGU6XCJCdWZmZXJHZW9tZXRyeVwiLFxuICAgIGdlbmVyYXRvcjpcIkJ1ZmZlckdlb21ldHJ5LnRvSlNPTlwifX07YS51dWlkPXRoaXMudXVpZDthLnR5cGU9dGhpcy50eXBlO1wiXCIhPT10aGlzLm5hbWUmJihhLm5hbWU9dGhpcy5uYW1lKTtpZih2b2lkIDAhPT10aGlzLnBhcmFtZXRlcnMpe3ZhciBiPXRoaXMucGFyYW1ldGVycztmb3IodmFyIGMgaW4gYil2b2lkIDAhPT1iW2NdJiYoYVtjXT1iW2NdKTtyZXR1cm4gYX1hLmRhdGE9e2F0dHJpYnV0ZXM6e319O3ZhciBkPXRoaXMuaW5kZXg7bnVsbCE9PWQmJihiPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGQuYXJyYXkpLGEuZGF0YS5pbmRleD17dHlwZTpkLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsYXJyYXk6Yn0pO2Q9dGhpcy5hdHRyaWJ1dGVzO2ZvcihjIGluIGQpe3ZhciBlPWRbY107Yj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLmFycmF5KTthLmRhdGEuYXR0cmlidXRlc1tjXT17aXRlbVNpemU6ZS5pdGVtU2l6ZSx0eXBlOmUuYXJyYXkuY29uc3RydWN0b3IubmFtZSxcbiAgICBhcnJheTpiLG5vcm1hbGl6ZWQ6ZS5ub3JtYWxpemVkfX1jPXRoaXMuZ3JvdXBzOzA8Yy5sZW5ndGgmJihhLmRhdGEuZ3JvdXBzPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYykpKTtjPXRoaXMuYm91bmRpbmdTcGhlcmU7bnVsbCE9PWMmJihhLmRhdGEuYm91bmRpbmdTcGhlcmU9e2NlbnRlcjpjLmNlbnRlci50b0FycmF5KCkscmFkaXVzOmMucmFkaXVzfSk7cmV0dXJuIGF9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBFKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3ZhciBiO3RoaXMuaW5kZXg9bnVsbDt0aGlzLmF0dHJpYnV0ZXM9e307dGhpcy5tb3JwaEF0dHJpYnV0ZXM9e307dGhpcy5ncm91cHM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGw7dGhpcy5uYW1lPWEubmFtZTt2YXIgYz1hLmluZGV4O251bGwhPT1jJiZ0aGlzLnNldEluZGV4KGMuY2xvbmUoKSk7Yz1hLmF0dHJpYnV0ZXM7Zm9yKGcgaW4gYyl0aGlzLmFkZEF0dHJpYnV0ZShnLFxuICAgIGNbZ10uY2xvbmUoKSk7dmFyIGQ9YS5tb3JwaEF0dHJpYnV0ZXM7Zm9yKGcgaW4gZCl7dmFyIGU9W10sZj1kW2ddO2M9MDtmb3IoYj1mLmxlbmd0aDtjPGI7YysrKWUucHVzaChmW2NdLmNsb25lKCkpO3RoaXMubW9ycGhBdHRyaWJ1dGVzW2ddPWV9dmFyIGc9YS5ncm91cHM7Yz0wO2ZvcihiPWcubGVuZ3RoO2M8YjtjKyspZD1nW2NdLHRoaXMuYWRkR3JvdXAoZC5zdGFydCxkLmNvdW50LGQubWF0ZXJpYWxJbmRleCk7Zz1hLmJvdW5kaW5nQm94O251bGwhPT1nJiYodGhpcy5ib3VuZGluZ0JveD1nLmNsb25lKCkpO2c9YS5ib3VuZGluZ1NwaGVyZTtudWxsIT09ZyYmKHRoaXMuYm91bmRpbmdTcGhlcmU9Zy5jbG9uZSgpKTt0aGlzLmRyYXdSYW5nZS5zdGFydD1hLmRyYXdSYW5nZS5zdGFydDt0aGlzLmRyYXdSYW5nZS5jb3VudD1hLmRyYXdSYW5nZS5jb3VudDtyZXR1cm4gdGhpc30sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfX0pO1xuICAgIE1iLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtNYi5wcm90b3R5cGUuY29uc3RydWN0b3I9TWI7cWIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO3FiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1xYjtBYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7QWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPUFjO3JiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtyYi5wcm90b3R5cGUuY29uc3RydWN0b3I9cmI7QWEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoUC5wcm90b3R5cGUpO0FhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1BYTtBYS5wcm90b3R5cGUuaXNNZXNoQmFzaWNNYXRlcmlhbD0hMDtBYS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtQLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5tYXA9YS5tYXA7dGhpcy5saWdodE1hcD1hLmxpZ2h0TWFwO1xuICAgIHRoaXMubGlnaHRNYXBJbnRlbnNpdHk9YS5saWdodE1hcEludGVuc2l0eTt0aGlzLmFvTWFwPWEuYW9NYXA7dGhpcy5hb01hcEludGVuc2l0eT1hLmFvTWFwSW50ZW5zaXR5O3RoaXMuc3BlY3VsYXJNYXA9YS5zcGVjdWxhck1hcDt0aGlzLmFscGhhTWFwPWEuYWxwaGFNYXA7dGhpcy5lbnZNYXA9YS5lbnZNYXA7dGhpcy5jb21iaW5lPWEuY29tYmluZTt0aGlzLnJlZmxlY3Rpdml0eT1hLnJlZmxlY3Rpdml0eTt0aGlzLnJlZnJhY3Rpb25SYXRpbz1hLnJlZnJhY3Rpb25SYXRpbzt0aGlzLndpcmVmcmFtZT1hLndpcmVmcmFtZTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aDt0aGlzLndpcmVmcmFtZUxpbmVjYXA9YS53aXJlZnJhbWVMaW5lY2FwO3RoaXMud2lyZWZyYW1lTGluZWpvaW49YS53aXJlZnJhbWVMaW5lam9pbjt0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9YS5tb3JwaFRhcmdldHM7cmV0dXJuIHRoaXN9O0ZhLnByb3RvdHlwZT1cbiAgICBPYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtGYS5wcm90b3R5cGUuY29uc3RydWN0b3I9RmE7RmEucHJvdG90eXBlLmlzU2hhZGVyTWF0ZXJpYWw9ITA7RmEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5mcmFnbWVudFNoYWRlcj1hLmZyYWdtZW50U2hhZGVyO3RoaXMudmVydGV4U2hhZGVyPWEudmVydGV4U2hhZGVyO3RoaXMudW5pZm9ybXM9R2EuY2xvbmUoYS51bmlmb3Jtcyk7dGhpcy5kZWZpbmVzPWEuZGVmaW5lczt0aGlzLndpcmVmcmFtZT1hLndpcmVmcmFtZTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aDt0aGlzLmxpZ2h0cz1hLmxpZ2h0czt0aGlzLmNsaXBwaW5nPWEuY2xpcHBpbmc7dGhpcy5za2lubmluZz1hLnNraW5uaW5nO3RoaXMubW9ycGhUYXJnZXRzPWEubW9ycGhUYXJnZXRzO3RoaXMubW9ycGhOb3JtYWxzPWEubW9ycGhOb3JtYWxzO3RoaXMuZXh0ZW5zaW9ucz1cbiAgICBhLmV4dGVuc2lvbnM7cmV0dXJuIHRoaXN9O0ZhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7YT1QLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO2EudW5pZm9ybXM9dGhpcy51bmlmb3JtczthLnZlcnRleFNoYWRlcj10aGlzLnZlcnRleFNoYWRlcjthLmZyYWdtZW50U2hhZGVyPXRoaXMuZnJhZ21lbnRTaGFkZXI7cmV0dXJuIGF9O09iamVjdC5hc3NpZ24oc2IucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm9yaWdpbi5jb3B5KGEpO3RoaXMuZGlyZWN0aW9uLmNvcHkoYik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMub3JpZ2luLmNvcHkoYS5vcmlnaW4pO3RoaXMuZGlyZWN0aW9uLmNvcHkoYS5kaXJlY3Rpb24pO3JldHVybiB0aGlzfSxhdDpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgcCkuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMub3JpZ2luKX0sXG4gICAgbG9va0F0OmZ1bmN0aW9uKGEpe3RoaXMuZGlyZWN0aW9uLmNvcHkoYSkuc3ViKHRoaXMub3JpZ2luKS5ub3JtYWxpemUoKTtyZXR1cm4gdGhpc30scmVjYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe3RoaXMub3JpZ2luLmNvcHkodGhpcy5hdChiLGEpKTtyZXR1cm4gdGhpc319KCksY2xvc2VzdFBvaW50VG9Qb2ludDpmdW5jdGlvbihhLGIpe2I9Ynx8bmV3IHA7Yi5zdWJWZWN0b3JzKGEsdGhpcy5vcmlnaW4pO2E9Yi5kb3QodGhpcy5kaXJlY3Rpb24pO3JldHVybiAwPmE/Yi5jb3B5KHRoaXMub3JpZ2luKTpiLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGEpLmFkZCh0aGlzLm9yaWdpbil9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoYSkpfSxkaXN0YW5jZVNxVG9Qb2ludDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1cbiAgICBhLnN1YlZlY3RvcnMoYix0aGlzLm9yaWdpbikuZG90KHRoaXMuZGlyZWN0aW9uKTtpZigwPmMpcmV0dXJuIHRoaXMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKGIpO2EuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoYykuYWRkKHRoaXMub3JpZ2luKTtyZXR1cm4gYS5kaXN0YW5jZVRvU3F1YXJlZChiKX19KCksZGlzdGFuY2VTcVRvU2VnbWVudDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IHAsYz1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oZCxlLGYsZyl7YS5jb3B5KGQpLmFkZChlKS5tdWx0aXBseVNjYWxhciguNSk7Yi5jb3B5KGUpLnN1YihkKS5ub3JtYWxpemUoKTtjLmNvcHkodGhpcy5vcmlnaW4pLnN1YihhKTt2YXIgaD0uNSpkLmRpc3RhbmNlVG8oZSksaz0tdGhpcy5kaXJlY3Rpb24uZG90KGIpLG09Yy5kb3QodGhpcy5kaXJlY3Rpb24pLGw9LWMuZG90KGIpLG49Yy5sZW5ndGhTcSgpLHA9TWF0aC5hYnMoMS1rKmspO2lmKDA8cCl7ZD1rKmwtbTtlPWsqXG4gICAgbS1sO3ZhciByPWgqcDswPD1kP2U+PS1yP2U8PXI/KGg9MS9wLGQqPWgsZSo9aCxrPWQqKGQrayplKzIqbSkrZSooaypkK2UrMipsKStuKTooZT1oLGQ9TWF0aC5tYXgoMCwtKGsqZSttKSksaz0tZCpkK2UqKGUrMipsKStuKTooZT0taCxkPU1hdGgubWF4KDAsLShrKmUrbSkpLGs9LWQqZCtlKihlKzIqbCkrbik6ZTw9LXI/KGQ9TWF0aC5tYXgoMCwtKC1rKmgrbSkpLGU9MDxkPy1oOk1hdGgubWluKE1hdGgubWF4KC1oLC1sKSxoKSxrPS1kKmQrZSooZSsyKmwpK24pOmU8PXI/KGQ9MCxlPU1hdGgubWluKE1hdGgubWF4KC1oLC1sKSxoKSxrPWUqKGUrMipsKStuKTooZD1NYXRoLm1heCgwLC0oaypoK20pKSxlPTA8ZD9oOk1hdGgubWluKE1hdGgubWF4KC1oLC1sKSxoKSxrPS1kKmQrZSooZSsyKmwpK24pfWVsc2UgZT0wPGs/LWg6aCxkPU1hdGgubWF4KDAsLShrKmUrbSkpLGs9LWQqZCtlKihlKzIqbCkrbjtmJiZmLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGQpLmFkZCh0aGlzLm9yaWdpbik7XG4gICAgZyYmZy5jb3B5KGIpLm11bHRpcGx5U2NhbGFyKGUpLmFkZChhKTtyZXR1cm4ga319KCksaW50ZXJzZWN0U3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5zdWJWZWN0b3JzKGIuY2VudGVyLHRoaXMub3JpZ2luKTt2YXIgZD1hLmRvdCh0aGlzLmRpcmVjdGlvbiksZT1hLmRvdChhKS1kKmQ7Yj1iLnJhZGl1cypiLnJhZGl1cztpZihlPmIpcmV0dXJuIG51bGw7Yj1NYXRoLnNxcnQoYi1lKTtlPWQtYjtkKz1iO3JldHVybiAwPmUmJjA+ZD9udWxsOjA+ZT90aGlzLmF0KGQsYyk6dGhpcy5hdChlLGMpfX0oKSxpbnRlcnNlY3RzU3BoZXJlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludChhLmNlbnRlcik8PWEucmFkaXVzfSxkaXN0YW5jZVRvUGxhbmU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub3JtYWwuZG90KHRoaXMuZGlyZWN0aW9uKTtpZigwPT09YilyZXR1cm4gMD09PWEuZGlzdGFuY2VUb1BvaW50KHRoaXMub3JpZ2luKT9cbiAgICAwOm51bGw7YT0tKHRoaXMub3JpZ2luLmRvdChhLm5vcm1hbCkrYS5jb25zdGFudCkvYjtyZXR1cm4gMDw9YT9hOm51bGx9LGludGVyc2VjdFBsYW5lOmZ1bmN0aW9uKGEsYil7YT10aGlzLmRpc3RhbmNlVG9QbGFuZShhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDp0aGlzLmF0KGEsYil9LGludGVyc2VjdHNQbGFuZTpmdW5jdGlvbihhKXt2YXIgYj1hLmRpc3RhbmNlVG9Qb2ludCh0aGlzLm9yaWdpbik7cmV0dXJuIDA9PT1ifHwwPmEubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbikqYj8hMDohMX0saW50ZXJzZWN0Qm94OmZ1bmN0aW9uKGEsYil7dmFyIGM9MS90aGlzLmRpcmVjdGlvbi54O3ZhciBkPTEvdGhpcy5kaXJlY3Rpb24ueTt2YXIgZT0xL3RoaXMuZGlyZWN0aW9uLnosZj10aGlzLm9yaWdpbjtpZigwPD1jKXt2YXIgZz0oYS5taW4ueC1mLngpKmM7Yyo9YS5tYXgueC1mLnh9ZWxzZSBnPShhLm1heC54LWYueCkqYyxjKj1hLm1pbi54LWYueDtpZigwPD1kKXt2YXIgaD0oYS5taW4ueS1cbiAgICBmLnkpKmQ7ZCo9YS5tYXgueS1mLnl9ZWxzZSBoPShhLm1heC55LWYueSkqZCxkKj1hLm1pbi55LWYueTtpZihnPmR8fGg+YylyZXR1cm4gbnVsbDtpZihoPmd8fGchPT1nKWc9aDtpZihkPGN8fGMhPT1jKWM9ZDswPD1lPyhoPShhLm1pbi56LWYueikqZSxhPShhLm1heC56LWYueikqZSk6KGg9KGEubWF4LnotZi56KSplLGE9KGEubWluLnotZi56KSplKTtpZihnPmF8fGg+YylyZXR1cm4gbnVsbDtpZihoPmd8fGchPT1nKWc9aDtpZihhPGN8fGMhPT1jKWM9YTtyZXR1cm4gMD5jP251bGw6dGhpcy5hdCgwPD1nP2c6YyxiKX0saW50ZXJzZWN0c0JveDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gbnVsbCE9PXRoaXMuaW50ZXJzZWN0Qm94KGIsYSl9fSgpLGludGVyc2VjdFRyaWFuZ2xlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBwLGQ9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGUsZixnLGgsayl7Yi5zdWJWZWN0b3JzKGYsXG4gICAgZSk7Yy5zdWJWZWN0b3JzKGcsZSk7ZC5jcm9zc1ZlY3RvcnMoYixjKTtmPXRoaXMuZGlyZWN0aW9uLmRvdChkKTtpZigwPGYpe2lmKGgpcmV0dXJuIG51bGw7aD0xfWVsc2UgaWYoMD5mKWg9LTEsZj0tZjtlbHNlIHJldHVybiBudWxsO2Euc3ViVmVjdG9ycyh0aGlzLm9yaWdpbixlKTtlPWgqdGhpcy5kaXJlY3Rpb24uZG90KGMuY3Jvc3NWZWN0b3JzKGEsYykpO2lmKDA+ZSlyZXR1cm4gbnVsbDtnPWgqdGhpcy5kaXJlY3Rpb24uZG90KGIuY3Jvc3MoYSkpO2lmKDA+Z3x8ZStnPmYpcmV0dXJuIG51bGw7ZT0taCphLmRvdChkKTtyZXR1cm4gMD5lP251bGw6dGhpcy5hdChlL2Ysayl9fSgpLGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQoYSk7dGhpcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEub3JpZ2luLmVxdWFscyh0aGlzLm9yaWdpbikmJmEuZGlyZWN0aW9uLmVxdWFscyh0aGlzLmRpcmVjdGlvbil9fSk7XG4gICAgT2JqZWN0LmFzc2lnbihOYi5wcm90b3R5cGUse3NldDpmdW5jdGlvbihhLGIpe3RoaXMuc3RhcnQuY29weShhKTt0aGlzLmVuZC5jb3B5KGIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLnN0YXJ0LmNvcHkoYS5zdGFydCk7dGhpcy5lbmQuY29weShhLmVuZCk7cmV0dXJuIHRoaXN9LGdldENlbnRlcjpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IHApLmFkZFZlY3RvcnModGhpcy5zdGFydCx0aGlzLmVuZCkubXVsdGlwbHlTY2FsYXIoLjUpfSxkZWx0YTpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IHApLnN1YlZlY3RvcnModGhpcy5lbmQsdGhpcy5zdGFydCl9LGRpc3RhbmNlU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmVuZCl9LGRpc3RhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyh0aGlzLmVuZCl9LFxuICAgIGF0OmZ1bmN0aW9uKGEsYil7Yj1ifHxuZXcgcDtyZXR1cm4gdGhpcy5kZWx0YShiKS5tdWx0aXBseVNjYWxhcihhKS5hZGQodGhpcy5zdGFydCl9LGNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXI6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwO3JldHVybiBmdW5jdGlvbihjLGQpe2Euc3ViVmVjdG9ycyhjLHRoaXMuc3RhcnQpO2Iuc3ViVmVjdG9ycyh0aGlzLmVuZCx0aGlzLnN0YXJ0KTtjPWIuZG90KGIpO2M9Yi5kb3QoYSkvYztkJiYoYz1RLmNsYW1wKGMsMCwxKSk7cmV0dXJuIGN9fSgpLGNsb3Nlc3RQb2ludFRvUG9pbnQ6ZnVuY3Rpb24oYSxiLGMpe2E9dGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKGEsYik7Yz1jfHxuZXcgcDtyZXR1cm4gdGhpcy5kZWx0YShjKS5tdWx0aXBseVNjYWxhcihhKS5hZGQodGhpcy5zdGFydCl9LGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NChhKTt0aGlzLmVuZC5hcHBseU1hdHJpeDQoYSk7XG4gICAgcmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5zdGFydC5lcXVhbHModGhpcy5zdGFydCkmJmEuZW5kLmVxdWFscyh0aGlzLmVuZCl9fSk7T2JqZWN0LmFzc2lnbihaYSx7bm9ybWFsOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkLGUpe2U9ZXx8bmV3IHA7ZS5zdWJWZWN0b3JzKGQsYyk7YS5zdWJWZWN0b3JzKGIsYyk7ZS5jcm9zcyhhKTtiPWUubGVuZ3RoU3EoKTtyZXR1cm4gMDxiP2UubXVsdGlwbHlTY2FsYXIoMS9NYXRoLnNxcnQoYikpOmUuc2V0KDAsMCwwKX19KCksYmFyeWNvb3JkRnJvbVBvaW50OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBwO3JldHVybiBmdW5jdGlvbihkLGUsZixnLGgpe2Euc3ViVmVjdG9ycyhnLGUpO2Iuc3ViVmVjdG9ycyhmLGUpO2Muc3ViVmVjdG9ycyhkLGUpO2Q9YS5kb3QoYSk7ZT1hLmRvdChiKTtmPWEuZG90KGMpO3ZhciBrPWIuZG90KGIpO2c9Yi5kb3QoYyk7dmFyIG09XG4gICAgZCprLWUqZTtoPWh8fG5ldyBwO2lmKDA9PT1tKXJldHVybiBoLnNldCgtMiwtMSwtMSk7bT0xL207az0oaypmLWUqZykqbTtkPShkKmctZSpmKSptO3JldHVybiBoLnNldCgxLWstZCxkLGspfX0oKSxjb250YWluc1BvaW50OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkLGUpe2I9WmEuYmFyeWNvb3JkRnJvbVBvaW50KGIsYyxkLGUsYSk7cmV0dXJuIDA8PWIueCYmMDw9Yi55JiYxPj1iLngrYi55fX0oKX0pO09iamVjdC5hc3NpZ24oWmEucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RoaXMuYS5jb3B5KGEpO3RoaXMuYi5jb3B5KGIpO3RoaXMuYy5jb3B5KGMpO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzQW5kSW5kaWNlczpmdW5jdGlvbihhLGIsYyxkKXt0aGlzLmEuY29weShhW2JdKTt0aGlzLmIuY29weShhW2NdKTt0aGlzLmMuY29weShhW2RdKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LFxuICAgIGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5hLmNvcHkoYS5hKTt0aGlzLmIuY29weShhLmIpO3RoaXMuYy5jb3B5KGEuYyk7cmV0dXJuIHRoaXN9LGFyZWE6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwO3JldHVybiBmdW5jdGlvbigpe2Euc3ViVmVjdG9ycyh0aGlzLmMsdGhpcy5iKTtiLnN1YlZlY3RvcnModGhpcy5hLHRoaXMuYik7cmV0dXJuLjUqYS5jcm9zcyhiKS5sZW5ndGgoKX19KCksbWlkcG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBwKS5hZGRWZWN0b3JzKHRoaXMuYSx0aGlzLmIpLmFkZCh0aGlzLmMpLm11bHRpcGx5U2NhbGFyKDEvMyl9LG5vcm1hbDpmdW5jdGlvbihhKXtyZXR1cm4gWmEubm9ybWFsKHRoaXMuYSx0aGlzLmIsdGhpcy5jLGEpfSxwbGFuZTpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IEVhKS5zZXRGcm9tQ29wbGFuYXJQb2ludHModGhpcy5hLHRoaXMuYix0aGlzLmMpfSxiYXJ5Y29vcmRGcm9tUG9pbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWmEuYmFyeWNvb3JkRnJvbVBvaW50KGEsXG4gICAgdGhpcy5hLHRoaXMuYix0aGlzLmMsYil9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFphLmNvbnRhaW5zUG9pbnQoYSx0aGlzLmEsdGhpcy5iLHRoaXMuYyl9LGNsb3Nlc3RQb2ludFRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgRWEsYj1bbmV3IE5iLG5ldyBOYixuZXcgTmJdLGM9bmV3IHAsZD1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oZSxmKXtmPWZ8fG5ldyBwO3ZhciBnPUluZmluaXR5O2Euc2V0RnJvbUNvcGxhbmFyUG9pbnRzKHRoaXMuYSx0aGlzLmIsdGhpcy5jKTthLnByb2plY3RQb2ludChlLGMpO2lmKCEwPT09dGhpcy5jb250YWluc1BvaW50KGMpKWYuY29weShjKTtlbHNlIGZvcihiWzBdLnNldCh0aGlzLmEsdGhpcy5iKSxiWzFdLnNldCh0aGlzLmIsdGhpcy5jKSxiWzJdLnNldCh0aGlzLmMsdGhpcy5hKSxlPTA7ZTxiLmxlbmd0aDtlKyspe2JbZV0uY2xvc2VzdFBvaW50VG9Qb2ludChjLCEwLGQpO3ZhciBoPWMuZGlzdGFuY2VUb1NxdWFyZWQoZCk7XG4gICAgaDxnJiYoZz1oLGYuY29weShkKSl9cmV0dXJuIGZ9fSgpLGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5hLmVxdWFscyh0aGlzLmEpJiZhLmIuZXF1YWxzKHRoaXMuYikmJmEuYy5lcXVhbHModGhpcy5jKX19KTtyYS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6cmEsaXNNZXNoOiEwLHNldERyYXdNb2RlOmZ1bmN0aW9uKGEpe3RoaXMuZHJhd01vZGU9YX0sY29weTpmdW5jdGlvbihhKXt4LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmRyYXdNb2RlPWEuZHJhd01vZGU7dm9pZCAwIT09YS5tb3JwaFRhcmdldEluZmx1ZW5jZXMmJih0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcz1hLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpKTt2b2lkIDAhPT1hLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSYmKHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5PU9iamVjdC5hc3NpZ24oe30sYS5tb3JwaFRhcmdldERpY3Rpb25hcnkpKTtcbiAgICByZXR1cm4gdGhpc30sdXBkYXRlTW9ycGhUYXJnZXRzOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5nZW9tZXRyeTtpZihhLmlzQnVmZmVyR2VvbWV0cnkpe2E9YS5tb3JwaEF0dHJpYnV0ZXM7dmFyIGI9T2JqZWN0LmtleXMoYSk7aWYoMDxiLmxlbmd0aCl7dmFyIGM9YVtiWzBdXTtpZih2b2lkIDAhPT1jKWZvcih0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcz1bXSx0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeT17fSxhPTAsYj1jLmxlbmd0aDthPGI7YSsrKXt2YXIgZD1jW2FdLm5hbWV8fFN0cmluZyhhKTt0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKDApO3RoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5W2RdPWF9fX1lbHNlIGlmKGM9YS5tb3JwaFRhcmdldHMsdm9pZCAwIT09YyYmMDxjLmxlbmd0aClmb3IodGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXM9W10sdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnk9e30sYT0wLGI9Yy5sZW5ndGg7YTxiO2ErKylkPWNbYV0ubmFtZXx8XG4gICAgU3RyaW5nKGEpLHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goMCksdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbZF09YX0scmF5Y2FzdDpmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxiLGMsZCxlLGYsZyl7WmEuYmFyeWNvb3JkRnJvbVBvaW50KGEsYixjLGQsdik7ZS5tdWx0aXBseVNjYWxhcih2LngpO2YubXVsdGlwbHlTY2FsYXIodi55KTtnLm11bHRpcGx5U2NhbGFyKHYueik7ZS5hZGQoZikuYWRkKGcpO3JldHVybiBlLmNsb25lKCl9ZnVuY3Rpb24gYihhLGIsYyxkLGUsZixnLGgpe2lmKG51bGw9PT0oMT09PWIuc2lkZT9kLmludGVyc2VjdFRyaWFuZ2xlKGcsZixlLCEwLGgpOmQuaW50ZXJzZWN0VHJpYW5nbGUoZSxmLGcsMiE9PWIuc2lkZSxoKSkpcmV0dXJuIG51bGw7ei5jb3B5KGgpO3ouYXBwbHlNYXRyaXg0KGEubWF0cml4V29ybGQpO2I9Yy5yYXkub3JpZ2luLmRpc3RhbmNlVG8oeik7cmV0dXJuIGI8Yy5uZWFyfHxiPmMuZmFyP251bGw6e2Rpc3RhbmNlOmIsXG4gICAgcG9pbnQ6ei5jbG9uZSgpLG9iamVjdDphfX1mdW5jdGlvbiBjKGMsZCxlLGYsbSxsLHEsbil7Zy5mcm9tQnVmZmVyQXR0cmlidXRlKGYsbCk7aC5mcm9tQnVmZmVyQXR0cmlidXRlKGYscSk7ay5mcm9tQnVmZmVyQXR0cmlidXRlKGYsbik7aWYoYz1iKGMsYy5tYXRlcmlhbCxkLGUsZyxoLGssdykpbSYmKHUuZnJvbUJ1ZmZlckF0dHJpYnV0ZShtLGwpLHIuZnJvbUJ1ZmZlckF0dHJpYnV0ZShtLHEpLHQuZnJvbUJ1ZmZlckF0dHJpYnV0ZShtLG4pLGMudXY9YSh3LGcsaCxrLHUscix0KSksYy5mYWNlPW5ldyBZYShsLHEsbixaYS5ub3JtYWwoZyxoLGspKSxjLmZhY2VJbmRleD1sO3JldHVybiBjfXZhciBkPW5ldyBPLGU9bmV3IHNiLGY9bmV3IElhLGc9bmV3IHAsaD1uZXcgcCxrPW5ldyBwLG09bmV3IHAsbD1uZXcgcCxuPW5ldyBwLHU9bmV3IEQscj1uZXcgRCx0PW5ldyBELHY9bmV3IHAsdz1uZXcgcCx6PW5ldyBwO3JldHVybiBmdW5jdGlvbihxLHApe3ZhciB2PXRoaXMuZ2VvbWV0cnksXG4gICAgej10aGlzLm1hdGVyaWFsLHk9dGhpcy5tYXRyaXhXb3JsZDtpZih2b2lkIDAhPT16JiYobnVsbD09PXYuYm91bmRpbmdTcGhlcmUmJnYuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCksZi5jb3B5KHYuYm91bmRpbmdTcGhlcmUpLGYuYXBwbHlNYXRyaXg0KHkpLCExIT09cS5yYXkuaW50ZXJzZWN0c1NwaGVyZShmKSYmKGQuZ2V0SW52ZXJzZSh5KSxlLmNvcHkocS5yYXkpLmFwcGx5TWF0cml4NChkKSxudWxsPT09di5ib3VuZGluZ0JveHx8ITEhPT1lLmludGVyc2VjdHNCb3godi5ib3VuZGluZ0JveCkpKSl7dmFyIHg7aWYodi5pc0J1ZmZlckdlb21ldHJ5KXt2YXIgej12LmluZGV4LEI9di5hdHRyaWJ1dGVzLnBvc2l0aW9uLHk9di5hdHRyaWJ1dGVzLnV2LEQ7aWYobnVsbCE9PXope3ZhciBDPTA7Zm9yKEQ9ei5jb3VudDtDPEQ7Qys9Myl7dj16LmdldFgoQyk7dmFyIEk9ei5nZXRYKEMrMSk7dmFyIEU9ei5nZXRYKEMrMik7aWYoeD1jKHRoaXMscSxlLEIseSx2LEksRSkpeC5mYWNlSW5kZXg9XG4gICAgTWF0aC5mbG9vcihDLzMpLHAucHVzaCh4KX19ZWxzZSBpZih2b2lkIDAhPT1CKWZvcihDPTAsRD1CLmNvdW50O0M8RDtDKz0zKWlmKHY9QyxJPUMrMSxFPUMrMix4PWModGhpcyxxLGUsQix5LHYsSSxFKSl4LmluZGV4PXYscC5wdXNoKHgpfWVsc2UgaWYodi5pc0dlb21ldHJ5KXt2YXIgeT1BcnJheS5pc0FycmF5KHopO0M9di52ZXJ0aWNlcztEPXYuZmFjZXM7ST12LmZhY2VWZXJ0ZXhVdnNbMF07MDxJLmxlbmd0aCYmKEI9SSk7Zm9yKHZhciBIPTAsSz1ELmxlbmd0aDtIPEs7SCsrKXt2YXIgTj1EW0hdO3g9eT96W04ubWF0ZXJpYWxJbmRleF06ejtpZih2b2lkIDAhPT14KXtJPUNbTi5hXTtFPUNbTi5iXTt2YXIgTD1DW04uY107aWYoITA9PT14Lm1vcnBoVGFyZ2V0cyl7dmFyIE09di5tb3JwaFRhcmdldHMsTz10aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztnLnNldCgwLDAsMCk7aC5zZXQoMCwwLDApO2suc2V0KDAsMCwwKTtmb3IodmFyIFA9MCxRPU0ubGVuZ3RoO1A8UTtQKyspe3ZhciBSPVxuICAgIE9bUF07aWYoMCE9PVIpe3ZhciBVPU1bUF0udmVydGljZXM7Zy5hZGRTY2FsZWRWZWN0b3IobS5zdWJWZWN0b3JzKFVbTi5hXSxJKSxSKTtoLmFkZFNjYWxlZFZlY3RvcihsLnN1YlZlY3RvcnMoVVtOLmJdLEUpLFIpO2suYWRkU2NhbGVkVmVjdG9yKG4uc3ViVmVjdG9ycyhVW04uY10sTCksUil9fWcuYWRkKEkpO2guYWRkKEUpO2suYWRkKEwpO0k9ZztFPWg7TD1rfWlmKHg9Yih0aGlzLHgscSxlLEksRSxMLHcpKUImJkJbSF0mJihNPUJbSF0sdS5jb3B5KE1bMF0pLHIuY29weShNWzFdKSx0LmNvcHkoTVsyXSkseC51dj1hKHcsSSxFLEwsdSxyLHQpKSx4LmZhY2U9Tix4LmZhY2VJbmRleD1ILHAucHVzaCh4KX19fX19fSgpLGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuZ2VvbWV0cnksdGhpcy5tYXRlcmlhbCkpLmNvcHkodGhpcyl9fSk7dmFyIHlnPTA7YmEucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShUYS5wcm90b3R5cGUpLFxuICAgIHtjb25zdHJ1Y3RvcjpiYSxpc1BlcnNwZWN0aXZlQ2FtZXJhOiEwLGNvcHk6ZnVuY3Rpb24oYSxiKXtUYS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSxiKTt0aGlzLmZvdj1hLmZvdjt0aGlzLnpvb209YS56b29tO3RoaXMubmVhcj1hLm5lYXI7dGhpcy5mYXI9YS5mYXI7dGhpcy5mb2N1cz1hLmZvY3VzO3RoaXMuYXNwZWN0PWEuYXNwZWN0O3RoaXMudmlldz1udWxsPT09YS52aWV3P251bGw6T2JqZWN0LmFzc2lnbih7fSxhLnZpZXcpO3RoaXMuZmlsbUdhdWdlPWEuZmlsbUdhdWdlO3RoaXMuZmlsbU9mZnNldD1hLmZpbG1PZmZzZXQ7cmV0dXJuIHRoaXN9LHNldEZvY2FsTGVuZ3RoOmZ1bmN0aW9uKGEpe2E9LjUqdGhpcy5nZXRGaWxtSGVpZ2h0KCkvYTt0aGlzLmZvdj0yKlEuUkFEMkRFRypNYXRoLmF0YW4oYSk7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9LGdldEZvY2FsTGVuZ3RoOmZ1bmN0aW9uKCl7dmFyIGE9TWF0aC50YW4oLjUqUS5ERUcyUkFEKnRoaXMuZm92KTtcbiAgICByZXR1cm4uNSp0aGlzLmdldEZpbG1IZWlnaHQoKS9hfSxnZXRFZmZlY3RpdmVGT1Y6ZnVuY3Rpb24oKXtyZXR1cm4gMipRLlJBRDJERUcqTWF0aC5hdGFuKE1hdGgudGFuKC41KlEuREVHMlJBRCp0aGlzLmZvdikvdGhpcy56b29tKX0sZ2V0RmlsbVdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmlsbUdhdWdlKk1hdGgubWluKHRoaXMuYXNwZWN0LDEpfSxnZXRGaWxtSGVpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmlsbUdhdWdlL01hdGgubWF4KHRoaXMuYXNwZWN0LDEpfSxzZXRWaWV3T2Zmc2V0OmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmFzcGVjdD1hL2I7bnVsbD09PXRoaXMudmlldyYmKHRoaXMudmlldz17ZW5hYmxlZDohMCxmdWxsV2lkdGg6MSxmdWxsSGVpZ2h0OjEsb2Zmc2V0WDowLG9mZnNldFk6MCx3aWR0aDoxLGhlaWdodDoxfSk7dGhpcy52aWV3LmVuYWJsZWQ9ITA7dGhpcy52aWV3LmZ1bGxXaWR0aD1hO3RoaXMudmlldy5mdWxsSGVpZ2h0PWI7dGhpcy52aWV3Lm9mZnNldFg9XG4gICAgYzt0aGlzLnZpZXcub2Zmc2V0WT1kO3RoaXMudmlldy53aWR0aD1lO3RoaXMudmlldy5oZWlnaHQ9Zjt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX0sY2xlYXJWaWV3T2Zmc2V0OmZ1bmN0aW9uKCl7bnVsbCE9PXRoaXMudmlldyYmKHRoaXMudmlldy5lbmFibGVkPSExKTt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX0sdXBkYXRlUHJvamVjdGlvbk1hdHJpeDpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmVhcixiPWEqTWF0aC50YW4oLjUqUS5ERUcyUkFEKnRoaXMuZm92KS90aGlzLnpvb20sYz0yKmIsZD10aGlzLmFzcGVjdCpjLGU9LS41KmQsZj10aGlzLnZpZXc7aWYobnVsbCE9PXRoaXMudmlldyYmdGhpcy52aWV3LmVuYWJsZWQpdmFyIGc9Zi5mdWxsV2lkdGgsaD1mLmZ1bGxIZWlnaHQsZT1lK2Yub2Zmc2V0WCpkL2csYj1iLWYub2Zmc2V0WSpjL2gsZD1mLndpZHRoL2cqZCxjPWYuaGVpZ2h0L2gqYztmPXRoaXMuZmlsbU9mZnNldDswIT09ZiYmKGUrPWEqZi90aGlzLmdldEZpbG1XaWR0aCgpKTtcbiAgICB0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKGUsZStkLGIsYi1jLGEsdGhpcy5mYXIpfSx0b0pTT046ZnVuY3Rpb24oYSl7YT14LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO2Eub2JqZWN0LmZvdj10aGlzLmZvdjthLm9iamVjdC56b29tPXRoaXMuem9vbTthLm9iamVjdC5uZWFyPXRoaXMubmVhcjthLm9iamVjdC5mYXI9dGhpcy5mYXI7YS5vYmplY3QuZm9jdXM9dGhpcy5mb2N1czthLm9iamVjdC5hc3BlY3Q9dGhpcy5hc3BlY3Q7bnVsbCE9PXRoaXMudmlldyYmKGEub2JqZWN0LnZpZXc9T2JqZWN0LmFzc2lnbih7fSx0aGlzLnZpZXcpKTthLm9iamVjdC5maWxtR2F1Z2U9dGhpcy5maWxtR2F1Z2U7YS5vYmplY3QuZmlsbU9mZnNldD10aGlzLmZpbG1PZmZzZXQ7cmV0dXJuIGF9fSk7dWQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShiYS5wcm90b3R5cGUpLHtjb25zdHJ1Y3Rvcjp1ZCxpc0FycmF5Q2FtZXJhOiEwfSk7UGIucHJvdG90eXBlLmlzRm9nRXhwMj1cbiAgICAhMDtQYi5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFBiKHRoaXMuY29sb3IuZ2V0SGV4KCksdGhpcy5kZW5zaXR5KX07UGIucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt0eXBlOlwiRm9nRXhwMlwiLGNvbG9yOnRoaXMuY29sb3IuZ2V0SGV4KCksZGVuc2l0eTp0aGlzLmRlbnNpdHl9fTtRYi5wcm90b3R5cGUuaXNGb2c9ITA7UWIucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBRYih0aGlzLmNvbG9yLmdldEhleCgpLHRoaXMubmVhcix0aGlzLmZhcil9O1FiLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpcIkZvZ1wiLGNvbG9yOnRoaXMuY29sb3IuZ2V0SGV4KCksbmVhcjp0aGlzLm5lYXIsZmFyOnRoaXMuZmFyfX07dmQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOnZkLGNvcHk6ZnVuY3Rpb24oYSxiKXt4LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxcbiAgICBhLGIpO251bGwhPT1hLmJhY2tncm91bmQmJih0aGlzLmJhY2tncm91bmQ9YS5iYWNrZ3JvdW5kLmNsb25lKCkpO251bGwhPT1hLmZvZyYmKHRoaXMuZm9nPWEuZm9nLmNsb25lKCkpO251bGwhPT1hLm92ZXJyaWRlTWF0ZXJpYWwmJih0aGlzLm92ZXJyaWRlTWF0ZXJpYWw9YS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCkpO3RoaXMuYXV0b1VwZGF0ZT1hLmF1dG9VcGRhdGU7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPWEubWF0cml4QXV0b1VwZGF0ZTtyZXR1cm4gdGhpc30sdG9KU09OOmZ1bmN0aW9uKGEpe3ZhciBiPXgucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7bnVsbCE9PXRoaXMuYmFja2dyb3VuZCYmKGIub2JqZWN0LmJhY2tncm91bmQ9dGhpcy5iYWNrZ3JvdW5kLnRvSlNPTihhKSk7bnVsbCE9PXRoaXMuZm9nJiYoYi5vYmplY3QuZm9nPXRoaXMuZm9nLnRvSlNPTigpKTtyZXR1cm4gYn19KTtkZS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSxcbiAgICB7Y29uc3RydWN0b3I6ZGUsaXNMZW5zRmxhcmU6ITAsY29weTpmdW5jdGlvbihhKXt4LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnBvc2l0aW9uU2NyZWVuLmNvcHkoYS5wb3NpdGlvblNjcmVlbik7dGhpcy5jdXN0b21VcGRhdGVDYWxsYmFjaz1hLmN1c3RvbVVwZGF0ZUNhbGxiYWNrO2Zvcih2YXIgYj0wLGM9YS5sZW5zRmxhcmVzLmxlbmd0aDtiPGM7YisrKXRoaXMubGVuc0ZsYXJlcy5wdXNoKGEubGVuc0ZsYXJlc1tiXSk7cmV0dXJuIHRoaXN9LGFkZDpmdW5jdGlvbihhLGIsYyxkLGUsZil7dm9pZCAwPT09YiYmKGI9LTEpO3ZvaWQgMD09PWMmJihjPTApO3ZvaWQgMD09PWYmJihmPTEpO3ZvaWQgMD09PWUmJihlPW5ldyBIKDE2Nzc3MjE1KSk7dm9pZCAwPT09ZCYmKGQ9MSk7Yz1NYXRoLm1pbihjLE1hdGgubWF4KDAsYykpO3RoaXMubGVuc0ZsYXJlcy5wdXNoKHt0ZXh0dXJlOmEsc2l6ZTpiLGRpc3RhbmNlOmMseDowLHk6MCx6OjAsc2NhbGU6MSxyb3RhdGlvbjowLFxuICAgIG9wYWNpdHk6Zixjb2xvcjplLGJsZW5kaW5nOmR9KX0sdXBkYXRlTGVuc0ZsYXJlczpmdW5jdGlvbigpe3ZhciBhLGI9dGhpcy5sZW5zRmxhcmVzLmxlbmd0aCxjPTIqLXRoaXMucG9zaXRpb25TY3JlZW4ueCxkPTIqLXRoaXMucG9zaXRpb25TY3JlZW4ueTtmb3IoYT0wO2E8YjthKyspe3ZhciBlPXRoaXMubGVuc0ZsYXJlc1thXTtlLng9dGhpcy5wb3NpdGlvblNjcmVlbi54K2MqZS5kaXN0YW5jZTtlLnk9dGhpcy5wb3NpdGlvblNjcmVlbi55K2QqZS5kaXN0YW5jZTtlLndhbnRlZFJvdGF0aW9uPWUueCpNYXRoLlBJKi4yNTtlLnJvdGF0aW9uKz0uMjUqKGUud2FudGVkUm90YXRpb24tZS5yb3RhdGlvbil9fX0pO2hiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtoYi5wcm90b3R5cGUuY29uc3RydWN0b3I9aGI7aGIucHJvdG90eXBlLmlzU3ByaXRlTWF0ZXJpYWw9ITA7aGIucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsXG4gICAgYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMubWFwPWEubWFwO3RoaXMucm90YXRpb249YS5yb3RhdGlvbjtyZXR1cm4gdGhpc307Q2MucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkNjLGlzU3ByaXRlOiEwLHJheWNhc3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwLGM9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGQsZSl7Yi5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7ZC5yYXkuY2xvc2VzdFBvaW50VG9Qb2ludChiLGEpO2Muc2V0RnJvbU1hdHJpeFNjYWxlKHRoaXMubWF0cml4V29ybGQpO3ZhciBmPWMueCpjLnkvNDtiLmRpc3RhbmNlVG9TcXVhcmVkKGEpPmZ8fChmPWQucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGEpLGY8ZC5uZWFyfHxmPmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOmYscG9pbnQ6YS5jbG9uZSgpLGZhY2U6bnVsbCxvYmplY3Q6dGhpc30pKX19KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5tYXRlcmlhbCkpLmNvcHkodGhpcyl9fSk7XG4gICAgRGMucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkRjLGNvcHk6ZnVuY3Rpb24oYSl7eC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSwhMSk7YT1hLmxldmVscztmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2I8YztiKyspe3ZhciBkPWFbYl07dGhpcy5hZGRMZXZlbChkLm9iamVjdC5jbG9uZSgpLGQuZGlzdGFuY2UpfXJldHVybiB0aGlzfSxhZGRMZXZlbDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO2I9TWF0aC5hYnMoYik7Zm9yKHZhciBjPXRoaXMubGV2ZWxzLGQ9MDtkPGMubGVuZ3RoJiYhKGI8Y1tkXS5kaXN0YW5jZSk7ZCsrKTtjLnNwbGljZShkLDAse2Rpc3RhbmNlOmIsb2JqZWN0OmF9KTt0aGlzLmFkZChhKX0sZ2V0T2JqZWN0Rm9yRGlzdGFuY2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMubGV2ZWxzLGM9MSxkPWIubGVuZ3RoO2M8ZCYmIShhPGJbY10uZGlzdGFuY2UpO2MrKyk7cmV0dXJuIGJbYy1cbiAgICAxXS5vYmplY3R9LHJheWNhc3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYixjKXthLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKTt2YXIgZD1iLnJheS5vcmlnaW4uZGlzdGFuY2VUbyhhKTt0aGlzLmdldE9iamVjdEZvckRpc3RhbmNlKGQpLnJheWNhc3QoYixjKX19KCksdXBkYXRlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYyl7dmFyIGQ9dGhpcy5sZXZlbHM7aWYoMTxkLmxlbmd0aCl7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYy5tYXRyaXhXb3JsZCk7Yi5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7Yz1hLmRpc3RhbmNlVG8oYik7ZFswXS5vYmplY3QudmlzaWJsZT0hMDtmb3IodmFyIGU9MSxmPWQubGVuZ3RoO2U8ZjtlKyspaWYoYz49ZFtlXS5kaXN0YW5jZSlkW2UtMV0ub2JqZWN0LnZpc2libGU9ITEsZFtlXS5vYmplY3QudmlzaWJsZT0hMDtlbHNlIGJyZWFrO1xuICAgIGZvcig7ZTxmO2UrKylkW2VdLm9iamVjdC52aXNpYmxlPSExfX19KCksdG9KU09OOmZ1bmN0aW9uKGEpe2E9eC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC5sZXZlbHM9W107Zm9yKHZhciBiPXRoaXMubGV2ZWxzLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPWJbY107YS5vYmplY3QubGV2ZWxzLnB1c2goe29iamVjdDplLm9iamVjdC51dWlkLGRpc3RhbmNlOmUuZGlzdGFuY2V9KX1yZXR1cm4gYX19KTtPYmplY3QuYXNzaWduKEVjLnByb3RvdHlwZSx7Y2FsY3VsYXRlSW52ZXJzZXM6ZnVuY3Rpb24oKXt0aGlzLmJvbmVJbnZlcnNlcz1bXTtmb3IodmFyIGE9MCxiPXRoaXMuYm9uZXMubGVuZ3RoO2E8YjthKyspe3ZhciBjPW5ldyBPO3RoaXMuYm9uZXNbYV0mJmMuZ2V0SW52ZXJzZSh0aGlzLmJvbmVzW2FdLm1hdHJpeFdvcmxkKTt0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKGMpfX0scG9zZTpmdW5jdGlvbigpe3ZhciBhLGI7dmFyIGM9MDtmb3IoYj10aGlzLmJvbmVzLmxlbmd0aDtjPFxuICAgIGI7YysrKShhPXRoaXMuYm9uZXNbY10pJiZhLm1hdHJpeFdvcmxkLmdldEludmVyc2UodGhpcy5ib25lSW52ZXJzZXNbY10pO2M9MDtmb3IoYj10aGlzLmJvbmVzLmxlbmd0aDtjPGI7YysrKWlmKGE9dGhpcy5ib25lc1tjXSlhLnBhcmVudCYmYS5wYXJlbnQuaXNCb25lPyhhLm1hdHJpeC5nZXRJbnZlcnNlKGEucGFyZW50Lm1hdHJpeFdvcmxkKSxhLm1hdHJpeC5tdWx0aXBseShhLm1hdHJpeFdvcmxkKSk6YS5tYXRyaXguY29weShhLm1hdHJpeFdvcmxkKSxhLm1hdHJpeC5kZWNvbXBvc2UoYS5wb3NpdGlvbixhLnF1YXRlcm5pb24sYS5zY2FsZSl9LHVwZGF0ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBPLGI9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBjPXRoaXMuYm9uZXMsZD10aGlzLmJvbmVJbnZlcnNlcyxlPXRoaXMuYm9uZU1hdHJpY2VzLGY9dGhpcy5ib25lVGV4dHVyZSxnPTAsaD1jLmxlbmd0aDtnPGg7ZysrKWEubXVsdGlwbHlNYXRyaWNlcyhjW2ddP2NbZ10ubWF0cml4V29ybGQ6XG4gICAgYixkW2ddKSxhLnRvQXJyYXkoZSwxNipnKTt2b2lkIDAhPT1mJiYoZi5uZWVkc1VwZGF0ZT0hMCl9fSgpLGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBFYyh0aGlzLmJvbmVzLHRoaXMuYm9uZUludmVyc2VzKX19KTt3ZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6d2QsaXNCb25lOiEwfSk7eGQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShyYS5wcm90b3R5cGUpLHtjb25zdHJ1Y3Rvcjp4ZCxpc1NraW5uZWRNZXNoOiEwLGluaXRCb25lczpmdW5jdGlvbigpe3ZhciBhPVtdLGI7aWYodGhpcy5nZW9tZXRyeSYmdm9pZCAwIT09dGhpcy5nZW9tZXRyeS5ib25lcyl7dmFyIGM9MDtmb3IoYj10aGlzLmdlb21ldHJ5LmJvbmVzLmxlbmd0aDtjPGI7YysrKXt2YXIgZD10aGlzLmdlb21ldHJ5LmJvbmVzW2NdO3ZhciBlPW5ldyB3ZDthLnB1c2goZSk7ZS5uYW1lPWQubmFtZTtlLnBvc2l0aW9uLmZyb21BcnJheShkLnBvcyk7XG4gICAgZS5xdWF0ZXJuaW9uLmZyb21BcnJheShkLnJvdHEpO3ZvaWQgMCE9PWQuc2NsJiZlLnNjYWxlLmZyb21BcnJheShkLnNjbCl9Yz0wO2ZvcihiPXRoaXMuZ2VvbWV0cnkuYm9uZXMubGVuZ3RoO2M8YjtjKyspZD10aGlzLmdlb21ldHJ5LmJvbmVzW2NdLC0xIT09ZC5wYXJlbnQmJm51bGwhPT1kLnBhcmVudCYmdm9pZCAwIT09YVtkLnBhcmVudF0/YVtkLnBhcmVudF0uYWRkKGFbY10pOnRoaXMuYWRkKGFbY10pfXRoaXMudXBkYXRlTWF0cml4V29ybGQoITApO3JldHVybiBhfSxiaW5kOmZ1bmN0aW9uKGEsYil7dGhpcy5za2VsZXRvbj1hO3ZvaWQgMD09PWImJih0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKSx0aGlzLnNrZWxldG9uLmNhbGN1bGF0ZUludmVyc2VzKCksYj10aGlzLm1hdHJpeFdvcmxkKTt0aGlzLmJpbmRNYXRyaXguY29weShiKTt0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoYil9LHBvc2U6ZnVuY3Rpb24oKXt0aGlzLnNrZWxldG9uLnBvc2UoKX0sbm9ybWFsaXplU2tpbldlaWdodHM6ZnVuY3Rpb24oKXt2YXIgYTtcbiAgICBpZih0aGlzLmdlb21ldHJ5JiZ0aGlzLmdlb21ldHJ5LmlzR2VvbWV0cnkpZm9yKGE9MDthPHRoaXMuZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoO2ErKyl7dmFyIGI9dGhpcy5nZW9tZXRyeS5za2luV2VpZ2h0c1thXTt2YXIgYz0xL2IubWFuaGF0dGFuTGVuZ3RoKCk7SW5maW5pdHkhPT1jP2IubXVsdGlwbHlTY2FsYXIoYyk6Yi5zZXQoMSwwLDAsMCl9ZWxzZSBpZih0aGlzLmdlb21ldHJ5JiZ0aGlzLmdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkpe3ZhciBiPW5ldyBhYSxkPXRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0O2ZvcihhPTA7YTxkLmNvdW50O2ErKyliLng9ZC5nZXRYKGEpLGIueT1kLmdldFkoYSksYi56PWQuZ2V0WihhKSxiLnc9ZC5nZXRXKGEpLGM9MS9iLm1hbmhhdHRhbkxlbmd0aCgpLEluZmluaXR5IT09Yz9iLm11bHRpcGx5U2NhbGFyKGMpOmIuc2V0KDEsMCwwLDApLGQuc2V0WFlaVyhhLGIueCxiLnksYi56LGIudyl9fSx1cGRhdGVNYXRyaXhXb3JsZDpmdW5jdGlvbihhKXtyYS5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLFxuICAgIGEpO1wiYXR0YWNoZWRcIj09PXRoaXMuYmluZE1vZGU/dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMubWF0cml4V29ybGQpOlwiZGV0YWNoZWRcIj09PXRoaXMuYmluZE1vZGU/dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMuYmluZE1hdHJpeCk6Y29uc29sZS53YXJuKFwiVEhSRUUuU2tpbm5lZE1lc2g6IFVucmVjb2duaXplZCBiaW5kTW9kZTogXCIrdGhpcy5iaW5kTW9kZSl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuZ2VvbWV0cnksdGhpcy5tYXRlcmlhbCkpLmNvcHkodGhpcyl9fSk7Vy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7Vy5wcm90b3R5cGUuY29uc3RydWN0b3I9VztXLnByb3RvdHlwZS5pc0xpbmVCYXNpY01hdGVyaWFsPSEwO1cucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO1xuICAgIHRoaXMubGluZXdpZHRoPWEubGluZXdpZHRoO3RoaXMubGluZWNhcD1hLmxpbmVjYXA7dGhpcy5saW5lam9pbj1hLmxpbmVqb2luO3JldHVybiB0aGlzfTtzYS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6c2EsaXNMaW5lOiEwLHJheWNhc3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTyxiPW5ldyBzYixjPW5ldyBJYTtyZXR1cm4gZnVuY3Rpb24oZCxlKXt2YXIgZj1kLmxpbmVQcmVjaXNpb24sZj1mKmYsZz10aGlzLmdlb21ldHJ5LGg9dGhpcy5tYXRyaXhXb3JsZDtudWxsPT09Zy5ib3VuZGluZ1NwaGVyZSYmZy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtjLmNvcHkoZy5ib3VuZGluZ1NwaGVyZSk7Yy5hcHBseU1hdHJpeDQoaCk7aWYoITEhPT1kLnJheS5pbnRlcnNlY3RzU3BoZXJlKGMpKXthLmdldEludmVyc2UoaCk7Yi5jb3B5KGQucmF5KS5hcHBseU1hdHJpeDQoYSk7dmFyIGs9bmV3IHAsbT1uZXcgcCxoPW5ldyBwLFxuICAgIGw9bmV3IHAsbj10aGlzJiZ0aGlzLmlzTGluZVNlZ21lbnRzPzI6MTtpZihnLmlzQnVmZmVyR2VvbWV0cnkpe3ZhciB1PWcuaW5kZXg7dmFyIHI9Zy5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O2lmKG51bGwhPT11KWZvcih2YXIgdD11LmFycmF5LGc9MCx2PXQubGVuZ3RoLTE7Zzx2O2crPW4pdT10W2crMV0say5mcm9tQXJyYXkociwzKnRbZ10pLG0uZnJvbUFycmF5KHIsMyp1KSx1PWIuZGlzdGFuY2VTcVRvU2VnbWVudChrLG0sbCxoKSx1PmZ8fChsLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSx1PWQucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGwpLHU8ZC5uZWFyfHx1PmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOnUscG9pbnQ6aC5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSxpbmRleDpnLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKTtlbHNlIGZvcihnPTAsdj1yLmxlbmd0aC8zLTE7Zzx2O2crPW4pay5mcm9tQXJyYXkocixcbiAgICAzKmcpLG0uZnJvbUFycmF5KHIsMypnKzMpLHU9Yi5kaXN0YW5jZVNxVG9TZWdtZW50KGssbSxsLGgpLHU+Znx8KGwuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLHU9ZC5yYXkub3JpZ2luLmRpc3RhbmNlVG8obCksdTxkLm5lYXJ8fHU+ZC5mYXJ8fGUucHVzaCh7ZGlzdGFuY2U6dSxwb2ludDpoLmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLGluZGV4OmcsZmFjZTpudWxsLGZhY2VJbmRleDpudWxsLG9iamVjdDp0aGlzfSkpfWVsc2UgaWYoZy5pc0dlb21ldHJ5KWZvcihrPWcudmVydGljZXMsbT1rLmxlbmd0aCxnPTA7ZzxtLTE7Zys9bil1PWIuZGlzdGFuY2VTcVRvU2VnbWVudChrW2ddLGtbZysxXSxsLGgpLHU+Znx8KGwuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLHU9ZC5yYXkub3JpZ2luLmRpc3RhbmNlVG8obCksdTxkLm5lYXJ8fHU+ZC5mYXJ8fGUucHVzaCh7ZGlzdGFuY2U6dSxwb2ludDpoLmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLFxuICAgIGluZGV4OmcsZmFjZTpudWxsLGZhY2VJbmRleDpudWxsLG9iamVjdDp0aGlzfSkpfX19KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5nZW9tZXRyeSx0aGlzLm1hdGVyaWFsKSkuY29weSh0aGlzKX19KTtYLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoc2EucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6WCxpc0xpbmVTZWdtZW50czohMH0pO3lkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoc2EucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6eWQsaXNMaW5lTG9vcDohMH0pO0thLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtLYS5wcm90b3R5cGUuY29uc3RydWN0b3I9S2E7S2EucHJvdG90eXBlLmlzUG9pbnRzTWF0ZXJpYWw9ITA7S2EucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO1xuICAgIHRoaXMubWFwPWEubWFwO3RoaXMuc2l6ZT1hLnNpemU7dGhpcy5zaXplQXR0ZW51YXRpb249YS5zaXplQXR0ZW51YXRpb247cmV0dXJuIHRoaXN9O1JiLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpSYixpc1BvaW50czohMCxyYXljYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE8sYj1uZXcgc2IsYz1uZXcgSWE7cmV0dXJuIGZ1bmN0aW9uKGQsZSl7ZnVuY3Rpb24gZihhLGMpe3ZhciBmPWIuZGlzdGFuY2VTcVRvUG9pbnQoYSk7aWYoZjxsKXthPWIuY2xvc2VzdFBvaW50VG9Qb2ludChhKTthLmFwcGx5TWF0cml4NChrKTt2YXIgaD1kLnJheS5vcmlnaW4uZGlzdGFuY2VUbyhhKTtoPGQubmVhcnx8aD5kLmZhcnx8ZS5wdXNoKHtkaXN0YW5jZTpoLGRpc3RhbmNlVG9SYXk6TWF0aC5zcXJ0KGYpLHBvaW50OmEuY2xvbmUoKSxpbmRleDpjLGZhY2U6bnVsbCxvYmplY3Q6Z30pfX12YXIgZz10aGlzLGg9dGhpcy5nZW9tZXRyeSxcbiAgICBrPXRoaXMubWF0cml4V29ybGQsbT1kLnBhcmFtcy5Qb2ludHMudGhyZXNob2xkO251bGw9PT1oLmJvdW5kaW5nU3BoZXJlJiZoLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2MuY29weShoLmJvdW5kaW5nU3BoZXJlKTtjLmFwcGx5TWF0cml4NChrKTtjLnJhZGl1cys9bTtpZighMSE9PWQucmF5LmludGVyc2VjdHNTcGhlcmUoYykpe2EuZ2V0SW52ZXJzZShrKTtiLmNvcHkoZC5yYXkpLmFwcGx5TWF0cml4NChhKTt2YXIgbT1tLygodGhpcy5zY2FsZS54K3RoaXMuc2NhbGUueSt0aGlzLnNjYWxlLnopLzMpLGw9bSptLG09bmV3IHA7aWYoaC5pc0J1ZmZlckdlb21ldHJ5KXt2YXIgbj1oLmluZGV4LGg9aC5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O2lmKG51bGwhPT1uKWZvcih2YXIgdT1uLmFycmF5LG49MCxyPXUubGVuZ3RoO248cjtuKyspe3ZhciB0PXVbbl07bS5mcm9tQXJyYXkoaCwzKnQpO2YobSx0KX1lbHNlIGZvcihuPTAsdT1oLmxlbmd0aC8zO248dTtuKyspbS5mcm9tQXJyYXkoaCxcbiAgICAzKm4pLGYobSxuKX1lbHNlIGZvcihtPWgudmVydGljZXMsbj0wLHU9bS5sZW5ndGg7bjx1O24rKylmKG1bbl0sbil9fX0oKSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwpKS5jb3B5KHRoaXMpfX0pO0ZjLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpGYyxpc0dyb3VwOiEwfSk7ZWUucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShVLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOmVlLGlzVmlkZW9UZXh0dXJlOiEwLHVwZGF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuaW1hZ2U7YS5yZWFkeVN0YXRlPj1hLkhBVkVfQ1VSUkVOVF9EQVRBJiYodGhpcy5uZWVkc1VwZGF0ZT0hMCl9fSk7U2IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVS5wcm90b3R5cGUpO1NiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1TYjtTYi5wcm90b3R5cGUuaXNDb21wcmVzc2VkVGV4dHVyZT1cbiAgICAhMDtHYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShVLnByb3RvdHlwZSk7R2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPUdjO0djLnByb3RvdHlwZS5pc0RlcHRoVGV4dHVyZT0hMDtUYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7VGIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRiO0hjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtIYy5wcm90b3R5cGUuY29uc3RydWN0b3I9SGM7VWIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO1ViLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1VYjtJYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7SWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPUljO2phLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtqYS5wcm90b3R5cGUuY29uc3RydWN0b3I9amE7SmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO0pjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1cbiAgICBKYztWYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShqYS5wcm90b3R5cGUpO1ZiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1WYjtLYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7S2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPUtjO3ViLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGphLnByb3RvdHlwZSk7dWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPXViO0xjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtMYy5wcm90b3R5cGUuY29uc3RydWN0b3I9TGM7V2IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoamEucHJvdG90eXBlKTtXYi5wcm90b3R5cGUuY29uc3RydWN0b3I9V2I7TWMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO01jLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1NYztYYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShqYS5wcm90b3R5cGUpO1hiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1YYjtOYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7XG4gICAgTmMucHJvdG90eXBlLmNvbnN0cnVjdG9yPU5jO1liLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtZYi5wcm90b3R5cGUuY29uc3RydWN0b3I9WWI7T2MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO09jLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1PYztaYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7WmIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVpiO1BjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtQYy5wcm90b3R5cGUuY29uc3RydWN0b3I9UGM7JGIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpOyRiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj0kYjt2YXIgTGc9e3RyaWFuZ3VsYXRlOmZ1bmN0aW9uKGEsYixjKXtjPWN8fDI7dmFyIGQ9YiYmYi5sZW5ndGgsZT1kP2JbMF0qYzphLmxlbmd0aCxmPWJmKGEsMCxlLGMsITApLGc9W107aWYoIWYpcmV0dXJuIGc7dmFyIGg7aWYoZCl7dmFyIGs9XG4gICAgYyxkPVtdLG07dmFyIGw9MDtmb3IobT1iLmxlbmd0aDtsPG07bCsrKXt2YXIgbj1iW2xdKms7dmFyIHA9bDxtLTE/YltsKzFdKms6YS5sZW5ndGg7bj1iZihhLG4scCxrLCExKTtuPT09bi5uZXh0JiYobi5zdGVpbmVyPSEwKTtkLnB1c2goSmcobikpfWQuc29ydChIZyk7Zm9yKGw9MDtsPGQubGVuZ3RoO2wrKyl7Yj1kW2xdO2s9ZjtpZihrPUlnKGIsaykpYj1lZihrLGIpLFJjKGIsYi5uZXh0KTtmPVJjKGYsZi5uZXh0KX19aWYoYS5sZW5ndGg+ODAqYyl7dmFyIHI9aD1hWzBdO3ZhciB0PWQ9YVsxXTtmb3Ioaz1jO2s8ZTtrKz1jKWw9YVtrXSxiPWFbaysxXSxsPHImJihyPWwpLGI8dCYmKHQ9YiksbD5oJiYoaD1sKSxiPmQmJihkPWIpO2g9TWF0aC5tYXgoaC1yLGQtdCk7aD0wIT09aD8xL2g6MH1TYyhmLGcsYyxyLHQsaCk7cmV0dXJuIGd9fSwkYT17YXJlYTpmdW5jdGlvbihhKXtmb3IodmFyIGI9YS5sZW5ndGgsYz0wLGQ9Yi0xLGU9MDtlPGI7ZD1lKyspYys9YVtkXS54KmFbZV0ueS1cbiAgICBhW2VdLngqYVtkXS55O3JldHVybi41KmN9LGlzQ2xvY2tXaXNlOmZ1bmN0aW9uKGEpe3JldHVybiAwPiRhLmFyZWEoYSl9LHRyaWFuZ3VsYXRlU2hhcGU6ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBiPWEubGVuZ3RoOzI8YiYmYVtiLTFdLmVxdWFscyhhWzBdKSYmYS5wb3AoKX1mdW5jdGlvbiBkKGEsYil7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspYS5wdXNoKGJbY10ueCksYS5wdXNoKGJbY10ueSl9dmFyIGU9W10sZj1bXSxnPVtdO2MoYSk7ZChlLGEpO3ZhciBoPWEubGVuZ3RoO2IuZm9yRWFjaChjKTtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWYucHVzaChoKSxoKz1iW2FdLmxlbmd0aCxkKGUsYlthXSk7Yj1MZy50cmlhbmd1bGF0ZShlLGYpO2ZvcihhPTA7YTxiLmxlbmd0aDthKz0zKWcucHVzaChiLnNsaWNlKGEsYSszKSk7cmV0dXJuIGd9fTtpYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7aWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPWliO1xuICAgIExhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtMYS5wcm90b3R5cGUuY29uc3RydWN0b3I9TGE7TGEucHJvdG90eXBlLmdldEFycmF5cz1mdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiksYT1hP0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEuYXJyYXkpOltdLGI9dGhpcy5nZXRBdHRyaWJ1dGUoXCJ1dlwiKSxiPWI/QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYi5hcnJheSk6W10sYz10aGlzLmluZGV4LGM9Yz9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChjLmFycmF5KTpbXTtyZXR1cm57cG9zaXRpb246YSx1djpiLGluZGV4OmN9fTtMYS5wcm90b3R5cGUuYWRkU2hhcGVMaXN0PWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5sZW5ndGg7Yi5hcnJheXM9dGhpcy5nZXRBcnJheXMoKTtmb3IodmFyIGQ9MDtkPGM7ZCsrKXRoaXMuYWRkU2hhcGUoYVtkXSxiKTt0aGlzLnNldEluZGV4KGIuYXJyYXlzLmluZGV4KTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsXG4gICAgbmV3IEIoYi5hcnJheXMucG9zaXRpb24sMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQihiLmFycmF5cy51diwyKSl9O0xhLnByb3RvdHlwZS5hZGRTaGFwZT1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiLGMpe2J8fGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5FeHRydWRlR2VvbWV0cnk6IHZlYyBkb2VzIG5vdCBleGlzdFwiKTtyZXR1cm4gYi5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKX1mdW5jdGlvbiBkKGEsYixjKXt2YXIgZD1hLngtYi54O3ZhciBlPWEueS1iLnk7dmFyIGY9Yy54LWEueDt2YXIgZz1jLnktYS55LGg9ZCpkK2UqZTtpZihNYXRoLmFicyhkKmctZSpmKT5OdW1iZXIuRVBTSUxPTil7dmFyIGs9TWF0aC5zcXJ0KGgpLG09TWF0aC5zcXJ0KGYqZitnKmcpLGg9Yi54LWUvaztiPWIueStkL2s7Zz0oKGMueC1nL20taCkqZy0oYy55K2YvbS1iKSpmKS8oZCpnLWUqZik7Zj1oK2QqZy1hLng7ZD1iK2UqZy1hLnk7ZT1mKmYrZCpkO2lmKDI+PWUpcmV0dXJuIG5ldyBEKGYsXG4gICAgZCk7ZT1NYXRoLnNxcnQoZS8yKX1lbHNlIGE9ITEsZD5OdW1iZXIuRVBTSUxPTj9mPk51bWJlci5FUFNJTE9OJiYoYT0hMCk6ZDwtTnVtYmVyLkVQU0lMT04/ZjwtTnVtYmVyLkVQU0lMT04mJihhPSEwKTpNYXRoLnNpZ24oZSk9PT1NYXRoLnNpZ24oZykmJihhPSEwKSxhPyhmPS1lLGU9TWF0aC5zcXJ0KGgpKTooZj1kLGQ9ZSxlPU1hdGguc3FydChoLzIpKTtyZXR1cm4gbmV3IEQoZi9lLGQvZSl9ZnVuY3Rpb24gZShhLGIpe2ZvcihHPWEubGVuZ3RoOzA8PS0tRzspe3ZhciBjPUc7dmFyIGQ9Ry0xOzA+ZCYmKGQ9YS5sZW5ndGgtMSk7dmFyIGUsZj14KzIqdztmb3IoZT0wO2U8ZjtlKyspe3ZhciBnPVgqZSxtPVgqKGUrMSksbj1iK2QrZyxxPWIrZCttLG09YitjK207aChiK2MrZyk7aChuKTtoKG0pO2gobik7aChxKTtoKG0pO2c9bC5sZW5ndGgvMztnPUUuZ2VuZXJhdGVTaWRlV2FsbFVWKFMsbCxnLTYsZy0zLGctMixnLTEpO2soZ1swXSk7ayhnWzFdKTtrKGdbM10pO2soZ1sxXSk7XG4gICAgayhnWzJdKTtrKGdbM10pfX19ZnVuY3Rpb24gZihhLGIsYyl7ci5wdXNoKGEpO3IucHVzaChiKTtyLnB1c2goYyl9ZnVuY3Rpb24gZyhhLGIsYyl7aChhKTtoKGIpO2goYyk7YT1sLmxlbmd0aC8zO2E9RS5nZW5lcmF0ZVRvcFVWKFMsbCxhLTMsYS0yLGEtMSk7ayhhWzBdKTtrKGFbMV0pO2soYVsyXSl9ZnVuY3Rpb24gaChhKXtuLnB1c2gobC5sZW5ndGgvMyk7bC5wdXNoKHJbMyphKzBdKTtsLnB1c2goclszKmErMV0pO2wucHVzaChyWzMqYSsyXSl9ZnVuY3Rpb24gayhhKXt1LnB1c2goYS54KTt1LnB1c2goYS55KX12YXIgbT1iLmFycmF5cz9iLmFycmF5czp0aGlzLmdldEFycmF5cygpLGw9bS5wb3NpdGlvbixuPW0uaW5kZXgsdT1tLnV2LHI9W10sbT12b2lkIDAhPT1iLmFtb3VudD9iLmFtb3VudDoxMDAsdD12b2lkIDAhPT1iLmJldmVsVGhpY2tuZXNzP2IuYmV2ZWxUaGlja25lc3M6Nix2PXZvaWQgMCE9PWIuYmV2ZWxTaXplP2IuYmV2ZWxTaXplOnQtMix3PXZvaWQgMCE9PWIuYmV2ZWxTZWdtZW50cz9cbiAgICBiLmJldmVsU2VnbWVudHM6Myx6PXZvaWQgMCE9PWIuYmV2ZWxFbmFibGVkP2IuYmV2ZWxFbmFibGVkOiEwLHk9dm9pZCAwIT09Yi5jdXJ2ZVNlZ21lbnRzP2IuY3VydmVTZWdtZW50czoxMix4PXZvaWQgMCE9PWIuc3RlcHM/Yi5zdGVwczoxLEE9Yi5leHRydWRlUGF0aCxDPSExLEU9dm9pZCAwIT09Yi5VVkdlbmVyYXRvcj9iLlVWR2VuZXJhdG9yOmliLldvcmxkVVZHZW5lcmF0b3I7aWYoQSl7dmFyIEg9QS5nZXRTcGFjZWRQb2ludHMoeCk7Qz0hMDt6PSExO3ZhciBLPXZvaWQgMCE9PWIuZnJhbWVzP2IuZnJhbWVzOkEuY29tcHV0ZUZyZW5ldEZyYW1lcyh4LCExKTt2YXIgTD1uZXcgcDt2YXIgTT1uZXcgcDt2YXIgUD1uZXcgcH16fHwodj10PXc9MCk7dmFyIE8sUz10aGlzLHk9YS5leHRyYWN0UG9pbnRzKHkpO2E9eS5zaGFwZTt2YXIgUT15LmhvbGVzO2lmKCEkYS5pc0Nsb2NrV2lzZShhKSl7YT1hLnJldmVyc2UoKTt2YXIgTj0wO2ZvcihPPVEubGVuZ3RoO048TztOKyspe3ZhciBSPVxuICAgIFFbTl07JGEuaXNDbG9ja1dpc2UoUikmJihRW05dPVIucmV2ZXJzZSgpKX19dmFyIFU9JGEudHJpYW5ndWxhdGVTaGFwZShhLFEpLFc9YTtOPTA7Zm9yKE89US5sZW5ndGg7TjxPO04rKylSPVFbTl0sYT1hLmNvbmNhdChSKTt2YXIgVixYPWEubGVuZ3RoLFQsYmE9VS5sZW5ndGgseT1bXSxHPTA7dmFyIFk9Vy5sZW5ndGg7dmFyIGVhPVktMTtmb3IoVj1HKzE7RzxZO0crKyxlYSsrLFYrKyllYT09PVkmJihlYT0wKSxWPT09WSYmKFY9MCkseVtHXT1kKFdbR10sV1tlYV0sV1tWXSk7dmFyIEE9W10sY2E9eS5jb25jYXQoKTtOPTA7Zm9yKE89US5sZW5ndGg7TjxPO04rKyl7Uj1RW05dO3ZhciBhYT1bXTtHPTA7WT1SLmxlbmd0aDtlYT1ZLTE7Zm9yKFY9RysxO0c8WTtHKyssZWErKyxWKyspZWE9PT1ZJiYoZWE9MCksVj09PVkmJihWPTApLGFhW0ddPWQoUltHXSxSW2VhXSxSW1ZdKTtBLnB1c2goYWEpO2NhPWNhLmNvbmNhdChhYSl9Zm9yKGVhPTA7ZWE8dztlYSsrKXtZPWVhL3c7dmFyIGRhPVxuICAgIHQqTWF0aC5jb3MoWSpNYXRoLlBJLzIpO1Y9dipNYXRoLnNpbihZKk1hdGguUEkvMik7Rz0wO2ZvcihZPVcubGVuZ3RoO0c8WTtHKyspe3ZhciBmYT1jKFdbR10seVtHXSxWKTtmKGZhLngsZmEueSwtZGEpfU49MDtmb3IoTz1RLmxlbmd0aDtOPE87TisrKWZvcihSPVFbTl0sYWE9QVtOXSxHPTAsWT1SLmxlbmd0aDtHPFk7RysrKWZhPWMoUltHXSxhYVtHXSxWKSxmKGZhLngsZmEueSwtZGEpfVY9djtmb3IoRz0wO0c8WDtHKyspZmE9ej9jKGFbR10sY2FbR10sVik6YVtHXSxDPyhNLmNvcHkoSy5ub3JtYWxzWzBdKS5tdWx0aXBseVNjYWxhcihmYS54KSxMLmNvcHkoSy5iaW5vcm1hbHNbMF0pLm11bHRpcGx5U2NhbGFyKGZhLnkpLFAuY29weShIWzBdKS5hZGQoTSkuYWRkKEwpLGYoUC54LFAueSxQLnopKTpmKGZhLngsZmEueSwwKTtmb3IoWT0xO1k8PXg7WSsrKWZvcihHPTA7RzxYO0crKylmYT16P2MoYVtHXSxjYVtHXSxWKTphW0ddLEM/KE0uY29weShLLm5vcm1hbHNbWV0pLm11bHRpcGx5U2NhbGFyKGZhLngpLFxuICAgIEwuY29weShLLmJpbm9ybWFsc1tZXSkubXVsdGlwbHlTY2FsYXIoZmEueSksUC5jb3B5KEhbWV0pLmFkZChNKS5hZGQoTCksZihQLngsUC55LFAueikpOmYoZmEueCxmYS55LG0veCpZKTtmb3IoZWE9dy0xOzA8PWVhO2VhLS0pe1k9ZWEvdztkYT10Kk1hdGguY29zKFkqTWF0aC5QSS8yKTtWPXYqTWF0aC5zaW4oWSpNYXRoLlBJLzIpO0c9MDtmb3IoWT1XLmxlbmd0aDtHPFk7RysrKWZhPWMoV1tHXSx5W0ddLFYpLGYoZmEueCxmYS55LG0rZGEpO049MDtmb3IoTz1RLmxlbmd0aDtOPE87TisrKWZvcihSPVFbTl0sYWE9QVtOXSxHPTAsWT1SLmxlbmd0aDtHPFk7RysrKWZhPWMoUltHXSxhYVtHXSxWKSxDP2YoZmEueCxmYS55K0hbeC0xXS55LEhbeC0xXS54K2RhKTpmKGZhLngsZmEueSxtK2RhKX0oZnVuY3Rpb24oKXt2YXIgYT1sLmxlbmd0aC8zO2lmKHope3ZhciBjPTAqWDtmb3IoRz0wO0c8YmE7RysrKVQ9VVtHXSxnKFRbMl0rYyxUWzFdK2MsVFswXStjKTtjPVgqKHgrMip3KTtmb3IoRz1cbiAgICAwO0c8YmE7RysrKVQ9VVtHXSxnKFRbMF0rYyxUWzFdK2MsVFsyXStjKX1lbHNle2ZvcihHPTA7RzxiYTtHKyspVD1VW0ddLGcoVFsyXSxUWzFdLFRbMF0pO2ZvcihHPTA7RzxiYTtHKyspVD1VW0ddLGcoVFswXStYKngsVFsxXStYKngsVFsyXStYKngpfVMuYWRkR3JvdXAoYSxsLmxlbmd0aC8zLWEsdm9pZCAwIT09Yi5tYXRlcmlhbD9iLm1hdGVyaWFsOjApfSkoKTsoZnVuY3Rpb24oKXt2YXIgYT1sLmxlbmd0aC8zLGM9MDtlKFcsYyk7Yys9Vy5sZW5ndGg7Tj0wO2ZvcihPPVEubGVuZ3RoO048TztOKyspUj1RW05dLGUoUixjKSxjKz1SLmxlbmd0aDtTLmFkZEdyb3VwKGEsbC5sZW5ndGgvMy1hLHZvaWQgMCE9PWIuZXh0cnVkZU1hdGVyaWFsP2IuZXh0cnVkZU1hdGVyaWFsOjEpfSkoKTtiLmFycmF5c3x8KHRoaXMuc2V0SW5kZXgobiksdGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGwsMykpLHRoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQih1LDIpKSl9O2liLldvcmxkVVZHZW5lcmF0b3I9XG4gICAge2dlbmVyYXRlVG9wVVY6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWJbMypkXTtkPWJbMypkKzFdO3ZhciBmPWJbMyplXTtlPWJbMyplKzFdO3JldHVybltuZXcgRChiWzMqY10sYlszKmMrMV0pLG5ldyBEKGEsZCksbmV3IEQoZixlKV19LGdlbmVyYXRlU2lkZVdhbGxVVjpmdW5jdGlvbihhLGIsYyxkLGUsZil7YT1iWzMqY107dmFyIGc9YlszKmMrMV07Yz1iWzMqYysyXTt2YXIgaD1iWzMqZF0saz1iWzMqZCsxXTtkPWJbMypkKzJdO3ZhciBtPWJbMyplXSxsPWJbMyplKzFdO2U9YlszKmUrMl07dmFyIG49YlszKmZdLHA9YlszKmYrMV07Yj1iWzMqZisyXTtyZXR1cm4uMDE+TWF0aC5hYnMoZy1rKT9bbmV3IEQoYSwxLWMpLG5ldyBEKGgsMS1kKSxuZXcgRChtLDEtZSksbmV3IEQobiwxLWIpXTpbbmV3IEQoZywxLWMpLG5ldyBEKGssMS1kKSxuZXcgRChsLDEtZSksbmV3IEQocCwxLWIpXX19O1VjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtVYy5wcm90b3R5cGUuY29uc3RydWN0b3I9XG4gICAgVWM7YWMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTGEucHJvdG90eXBlKTthYy5wcm90b3R5cGUuY29uc3RydWN0b3I9YWM7VmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO1ZjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1WYzt3Yi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7d2IucHJvdG90eXBlLmNvbnN0cnVjdG9yPXdiO1djLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtXYy5wcm90b3R5cGUuY29uc3RydWN0b3I9V2M7YmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO2JjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1iYztYYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7WGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPVhjO2NjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtjYy5wcm90b3R5cGUuY29uc3RydWN0b3I9Y2M7eGIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO1xuICAgIHhiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj14Yjt4Yi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIGE9TC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7cmV0dXJuIGZmKHRoaXMucGFyYW1ldGVycy5zaGFwZXMsYSl9O3liLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTt5Yi5wcm90b3R5cGUuY29uc3RydWN0b3I9eWI7eWIucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPUUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO3JldHVybiBmZih0aGlzLnBhcmFtZXRlcnMuc2hhcGVzLGEpfTtkYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7ZGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPWRjO3piLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTt6Yi5wcm90b3R5cGUuY29uc3RydWN0b3I9emI7YWIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO2FiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1cbiAgICBhYjtZYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh6Yi5wcm90b3R5cGUpO1ljLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1ZYztaYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShhYi5wcm90b3R5cGUpO1pjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1aYzskYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7JGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPSRjO2VjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtlYy5wcm90b3R5cGUuY29uc3RydWN0b3I9ZWM7dmFyIGthPU9iamVjdC5mcmVlemUoe1dpcmVmcmFtZUdlb21ldHJ5OlRiLFBhcmFtZXRyaWNHZW9tZXRyeTpIYyxQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnk6VWIsVGV0cmFoZWRyb25HZW9tZXRyeTpKYyxUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OlZiLE9jdGFoZWRyb25HZW9tZXRyeTpLYyxPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk6dWIsSWNvc2FoZWRyb25HZW9tZXRyeTpMYyxJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OldiLFxuICAgIERvZGVjYWhlZHJvbkdlb21ldHJ5Ok1jLERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OlhiLFBvbHloZWRyb25HZW9tZXRyeTpJYyxQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnk6amEsVHViZUdlb21ldHJ5Ok5jLFR1YmVCdWZmZXJHZW9tZXRyeTpZYixUb3J1c0tub3RHZW9tZXRyeTpPYyxUb3J1c0tub3RCdWZmZXJHZW9tZXRyeTpaYixUb3J1c0dlb21ldHJ5OlBjLFRvcnVzQnVmZmVyR2VvbWV0cnk6JGIsVGV4dEdlb21ldHJ5OlVjLFRleHRCdWZmZXJHZW9tZXRyeTphYyxTcGhlcmVHZW9tZXRyeTpWYyxTcGhlcmVCdWZmZXJHZW9tZXRyeTp3YixSaW5nR2VvbWV0cnk6V2MsUmluZ0J1ZmZlckdlb21ldHJ5OmJjLFBsYW5lR2VvbWV0cnk6QWMsUGxhbmVCdWZmZXJHZW9tZXRyeTpyYixMYXRoZUdlb21ldHJ5OlhjLExhdGhlQnVmZmVyR2VvbWV0cnk6Y2MsU2hhcGVHZW9tZXRyeTp4YixTaGFwZUJ1ZmZlckdlb21ldHJ5OnliLEV4dHJ1ZGVHZW9tZXRyeTppYixFeHRydWRlQnVmZmVyR2VvbWV0cnk6TGEsXG4gICAgRWRnZXNHZW9tZXRyeTpkYyxDb25lR2VvbWV0cnk6WWMsQ29uZUJ1ZmZlckdlb21ldHJ5OlpjLEN5bGluZGVyR2VvbWV0cnk6emIsQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeTphYixDaXJjbGVHZW9tZXRyeTokYyxDaXJjbGVCdWZmZXJHZW9tZXRyeTplYyxCb3hHZW9tZXRyeTpNYixCb3hCdWZmZXJHZW9tZXRyeTpxYn0pO2ZjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtmYy5wcm90b3R5cGUuY29uc3RydWN0b3I9ZmM7ZmMucHJvdG90eXBlLmlzU2hhZG93TWF0ZXJpYWw9ITA7Z2MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRmEucHJvdG90eXBlKTtnYy5wcm90b3R5cGUuY29uc3RydWN0b3I9Z2M7Z2MucHJvdG90eXBlLmlzUmF3U2hhZGVyTWF0ZXJpYWw9ITA7VWEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoUC5wcm90b3R5cGUpO1VhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1VYTtVYS5wcm90b3R5cGUuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbD0hMDtVYS5wcm90b3R5cGUuY29weT1cbiAgICBmdW5jdGlvbihhKXtQLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmRlZmluZXM9e1NUQU5EQVJEOlwiXCJ9O3RoaXMuY29sb3IuY29weShhLmNvbG9yKTt0aGlzLnJvdWdobmVzcz1hLnJvdWdobmVzczt0aGlzLm1ldGFsbmVzcz1hLm1ldGFsbmVzczt0aGlzLm1hcD1hLm1hcDt0aGlzLmxpZ2h0TWFwPWEubGlnaHRNYXA7dGhpcy5saWdodE1hcEludGVuc2l0eT1hLmxpZ2h0TWFwSW50ZW5zaXR5O3RoaXMuYW9NYXA9YS5hb01hcDt0aGlzLmFvTWFwSW50ZW5zaXR5PWEuYW9NYXBJbnRlbnNpdHk7dGhpcy5lbWlzc2l2ZS5jb3B5KGEuZW1pc3NpdmUpO3RoaXMuZW1pc3NpdmVNYXA9YS5lbWlzc2l2ZU1hcDt0aGlzLmVtaXNzaXZlSW50ZW5zaXR5PWEuZW1pc3NpdmVJbnRlbnNpdHk7dGhpcy5idW1wTWFwPWEuYnVtcE1hcDt0aGlzLmJ1bXBTY2FsZT1hLmJ1bXBTY2FsZTt0aGlzLm5vcm1hbE1hcD1hLm5vcm1hbE1hcDt0aGlzLm5vcm1hbFNjYWxlLmNvcHkoYS5ub3JtYWxTY2FsZSk7XG4gICAgdGhpcy5kaXNwbGFjZW1lbnRNYXA9YS5kaXNwbGFjZW1lbnRNYXA7dGhpcy5kaXNwbGFjZW1lbnRTY2FsZT1hLmRpc3BsYWNlbWVudFNjYWxlO3RoaXMuZGlzcGxhY2VtZW50Qmlhcz1hLmRpc3BsYWNlbWVudEJpYXM7dGhpcy5yb3VnaG5lc3NNYXA9YS5yb3VnaG5lc3NNYXA7dGhpcy5tZXRhbG5lc3NNYXA9YS5tZXRhbG5lc3NNYXA7dGhpcy5hbHBoYU1hcD1hLmFscGhhTWFwO3RoaXMuZW52TWFwPWEuZW52TWFwO3RoaXMuZW52TWFwSW50ZW5zaXR5PWEuZW52TWFwSW50ZW5zaXR5O3RoaXMucmVmcmFjdGlvblJhdGlvPWEucmVmcmFjdGlvblJhdGlvO3RoaXMud2lyZWZyYW1lPWEud2lyZWZyYW1lO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPWEud2lyZWZyYW1lTGluZXdpZHRoO3RoaXMud2lyZWZyYW1lTGluZWNhcD1hLndpcmVmcmFtZUxpbmVjYXA7dGhpcy53aXJlZnJhbWVMaW5lam9pbj1hLndpcmVmcmFtZUxpbmVqb2luO3RoaXMuc2tpbm5pbmc9YS5za2lubmluZzt0aGlzLm1vcnBoVGFyZ2V0cz1cbiAgICBhLm1vcnBoVGFyZ2V0czt0aGlzLm1vcnBoTm9ybWFscz1hLm1vcnBoTm9ybWFscztyZXR1cm4gdGhpc307QWIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVWEucHJvdG90eXBlKTtBYi5wcm90b3R5cGUuY29uc3RydWN0b3I9QWI7QWIucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWw9ITA7QWIucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7VWEucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuZGVmaW5lcz17UEhZU0lDQUw6XCJcIn07dGhpcy5yZWZsZWN0aXZpdHk9YS5yZWZsZWN0aXZpdHk7dGhpcy5jbGVhckNvYXQ9YS5jbGVhckNvYXQ7dGhpcy5jbGVhckNvYXRSb3VnaG5lc3M9YS5jbGVhckNvYXRSb3VnaG5lc3M7cmV0dXJuIHRoaXN9O01hLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtNYS5wcm90b3R5cGUuY29uc3RydWN0b3I9TWE7TWEucHJvdG90eXBlLmlzTWVzaFBob25nTWF0ZXJpYWw9ITA7TWEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsXG4gICAgYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMuc3BlY3VsYXIuY29weShhLnNwZWN1bGFyKTt0aGlzLnNoaW5pbmVzcz1hLnNoaW5pbmVzczt0aGlzLm1hcD1hLm1hcDt0aGlzLmxpZ2h0TWFwPWEubGlnaHRNYXA7dGhpcy5saWdodE1hcEludGVuc2l0eT1hLmxpZ2h0TWFwSW50ZW5zaXR5O3RoaXMuYW9NYXA9YS5hb01hcDt0aGlzLmFvTWFwSW50ZW5zaXR5PWEuYW9NYXBJbnRlbnNpdHk7dGhpcy5lbWlzc2l2ZS5jb3B5KGEuZW1pc3NpdmUpO3RoaXMuZW1pc3NpdmVNYXA9YS5lbWlzc2l2ZU1hcDt0aGlzLmVtaXNzaXZlSW50ZW5zaXR5PWEuZW1pc3NpdmVJbnRlbnNpdHk7dGhpcy5idW1wTWFwPWEuYnVtcE1hcDt0aGlzLmJ1bXBTY2FsZT1hLmJ1bXBTY2FsZTt0aGlzLm5vcm1hbE1hcD1hLm5vcm1hbE1hcDt0aGlzLm5vcm1hbFNjYWxlLmNvcHkoYS5ub3JtYWxTY2FsZSk7dGhpcy5kaXNwbGFjZW1lbnRNYXA9YS5kaXNwbGFjZW1lbnRNYXA7dGhpcy5kaXNwbGFjZW1lbnRTY2FsZT1cbiAgICBhLmRpc3BsYWNlbWVudFNjYWxlO3RoaXMuZGlzcGxhY2VtZW50Qmlhcz1hLmRpc3BsYWNlbWVudEJpYXM7dGhpcy5zcGVjdWxhck1hcD1hLnNwZWN1bGFyTWFwO3RoaXMuYWxwaGFNYXA9YS5hbHBoYU1hcDt0aGlzLmVudk1hcD1hLmVudk1hcDt0aGlzLmNvbWJpbmU9YS5jb21iaW5lO3RoaXMucmVmbGVjdGl2aXR5PWEucmVmbGVjdGl2aXR5O3RoaXMucmVmcmFjdGlvblJhdGlvPWEucmVmcmFjdGlvblJhdGlvO3RoaXMud2lyZWZyYW1lPWEud2lyZWZyYW1lO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPWEud2lyZWZyYW1lTGluZXdpZHRoO3RoaXMud2lyZWZyYW1lTGluZWNhcD1hLndpcmVmcmFtZUxpbmVjYXA7dGhpcy53aXJlZnJhbWVMaW5lam9pbj1hLndpcmVmcmFtZUxpbmVqb2luO3RoaXMuc2tpbm5pbmc9YS5za2lubmluZzt0aGlzLm1vcnBoVGFyZ2V0cz1hLm1vcnBoVGFyZ2V0czt0aGlzLm1vcnBoTm9ybWFscz1hLm1vcnBoTm9ybWFscztyZXR1cm4gdGhpc307QmIucHJvdG90eXBlPVxuICAgIE9iamVjdC5jcmVhdGUoTWEucHJvdG90eXBlKTtCYi5wcm90b3R5cGUuY29uc3RydWN0b3I9QmI7QmIucHJvdG90eXBlLmlzTWVzaFRvb25NYXRlcmlhbD0hMDtCYi5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtNYS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5ncmFkaWVudE1hcD1hLmdyYWRpZW50TWFwO3JldHVybiB0aGlzfTtDYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7Q2IucHJvdG90eXBlLmNvbnN0cnVjdG9yPUNiO0NiLnByb3RvdHlwZS5pc01lc2hOb3JtYWxNYXRlcmlhbD0hMDtDYi5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtQLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmJ1bXBNYXA9YS5idW1wTWFwO3RoaXMuYnVtcFNjYWxlPWEuYnVtcFNjYWxlO3RoaXMubm9ybWFsTWFwPWEubm9ybWFsTWFwO3RoaXMubm9ybWFsU2NhbGUuY29weShhLm5vcm1hbFNjYWxlKTt0aGlzLmRpc3BsYWNlbWVudE1hcD1hLmRpc3BsYWNlbWVudE1hcDtcbiAgICB0aGlzLmRpc3BsYWNlbWVudFNjYWxlPWEuZGlzcGxhY2VtZW50U2NhbGU7dGhpcy5kaXNwbGFjZW1lbnRCaWFzPWEuZGlzcGxhY2VtZW50Qmlhczt0aGlzLndpcmVmcmFtZT1hLndpcmVmcmFtZTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aDt0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9YS5tb3JwaFRhcmdldHM7dGhpcy5tb3JwaE5vcm1hbHM9YS5tb3JwaE5vcm1hbHM7cmV0dXJuIHRoaXN9O0RiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtEYi5wcm90b3R5cGUuY29uc3RydWN0b3I9RGI7RGIucHJvdG90eXBlLmlzTWVzaExhbWJlcnRNYXRlcmlhbD0hMDtEYi5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtQLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5tYXA9YS5tYXA7dGhpcy5saWdodE1hcD1hLmxpZ2h0TWFwO3RoaXMubGlnaHRNYXBJbnRlbnNpdHk9XG4gICAgYS5saWdodE1hcEludGVuc2l0eTt0aGlzLmFvTWFwPWEuYW9NYXA7dGhpcy5hb01hcEludGVuc2l0eT1hLmFvTWFwSW50ZW5zaXR5O3RoaXMuZW1pc3NpdmUuY29weShhLmVtaXNzaXZlKTt0aGlzLmVtaXNzaXZlTWFwPWEuZW1pc3NpdmVNYXA7dGhpcy5lbWlzc2l2ZUludGVuc2l0eT1hLmVtaXNzaXZlSW50ZW5zaXR5O3RoaXMuc3BlY3VsYXJNYXA9YS5zcGVjdWxhck1hcDt0aGlzLmFscGhhTWFwPWEuYWxwaGFNYXA7dGhpcy5lbnZNYXA9YS5lbnZNYXA7dGhpcy5jb21iaW5lPWEuY29tYmluZTt0aGlzLnJlZmxlY3Rpdml0eT1hLnJlZmxlY3Rpdml0eTt0aGlzLnJlZnJhY3Rpb25SYXRpbz1hLnJlZnJhY3Rpb25SYXRpbzt0aGlzLndpcmVmcmFtZT1hLndpcmVmcmFtZTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aDt0aGlzLndpcmVmcmFtZUxpbmVjYXA9YS53aXJlZnJhbWVMaW5lY2FwO3RoaXMud2lyZWZyYW1lTGluZWpvaW49YS53aXJlZnJhbWVMaW5lam9pbjtcbiAgICB0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9YS5tb3JwaFRhcmdldHM7dGhpcy5tb3JwaE5vcm1hbHM9YS5tb3JwaE5vcm1hbHM7cmV0dXJuIHRoaXN9O0ViLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFcucHJvdG90eXBlKTtFYi5wcm90b3R5cGUuY29uc3RydWN0b3I9RWI7RWIucHJvdG90eXBlLmlzTGluZURhc2hlZE1hdGVyaWFsPSEwO0ViLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1cucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuc2NhbGU9YS5zY2FsZTt0aGlzLmRhc2hTaXplPWEuZGFzaFNpemU7dGhpcy5nYXBTaXplPWEuZ2FwU2l6ZTtyZXR1cm4gdGhpc307dmFyIE1nPU9iamVjdC5mcmVlemUoe1NoYWRvd01hdGVyaWFsOmZjLFNwcml0ZU1hdGVyaWFsOmhiLFJhd1NoYWRlck1hdGVyaWFsOmdjLFNoYWRlck1hdGVyaWFsOkZhLFBvaW50c01hdGVyaWFsOkthLE1lc2hQaHlzaWNhbE1hdGVyaWFsOkFiLE1lc2hTdGFuZGFyZE1hdGVyaWFsOlVhLFxuICAgIE1lc2hQaG9uZ01hdGVyaWFsOk1hLE1lc2hUb29uTWF0ZXJpYWw6QmIsTWVzaE5vcm1hbE1hdGVyaWFsOkNiLE1lc2hMYW1iZXJ0TWF0ZXJpYWw6RGIsTWVzaERlcHRoTWF0ZXJpYWw6ZWIsTWVzaERpc3RhbmNlTWF0ZXJpYWw6ZmIsTWVzaEJhc2ljTWF0ZXJpYWw6QWEsTGluZURhc2hlZE1hdGVyaWFsOkViLExpbmVCYXNpY01hdGVyaWFsOlcsTWF0ZXJpYWw6UH0pLEliPXtlbmFibGVkOiExLGZpbGVzOnt9LGFkZDpmdW5jdGlvbihhLGIpeyExIT09dGhpcy5lbmFibGVkJiYodGhpcy5maWxlc1thXT1iKX0sZ2V0OmZ1bmN0aW9uKGEpe2lmKCExIT09dGhpcy5lbmFibGVkKXJldHVybiB0aGlzLmZpbGVzW2FdfSxyZW1vdmU6ZnVuY3Rpb24oYSl7ZGVsZXRlIHRoaXMuZmlsZXNbYV19LGNsZWFyOmZ1bmN0aW9uKCl7dGhpcy5maWxlcz17fX19LHhhPW5ldyBoZSxjYj17fTtPYmplY3QuYXNzaWduKE5hLnByb3RvdHlwZSx7bG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1cbiAgICBcIlwiKTt2b2lkIDAhPT10aGlzLnBhdGgmJihhPXRoaXMucGF0aCthKTthPXRoaXMubWFuYWdlci5yZXNvbHZlVVJMKGEpO3ZhciBlPXRoaXMsZj1JYi5nZXQoYSk7aWYodm9pZCAwIT09ZilyZXR1cm4gZS5tYW5hZ2VyLml0ZW1TdGFydChhKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YiYmYihmKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sMCksZjtpZih2b2lkIDAhPT1jYlthXSljYlthXS5wdXNoKHtvbkxvYWQ6YixvblByb2dyZXNzOmMsb25FcnJvcjpkfSk7ZWxzZXt2YXIgZz1hLm1hdGNoKC9eZGF0YTooLio/KSg7YmFzZTY0KT8sKC4qKSQvKTtpZihnKXtjPWdbMV07dmFyIGg9ISFnWzJdLGc9Z1szXSxnPXdpbmRvdy5kZWNvZGVVUklDb21wb25lbnQoZyk7aCYmKGc9d2luZG93LmF0b2IoZykpO3RyeXt2YXIgaz0odGhpcy5yZXNwb25zZVR5cGV8fFwiXCIpLnRvTG93ZXJDYXNlKCk7c3dpdGNoKGspe2Nhc2UgXCJhcnJheWJ1ZmZlclwiOmNhc2UgXCJibG9iXCI6Zm9yKHZhciBtPW5ldyBVaW50OEFycmF5KGcubGVuZ3RoKSxcbiAgICBoPTA7aDxnLmxlbmd0aDtoKyspbVtoXT1nLmNoYXJDb2RlQXQoaCk7dmFyIGw9XCJibG9iXCI9PT1rP25ldyBCbG9iKFttLmJ1ZmZlcl0se3R5cGU6Y30pOm0uYnVmZmVyO2JyZWFrO2Nhc2UgXCJkb2N1bWVudFwiOmw9KG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhnLGMpO2JyZWFrO2Nhc2UgXCJqc29uXCI6bD1KU09OLnBhcnNlKGcpO2JyZWFrO2RlZmF1bHQ6bD1nfXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YiYmYihsKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sMCl9Y2F0Y2godSl7d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtkJiZkKHUpO2UubWFuYWdlci5pdGVtRW5kKGEpO2UubWFuYWdlci5pdGVtRXJyb3IoYSl9LDApfX1lbHNle2NiW2FdPVtdO2NiW2FdLnB1c2goe29uTG9hZDpiLG9uUHJvZ3Jlc3M6YyxvbkVycm9yOmR9KTt2YXIgbj1uZXcgWE1MSHR0cFJlcXVlc3Q7bi5vcGVuKFwiR0VUXCIsYSwhMCk7bi5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKGIpe3ZhciBjPVxuICAgIHRoaXMucmVzcG9uc2U7SWIuYWRkKGEsYyk7dmFyIGQ9Y2JbYV07ZGVsZXRlIGNiW2FdO2lmKDIwMD09PXRoaXMuc3RhdHVzKXtmb3IodmFyIGY9MCxnPWQubGVuZ3RoO2Y8ZztmKyspe3ZhciBoPWRbZl07aWYoaC5vbkxvYWQpaC5vbkxvYWQoYyl9ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9ZWxzZSBpZigwPT09dGhpcy5zdGF0dXMpe2NvbnNvbGUud2FybihcIlRIUkVFLkZpbGVMb2FkZXI6IEhUVFAgU3RhdHVzIDAgcmVjZWl2ZWQuXCIpO2Y9MDtmb3IoZz1kLmxlbmd0aDtmPGc7ZisrKWlmKGg9ZFtmXSxoLm9uTG9hZCloLm9uTG9hZChjKTtlLm1hbmFnZXIuaXRlbUVuZChhKX1lbHNle2Y9MDtmb3IoZz1kLmxlbmd0aDtmPGc7ZisrKWlmKGg9ZFtmXSxoLm9uRXJyb3IpaC5vbkVycm9yKGIpO2UubWFuYWdlci5pdGVtRW5kKGEpO2UubWFuYWdlci5pdGVtRXJyb3IoYSl9fSwhMSk7bi5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIixmdW5jdGlvbihiKXtmb3IodmFyIGM9Y2JbYV0sZD0wLGU9XG4gICAgYy5sZW5ndGg7ZDxlO2QrKyl7dmFyIGY9Y1tkXTtpZihmLm9uUHJvZ3Jlc3MpZi5vblByb2dyZXNzKGIpfX0sITEpO24uYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oYil7dmFyIGM9Y2JbYV07ZGVsZXRlIGNiW2FdO2Zvcih2YXIgZD0wLGY9Yy5sZW5ndGg7ZDxmO2QrKyl7dmFyIGc9Y1tkXTtpZihnLm9uRXJyb3IpZy5vbkVycm9yKGIpfWUubWFuYWdlci5pdGVtRW5kKGEpO2UubWFuYWdlci5pdGVtRXJyb3IoYSl9LCExKTt2b2lkIDAhPT10aGlzLnJlc3BvbnNlVHlwZSYmKG4ucmVzcG9uc2VUeXBlPXRoaXMucmVzcG9uc2VUeXBlKTt2b2lkIDAhPT10aGlzLndpdGhDcmVkZW50aWFscyYmKG4ud2l0aENyZWRlbnRpYWxzPXRoaXMud2l0aENyZWRlbnRpYWxzKTtuLm92ZXJyaWRlTWltZVR5cGUmJm4ub3ZlcnJpZGVNaW1lVHlwZSh2b2lkIDAhPT10aGlzLm1pbWVUeXBlP3RoaXMubWltZVR5cGU6XCJ0ZXh0L3BsYWluXCIpO2ZvcihoIGluIHRoaXMucmVxdWVzdEhlYWRlciluLnNldFJlcXVlc3RIZWFkZXIoaCxcbiAgICB0aGlzLnJlcXVlc3RIZWFkZXJbaF0pO24uc2VuZChudWxsKX1lLm1hbmFnZXIuaXRlbVN0YXJ0KGEpO3JldHVybiBufX0sc2V0UGF0aDpmdW5jdGlvbihhKXt0aGlzLnBhdGg9YTtyZXR1cm4gdGhpc30sc2V0UmVzcG9uc2VUeXBlOmZ1bmN0aW9uKGEpe3RoaXMucmVzcG9uc2VUeXBlPWE7cmV0dXJuIHRoaXN9LHNldFdpdGhDcmVkZW50aWFsczpmdW5jdGlvbihhKXt0aGlzLndpdGhDcmVkZW50aWFscz1hO3JldHVybiB0aGlzfSxzZXRNaW1lVHlwZTpmdW5jdGlvbihhKXt0aGlzLm1pbWVUeXBlPWE7cmV0dXJuIHRoaXN9LHNldFJlcXVlc3RIZWFkZXI6ZnVuY3Rpb24oYSl7dGhpcy5yZXF1ZXN0SGVhZGVyPWE7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmFzc2lnbihnZi5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShlKXttLmxvYWQoYVtlXSxmdW5jdGlvbihhKXthPWcuX3BhcnNlcihhLCEwKTtoW2VdPXt3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodCxcbiAgICBmb3JtYXQ6YS5mb3JtYXQsbWlwbWFwczphLm1pcG1hcHN9O2YrPTE7Nj09PWYmJigxPT09YS5taXBtYXBDb3VudCYmKGsubWluRmlsdGVyPTEwMDYpLGsuZm9ybWF0PWEuZm9ybWF0LGsubmVlZHNVcGRhdGU9ITAsYiYmYihrKSl9LGMsZCl9dmFyIGYsZz10aGlzLGg9W10saz1uZXcgU2I7ay5pbWFnZT1oO3ZhciBtPW5ldyBOYSh0aGlzLm1hbmFnZXIpO20uc2V0UGF0aCh0aGlzLnBhdGgpO20uc2V0UmVzcG9uc2VUeXBlKFwiYXJyYXlidWZmZXJcIik7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGw9Zj0wLG49YS5sZW5ndGg7bDxuOysrbCllKGwpO2Vsc2UgbS5sb2FkKGEsZnVuY3Rpb24oYSl7YT1nLl9wYXJzZXIoYSwhMCk7aWYoYS5pc0N1YmVtYXApZm9yKHZhciBjPWEubWlwbWFwcy5sZW5ndGgvYS5taXBtYXBDb3VudCxkPTA7ZDxjO2QrKyl7aFtkXT17bWlwbWFwczpbXX07Zm9yKHZhciBlPTA7ZTxhLm1pcG1hcENvdW50O2UrKyloW2RdLm1pcG1hcHMucHVzaChhLm1pcG1hcHNbZCpcbiAgICBhLm1pcG1hcENvdW50K2VdKSxoW2RdLmZvcm1hdD1hLmZvcm1hdCxoW2RdLndpZHRoPWEud2lkdGgsaFtkXS5oZWlnaHQ9YS5oZWlnaHR9ZWxzZSBrLmltYWdlLndpZHRoPWEud2lkdGgsay5pbWFnZS5oZWlnaHQ9YS5oZWlnaHQsay5taXBtYXBzPWEubWlwbWFwczsxPT09YS5taXBtYXBDb3VudCYmKGsubWluRmlsdGVyPTEwMDYpO2suZm9ybWF0PWEuZm9ybWF0O2submVlZHNVcGRhdGU9ITA7YiYmYihrKX0sYyxkKTtyZXR1cm4ga30sc2V0UGF0aDpmdW5jdGlvbihhKXt0aGlzLnBhdGg9YTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKGllLnByb3RvdHlwZSx7bG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGY9bmV3IGxiLGc9bmV3IE5hKHRoaXMubWFuYWdlcik7Zy5zZXRSZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTtnLmxvYWQoYSxmdW5jdGlvbihhKXtpZihhPWUuX3BhcnNlcihhKSl2b2lkIDAhPT1hLmltYWdlP2YuaW1hZ2U9YS5pbWFnZTp2b2lkIDAhPT1cbiAgICBhLmRhdGEmJihmLmltYWdlLndpZHRoPWEud2lkdGgsZi5pbWFnZS5oZWlnaHQ9YS5oZWlnaHQsZi5pbWFnZS5kYXRhPWEuZGF0YSksZi53cmFwUz12b2lkIDAhPT1hLndyYXBTP2Eud3JhcFM6MTAwMSxmLndyYXBUPXZvaWQgMCE9PWEud3JhcFQ/YS53cmFwVDoxMDAxLGYubWFnRmlsdGVyPXZvaWQgMCE9PWEubWFnRmlsdGVyP2EubWFnRmlsdGVyOjEwMDYsZi5taW5GaWx0ZXI9dm9pZCAwIT09YS5taW5GaWx0ZXI/YS5taW5GaWx0ZXI6MTAwOCxmLmFuaXNvdHJvcHk9dm9pZCAwIT09YS5hbmlzb3Ryb3B5P2EuYW5pc290cm9weToxLHZvaWQgMCE9PWEuZm9ybWF0JiYoZi5mb3JtYXQ9YS5mb3JtYXQpLHZvaWQgMCE9PWEudHlwZSYmKGYudHlwZT1hLnR5cGUpLHZvaWQgMCE9PWEubWlwbWFwcyYmKGYubWlwbWFwcz1hLm1pcG1hcHMpLDE9PT1hLm1pcG1hcENvdW50JiYoZi5taW5GaWx0ZXI9MTAwNiksZi5uZWVkc1VwZGF0ZT0hMCxiJiZiKGYsYSl9LGMsZCk7cmV0dXJuIGZ9fSk7T2JqZWN0LmFzc2lnbihhZC5wcm90b3R5cGUsXG4gICAge2Nyb3NzT3JpZ2luOlwiQW5vbnltb3VzXCIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1cIlwiKTt2b2lkIDAhPT10aGlzLnBhdGgmJihhPXRoaXMucGF0aCthKTthPXRoaXMubWFuYWdlci5yZXNvbHZlVVJMKGEpO3ZhciBlPXRoaXMsZj1JYi5nZXQoYSk7aWYodm9pZCAwIT09ZilyZXR1cm4gZS5tYW5hZ2VyLml0ZW1TdGFydChhKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YiYmYihmKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sMCksZjtjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcImltZ1wiKTtjLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsZnVuY3Rpb24oKXtJYi5hZGQoYSx0aGlzKTtiJiZiKHRoaXMpO2UubWFuYWdlci5pdGVtRW5kKGEpfSwhMSk7Yy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIixmdW5jdGlvbihiKXtkJiZkKGIpO2UubWFuYWdlci5pdGVtRW5kKGEpO2UubWFuYWdlci5pdGVtRXJyb3IoYSl9LFxuICAgICExKTtcImRhdGE6XCIhPT1hLnN1YnN0cigwLDUpJiZ2b2lkIDAhPT10aGlzLmNyb3NzT3JpZ2luJiYoYy5jcm9zc09yaWdpbj10aGlzLmNyb3NzT3JpZ2luKTtlLm1hbmFnZXIuaXRlbVN0YXJ0KGEpO2Muc3JjPWE7cmV0dXJuIGN9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YTtyZXR1cm4gdGhpc30sc2V0UGF0aDpmdW5jdGlvbihhKXt0aGlzLnBhdGg9YTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKGplLnByb3RvdHlwZSx7Y3Jvc3NPcmlnaW46XCJBbm9ueW1vdXNcIixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYyl7Zy5sb2FkKGFbY10sZnVuY3Rpb24oYSl7Zi5pbWFnZXNbY109YTtoKys7Nj09PWgmJihmLm5lZWRzVXBkYXRlPSEwLGImJmIoZikpfSx2b2lkIDAsZCl9dmFyIGY9bmV3IGRiLGc9bmV3IGFkKHRoaXMubWFuYWdlcik7Zy5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtnLnNldFBhdGgodGhpcy5wYXRoKTtcbiAgICB2YXIgaD0wO2ZvcihjPTA7YzxhLmxlbmd0aDsrK2MpZShjKTtyZXR1cm4gZn0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hO3JldHVybiB0aGlzfSxzZXRQYXRoOmZ1bmN0aW9uKGEpe3RoaXMucGF0aD1hO3JldHVybiB0aGlzfX0pO09iamVjdC5hc3NpZ24oQWQucHJvdG90eXBlLHtjcm9zc09yaWdpbjpcIkFub255bW91c1wiLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IFUsZj1uZXcgYWQodGhpcy5tYW5hZ2VyKTtmLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2Yuc2V0UGF0aCh0aGlzLnBhdGgpO2YubG9hZChhLGZ1bmN0aW9uKGMpe2UuaW1hZ2U9YztjPTA8YS5zZWFyY2goL1xcLihqcGd8anBlZykkLyl8fDA9PT1hLnNlYXJjaCgvXmRhdGFcXDppbWFnZVxcL2pwZWcvKTtlLmZvcm1hdD1jPzEwMjI6MTAyMztlLm5lZWRzVXBkYXRlPSEwO3ZvaWQgMCE9PWImJmIoZSl9LGMsZCk7cmV0dXJuIGV9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49XG4gICAgYTtyZXR1cm4gdGhpc30sc2V0UGF0aDpmdW5jdGlvbihhKXt0aGlzLnBhdGg9YTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKEMucHJvdG90eXBlLHtnZXRQb2ludDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkN1cnZlOiAuZ2V0UG9pbnQoKSBub3QgaW1wbGVtZW50ZWQuXCIpO3JldHVybiBudWxsfSxnZXRQb2ludEF0OmZ1bmN0aW9uKGEsYil7YT10aGlzLmdldFV0b1RtYXBwaW5nKGEpO3JldHVybiB0aGlzLmdldFBvaW50KGEsYil9LGdldFBvaW50czpmdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT01KTtmb3IodmFyIGI9W10sYz0wO2M8PWE7YysrKWIucHVzaCh0aGlzLmdldFBvaW50KGMvYSkpO3JldHVybiBifSxnZXRTcGFjZWRQb2ludHM6ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9NSk7Zm9yKHZhciBiPVtdLGM9MDtjPD1hO2MrKyliLnB1c2godGhpcy5nZXRQb2ludEF0KGMvYSkpO3JldHVybiBifSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldExlbmd0aHMoKTtcbiAgICByZXR1cm4gYVthLmxlbmd0aC0xXX0sZ2V0TGVuZ3RoczpmdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT10aGlzLmFyY0xlbmd0aERpdmlzaW9ucyk7aWYodGhpcy5jYWNoZUFyY0xlbmd0aHMmJnRoaXMuY2FjaGVBcmNMZW5ndGhzLmxlbmd0aD09PWErMSYmIXRoaXMubmVlZHNVcGRhdGUpcmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzO3RoaXMubmVlZHNVcGRhdGU9ITE7dmFyIGI9W10sYz10aGlzLmdldFBvaW50KDApLGQsZT0wO2IucHVzaCgwKTtmb3IoZD0xO2Q8PWE7ZCsrKXt2YXIgZj10aGlzLmdldFBvaW50KGQvYSk7ZSs9Zi5kaXN0YW5jZVRvKGMpO2IucHVzaChlKTtjPWZ9cmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzPWJ9LHVwZGF0ZUFyY0xlbmd0aHM6ZnVuY3Rpb24oKXt0aGlzLm5lZWRzVXBkYXRlPSEwO3RoaXMuZ2V0TGVuZ3RocygpfSxnZXRVdG9UbWFwcGluZzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0TGVuZ3RocygpLGQ9Yy5sZW5ndGg7Yj1iP2I6YSpcbiAgICBjW2QtMV07Zm9yKHZhciBlPTAsZj1kLTEsZztlPD1mOylpZihhPU1hdGguZmxvb3IoZSsoZi1lKS8yKSxnPWNbYV0tYiwwPmcpZT1hKzE7ZWxzZSBpZigwPGcpZj1hLTE7ZWxzZXtmPWE7YnJlYWt9YT1mO2lmKGNbYV09PT1iKXJldHVybiBhLyhkLTEpO2U9Y1thXTtyZXR1cm4oYSsoYi1lKS8oY1thKzFdLWUpKS8oZC0xKX0sZ2V0VGFuZ2VudDpmdW5jdGlvbihhKXt2YXIgYj1hLTFFLTQ7YSs9MUUtNDswPmImJihiPTApOzE8YSYmKGE9MSk7Yj10aGlzLmdldFBvaW50KGIpO3JldHVybiB0aGlzLmdldFBvaW50KGEpLmNsb25lKCkuc3ViKGIpLm5vcm1hbGl6ZSgpfSxnZXRUYW5nZW50QXQ6ZnVuY3Rpb24oYSl7YT10aGlzLmdldFV0b1RtYXBwaW5nKGEpO3JldHVybiB0aGlzLmdldFRhbmdlbnQoYSl9LGNvbXB1dGVGcmVuZXRGcmFtZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgcCxkPVtdLGU9W10sZj1bXSxnPW5ldyBwLGg9bmV3IE8saztmb3Ioaz0wO2s8PWE7aysrKXt2YXIgbT1cbiAgICBrL2E7ZFtrXT10aGlzLmdldFRhbmdlbnRBdChtKTtkW2tdLm5vcm1hbGl6ZSgpfWVbMF09bmV3IHA7ZlswXT1uZXcgcDtrPU51bWJlci5NQVhfVkFMVUU7bT1NYXRoLmFicyhkWzBdLngpO3ZhciBsPU1hdGguYWJzKGRbMF0ueSksbj1NYXRoLmFicyhkWzBdLnopO208PWsmJihrPW0sYy5zZXQoMSwwLDApKTtsPD1rJiYoaz1sLGMuc2V0KDAsMSwwKSk7bjw9ayYmYy5zZXQoMCwwLDEpO2cuY3Jvc3NWZWN0b3JzKGRbMF0sYykubm9ybWFsaXplKCk7ZVswXS5jcm9zc1ZlY3RvcnMoZFswXSxnKTtmWzBdLmNyb3NzVmVjdG9ycyhkWzBdLGVbMF0pO2ZvcihrPTE7azw9YTtrKyspZVtrXT1lW2stMV0uY2xvbmUoKSxmW2tdPWZbay0xXS5jbG9uZSgpLGcuY3Jvc3NWZWN0b3JzKGRbay0xXSxkW2tdKSxnLmxlbmd0aCgpPk51bWJlci5FUFNJTE9OJiYoZy5ub3JtYWxpemUoKSxjPU1hdGguYWNvcyhRLmNsYW1wKGRbay0xXS5kb3QoZFtrXSksLTEsMSkpLGVba10uYXBwbHlNYXRyaXg0KGgubWFrZVJvdGF0aW9uQXhpcyhnLFxuICAgIGMpKSksZltrXS5jcm9zc1ZlY3RvcnMoZFtrXSxlW2tdKTtpZighMD09PWIpZm9yKGM9TWF0aC5hY29zKFEuY2xhbXAoZVswXS5kb3QoZVthXSksLTEsMSkpLGMvPWEsMDxkWzBdLmRvdChnLmNyb3NzVmVjdG9ycyhlWzBdLGVbYV0pKSYmKGM9LWMpLGs9MTtrPD1hO2srKyllW2tdLmFwcGx5TWF0cml4NChoLm1ha2VSb3RhdGlvbkF4aXMoZFtrXSxjKmspKSxmW2tdLmNyb3NzVmVjdG9ycyhkW2tdLGVba10pO3JldHVybnt0YW5nZW50czpkLG5vcm1hbHM6ZSxiaW5vcm1hbHM6Zn19LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYXJjTGVuZ3RoRGl2aXNpb25zPWEuYXJjTGVuZ3RoRGl2aXNpb25zO3JldHVybiB0aGlzfSx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT17bWV0YWRhdGE6e3ZlcnNpb246NC41LHR5cGU6XCJDdXJ2ZVwiLGdlbmVyYXRvcjpcIkN1cnZlLnRvSlNPTlwifX07YS5hcmNMZW5ndGhEaXZpc2lvbnM9XG4gICAgdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7YS50eXBlPXRoaXMudHlwZTtyZXR1cm4gYX0sZnJvbUpTT046ZnVuY3Rpb24oYSl7dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM9YS5hcmNMZW5ndGhEaXZpc2lvbnM7cmV0dXJuIHRoaXN9fSk7QmEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQy5wcm90b3R5cGUpO0JhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1CYTtCYS5wcm90b3R5cGUuaXNFbGxpcHNlQ3VydmU9ITA7QmEucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEsYil7Yj1ifHxuZXcgRDtmb3IodmFyIGM9MipNYXRoLlBJLGQ9dGhpcy5hRW5kQW5nbGUtdGhpcy5hU3RhcnRBbmdsZSxlPU1hdGguYWJzKGQpPE51bWJlci5FUFNJTE9OOzA+ZDspZCs9Yztmb3IoO2Q+YzspZC09YztkPE51bWJlci5FUFNJTE9OJiYoZD1lPzA6Yyk7ITAhPT10aGlzLmFDbG9ja3dpc2V8fGV8fChkPWQ9PT1jPy1jOmQtYyk7Yz10aGlzLmFTdGFydEFuZ2xlK2EqZDthPXRoaXMuYVgrdGhpcy54UmFkaXVzKlxuICAgIE1hdGguY29zKGMpO3ZhciBmPXRoaXMuYVkrdGhpcy55UmFkaXVzKk1hdGguc2luKGMpOzAhPT10aGlzLmFSb3RhdGlvbiYmKGM9TWF0aC5jb3ModGhpcy5hUm90YXRpb24pLGQ9TWF0aC5zaW4odGhpcy5hUm90YXRpb24pLGU9YS10aGlzLmFYLGYtPXRoaXMuYVksYT1lKmMtZipkK3RoaXMuYVgsZj1lKmQrZipjK3RoaXMuYVkpO3JldHVybiBiLnNldChhLGYpfTtCYS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmFYPWEuYVg7dGhpcy5hWT1hLmFZO3RoaXMueFJhZGl1cz1hLnhSYWRpdXM7dGhpcy55UmFkaXVzPWEueVJhZGl1czt0aGlzLmFTdGFydEFuZ2xlPWEuYVN0YXJ0QW5nbGU7dGhpcy5hRW5kQW5nbGU9YS5hRW5kQW5nbGU7dGhpcy5hQ2xvY2t3aXNlPWEuYUNsb2Nrd2lzZTt0aGlzLmFSb3RhdGlvbj1hLmFSb3RhdGlvbjtyZXR1cm4gdGhpc307QmEucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPVxuICAgIEMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EuYVg9dGhpcy5hWDthLmFZPXRoaXMuYVk7YS54UmFkaXVzPXRoaXMueFJhZGl1czthLnlSYWRpdXM9dGhpcy55UmFkaXVzO2EuYVN0YXJ0QW5nbGU9dGhpcy5hU3RhcnRBbmdsZTthLmFFbmRBbmdsZT10aGlzLmFFbmRBbmdsZTthLmFDbG9ja3dpc2U9dGhpcy5hQ2xvY2t3aXNlO2EuYVJvdGF0aW9uPXRoaXMuYVJvdGF0aW9uO3JldHVybiBhfTtCYS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMuYVg9YS5hWDt0aGlzLmFZPWEuYVk7dGhpcy54UmFkaXVzPWEueFJhZGl1czt0aGlzLnlSYWRpdXM9YS55UmFkaXVzO3RoaXMuYVN0YXJ0QW5nbGU9YS5hU3RhcnRBbmdsZTt0aGlzLmFFbmRBbmdsZT1hLmFFbmRBbmdsZTt0aGlzLmFDbG9ja3dpc2U9YS5hQ2xvY2t3aXNlO3RoaXMuYVJvdGF0aW9uPWEuYVJvdGF0aW9uO3JldHVybiB0aGlzfTtoYy5wcm90b3R5cGU9XG4gICAgT2JqZWN0LmNyZWF0ZShCYS5wcm90b3R5cGUpO2hjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1oYztoYy5wcm90b3R5cGUuaXNBcmNDdXJ2ZT0hMDt2YXIgVGQ9bmV3IHAsRWU9bmV3IGtlLEZlPW5ldyBrZSxHZT1uZXcga2U7Y2EucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQy5wcm90b3R5cGUpO2NhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jYTtjYS5wcm90b3R5cGUuaXNDYXRtdWxsUm9tQ3VydmUzPSEwO2NhLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IHA7dmFyIGM9dGhpcy5wb2ludHMsZD1jLmxlbmd0aDthKj1kLSh0aGlzLmNsb3NlZD8wOjEpO3ZhciBlPU1hdGguZmxvb3IoYSk7YS09ZTt0aGlzLmNsb3NlZD9lKz0wPGU/MDooTWF0aC5mbG9vcihNYXRoLmFicyhlKS9jLmxlbmd0aCkrMSkqYy5sZW5ndGg6MD09PWEmJmU9PT1kLTEmJihlPWQtMixhPTEpO2lmKHRoaXMuY2xvc2VkfHwwPGUpdmFyIGY9Y1soZS0xKSVkXTtlbHNlIFRkLnN1YlZlY3RvcnMoY1swXSxcbiAgICBjWzFdKS5hZGQoY1swXSksZj1UZDt2YXIgZz1jW2UlZF07dmFyIGg9Y1soZSsxKSVkXTt0aGlzLmNsb3NlZHx8ZSsyPGQ/Yz1jWyhlKzIpJWRdOihUZC5zdWJWZWN0b3JzKGNbZC0xXSxjW2QtMl0pLmFkZChjW2QtMV0pLGM9VGQpO2lmKFwiY2VudHJpcGV0YWxcIj09PXRoaXMuY3VydmVUeXBlfHxcImNob3JkYWxcIj09PXRoaXMuY3VydmVUeXBlKXt2YXIgaz1cImNob3JkYWxcIj09PXRoaXMuY3VydmVUeXBlPy41Oi4yNSxkPU1hdGgucG93KGYuZGlzdGFuY2VUb1NxdWFyZWQoZyksayksZT1NYXRoLnBvdyhnLmRpc3RhbmNlVG9TcXVhcmVkKGgpLGspLGs9TWF0aC5wb3coaC5kaXN0YW5jZVRvU3F1YXJlZChjKSxrKTsxRS00PmUmJihlPTEpOzFFLTQ+ZCYmKGQ9ZSk7MUUtND5rJiYoaz1lKTtFZS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oZi54LGcueCxoLngsYy54LGQsZSxrKTtGZS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oZi55LGcueSxoLnksYy55LGQsZSxrKTtHZS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oZi56LFxuICAgIGcueixoLnosYy56LGQsZSxrKX1lbHNlXCJjYXRtdWxscm9tXCI9PT10aGlzLmN1cnZlVHlwZSYmKEVlLmluaXRDYXRtdWxsUm9tKGYueCxnLngsaC54LGMueCx0aGlzLnRlbnNpb24pLEZlLmluaXRDYXRtdWxsUm9tKGYueSxnLnksaC55LGMueSx0aGlzLnRlbnNpb24pLEdlLmluaXRDYXRtdWxsUm9tKGYueixnLnosaC56LGMueix0aGlzLnRlbnNpb24pKTtiLnNldChFZS5jYWxjKGEpLEZlLmNhbGMoYSksR2UuY2FsYyhhKSk7cmV0dXJuIGJ9O2NhLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMucG9pbnRzPVtdO2Zvcih2YXIgYj0wLGM9YS5wb2ludHMubGVuZ3RoO2I8YztiKyspdGhpcy5wb2ludHMucHVzaChhLnBvaW50c1tiXS5jbG9uZSgpKTt0aGlzLmNsb3NlZD1hLmNsb3NlZDt0aGlzLmN1cnZlVHlwZT1hLmN1cnZlVHlwZTt0aGlzLnRlbnNpb249YS50ZW5zaW9uO3JldHVybiB0aGlzfTtjYS5wcm90b3R5cGUudG9KU09OPVxuICAgIGZ1bmN0aW9uKCl7dmFyIGE9Qy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7YS5wb2ludHM9W107Zm9yKHZhciBiPTAsYz10aGlzLnBvaW50cy5sZW5ndGg7YjxjO2IrKylhLnBvaW50cy5wdXNoKHRoaXMucG9pbnRzW2JdLnRvQXJyYXkoKSk7YS5jbG9zZWQ9dGhpcy5jbG9zZWQ7YS5jdXJ2ZVR5cGU9dGhpcy5jdXJ2ZVR5cGU7YS50ZW5zaW9uPXRoaXMudGVuc2lvbjtyZXR1cm4gYX07Y2EucHJvdG90eXBlLmZyb21KU09OPWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLnBvaW50cz1bXTtmb3IodmFyIGI9MCxjPWEucG9pbnRzLmxlbmd0aDtiPGM7YisrKXt2YXIgZD1hLnBvaW50c1tiXTt0aGlzLnBvaW50cy5wdXNoKChuZXcgcCkuZnJvbUFycmF5KGQpKX10aGlzLmNsb3NlZD1hLmNsb3NlZDt0aGlzLmN1cnZlVHlwZT1hLmN1cnZlVHlwZTt0aGlzLnRlbnNpb249YS50ZW5zaW9uO3JldHVybiB0aGlzfTtPYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSk7XG4gICAgT2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPU9hO09hLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmU9ITA7T2EucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEsYil7Yj1ifHxuZXcgRDt2YXIgYz10aGlzLnYwLGQ9dGhpcy52MSxlPXRoaXMudjIsZj10aGlzLnYzO2Iuc2V0KGNkKGEsYy54LGQueCxlLngsZi54KSxjZChhLGMueSxkLnksZS55LGYueSkpO3JldHVybiBifTtPYS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnYwLmNvcHkoYS52MCk7dGhpcy52MS5jb3B5KGEudjEpO3RoaXMudjIuY29weShhLnYyKTt0aGlzLnYzLmNvcHkoYS52Myk7cmV0dXJuIHRoaXN9O09hLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1DLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLnYwPXRoaXMudjAudG9BcnJheSgpO2EudjE9dGhpcy52MS50b0FycmF5KCk7YS52Mj10aGlzLnYyLnRvQXJyYXkoKTthLnYzPVxuICAgIHRoaXMudjMudG9BcnJheSgpO3JldHVybiBhfTtPYS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMudjAuZnJvbUFycmF5KGEudjApO3RoaXMudjEuZnJvbUFycmF5KGEudjEpO3RoaXMudjIuZnJvbUFycmF5KGEudjIpO3RoaXMudjMuZnJvbUFycmF5KGEudjMpO3JldHVybiB0aGlzfTtWYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSk7VmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVZhO1ZhLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUzPSEwO1ZhLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IHA7dmFyIGM9dGhpcy52MCxkPXRoaXMudjEsZT10aGlzLnYyLGY9dGhpcy52MztiLnNldChjZChhLGMueCxkLngsZS54LGYueCksY2QoYSxjLnksZC55LGUueSxmLnkpLGNkKGEsYy56LGQueixlLnosZi56KSk7cmV0dXJuIGJ9O1ZhLnByb3RvdHlwZS5jb3B5PVxuICAgIGZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMudjAuY29weShhLnYwKTt0aGlzLnYxLmNvcHkoYS52MSk7dGhpcy52Mi5jb3B5KGEudjIpO3RoaXMudjMuY29weShhLnYzKTtyZXR1cm4gdGhpc307VmEucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPUMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EudjA9dGhpcy52MC50b0FycmF5KCk7YS52MT10aGlzLnYxLnRvQXJyYXkoKTthLnYyPXRoaXMudjIudG9BcnJheSgpO2EudjM9dGhpcy52My50b0FycmF5KCk7cmV0dXJuIGF9O1ZhLnByb3RvdHlwZS5mcm9tSlNPTj1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsYSk7dGhpcy52MC5mcm9tQXJyYXkoYS52MCk7dGhpcy52MS5mcm9tQXJyYXkoYS52MSk7dGhpcy52Mi5mcm9tQXJyYXkoYS52Mik7dGhpcy52My5mcm9tQXJyYXkoYS52Myk7cmV0dXJuIHRoaXN9O3lhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEMucHJvdG90eXBlKTtcbiAgICB5YS5wcm90b3R5cGUuY29uc3RydWN0b3I9eWE7eWEucHJvdG90eXBlLmlzTGluZUN1cnZlPSEwO3lhLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IEQ7MT09PWE/Yi5jb3B5KHRoaXMudjIpOihiLmNvcHkodGhpcy52Mikuc3ViKHRoaXMudjEpLGIubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMudjEpKTtyZXR1cm4gYn07eWEucHJvdG90eXBlLmdldFBvaW50QXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5nZXRQb2ludChhLGIpfTt5YS5wcm90b3R5cGUuZ2V0VGFuZ2VudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnYyLmNsb25lKCkuc3ViKHRoaXMudjEpLm5vcm1hbGl6ZSgpfTt5YS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnYxLmNvcHkoYS52MSk7dGhpcy52Mi5jb3B5KGEudjIpO3JldHVybiB0aGlzfTt5YS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIGE9Qy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XG4gICAgYS52MT10aGlzLnYxLnRvQXJyYXkoKTthLnYyPXRoaXMudjIudG9BcnJheSgpO3JldHVybiBhfTt5YS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMudjEuZnJvbUFycmF5KGEudjEpO3RoaXMudjIuZnJvbUFycmF5KGEudjIpO3JldHVybiB0aGlzfTtQYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSk7UGEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVBhO1BhLnByb3RvdHlwZS5pc0xpbmVDdXJ2ZTM9ITA7UGEucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEsYil7Yj1ifHxuZXcgcDsxPT09YT9iLmNvcHkodGhpcy52Mik6KGIuY29weSh0aGlzLnYyKS5zdWIodGhpcy52MSksYi5tdWx0aXBseVNjYWxhcihhKS5hZGQodGhpcy52MSkpO3JldHVybiBifTtQYS5wcm90b3R5cGUuZ2V0UG9pbnRBdD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmdldFBvaW50KGEsYil9O1BhLnByb3RvdHlwZS5jb3B5PVxuICAgIGZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMudjEuY29weShhLnYxKTt0aGlzLnYyLmNvcHkoYS52Mik7cmV0dXJuIHRoaXN9O1BhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1DLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLnYxPXRoaXMudjEudG9BcnJheSgpO2EudjI9dGhpcy52Mi50b0FycmF5KCk7cmV0dXJuIGF9O1BhLnByb3RvdHlwZS5mcm9tSlNPTj1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsYSk7dGhpcy52MS5mcm9tQXJyYXkoYS52MSk7dGhpcy52Mi5mcm9tQXJyYXkoYS52Mik7cmV0dXJuIHRoaXN9O1FhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEMucHJvdG90eXBlKTtRYS5wcm90b3R5cGUuY29uc3RydWN0b3I9UWE7UWEucHJvdG90eXBlLmlzUXVhZHJhdGljQmV6aWVyQ3VydmU9ITA7UWEucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEsYil7Yj1ifHxuZXcgRDt2YXIgYz1cbiAgICB0aGlzLnYwLGQ9dGhpcy52MSxlPXRoaXMudjI7Yi5zZXQoYmQoYSxjLngsZC54LGUueCksYmQoYSxjLnksZC55LGUueSkpO3JldHVybiBifTtRYS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnYwLmNvcHkoYS52MCk7dGhpcy52MS5jb3B5KGEudjEpO3RoaXMudjIuY29weShhLnYyKTtyZXR1cm4gdGhpc307UWEucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPUMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EudjA9dGhpcy52MC50b0FycmF5KCk7YS52MT10aGlzLnYxLnRvQXJyYXkoKTthLnYyPXRoaXMudjIudG9BcnJheSgpO3JldHVybiBhfTtRYS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMudjAuZnJvbUFycmF5KGEudjApO3RoaXMudjEuZnJvbUFycmF5KGEudjEpO3RoaXMudjIuZnJvbUFycmF5KGEudjIpO3JldHVybiB0aGlzfTtcbiAgICBXYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSk7V2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPVdhO1dhLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlMz0hMDtXYS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSxiKXtiPWJ8fG5ldyBwO3ZhciBjPXRoaXMudjAsZD10aGlzLnYxLGU9dGhpcy52MjtiLnNldChiZChhLGMueCxkLngsZS54KSxiZChhLGMueSxkLnksZS55KSxiZChhLGMueixkLnosZS56KSk7cmV0dXJuIGJ9O1dhLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMudjAuY29weShhLnYwKTt0aGlzLnYxLmNvcHkoYS52MSk7dGhpcy52Mi5jb3B5KGEudjIpO3JldHVybiB0aGlzfTtXYS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIGE9Qy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7YS52MD10aGlzLnYwLnRvQXJyYXkoKTthLnYxPXRoaXMudjEudG9BcnJheSgpO1xuICAgIGEudjI9dGhpcy52Mi50b0FycmF5KCk7cmV0dXJuIGF9O1dhLnByb3RvdHlwZS5mcm9tSlNPTj1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsYSk7dGhpcy52MC5mcm9tQXJyYXkoYS52MCk7dGhpcy52MS5mcm9tQXJyYXkoYS52MSk7dGhpcy52Mi5mcm9tQXJyYXkoYS52Mik7cmV0dXJuIHRoaXN9O1JhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEMucHJvdG90eXBlKTtSYS5wcm90b3R5cGUuY29uc3RydWN0b3I9UmE7UmEucHJvdG90eXBlLmlzU3BsaW5lQ3VydmU9ITA7UmEucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEsYil7Yj1ifHxuZXcgRDt2YXIgYz10aGlzLnBvaW50cyxkPShjLmxlbmd0aC0xKSphO2E9TWF0aC5mbG9vcihkKTt2YXIgZD1kLWEsZT1jWzA9PT1hP2E6YS0xXSxmPWNbYV0sZz1jW2E+Yy5sZW5ndGgtMj9jLmxlbmd0aC0xOmErMV0sYz1jW2E+Yy5sZW5ndGgtMz9jLmxlbmd0aC0xOmErMl07Yi5zZXQoaGYoZCxlLngsZi54LFxuICAgIGcueCxjLngpLGhmKGQsZS55LGYueSxnLnksYy55KSk7cmV0dXJuIGJ9O1JhLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMucG9pbnRzPVtdO2Zvcih2YXIgYj0wLGM9YS5wb2ludHMubGVuZ3RoO2I8YztiKyspdGhpcy5wb2ludHMucHVzaChhLnBvaW50c1tiXS5jbG9uZSgpKTtyZXR1cm4gdGhpc307UmEucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPUMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EucG9pbnRzPVtdO2Zvcih2YXIgYj0wLGM9dGhpcy5wb2ludHMubGVuZ3RoO2I8YztiKyspYS5wb2ludHMucHVzaCh0aGlzLnBvaW50c1tiXS50b0FycmF5KCkpO3JldHVybiBhfTtSYS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMucG9pbnRzPVtdO2Zvcih2YXIgYj0wLGM9YS5wb2ludHMubGVuZ3RoO2I8YztiKyspe3ZhciBkPVxuICAgIGEucG9pbnRzW2JdO3RoaXMucG9pbnRzLnB1c2goKG5ldyBEKS5mcm9tQXJyYXkoZCkpfXJldHVybiB0aGlzfTt2YXIgTmc9T2JqZWN0LmZyZWV6ZSh7QXJjQ3VydmU6aGMsQ2F0bXVsbFJvbUN1cnZlMzpjYSxDdWJpY0JlemllckN1cnZlOk9hLEN1YmljQmV6aWVyQ3VydmUzOlZhLEVsbGlwc2VDdXJ2ZTpCYSxMaW5lQ3VydmU6eWEsTGluZUN1cnZlMzpQYSxRdWFkcmF0aWNCZXppZXJDdXJ2ZTpRYSxRdWFkcmF0aWNCZXppZXJDdXJ2ZTM6V2EsU3BsaW5lQ3VydmU6UmF9KTtiYi5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEMucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6YmIsYWRkOmZ1bmN0aW9uKGEpe3RoaXMuY3VydmVzLnB1c2goYSl9LGNsb3NlUGF0aDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY3VydmVzWzBdLmdldFBvaW50KDApLGI9dGhpcy5jdXJ2ZXNbdGhpcy5jdXJ2ZXMubGVuZ3RoLTFdLmdldFBvaW50KDEpO2EuZXF1YWxzKGIpfHx0aGlzLmN1cnZlcy5wdXNoKG5ldyB5YShiLFxuICAgIGEpKX0sZ2V0UG9pbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YSp0aGlzLmdldExlbmd0aCgpLGM9dGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtmb3IoYT0wO2E8Yy5sZW5ndGg7KXtpZihjW2FdPj1iKXJldHVybiBiPWNbYV0tYixhPXRoaXMuY3VydmVzW2FdLGM9YS5nZXRMZW5ndGgoKSxhLmdldFBvaW50QXQoMD09PWM/MDoxLWIvYyk7YSsrfXJldHVybiBudWxsfSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldEN1cnZlTGVuZ3RocygpO3JldHVybiBhW2EubGVuZ3RoLTFdfSx1cGRhdGVBcmNMZW5ndGhzOmZ1bmN0aW9uKCl7dGhpcy5uZWVkc1VwZGF0ZT0hMDt0aGlzLmNhY2hlTGVuZ3Rocz1udWxsO3RoaXMuZ2V0Q3VydmVMZW5ndGhzKCl9LGdldEN1cnZlTGVuZ3RoczpmdW5jdGlvbigpe2lmKHRoaXMuY2FjaGVMZW5ndGhzJiZ0aGlzLmNhY2hlTGVuZ3Rocy5sZW5ndGg9PT10aGlzLmN1cnZlcy5sZW5ndGgpcmV0dXJuIHRoaXMuY2FjaGVMZW5ndGhzO2Zvcih2YXIgYT1bXSxcbiAgICBiPTAsYz0wLGQ9dGhpcy5jdXJ2ZXMubGVuZ3RoO2M8ZDtjKyspYis9dGhpcy5jdXJ2ZXNbY10uZ2V0TGVuZ3RoKCksYS5wdXNoKGIpO3JldHVybiB0aGlzLmNhY2hlTGVuZ3Rocz1hfSxnZXRTcGFjZWRQb2ludHM6ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9NDApO2Zvcih2YXIgYj1bXSxjPTA7Yzw9YTtjKyspYi5wdXNoKHRoaXMuZ2V0UG9pbnQoYy9hKSk7dGhpcy5hdXRvQ2xvc2UmJmIucHVzaChiWzBdKTtyZXR1cm4gYn0sZ2V0UG9pbnRzOmZ1bmN0aW9uKGEpe2E9YXx8MTI7Zm9yKHZhciBiPVtdLGMsZD0wLGU9dGhpcy5jdXJ2ZXM7ZDxlLmxlbmd0aDtkKyspZm9yKHZhciBmPWVbZF0sZj1mLmdldFBvaW50cyhmJiZmLmlzRWxsaXBzZUN1cnZlPzIqYTpmJiZmLmlzTGluZUN1cnZlPzE6ZiYmZi5pc1NwbGluZUN1cnZlP2EqZi5wb2ludHMubGVuZ3RoOmEpLGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtjJiZjLmVxdWFscyhoKXx8KGIucHVzaChoKSxjPWgpfXRoaXMuYXV0b0Nsb3NlJiZcbiAgICAxPGIubGVuZ3RoJiYhYltiLmxlbmd0aC0xXS5lcXVhbHMoYlswXSkmJmIucHVzaChiWzBdKTtyZXR1cm4gYn0sY29weTpmdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmN1cnZlcz1bXTtmb3IodmFyIGI9MCxjPWEuY3VydmVzLmxlbmd0aDtiPGM7YisrKXRoaXMuY3VydmVzLnB1c2goYS5jdXJ2ZXNbYl0uY2xvbmUoKSk7dGhpcy5hdXRvQ2xvc2U9YS5hdXRvQ2xvc2U7cmV0dXJuIHRoaXN9LHRvSlNPTjpmdW5jdGlvbigpe3ZhciBhPUMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EuYXV0b0Nsb3NlPXRoaXMuYXV0b0Nsb3NlO2EuY3VydmVzPVtdO2Zvcih2YXIgYj0wLGM9dGhpcy5jdXJ2ZXMubGVuZ3RoO2I8YztiKyspYS5jdXJ2ZXMucHVzaCh0aGlzLmN1cnZlc1tiXS50b0pTT04oKSk7cmV0dXJuIGF9LGZyb21KU09OOmZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLmF1dG9DbG9zZT1hLmF1dG9DbG9zZTtcbiAgICB0aGlzLmN1cnZlcz1bXTtmb3IodmFyIGI9MCxjPWEuY3VydmVzLmxlbmd0aDtiPGM7YisrKXt2YXIgZD1hLmN1cnZlc1tiXTt0aGlzLmN1cnZlcy5wdXNoKChuZXcgTmdbZC50eXBlXSkuZnJvbUpTT04oZCkpfXJldHVybiB0aGlzfX0pO1NhLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoYmIucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6U2Esc2V0RnJvbVBvaW50czpmdW5jdGlvbihhKXt0aGlzLm1vdmVUbyhhWzBdLngsYVswXS55KTtmb3IodmFyIGI9MSxjPWEubGVuZ3RoO2I8YztiKyspdGhpcy5saW5lVG8oYVtiXS54LGFbYl0ueSl9LG1vdmVUbzpmdW5jdGlvbihhLGIpe3RoaXMuY3VycmVudFBvaW50LnNldChhLGIpfSxsaW5lVG86ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgeWEodGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxuZXcgRChhLGIpKTt0aGlzLmN1cnZlcy5wdXNoKGMpO3RoaXMuY3VycmVudFBvaW50LnNldChhLGIpfSxxdWFkcmF0aWNDdXJ2ZVRvOmZ1bmN0aW9uKGEsXG4gICAgYixjLGQpe2E9bmV3IFFhKHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksbmV3IEQoYSxiKSxuZXcgRChjLGQpKTt0aGlzLmN1cnZlcy5wdXNoKGEpO3RoaXMuY3VycmVudFBvaW50LnNldChjLGQpfSxiZXppZXJDdXJ2ZVRvOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthPW5ldyBPYSh0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLG5ldyBEKGEsYiksbmV3IEQoYyxkKSxuZXcgRChlLGYpKTt0aGlzLmN1cnZlcy5wdXNoKGEpO3RoaXMuY3VycmVudFBvaW50LnNldChlLGYpfSxzcGxpbmVUaHJ1OmZ1bmN0aW9uKGEpe3ZhciBiPVt0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpXS5jb25jYXQoYSksYj1uZXcgUmEoYik7dGhpcy5jdXJ2ZXMucHVzaChiKTt0aGlzLmN1cnJlbnRQb2ludC5jb3B5KGFbYS5sZW5ndGgtMV0pfSxhcmM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuYWJzYXJjKGErdGhpcy5jdXJyZW50UG9pbnQueCxiK3RoaXMuY3VycmVudFBvaW50LnksYyxkLGUsZil9LGFic2FyYzpmdW5jdGlvbihhLFxuICAgIGIsYyxkLGUsZil7dGhpcy5hYnNlbGxpcHNlKGEsYixjLGMsZCxlLGYpfSxlbGxpcHNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7dGhpcy5hYnNlbGxpcHNlKGErdGhpcy5jdXJyZW50UG9pbnQueCxiK3RoaXMuY3VycmVudFBvaW50LnksYyxkLGUsZixnLGgpfSxhYnNlbGxpcHNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7YT1uZXcgQmEoYSxiLGMsZCxlLGYsZyxoKTswPHRoaXMuY3VydmVzLmxlbmd0aCYmKGI9YS5nZXRQb2ludCgwKSxiLmVxdWFscyh0aGlzLmN1cnJlbnRQb2ludCl8fHRoaXMubGluZVRvKGIueCxiLnkpKTt0aGlzLmN1cnZlcy5wdXNoKGEpO2E9YS5nZXRQb2ludCgxKTt0aGlzLmN1cnJlbnRQb2ludC5jb3B5KGEpfSxjb3B5OmZ1bmN0aW9uKGEpe2JiLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmN1cnJlbnRQb2ludC5jb3B5KGEuY3VycmVudFBvaW50KTtyZXR1cm4gdGhpc30sdG9KU09OOmZ1bmN0aW9uKCl7dmFyIGE9YmIucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xuICAgIGEuY3VycmVudFBvaW50PXRoaXMuY3VycmVudFBvaW50LnRvQXJyYXkoKTtyZXR1cm4gYX0sZnJvbUpTT046ZnVuY3Rpb24oYSl7YmIucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLmN1cnJlbnRQb2ludC5mcm9tQXJyYXkoYS5jdXJyZW50UG9pbnQpO3JldHVybiB0aGlzfX0pO2piLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoU2EucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6amIsZ2V0UG9pbnRzSG9sZXM6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MCxkPXRoaXMuaG9sZXMubGVuZ3RoO2M8ZDtjKyspYltjXT10aGlzLmhvbGVzW2NdLmdldFBvaW50cyhhKTtyZXR1cm4gYn0sZXh0cmFjdFBvaW50czpmdW5jdGlvbihhKXtyZXR1cm57c2hhcGU6dGhpcy5nZXRQb2ludHMoYSksaG9sZXM6dGhpcy5nZXRQb2ludHNIb2xlcyhhKX19LGNvcHk6ZnVuY3Rpb24oYSl7U2EucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuaG9sZXM9W107XG4gICAgZm9yKHZhciBiPTAsYz1hLmhvbGVzLmxlbmd0aDtiPGM7YisrKXRoaXMuaG9sZXMucHVzaChhLmhvbGVzW2JdLmNsb25lKCkpO3JldHVybiB0aGlzfSx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT1TYS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7YS51dWlkPXRoaXMudXVpZDthLmhvbGVzPVtdO2Zvcih2YXIgYj0wLGM9dGhpcy5ob2xlcy5sZW5ndGg7YjxjO2IrKylhLmhvbGVzLnB1c2godGhpcy5ob2xlc1tiXS50b0pTT04oKSk7cmV0dXJuIGF9LGZyb21KU09OOmZ1bmN0aW9uKGEpe1NhLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsYSk7dGhpcy51dWlkPWEudXVpZDt0aGlzLmhvbGVzPVtdO2Zvcih2YXIgYj0wLGM9YS5ob2xlcy5sZW5ndGg7YjxjO2IrKyl7dmFyIGQ9YS5ob2xlc1tiXTt0aGlzLmhvbGVzLnB1c2goKG5ldyBTYSkuZnJvbUpTT04oZCkpfXJldHVybiB0aGlzfX0pO2RhLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLFxuICAgIHtjb25zdHJ1Y3RvcjpkYSxpc0xpZ2h0OiEwLGNvcHk6ZnVuY3Rpb24oYSl7eC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMuaW50ZW5zaXR5PWEuaW50ZW5zaXR5O3JldHVybiB0aGlzfSx0b0pTT046ZnVuY3Rpb24oYSl7YT14LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO2Eub2JqZWN0LmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCk7YS5vYmplY3QuaW50ZW5zaXR5PXRoaXMuaW50ZW5zaXR5O3ZvaWQgMCE9PXRoaXMuZ3JvdW5kQ29sb3ImJihhLm9iamVjdC5ncm91bmRDb2xvcj10aGlzLmdyb3VuZENvbG9yLmdldEhleCgpKTt2b2lkIDAhPT10aGlzLmRpc3RhbmNlJiYoYS5vYmplY3QuZGlzdGFuY2U9dGhpcy5kaXN0YW5jZSk7dm9pZCAwIT09dGhpcy5hbmdsZSYmKGEub2JqZWN0LmFuZ2xlPXRoaXMuYW5nbGUpO3ZvaWQgMCE9PXRoaXMuZGVjYXkmJihhLm9iamVjdC5kZWNheT10aGlzLmRlY2F5KTt2b2lkIDAhPT1cbiAgICB0aGlzLnBlbnVtYnJhJiYoYS5vYmplY3QucGVudW1icmE9dGhpcy5wZW51bWJyYSk7dm9pZCAwIT09dGhpcy5zaGFkb3cmJihhLm9iamVjdC5zaGFkb3c9dGhpcy5zaGFkb3cudG9KU09OKCkpO3JldHVybiBhfX0pO0JkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoZGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6QmQsaXNIZW1pc3BoZXJlTGlnaHQ6ITAsY29weTpmdW5jdGlvbihhKXtkYS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5ncm91bmRDb2xvci5jb3B5KGEuZ3JvdW5kQ29sb3IpO3JldHVybiB0aGlzfX0pO09iamVjdC5hc3NpZ24oRmIucHJvdG90eXBlLHtjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuY2FtZXJhPWEuY2FtZXJhLmNsb25lKCk7dGhpcy5iaWFzPWEuYmlhczt0aGlzLnJhZGl1cz1hLnJhZGl1czt0aGlzLm1hcFNpemUuY29weShhLm1hcFNpemUpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sXG4gICAgdG9KU09OOmZ1bmN0aW9uKCl7dmFyIGE9e307MCE9PXRoaXMuYmlhcyYmKGEuYmlhcz10aGlzLmJpYXMpOzEhPT10aGlzLnJhZGl1cyYmKGEucmFkaXVzPXRoaXMucmFkaXVzKTtpZig1MTIhPT10aGlzLm1hcFNpemUueHx8NTEyIT09dGhpcy5tYXBTaXplLnkpYS5tYXBTaXplPXRoaXMubWFwU2l6ZS50b0FycmF5KCk7YS5jYW1lcmE9dGhpcy5jYW1lcmEudG9KU09OKCExKS5vYmplY3Q7ZGVsZXRlIGEuY2FtZXJhLm1hdHJpeDtyZXR1cm4gYX19KTtDZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEZiLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkNkLGlzU3BvdExpZ2h0U2hhZG93OiEwLHVwZGF0ZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmNhbWVyYSxjPTIqUS5SQUQyREVHKmEuYW5nbGUsZD10aGlzLm1hcFNpemUud2lkdGgvdGhpcy5tYXBTaXplLmhlaWdodDthPWEuZGlzdGFuY2V8fGIuZmFyO2lmKGMhPT1iLmZvdnx8ZCE9PWIuYXNwZWN0fHxhIT09Yi5mYXIpYi5mb3Y9XG4gICAgYyxiLmFzcGVjdD1kLGIuZmFyPWEsYi51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9fSk7RGQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShkYS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpEZCxpc1Nwb3RMaWdodDohMCxjb3B5OmZ1bmN0aW9uKGEpe2RhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmRpc3RhbmNlPWEuZGlzdGFuY2U7dGhpcy5hbmdsZT1hLmFuZ2xlO3RoaXMucGVudW1icmE9YS5wZW51bWJyYTt0aGlzLmRlY2F5PWEuZGVjYXk7dGhpcy50YXJnZXQ9YS50YXJnZXQuY2xvbmUoKTt0aGlzLnNoYWRvdz1hLnNoYWRvdy5jbG9uZSgpO3JldHVybiB0aGlzfX0pO0VkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoZGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6RWQsaXNQb2ludExpZ2h0OiEwLGNvcHk6ZnVuY3Rpb24oYSl7ZGEucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuZGlzdGFuY2U9YS5kaXN0YW5jZTtcbiAgICB0aGlzLmRlY2F5PWEuZGVjYXk7dGhpcy5zaGFkb3c9YS5zaGFkb3cuY2xvbmUoKTtyZXR1cm4gdGhpc319KTtGZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEZiLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkZkfSk7R2QucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShkYS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpHZCxpc0RpcmVjdGlvbmFsTGlnaHQ6ITAsY29weTpmdW5jdGlvbihhKXtkYS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy50YXJnZXQ9YS50YXJnZXQuY2xvbmUoKTt0aGlzLnNoYWRvdz1hLnNoYWRvdy5jbG9uZSgpO3JldHVybiB0aGlzfX0pO0hkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoZGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6SGQsaXNBbWJpZW50TGlnaHQ6ITB9KTtJZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGRhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOklkLFxuICAgIGlzUmVjdEFyZWFMaWdodDohMCxjb3B5OmZ1bmN0aW9uKGEpe2RhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLndpZHRoPWEud2lkdGg7dGhpcy5oZWlnaHQ9YS5oZWlnaHQ7cmV0dXJuIHRoaXN9LHRvSlNPTjpmdW5jdGlvbihhKXthPWRhLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO2Eub2JqZWN0LndpZHRoPXRoaXMud2lkdGg7YS5vYmplY3QuaGVpZ2h0PXRoaXMuaGVpZ2h0O3JldHVybiBhfX0pO0pkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpKZCxWYWx1ZVR5cGVOYW1lOlwic3RyaW5nXCIsVmFsdWVCdWZmZXJUeXBlOkFycmF5LERlZmF1bHRJbnRlcnBvbGF0aW9uOjIzMDAsSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOnZvaWQgMCxJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6dm9pZCAwfSk7S2QucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShULnByb3RvdHlwZSksXG4gICAge2NvbnN0cnVjdG9yOktkLFZhbHVlVHlwZU5hbWU6XCJib29sXCIsVmFsdWVCdWZmZXJUeXBlOkFycmF5LERlZmF1bHRJbnRlcnBvbGF0aW9uOjIzMDAsSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOnZvaWQgMCxJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6dm9pZCAwfSk7T2JqZWN0LmFzc2lnbihwYS5wcm90b3R5cGUse2V2YWx1YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucGFyYW1ldGVyUG9zaXRpb25zLGM9dGhpcy5fY2FjaGVkSW5kZXgsZD1iW2NdLGU9YltjLTFdO2E6e2I6e2M6e2Q6aWYoIShhPGQpKXtmb3IodmFyIGY9YysyOzspe2lmKHZvaWQgMD09PWQpe2lmKGE8ZSlicmVhayBkO3RoaXMuX2NhY2hlZEluZGV4PWM9Yi5sZW5ndGg7cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKGMtMSxhLGUpfWlmKGM9PT1mKWJyZWFrO2U9ZDtkPWJbKytjXTtpZihhPGQpYnJlYWsgYn1kPWIubGVuZ3RoO2JyZWFrIGN9aWYoYT49ZSlicmVhayBhO2Vsc2V7Zj1iWzFdO2E8ZiYmXG4gICAgKGM9MixlPWYpO2ZvcihmPWMtMjs7KXtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLl9jYWNoZWRJbmRleD0wLHRoaXMuYmVmb3JlU3RhcnRfKDAsYSxkKTtpZihjPT09ZilicmVhaztkPWU7ZT1iWy0tYy0xXTtpZihhPj1lKWJyZWFrIGJ9ZD1jO2M9MH19Zm9yKDtjPGQ7KWU9YytkPj4+MSxhPGJbZV0/ZD1lOmM9ZSsxO2Q9YltjXTtlPWJbYy0xXTtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLl9jYWNoZWRJbmRleD0wLHRoaXMuYmVmb3JlU3RhcnRfKDAsYSxkKTtpZih2b2lkIDA9PT1kKXJldHVybiB0aGlzLl9jYWNoZWRJbmRleD1jPWIubGVuZ3RoLHRoaXMuYWZ0ZXJFbmRfKGMtMSxlLGEpfXRoaXMuX2NhY2hlZEluZGV4PWM7dGhpcy5pbnRlcnZhbENoYW5nZWRfKGMsZSxkKX1yZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZV8oYyxlLGEsZCl9LHNldHRpbmdzOm51bGwsRGVmYXVsdFNldHRpbmdzXzp7fSxnZXRTZXR0aW5nc186ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXR0aW5nc3x8XG4gICAgdGhpcy5EZWZhdWx0U2V0dGluZ3NffSxjb3B5U2FtcGxlVmFsdWVfOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucmVzdWx0QnVmZmVyLGM9dGhpcy5zYW1wbGVWYWx1ZXMsZD10aGlzLnZhbHVlU2l6ZTthKj1kO2Zvcih2YXIgZT0wO2UhPT1kOysrZSliW2VdPWNbYStlXTtyZXR1cm4gYn0saW50ZXJwb2xhdGVfOmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJjYWxsIHRvIGFic3RyYWN0IG1ldGhvZFwiKTt9LGludGVydmFsQ2hhbmdlZF86ZnVuY3Rpb24oKXt9fSk7T2JqZWN0LmFzc2lnbihwYS5wcm90b3R5cGUse2JlZm9yZVN0YXJ0XzpwYS5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXyxhZnRlckVuZF86cGEucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV99KTtMZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHBhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkxkLGludGVycG9sYXRlXzpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLnJlc3VsdEJ1ZmZlcixmPXRoaXMuc2FtcGxlVmFsdWVzLFxuICAgIGc9dGhpcy52YWx1ZVNpemU7YSo9ZztiPShjLWIpLyhkLWIpO2ZvcihjPWErZzthIT09YzthKz00KWhhLnNsZXJwRmxhdChlLDAsZixhLWcsZixhLGIpO3JldHVybiBlfX0pO2RkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpkZCxWYWx1ZVR5cGVOYW1lOlwicXVhdGVybmlvblwiLERlZmF1bHRJbnRlcnBvbGF0aW9uOjIzMDEsSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBuZXcgTGQodGhpcy50aW1lcyx0aGlzLnZhbHVlcyx0aGlzLmdldFZhbHVlU2l6ZSgpLGEpfSxJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6dm9pZCAwfSk7TWQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShULnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOk1kLFZhbHVlVHlwZU5hbWU6XCJjb2xvclwifSk7aWMucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShULnByb3RvdHlwZSksXG4gICAge2NvbnN0cnVjdG9yOmljLFZhbHVlVHlwZU5hbWU6XCJudW1iZXJcIn0pO05kLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6TmQsRGVmYXVsdFNldHRpbmdzXzp7ZW5kaW5nU3RhcnQ6MjQwMCxlbmRpbmdFbmQ6MjQwMH0saW50ZXJ2YWxDaGFuZ2VkXzpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMsZT1hLTIsZj1hKzEsZz1kW2VdLGg9ZFtmXTtpZih2b2lkIDA9PT1nKXN3aXRjaCh0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ1N0YXJ0KXtjYXNlIDI0MDE6ZT1hO2c9MipiLWM7YnJlYWs7Y2FzZSAyNDAyOmU9ZC5sZW5ndGgtMjtnPWIrZFtlXS1kW2UrMV07YnJlYWs7ZGVmYXVsdDplPWEsZz1jfWlmKHZvaWQgMD09PWgpc3dpdGNoKHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nRW5kKXtjYXNlIDI0MDE6Zj1hO2g9MipjLWI7YnJlYWs7Y2FzZSAyNDAyOmY9MTtoPWMrZFsxXS1kWzBdO1xuICAgIGJyZWFrO2RlZmF1bHQ6Zj1hLTEsaD1ifWE9LjUqKGMtYik7ZD10aGlzLnZhbHVlU2l6ZTt0aGlzLl93ZWlnaHRQcmV2PWEvKGItZyk7dGhpcy5fd2VpZ2h0TmV4dD1hLyhoLWMpO3RoaXMuX29mZnNldFByZXY9ZSpkO3RoaXMuX29mZnNldE5leHQ9ZipkfSxpbnRlcnBvbGF0ZV86ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcy5yZXN1bHRCdWZmZXIsZj10aGlzLnNhbXBsZVZhbHVlcyxnPXRoaXMudmFsdWVTaXplO2EqPWc7dmFyIGg9YS1nLGs9dGhpcy5fb2Zmc2V0UHJldixtPXRoaXMuX29mZnNldE5leHQsbD10aGlzLl93ZWlnaHRQcmV2LG49dGhpcy5fd2VpZ2h0TmV4dCxwPShjLWIpLyhkLWIpO2M9cCpwO2Q9YypwO2I9LWwqZCsyKmwqYy1sKnA7bD0oMStsKSpkKygtMS41LTIqbCkqYysoLS41K2wpKnArMTtwPSgtMS1uKSpkKygxLjUrbikqYysuNSpwO249bipkLW4qYztmb3IoYz0wO2MhPT1nOysrYyllW2NdPWIqZltrK2NdK2wqZltoK2NdK3AqZlthK2NdK24qZlttK2NdO1xuICAgIHJldHVybiBlfX0pO2VkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6ZWQsaW50ZXJwb2xhdGVfOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMucmVzdWx0QnVmZmVyLGY9dGhpcy5zYW1wbGVWYWx1ZXMsZz10aGlzLnZhbHVlU2l6ZTthKj1nO3ZhciBoPWEtZztiPShjLWIpLyhkLWIpO2M9MS1iO2ZvcihkPTA7ZCE9PWc7KytkKWVbZF09ZltoK2RdKmMrZlthK2RdKmI7cmV0dXJuIGV9fSk7T2QucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpPZCxpbnRlcnBvbGF0ZV86ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyhhLTEpfX0pO3ZhciBnYT17YXJyYXlTbGljZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGdhLmlzVHlwZWRBcnJheShhKT9uZXcgYS5jb25zdHJ1Y3RvcihhLnN1YmFycmF5KGIsdm9pZCAwIT09Yz9jOlxuICAgIGEubGVuZ3RoKSk6YS5zbGljZShiLGMpfSxjb252ZXJ0QXJyYXk6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiFhfHwhYyYmYS5jb25zdHJ1Y3Rvcj09PWI/YTpcIm51bWJlclwiPT09dHlwZW9mIGIuQllURVNfUEVSX0VMRU1FTlQ/bmV3IGIoYSk6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSl9LGlzVHlwZWRBcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KGEpJiYhKGEgaW5zdGFuY2VvZiBEYXRhVmlldyl9LGdldEtleWZyYW1lT3JkZXI6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9QXJyYXkoYiksZD0wO2QhPT1iOysrZCljW2RdPWQ7Yy5zb3J0KGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGFbYl0tYVtjXX0pO3JldHVybiBjfSxzb3J0ZWRBcnJheTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9bmV3IGEuY29uc3RydWN0b3IoZCksZj0wLGc9MDtnIT09ZDsrK2YpZm9yKHZhciBoPWNbZl0qYixrPTA7ayE9PWI7KytrKWVbZysrXT1cbiAgICBhW2gra107cmV0dXJuIGV9LGZsYXR0ZW5KU09OOmZ1bmN0aW9uKGEsYixjLGQpe2Zvcih2YXIgZT0xLGY9YVswXTt2b2lkIDAhPT1mJiZ2b2lkIDA9PT1mW2RdOylmPWFbZSsrXTtpZih2b2lkIDAhPT1mKXt2YXIgZz1mW2RdO2lmKHZvaWQgMCE9PWcpaWYoQXJyYXkuaXNBcnJheShnKSl7ZG8gZz1mW2RdLHZvaWQgMCE9PWcmJihiLnB1c2goZi50aW1lKSxjLnB1c2guYXBwbHkoYyxnKSksZj1hW2UrK107d2hpbGUodm9pZCAwIT09Zil9ZWxzZSBpZih2b2lkIDAhPT1nLnRvQXJyYXkpe2RvIGc9ZltkXSx2b2lkIDAhPT1nJiYoYi5wdXNoKGYudGltZSksZy50b0FycmF5KGMsYy5sZW5ndGgpKSxmPWFbZSsrXTt3aGlsZSh2b2lkIDAhPT1mKX1lbHNle2RvIGc9ZltkXSx2b2lkIDAhPT1nJiYoYi5wdXNoKGYudGltZSksYy5wdXNoKGcpKSxmPWFbZSsrXTt3aGlsZSh2b2lkIDAhPT1mKX19fX07T2JqZWN0LmFzc2lnbihULHtwYXJzZTpmdW5jdGlvbihhKXtpZih2b2lkIDA9PT1hLnR5cGUpdGhyb3cgRXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayB0eXBlIHVuZGVmaW5lZCwgY2FuIG5vdCBwYXJzZVwiKTtcbiAgICB2YXIgYj1ULl9nZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lKGEudHlwZSk7aWYodm9pZCAwPT09YS50aW1lcyl7dmFyIGM9W10sZD1bXTtnYS5mbGF0dGVuSlNPTihhLmtleXMsYyxkLFwidmFsdWVcIik7YS50aW1lcz1jO2EudmFsdWVzPWR9cmV0dXJuIHZvaWQgMCE9PWIucGFyc2U/Yi5wYXJzZShhKTpuZXcgYihhLm5hbWUsYS50aW1lcyxhLnZhbHVlcyxhLmludGVycG9sYXRpb24pfSx0b0pTT046ZnVuY3Rpb24oYSl7dmFyIGI9YS5jb25zdHJ1Y3RvcjtpZih2b2lkIDAhPT1iLnRvSlNPTiliPWIudG9KU09OKGEpO2Vsc2V7dmFyIGI9e25hbWU6YS5uYW1lLHRpbWVzOmdhLmNvbnZlcnRBcnJheShhLnRpbWVzLEFycmF5KSx2YWx1ZXM6Z2EuY29udmVydEFycmF5KGEudmFsdWVzLEFycmF5KX0sYz1hLmdldEludGVycG9sYXRpb24oKTtjIT09YS5EZWZhdWx0SW50ZXJwb2xhdGlvbiYmKGIuaW50ZXJwb2xhdGlvbj1jKX1iLnR5cGU9YS5WYWx1ZVR5cGVOYW1lO3JldHVybiBifSxfZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZTpmdW5jdGlvbihhKXtzd2l0Y2goYS50b0xvd2VyQ2FzZSgpKXtjYXNlIFwic2NhbGFyXCI6Y2FzZSBcImRvdWJsZVwiOmNhc2UgXCJmbG9hdFwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwiaW50ZWdlclwiOnJldHVybiBpYztcbiAgICBjYXNlIFwidmVjdG9yXCI6Y2FzZSBcInZlY3RvcjJcIjpjYXNlIFwidmVjdG9yM1wiOmNhc2UgXCJ2ZWN0b3I0XCI6cmV0dXJuIGpjO2Nhc2UgXCJjb2xvclwiOnJldHVybiBNZDtjYXNlIFwicXVhdGVybmlvblwiOnJldHVybiBkZDtjYXNlIFwiYm9vbFwiOmNhc2UgXCJib29sZWFuXCI6cmV0dXJuIEtkO2Nhc2UgXCJzdHJpbmdcIjpyZXR1cm4gSmR9dGhyb3cgRXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiBVbnN1cHBvcnRlZCB0eXBlTmFtZTogXCIrYSk7fX0pO09iamVjdC5hc3NpZ24oVC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOlQsVGltZUJ1ZmZlclR5cGU6RmxvYXQzMkFycmF5LFZhbHVlQnVmZmVyVHlwZTpGbG9hdDMyQXJyYXksRGVmYXVsdEludGVycG9sYXRpb246MjMwMSxJbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTpmdW5jdGlvbihhKXtyZXR1cm4gbmV3IE9kKHRoaXMudGltZXMsdGhpcy52YWx1ZXMsdGhpcy5nZXRWYWx1ZVNpemUoKSxhKX0sSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBuZXcgZWQodGhpcy50aW1lcyxcbiAgICB0aGlzLnZhbHVlcyx0aGlzLmdldFZhbHVlU2l6ZSgpLGEpfSxJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBOZCh0aGlzLnRpbWVzLHRoaXMudmFsdWVzLHRoaXMuZ2V0VmFsdWVTaXplKCksYSl9LHNldEludGVycG9sYXRpb246ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgMjMwMDp2YXIgYj10aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlO2JyZWFrO2Nhc2UgMjMwMTpiPXRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyO2JyZWFrO2Nhc2UgMjMwMjpiPXRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RofWlmKHZvaWQgMD09PWIpe2I9XCJ1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciBcIit0aGlzLlZhbHVlVHlwZU5hbWUrXCIga2V5ZnJhbWUgdHJhY2sgbmFtZWQgXCIrdGhpcy5uYW1lO2lmKHZvaWQgMD09PXRoaXMuY3JlYXRlSW50ZXJwb2xhbnQpaWYoYSE9PXRoaXMuRGVmYXVsdEludGVycG9sYXRpb24pdGhpcy5zZXRJbnRlcnBvbGF0aW9uKHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24pO1xuICAgIGVsc2UgdGhyb3cgRXJyb3IoYik7Y29uc29sZS53YXJuKFwiVEhSRUUuS2V5ZnJhbWVUcmFjazpcIixiKX1lbHNlIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQ9Yn0sZ2V0SW50ZXJwb2xhdGlvbjpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmNyZWF0ZUludGVycG9sYW50KXtjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGU6cmV0dXJuIDIzMDA7Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjpyZXR1cm4gMjMwMTtjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOnJldHVybiAyMzAyfX0sZ2V0VmFsdWVTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aC90aGlzLnRpbWVzLmxlbmd0aH0sc2hpZnQ6ZnVuY3Rpb24oYSl7aWYoMCE9PWEpZm9yKHZhciBiPXRoaXMudGltZXMsYz0wLGQ9Yi5sZW5ndGg7YyE9PWQ7KytjKWJbY10rPWE7cmV0dXJuIHRoaXN9LHNjYWxlOmZ1bmN0aW9uKGEpe2lmKDEhPT1hKWZvcih2YXIgYj1cbiAgICB0aGlzLnRpbWVzLGM9MCxkPWIubGVuZ3RoO2MhPT1kOysrYyliW2NdKj1hO3JldHVybiB0aGlzfSx0cmltOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMudGltZXMsZD1jLmxlbmd0aCxlPTAsZj1kLTE7ZSE9PWQmJmNbZV08YTspKytlO2Zvcig7LTEhPT1mJiZjW2ZdPmI7KS0tZjsrK2Y7aWYoMCE9PWV8fGYhPT1kKWU+PWYmJihmPU1hdGgubWF4KGYsMSksZT1mLTEpLGE9dGhpcy5nZXRWYWx1ZVNpemUoKSx0aGlzLnRpbWVzPWdhLmFycmF5U2xpY2UoYyxlLGYpLHRoaXMudmFsdWVzPWdhLmFycmF5U2xpY2UodGhpcy52YWx1ZXMsZSphLGYqYSk7cmV0dXJuIHRoaXN9LHZhbGlkYXRlOmZ1bmN0aW9uKCl7dmFyIGE9ITAsYj10aGlzLmdldFZhbHVlU2l6ZSgpOzAhPT1iLU1hdGguZmxvb3IoYikmJihjb25zb2xlLmVycm9yKFwiVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLlwiLHRoaXMpLGE9ITEpO3ZhciBjPXRoaXMudGltZXMsYj10aGlzLnZhbHVlcyxcbiAgICBkPWMubGVuZ3RoOzA9PT1kJiYoY29uc29sZS5lcnJvcihcIlRIUkVFLktleWZyYW1lVHJhY2s6IFRyYWNrIGlzIGVtcHR5LlwiLHRoaXMpLGE9ITEpO2Zvcih2YXIgZT1udWxsLGY9MDtmIT09ZDtmKyspe3ZhciBnPWNbZl07aWYoXCJudW1iZXJcIj09PXR5cGVvZiBnJiZpc05hTihnKSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLktleWZyYW1lVHJhY2s6IFRpbWUgaXMgbm90IGEgdmFsaWQgbnVtYmVyLlwiLHRoaXMsZixnKTthPSExO2JyZWFrfWlmKG51bGwhPT1lJiZlPmcpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiBPdXQgb2Ygb3JkZXIga2V5cy5cIix0aGlzLGYsZyxlKTthPSExO2JyZWFrfWU9Z31pZih2b2lkIDAhPT1iJiZnYS5pc1R5cGVkQXJyYXkoYikpZm9yKGY9MCxjPWIubGVuZ3RoO2YhPT1jOysrZilpZihkPWJbZl0saXNOYU4oZCkpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuXCIsdGhpcyxmLFxuICAgIGQpO2E9ITE7YnJlYWt9cmV0dXJuIGF9LG9wdGltaXplOmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGIsYz10aGlzLnRpbWVzLGQ9dGhpcy52YWx1ZXMsZT10aGlzLmdldFZhbHVlU2l6ZSgpLGY9MjMwMj09PXRoaXMuZ2V0SW50ZXJwb2xhdGlvbigpLGc9MSxoPWMubGVuZ3RoLTEsaz0xO2s8aDsrK2spe2E9ITE7dmFyIG09Y1trXTtpZihtIT09Y1trKzFdJiYoMSE9PWt8fG0hPT1tWzBdKSlpZihmKWE9ITA7ZWxzZXtiPWsqZTtmb3IodmFyIGw9Yi1lLG49YitlLG09MDttIT09ZTsrK20pe3ZhciBwPWRbYittXTtpZihwIT09ZFtsK21dfHxwIT09ZFtuK21dKXthPSEwO2JyZWFrfX19aWYoYSl7aWYoayE9PWcpZm9yKGNbZ109Y1trXSxiPWsqZSxhPWcqZSxtPTA7bSE9PWU7KyttKWRbYSttXT1kW2IrbV07KytnfX1pZigwPGgpe2NbZ109Y1toXTtiPWgqZTthPWcqZTtmb3IobT0wO20hPT1lOysrbSlkW2ErbV09ZFtiK21dOysrZ31nIT09Yy5sZW5ndGgmJih0aGlzLnRpbWVzPWdhLmFycmF5U2xpY2UoYyxcbiAgICAwLGcpLHRoaXMudmFsdWVzPWdhLmFycmF5U2xpY2UoZCwwLGcqZSkpO3JldHVybiB0aGlzfX0pO2pjLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpqYyxWYWx1ZVR5cGVOYW1lOlwidmVjdG9yXCJ9KTtPYmplY3QuYXNzaWduKENhLHtwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz1hLnRyYWNrcyxkPTEvKGEuZnBzfHwxKSxlPTAsZj1jLmxlbmd0aDtlIT09ZjsrK2UpYi5wdXNoKFQucGFyc2UoY1tlXSkuc2NhbGUoZCkpO3JldHVybiBuZXcgQ2EoYS5uYW1lLGEuZHVyYXRpb24sYil9LHRvSlNPTjpmdW5jdGlvbihhKXt2YXIgYj1bXSxjPWEudHJhY2tzO2E9e25hbWU6YS5uYW1lLGR1cmF0aW9uOmEuZHVyYXRpb24sdHJhY2tzOmJ9O2Zvcih2YXIgZD0wLGU9Yy5sZW5ndGg7ZCE9PWU7KytkKWIucHVzaChULnRvSlNPTihjW2RdKSk7cmV0dXJuIGF9LENyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlOmZ1bmN0aW9uKGEsXG4gICAgYixjLGQpe2Zvcih2YXIgZT1iLmxlbmd0aCxmPVtdLGc9MDtnPGU7ZysrKXt2YXIgaD1bXSxrPVtdO2gucHVzaCgoZytlLTEpJWUsZywoZysxKSVlKTtrLnB1c2goMCwxLDApO3ZhciBtPWdhLmdldEtleWZyYW1lT3JkZXIoaCksaD1nYS5zb3J0ZWRBcnJheShoLDEsbSksaz1nYS5zb3J0ZWRBcnJheShrLDEsbSk7ZHx8MCE9PWhbMF18fChoLnB1c2goZSksay5wdXNoKGtbMF0pKTtmLnB1c2goKG5ldyBpYyhcIi5tb3JwaFRhcmdldEluZmx1ZW5jZXNbXCIrYltnXS5uYW1lK1wiXVwiLGgsaykpLnNjYWxlKDEvYykpfXJldHVybiBuZXcgQ2EoYSwtMSxmKX0sZmluZEJ5TmFtZTpmdW5jdGlvbihhLGIpe3ZhciBjPWE7QXJyYXkuaXNBcnJheShhKXx8KGM9YS5nZW9tZXRyeSYmYS5nZW9tZXRyeS5hbmltYXRpb25zfHxhLmFuaW1hdGlvbnMpO2ZvcihhPTA7YTxjLmxlbmd0aDthKyspaWYoY1thXS5uYW1lPT09YilyZXR1cm4gY1thXTtyZXR1cm4gbnVsbH0sQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXM6ZnVuY3Rpb24oYSxcbiAgICBiLGMpe2Zvcih2YXIgZCxlPXt9LGY9L14oW1xcdy1dKj8pKFtcXGRdKykkLyxnPTAsaD1hLmxlbmd0aDtnPGg7ZysrKXt2YXIgaz1hW2ddLG09ay5uYW1lLm1hdGNoKGYpO20mJjE8bS5sZW5ndGgmJihkPW1bMV0sKG09ZVtkXSl8fChlW2RdPW09W10pLG0ucHVzaChrKSl9YT1bXTtmb3IoZCBpbiBlKWEucHVzaChDYS5DcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZShkLGVbZF0sYixjKSk7cmV0dXJuIGF9LHBhcnNlQW5pbWF0aW9uOmZ1bmN0aW9uKGEsYil7aWYoIWEpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5BbmltYXRpb25DbGlwOiBObyBhbmltYXRpb24gaW4gSlNPTkxvYWRlciBkYXRhLlwiKSxudWxsO3ZhciBjPWZ1bmN0aW9uKGEsYixjLGQsZSl7aWYoMCE9PWMubGVuZ3RoKXt2YXIgZj1bXSxnPVtdO2dhLmZsYXR0ZW5KU09OKGMsZixnLGQpOzAhPT1mLmxlbmd0aCYmZS5wdXNoKG5ldyBhKGIsZixnKSl9fSxkPVtdLGU9YS5uYW1lfHxcImRlZmF1bHRcIixmPWEubGVuZ3RofHxcbiAgICAtMSxnPWEuZnBzfHwzMDthPWEuaGllcmFyY2h5fHxbXTtmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7dmFyIGs9YVtoXS5rZXlzO2lmKGsmJjAhPT1rLmxlbmd0aClpZihrWzBdLm1vcnBoVGFyZ2V0cyl7Zm9yKHZhciBmPXt9LG09MDttPGsubGVuZ3RoO20rKylpZihrW21dLm1vcnBoVGFyZ2V0cylmb3IodmFyIGw9MDtsPGtbbV0ubW9ycGhUYXJnZXRzLmxlbmd0aDtsKyspZltrW21dLm1vcnBoVGFyZ2V0c1tsXV09LTE7Zm9yKHZhciBuIGluIGYpe2Zvcih2YXIgcD1bXSxyPVtdLGw9MDtsIT09a1ttXS5tb3JwaFRhcmdldHMubGVuZ3RoOysrbCl7dmFyIHQ9a1ttXTtwLnB1c2godC50aW1lKTtyLnB1c2godC5tb3JwaFRhcmdldD09PW4/MTowKX1kLnB1c2gobmV3IGljKFwiLm1vcnBoVGFyZ2V0SW5mbHVlbmNlW1wiK24rXCJdXCIscCxyKSl9Zj1mLmxlbmd0aCooZ3x8MSl9ZWxzZSBtPVwiLmJvbmVzW1wiK2JbaF0ubmFtZStcIl1cIixjKGpjLG0rXCIucG9zaXRpb25cIixrLFwicG9zXCIsZCksYyhkZCxcbiAgICBtK1wiLnF1YXRlcm5pb25cIixrLFwicm90XCIsZCksYyhqYyxtK1wiLnNjYWxlXCIsayxcInNjbFwiLGQpfXJldHVybiAwPT09ZC5sZW5ndGg/bnVsbDpuZXcgQ2EoZSxmLGQpfX0pO09iamVjdC5hc3NpZ24oQ2EucHJvdG90eXBlLHtyZXNldER1cmF0aW9uOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj0wLGM9dGhpcy50cmFja3MubGVuZ3RoO2IhPT1jOysrYil2YXIgZD10aGlzLnRyYWNrc1tiXSxhPU1hdGgubWF4KGEsZC50aW1lc1tkLnRpbWVzLmxlbmd0aC0xXSk7dGhpcy5kdXJhdGlvbj1hfSx0cmltOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTx0aGlzLnRyYWNrcy5sZW5ndGg7YSsrKXRoaXMudHJhY2tzW2FdLnRyaW0oMCx0aGlzLmR1cmF0aW9uKTtyZXR1cm4gdGhpc30sb3B0aW1pemU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPHRoaXMudHJhY2tzLmxlbmd0aDthKyspdGhpcy50cmFja3NbYV0ub3B0aW1pemUoKTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKFBkLnByb3RvdHlwZSxcbiAgICB7bG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzOyhuZXcgTmEoZS5tYW5hZ2VyKSkubG9hZChhLGZ1bmN0aW9uKGEpe2IoZS5wYXJzZShKU09OLnBhcnNlKGEpKSl9LGMsZCl9LHNldFRleHR1cmVzOmZ1bmN0aW9uKGEpe3RoaXMudGV4dHVyZXM9YX0scGFyc2U6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhKXt2b2lkIDA9PT1jW2FdJiZjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRlcmlhbExvYWRlcjogVW5kZWZpbmVkIHRleHR1cmVcIixhKTtyZXR1cm4gY1thXX12YXIgYz10aGlzLnRleHR1cmVzLGQ9bmV3IE1nW2EudHlwZV07dm9pZCAwIT09YS51dWlkJiYoZC51dWlkPWEudXVpZCk7dm9pZCAwIT09YS5uYW1lJiYoZC5uYW1lPWEubmFtZSk7dm9pZCAwIT09YS5jb2xvciYmZC5jb2xvci5zZXRIZXgoYS5jb2xvcik7dm9pZCAwIT09YS5yb3VnaG5lc3MmJihkLnJvdWdobmVzcz1hLnJvdWdobmVzcyk7dm9pZCAwIT09YS5tZXRhbG5lc3MmJihkLm1ldGFsbmVzcz1hLm1ldGFsbmVzcyk7XG4gICAgdm9pZCAwIT09YS5lbWlzc2l2ZSYmZC5lbWlzc2l2ZS5zZXRIZXgoYS5lbWlzc2l2ZSk7dm9pZCAwIT09YS5zcGVjdWxhciYmZC5zcGVjdWxhci5zZXRIZXgoYS5zcGVjdWxhcik7dm9pZCAwIT09YS5zaGluaW5lc3MmJihkLnNoaW5pbmVzcz1hLnNoaW5pbmVzcyk7dm9pZCAwIT09YS5jbGVhckNvYXQmJihkLmNsZWFyQ29hdD1hLmNsZWFyQ29hdCk7dm9pZCAwIT09YS5jbGVhckNvYXRSb3VnaG5lc3MmJihkLmNsZWFyQ29hdFJvdWdobmVzcz1hLmNsZWFyQ29hdFJvdWdobmVzcyk7dm9pZCAwIT09YS51bmlmb3JtcyYmKGQudW5pZm9ybXM9YS51bmlmb3Jtcyk7dm9pZCAwIT09YS52ZXJ0ZXhTaGFkZXImJihkLnZlcnRleFNoYWRlcj1hLnZlcnRleFNoYWRlcik7dm9pZCAwIT09YS5mcmFnbWVudFNoYWRlciYmKGQuZnJhZ21lbnRTaGFkZXI9YS5mcmFnbWVudFNoYWRlcik7dm9pZCAwIT09YS52ZXJ0ZXhDb2xvcnMmJihkLnZlcnRleENvbG9ycz1hLnZlcnRleENvbG9ycyk7dm9pZCAwIT09XG4gICAgYS5mb2cmJihkLmZvZz1hLmZvZyk7dm9pZCAwIT09YS5mbGF0U2hhZGluZyYmKGQuZmxhdFNoYWRpbmc9YS5mbGF0U2hhZGluZyk7dm9pZCAwIT09YS5ibGVuZGluZyYmKGQuYmxlbmRpbmc9YS5ibGVuZGluZyk7dm9pZCAwIT09YS5zaWRlJiYoZC5zaWRlPWEuc2lkZSk7dm9pZCAwIT09YS5vcGFjaXR5JiYoZC5vcGFjaXR5PWEub3BhY2l0eSk7dm9pZCAwIT09YS50cmFuc3BhcmVudCYmKGQudHJhbnNwYXJlbnQ9YS50cmFuc3BhcmVudCk7dm9pZCAwIT09YS5hbHBoYVRlc3QmJihkLmFscGhhVGVzdD1hLmFscGhhVGVzdCk7dm9pZCAwIT09YS5kZXB0aFRlc3QmJihkLmRlcHRoVGVzdD1hLmRlcHRoVGVzdCk7dm9pZCAwIT09YS5kZXB0aFdyaXRlJiYoZC5kZXB0aFdyaXRlPWEuZGVwdGhXcml0ZSk7dm9pZCAwIT09YS5jb2xvcldyaXRlJiYoZC5jb2xvcldyaXRlPWEuY29sb3JXcml0ZSk7dm9pZCAwIT09YS53aXJlZnJhbWUmJihkLndpcmVmcmFtZT1hLndpcmVmcmFtZSk7dm9pZCAwIT09XG4gICAgYS53aXJlZnJhbWVMaW5ld2lkdGgmJihkLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aCk7dm9pZCAwIT09YS53aXJlZnJhbWVMaW5lY2FwJiYoZC53aXJlZnJhbWVMaW5lY2FwPWEud2lyZWZyYW1lTGluZWNhcCk7dm9pZCAwIT09YS53aXJlZnJhbWVMaW5lam9pbiYmKGQud2lyZWZyYW1lTGluZWpvaW49YS53aXJlZnJhbWVMaW5lam9pbik7dm9pZCAwIT09YS5yb3RhdGlvbiYmKGQucm90YXRpb249YS5yb3RhdGlvbik7MSE9PWEubGluZXdpZHRoJiYoZC5saW5ld2lkdGg9YS5saW5ld2lkdGgpO3ZvaWQgMCE9PWEuZGFzaFNpemUmJihkLmRhc2hTaXplPWEuZGFzaFNpemUpO3ZvaWQgMCE9PWEuZ2FwU2l6ZSYmKGQuZ2FwU2l6ZT1hLmdhcFNpemUpO3ZvaWQgMCE9PWEuc2NhbGUmJihkLnNjYWxlPWEuc2NhbGUpO3ZvaWQgMCE9PWEuc2tpbm5pbmcmJihkLnNraW5uaW5nPWEuc2tpbm5pbmcpO3ZvaWQgMCE9PWEubW9ycGhUYXJnZXRzJiYoZC5tb3JwaFRhcmdldHM9XG4gICAgYS5tb3JwaFRhcmdldHMpO3ZvaWQgMCE9PWEuZGl0aGVyaW5nJiYoZC5kaXRoZXJpbmc9YS5kaXRoZXJpbmcpO3ZvaWQgMCE9PWEudmlzaWJsZSYmKGQudmlzaWJsZT1hLnZpc2libGUpO3ZvaWQgMCE9PWEudXNlckRhdGEmJihkLnVzZXJEYXRhPWEudXNlckRhdGEpO3ZvaWQgMCE9PWEuc2hhZGluZyYmKGQuZmxhdFNoYWRpbmc9MT09PWEuc2hhZGluZyk7dm9pZCAwIT09YS5zaXplJiYoZC5zaXplPWEuc2l6ZSk7dm9pZCAwIT09YS5zaXplQXR0ZW51YXRpb24mJihkLnNpemVBdHRlbnVhdGlvbj1hLnNpemVBdHRlbnVhdGlvbik7dm9pZCAwIT09YS5tYXAmJihkLm1hcD1iKGEubWFwKSk7dm9pZCAwIT09YS5hbHBoYU1hcCYmKGQuYWxwaGFNYXA9YihhLmFscGhhTWFwKSxkLnRyYW5zcGFyZW50PSEwKTt2b2lkIDAhPT1hLmJ1bXBNYXAmJihkLmJ1bXBNYXA9YihhLmJ1bXBNYXApKTt2b2lkIDAhPT1hLmJ1bXBTY2FsZSYmKGQuYnVtcFNjYWxlPWEuYnVtcFNjYWxlKTt2b2lkIDAhPT1hLm5vcm1hbE1hcCYmXG4gICAgKGQubm9ybWFsTWFwPWIoYS5ub3JtYWxNYXApKTtpZih2b2lkIDAhPT1hLm5vcm1hbFNjYWxlKXt2YXIgZT1hLm5vcm1hbFNjYWxlOyExPT09QXJyYXkuaXNBcnJheShlKSYmKGU9W2UsZV0pO2Qubm9ybWFsU2NhbGU9KG5ldyBEKS5mcm9tQXJyYXkoZSl9dm9pZCAwIT09YS5kaXNwbGFjZW1lbnRNYXAmJihkLmRpc3BsYWNlbWVudE1hcD1iKGEuZGlzcGxhY2VtZW50TWFwKSk7dm9pZCAwIT09YS5kaXNwbGFjZW1lbnRTY2FsZSYmKGQuZGlzcGxhY2VtZW50U2NhbGU9YS5kaXNwbGFjZW1lbnRTY2FsZSk7dm9pZCAwIT09YS5kaXNwbGFjZW1lbnRCaWFzJiYoZC5kaXNwbGFjZW1lbnRCaWFzPWEuZGlzcGxhY2VtZW50Qmlhcyk7dm9pZCAwIT09YS5yb3VnaG5lc3NNYXAmJihkLnJvdWdobmVzc01hcD1iKGEucm91Z2huZXNzTWFwKSk7dm9pZCAwIT09YS5tZXRhbG5lc3NNYXAmJihkLm1ldGFsbmVzc01hcD1iKGEubWV0YWxuZXNzTWFwKSk7dm9pZCAwIT09YS5lbWlzc2l2ZU1hcCYmKGQuZW1pc3NpdmVNYXA9XG4gICAgYihhLmVtaXNzaXZlTWFwKSk7dm9pZCAwIT09YS5lbWlzc2l2ZUludGVuc2l0eSYmKGQuZW1pc3NpdmVJbnRlbnNpdHk9YS5lbWlzc2l2ZUludGVuc2l0eSk7dm9pZCAwIT09YS5zcGVjdWxhck1hcCYmKGQuc3BlY3VsYXJNYXA9YihhLnNwZWN1bGFyTWFwKSk7dm9pZCAwIT09YS5lbnZNYXAmJihkLmVudk1hcD1iKGEuZW52TWFwKSk7dm9pZCAwIT09YS5yZWZsZWN0aXZpdHkmJihkLnJlZmxlY3Rpdml0eT1hLnJlZmxlY3Rpdml0eSk7dm9pZCAwIT09YS5saWdodE1hcCYmKGQubGlnaHRNYXA9YihhLmxpZ2h0TWFwKSk7dm9pZCAwIT09YS5saWdodE1hcEludGVuc2l0eSYmKGQubGlnaHRNYXBJbnRlbnNpdHk9YS5saWdodE1hcEludGVuc2l0eSk7dm9pZCAwIT09YS5hb01hcCYmKGQuYW9NYXA9YihhLmFvTWFwKSk7dm9pZCAwIT09YS5hb01hcEludGVuc2l0eSYmKGQuYW9NYXBJbnRlbnNpdHk9YS5hb01hcEludGVuc2l0eSk7dm9pZCAwIT09YS5ncmFkaWVudE1hcCYmKGQuZ3JhZGllbnRNYXA9XG4gICAgYihhLmdyYWRpZW50TWFwKSk7cmV0dXJuIGR9fSk7T2JqZWN0LmFzc2lnbihsZS5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpczsobmV3IE5hKGUubWFuYWdlcikpLmxvYWQoYSxmdW5jdGlvbihhKXtiKGUucGFyc2UoSlNPTi5wYXJzZShhKSkpfSxjLGQpfSxwYXJzZTpmdW5jdGlvbihhKXt2YXIgYj1uZXcgRTt2YXIgYz1hLmRhdGEuaW5kZXg7dm9pZCAwIT09YyYmKGM9bmV3IHhmW2MudHlwZV0oYy5hcnJheSksYi5zZXRJbmRleChuZXcgTShjLDEpKSk7dmFyIGQ9YS5kYXRhLmF0dHJpYnV0ZXM7Zm9yKGYgaW4gZCl7dmFyIGU9ZFtmXTtjPW5ldyB4ZltlLnR5cGVdKGUuYXJyYXkpO2IuYWRkQXR0cmlidXRlKGYsbmV3IE0oYyxlLml0ZW1TaXplLGUubm9ybWFsaXplZCkpfXZhciBmPWEuZGF0YS5ncm91cHN8fGEuZGF0YS5kcmF3Y2FsbHN8fGEuZGF0YS5vZmZzZXRzO2lmKHZvaWQgMCE9PWYpZm9yKGM9MCxkPWYubGVuZ3RoO2MhPT1kOysrYyllPWZbY10sXG4gICAgYi5hZGRHcm91cChlLnN0YXJ0LGUuY291bnQsZS5tYXRlcmlhbEluZGV4KTthPWEuZGF0YS5ib3VuZGluZ1NwaGVyZTt2b2lkIDAhPT1hJiYoZj1uZXcgcCx2b2lkIDAhPT1hLmNlbnRlciYmZi5mcm9tQXJyYXkoYS5jZW50ZXIpLGIuYm91bmRpbmdTcGhlcmU9bmV3IElhKGYsYS5yYWRpdXMpKTtyZXR1cm4gYn19KTt2YXIgeGY9e0ludDhBcnJheTpJbnQ4QXJyYXksVWludDhBcnJheTpVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgVWludDhDbGFtcGVkQXJyYXk/VWludDhDbGFtcGVkQXJyYXk6VWludDhBcnJheSxJbnQxNkFycmF5OkludDE2QXJyYXksVWludDE2QXJyYXk6VWludDE2QXJyYXksSW50MzJBcnJheTpJbnQzMkFycmF5LFVpbnQzMkFycmF5OlVpbnQzMkFycmF5LEZsb2F0MzJBcnJheTpGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5OkZsb2F0NjRBcnJheX07a2MuSGFuZGxlcnM9e2hhbmRsZXJzOltdLGFkZDpmdW5jdGlvbihhLGIpe3RoaXMuaGFuZGxlcnMucHVzaChhLFxuICAgIGIpfSxnZXQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuaGFuZGxlcnMsYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrPTIpe3ZhciBlPWJbYysxXTtpZihiW2NdLnRlc3QoYSkpcmV0dXJuIGV9cmV0dXJuIG51bGx9fTtPYmplY3QuYXNzaWduKGtjLnByb3RvdHlwZSx7Y3Jvc3NPcmlnaW46dm9pZCAwLGluaXRNYXRlcmlhbHM6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1bXSxlPTA7ZTxhLmxlbmd0aDsrK2UpZFtlXT10aGlzLmNyZWF0ZU1hdGVyaWFsKGFbZV0sYixjKTtyZXR1cm4gZH0sY3JlYXRlTWF0ZXJpYWw6ZnVuY3Rpb24oKXt2YXIgYT17Tm9CbGVuZGluZzowLE5vcm1hbEJsZW5kaW5nOjEsQWRkaXRpdmVCbGVuZGluZzoyLFN1YnRyYWN0aXZlQmxlbmRpbmc6MyxNdWx0aXBseUJsZW5kaW5nOjQsQ3VzdG9tQmxlbmRpbmc6NX0sYj1uZXcgSCxjPW5ldyBBZCxkPW5ldyBQZDtyZXR1cm4gZnVuY3Rpb24oZSxmLGcpe2Z1bmN0aW9uIGgoYSxiLGQsZSxoKXthPWYrYTt2YXIgbT1rYy5IYW5kbGVycy5nZXQoYSk7XG4gICAgbnVsbCE9PW0/YT1tLmxvYWQoYSk6KGMuc2V0Q3Jvc3NPcmlnaW4oZyksYT1jLmxvYWQoYSkpO3ZvaWQgMCE9PWImJihhLnJlcGVhdC5mcm9tQXJyYXkoYiksMSE9PWJbMF0mJihhLndyYXBTPTFFMyksMSE9PWJbMV0mJihhLndyYXBUPTFFMykpO3ZvaWQgMCE9PWQmJmEub2Zmc2V0LmZyb21BcnJheShkKTt2b2lkIDAhPT1lJiYoXCJyZXBlYXRcIj09PWVbMF0mJihhLndyYXBTPTFFMyksXCJtaXJyb3JcIj09PWVbMF0mJihhLndyYXBTPTEwMDIpLFwicmVwZWF0XCI9PT1lWzFdJiYoYS53cmFwVD0xRTMpLFwibWlycm9yXCI9PT1lWzFdJiYoYS53cmFwVD0xMDAyKSk7dm9pZCAwIT09aCYmKGEuYW5pc290cm9weT1oKTtiPVEuZ2VuZXJhdGVVVUlEKCk7a1tiXT1hO3JldHVybiBifXZhciBrPXt9LG09e3V1aWQ6US5nZW5lcmF0ZVVVSUQoKSx0eXBlOlwiTWVzaExhbWJlcnRNYXRlcmlhbFwifSxsO2ZvcihsIGluIGUpe3ZhciBuPWVbbF07c3dpdGNoKGwpe2Nhc2UgXCJEYmdDb2xvclwiOmNhc2UgXCJEYmdJbmRleFwiOmNhc2UgXCJvcHRpY2FsRGVuc2l0eVwiOmNhc2UgXCJpbGx1bWluYXRpb25cIjpicmVhaztcbiAgICBjYXNlIFwiRGJnTmFtZVwiOm0ubmFtZT1uO2JyZWFrO2Nhc2UgXCJibGVuZGluZ1wiOm0uYmxlbmRpbmc9YVtuXTticmVhaztjYXNlIFwiY29sb3JBbWJpZW50XCI6Y2FzZSBcIm1hcEFtYmllbnRcIjpjb25zb2xlLndhcm4oXCJUSFJFRS5Mb2FkZXIuY3JlYXRlTWF0ZXJpYWw6XCIsbCxcImlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuXCIpO2JyZWFrO2Nhc2UgXCJjb2xvckRpZmZ1c2VcIjptLmNvbG9yPWIuZnJvbUFycmF5KG4pLmdldEhleCgpO2JyZWFrO2Nhc2UgXCJjb2xvclNwZWN1bGFyXCI6bS5zcGVjdWxhcj1iLmZyb21BcnJheShuKS5nZXRIZXgoKTticmVhaztjYXNlIFwiY29sb3JFbWlzc2l2ZVwiOm0uZW1pc3NpdmU9Yi5mcm9tQXJyYXkobikuZ2V0SGV4KCk7YnJlYWs7Y2FzZSBcInNwZWN1bGFyQ29lZlwiOm0uc2hpbmluZXNzPW47YnJlYWs7Y2FzZSBcInNoYWRpbmdcIjpcImJhc2ljXCI9PT1uLnRvTG93ZXJDYXNlKCkmJihtLnR5cGU9XCJNZXNoQmFzaWNNYXRlcmlhbFwiKTtcInBob25nXCI9PT1uLnRvTG93ZXJDYXNlKCkmJlxuICAgIChtLnR5cGU9XCJNZXNoUGhvbmdNYXRlcmlhbFwiKTtcInN0YW5kYXJkXCI9PT1uLnRvTG93ZXJDYXNlKCkmJihtLnR5cGU9XCJNZXNoU3RhbmRhcmRNYXRlcmlhbFwiKTticmVhaztjYXNlIFwibWFwRGlmZnVzZVwiOm0ubWFwPWgobixlLm1hcERpZmZ1c2VSZXBlYXQsZS5tYXBEaWZmdXNlT2Zmc2V0LGUubWFwRGlmZnVzZVdyYXAsZS5tYXBEaWZmdXNlQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcERpZmZ1c2VSZXBlYXRcIjpjYXNlIFwibWFwRGlmZnVzZU9mZnNldFwiOmNhc2UgXCJtYXBEaWZmdXNlV3JhcFwiOmNhc2UgXCJtYXBEaWZmdXNlQW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJtYXBFbWlzc2l2ZVwiOm0uZW1pc3NpdmVNYXA9aChuLGUubWFwRW1pc3NpdmVSZXBlYXQsZS5tYXBFbWlzc2l2ZU9mZnNldCxlLm1hcEVtaXNzaXZlV3JhcCxlLm1hcEVtaXNzaXZlQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcEVtaXNzaXZlUmVwZWF0XCI6Y2FzZSBcIm1hcEVtaXNzaXZlT2Zmc2V0XCI6Y2FzZSBcIm1hcEVtaXNzaXZlV3JhcFwiOmNhc2UgXCJtYXBFbWlzc2l2ZUFuaXNvdHJvcHlcIjpicmVhaztcbiAgICBjYXNlIFwibWFwTGlnaHRcIjptLmxpZ2h0TWFwPWgobixlLm1hcExpZ2h0UmVwZWF0LGUubWFwTGlnaHRPZmZzZXQsZS5tYXBMaWdodFdyYXAsZS5tYXBMaWdodEFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBMaWdodFJlcGVhdFwiOmNhc2UgXCJtYXBMaWdodE9mZnNldFwiOmNhc2UgXCJtYXBMaWdodFdyYXBcIjpjYXNlIFwibWFwTGlnaHRBbmlzb3Ryb3B5XCI6YnJlYWs7Y2FzZSBcIm1hcEFPXCI6bS5hb01hcD1oKG4sZS5tYXBBT1JlcGVhdCxlLm1hcEFPT2Zmc2V0LGUubWFwQU9XcmFwLGUubWFwQU9Bbmlzb3Ryb3B5KTticmVhaztjYXNlIFwibWFwQU9SZXBlYXRcIjpjYXNlIFwibWFwQU9PZmZzZXRcIjpjYXNlIFwibWFwQU9XcmFwXCI6Y2FzZSBcIm1hcEFPQW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJtYXBCdW1wXCI6bS5idW1wTWFwPWgobixlLm1hcEJ1bXBSZXBlYXQsZS5tYXBCdW1wT2Zmc2V0LGUubWFwQnVtcFdyYXAsZS5tYXBCdW1wQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcEJ1bXBTY2FsZVwiOm0uYnVtcFNjYWxlPVxuICAgIG47YnJlYWs7Y2FzZSBcIm1hcEJ1bXBSZXBlYXRcIjpjYXNlIFwibWFwQnVtcE9mZnNldFwiOmNhc2UgXCJtYXBCdW1wV3JhcFwiOmNhc2UgXCJtYXBCdW1wQW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJtYXBOb3JtYWxcIjptLm5vcm1hbE1hcD1oKG4sZS5tYXBOb3JtYWxSZXBlYXQsZS5tYXBOb3JtYWxPZmZzZXQsZS5tYXBOb3JtYWxXcmFwLGUubWFwTm9ybWFsQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcE5vcm1hbEZhY3RvclwiOm0ubm9ybWFsU2NhbGU9W24sbl07YnJlYWs7Y2FzZSBcIm1hcE5vcm1hbFJlcGVhdFwiOmNhc2UgXCJtYXBOb3JtYWxPZmZzZXRcIjpjYXNlIFwibWFwTm9ybWFsV3JhcFwiOmNhc2UgXCJtYXBOb3JtYWxBbmlzb3Ryb3B5XCI6YnJlYWs7Y2FzZSBcIm1hcFNwZWN1bGFyXCI6bS5zcGVjdWxhck1hcD1oKG4sZS5tYXBTcGVjdWxhclJlcGVhdCxlLm1hcFNwZWN1bGFyT2Zmc2V0LGUubWFwU3BlY3VsYXJXcmFwLGUubWFwU3BlY3VsYXJBbmlzb3Ryb3B5KTticmVhaztjYXNlIFwibWFwU3BlY3VsYXJSZXBlYXRcIjpjYXNlIFwibWFwU3BlY3VsYXJPZmZzZXRcIjpjYXNlIFwibWFwU3BlY3VsYXJXcmFwXCI6Y2FzZSBcIm1hcFNwZWN1bGFyQW5pc290cm9weVwiOmJyZWFrO1xuICAgIGNhc2UgXCJtYXBNZXRhbG5lc3NcIjptLm1ldGFsbmVzc01hcD1oKG4sZS5tYXBNZXRhbG5lc3NSZXBlYXQsZS5tYXBNZXRhbG5lc3NPZmZzZXQsZS5tYXBNZXRhbG5lc3NXcmFwLGUubWFwTWV0YWxuZXNzQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcE1ldGFsbmVzc1JlcGVhdFwiOmNhc2UgXCJtYXBNZXRhbG5lc3NPZmZzZXRcIjpjYXNlIFwibWFwTWV0YWxuZXNzV3JhcFwiOmNhc2UgXCJtYXBNZXRhbG5lc3NBbmlzb3Ryb3B5XCI6YnJlYWs7Y2FzZSBcIm1hcFJvdWdobmVzc1wiOm0ucm91Z2huZXNzTWFwPWgobixlLm1hcFJvdWdobmVzc1JlcGVhdCxlLm1hcFJvdWdobmVzc09mZnNldCxlLm1hcFJvdWdobmVzc1dyYXAsZS5tYXBSb3VnaG5lc3NBbmlzb3Ryb3B5KTticmVhaztjYXNlIFwibWFwUm91Z2huZXNzUmVwZWF0XCI6Y2FzZSBcIm1hcFJvdWdobmVzc09mZnNldFwiOmNhc2UgXCJtYXBSb3VnaG5lc3NXcmFwXCI6Y2FzZSBcIm1hcFJvdWdobmVzc0FuaXNvdHJvcHlcIjpicmVhaztjYXNlIFwibWFwQWxwaGFcIjptLmFscGhhTWFwPVxuICAgIGgobixlLm1hcEFscGhhUmVwZWF0LGUubWFwQWxwaGFPZmZzZXQsZS5tYXBBbHBoYVdyYXAsZS5tYXBBbHBoYUFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBBbHBoYVJlcGVhdFwiOmNhc2UgXCJtYXBBbHBoYU9mZnNldFwiOmNhc2UgXCJtYXBBbHBoYVdyYXBcIjpjYXNlIFwibWFwQWxwaGFBbmlzb3Ryb3B5XCI6YnJlYWs7Y2FzZSBcImZsaXBTaWRlZFwiOm0uc2lkZT0xO2JyZWFrO2Nhc2UgXCJkb3VibGVTaWRlZFwiOm0uc2lkZT0yO2JyZWFrO2Nhc2UgXCJ0cmFuc3BhcmVuY3lcIjpjb25zb2xlLndhcm4oXCJUSFJFRS5Mb2FkZXIuY3JlYXRlTWF0ZXJpYWw6IHRyYW5zcGFyZW5jeSBoYXMgYmVlbiByZW5hbWVkIHRvIG9wYWNpdHlcIik7bS5vcGFjaXR5PW47YnJlYWs7Y2FzZSBcImRlcHRoVGVzdFwiOmNhc2UgXCJkZXB0aFdyaXRlXCI6Y2FzZSBcImNvbG9yV3JpdGVcIjpjYXNlIFwib3BhY2l0eVwiOmNhc2UgXCJyZWZsZWN0aXZpdHlcIjpjYXNlIFwidHJhbnNwYXJlbnRcIjpjYXNlIFwidmlzaWJsZVwiOmNhc2UgXCJ3aXJlZnJhbWVcIjptW2xdPVxuICAgIG47YnJlYWs7Y2FzZSBcInZlcnRleENvbG9yc1wiOiEwPT09biYmKG0udmVydGV4Q29sb3JzPTIpO1wiZmFjZVwiPT09biYmKG0udmVydGV4Q29sb3JzPTEpO2JyZWFrO2RlZmF1bHQ6Y29uc29sZS5lcnJvcihcIlRIUkVFLkxvYWRlci5jcmVhdGVNYXRlcmlhbDogVW5zdXBwb3J0ZWRcIixsLG4pfX1cIk1lc2hCYXNpY01hdGVyaWFsXCI9PT1tLnR5cGUmJmRlbGV0ZSBtLmVtaXNzaXZlO1wiTWVzaFBob25nTWF0ZXJpYWxcIiE9PW0udHlwZSYmZGVsZXRlIG0uc3BlY3VsYXI7MT5tLm9wYWNpdHkmJihtLnRyYW5zcGFyZW50PSEwKTtkLnNldFRleHR1cmVzKGspO3JldHVybiBkLnBhcnNlKG0pfX0oKX0pO3ZhciBIZT17ZGVjb2RlVGV4dDpmdW5jdGlvbihhKXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIFRleHREZWNvZGVyKXJldHVybihuZXcgVGV4dERlY29kZXIpLmRlY29kZShhKTtmb3IodmFyIGI9XCJcIixjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKWIrPVN0cmluZy5mcm9tQ2hhckNvZGUoYVtjXSk7cmV0dXJuIGJ9LFxuICAgIGV4dHJhY3RVcmxCYXNlOmZ1bmN0aW9uKGEpe2E9YS5zcGxpdChcIi9cIik7aWYoMT09PWEubGVuZ3RoKXJldHVyblwiLi9cIjthLnBvcCgpO3JldHVybiBhLmpvaW4oXCIvXCIpK1wiL1wifX07T2JqZWN0LmFzc2lnbihtZS5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxmPXRoaXMudGV4dHVyZVBhdGgmJlwic3RyaW5nXCI9PT10eXBlb2YgdGhpcy50ZXh0dXJlUGF0aD90aGlzLnRleHR1cmVQYXRoOkhlLmV4dHJhY3RVcmxCYXNlKGEpLGc9bmV3IE5hKHRoaXMubWFuYWdlcik7Zy5zZXRXaXRoQ3JlZGVudGlhbHModGhpcy53aXRoQ3JlZGVudGlhbHMpO2cubG9hZChhLGZ1bmN0aW9uKGMpe2M9SlNPTi5wYXJzZShjKTt2YXIgZD1jLm1ldGFkYXRhO2lmKHZvaWQgMCE9PWQmJihkPWQudHlwZSx2b2lkIDAhPT1kKSl7aWYoXCJvYmplY3RcIj09PWQudG9Mb3dlckNhc2UoKSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IFwiK2ErXCIgc2hvdWxkIGJlIGxvYWRlZCB3aXRoIFRIUkVFLk9iamVjdExvYWRlciBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm59aWYoXCJzY2VuZVwiPT09ZC50b0xvd2VyQ2FzZSgpKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuSlNPTkxvYWRlcjogXCIrYStcIiBzaG91bGQgYmUgbG9hZGVkIHdpdGggVEhSRUUuU2NlbmVMb2FkZXIgaW5zdGVhZC5cIik7cmV0dXJufX1jPWUucGFyc2UoYyxmKTtiKGMuZ2VvbWV0cnksYy5tYXRlcmlhbHMpfSxjLGQpfSxzZXRUZXh0dXJlUGF0aDpmdW5jdGlvbihhKXt0aGlzLnRleHR1cmVQYXRoPWF9LHBhcnNlOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYil7dm9pZCAwIT09YS5kYXRhJiYoYT1hLmRhdGEpO2Euc2NhbGU9dm9pZCAwIT09YS5zY2FsZT8xL2Euc2NhbGU6MTt2YXIgYz1uZXcgTCxkPWEsZSxmLGcsaD1kLmZhY2VzO3ZhciBrPWQudmVydGljZXM7dmFyIG09ZC5ub3JtYWxzLGw9ZC5jb2xvcnM7dmFyIG49ZC5zY2FsZTt2YXIgdT0wO2lmKHZvaWQgMCE9PWQudXZzKXtmb3IoZT0wO2U8ZC51dnMubGVuZ3RoO2UrKylkLnV2c1tlXS5sZW5ndGgmJnUrKztmb3IoZT1cbiAgICAwO2U8dTtlKyspYy5mYWNlVmVydGV4VXZzW2VdPVtdfXZhciByPTA7Zm9yKGc9ay5sZW5ndGg7cjxnOyllPW5ldyBwLGUueD1rW3IrK10qbixlLnk9a1tyKytdKm4sZS56PWtbcisrXSpuLGMudmVydGljZXMucHVzaChlKTtyPTA7Zm9yKGc9aC5sZW5ndGg7cjxnOyl7az1oW3IrK107dmFyIHQ9ayYxO3ZhciB2PWsmMjtlPWsmODt2YXIgdz1rJjE2O3ZhciB6PWsmMzI7bj1rJjY0O2smPTEyODtpZih0KXt0PW5ldyBZYTt0LmE9aFtyXTt0LmI9aFtyKzFdO3QuYz1oW3IrM107dmFyIHk9bmV3IFlhO3kuYT1oW3IrMV07eS5iPWhbcisyXTt5LmM9aFtyKzNdO3IrPTQ7diYmKHY9aFtyKytdLHQubWF0ZXJpYWxJbmRleD12LHkubWF0ZXJpYWxJbmRleD12KTt2PWMuZmFjZXMubGVuZ3RoO2lmKGUpZm9yKGU9MDtlPHU7ZSsrKXt2YXIgeD1kLnV2c1tlXTtjLmZhY2VWZXJ0ZXhVdnNbZV1bdl09W107Yy5mYWNlVmVydGV4VXZzW2VdW3YrMV09W107Zm9yKGY9MDs0PmY7ZisrKXt2YXIgQT1oW3IrK107XG4gICAgdmFyIEI9eFsyKkFdO0E9eFsyKkErMV07Qj1uZXcgRChCLEEpOzIhPT1mJiZjLmZhY2VWZXJ0ZXhVdnNbZV1bdl0ucHVzaChCKTswIT09ZiYmYy5mYWNlVmVydGV4VXZzW2VdW3YrMV0ucHVzaChCKX19dyYmKHc9MypoW3IrK10sdC5ub3JtYWwuc2V0KG1bdysrXSxtW3crK10sbVt3XSkseS5ub3JtYWwuY29weSh0Lm5vcm1hbCkpO2lmKHopZm9yKGU9MDs0PmU7ZSsrKXc9MypoW3IrK10sej1uZXcgcChtW3crK10sbVt3KytdLG1bd10pLDIhPT1lJiZ0LnZlcnRleE5vcm1hbHMucHVzaCh6KSwwIT09ZSYmeS52ZXJ0ZXhOb3JtYWxzLnB1c2goeik7biYmKG49aFtyKytdLG49bFtuXSx0LmNvbG9yLnNldEhleChuKSx5LmNvbG9yLnNldEhleChuKSk7aWYoaylmb3IoZT0wOzQ+ZTtlKyspbj1oW3IrK10sbj1sW25dLDIhPT1lJiZ0LnZlcnRleENvbG9ycy5wdXNoKG5ldyBIKG4pKSwwIT09ZSYmeS52ZXJ0ZXhDb2xvcnMucHVzaChuZXcgSChuKSk7Yy5mYWNlcy5wdXNoKHQpO2MuZmFjZXMucHVzaCh5KX1lbHNle3Q9XG4gICAgbmV3IFlhO3QuYT1oW3IrK107dC5iPWhbcisrXTt0LmM9aFtyKytdO3YmJih2PWhbcisrXSx0Lm1hdGVyaWFsSW5kZXg9dik7dj1jLmZhY2VzLmxlbmd0aDtpZihlKWZvcihlPTA7ZTx1O2UrKylmb3IoeD1kLnV2c1tlXSxjLmZhY2VWZXJ0ZXhVdnNbZV1bdl09W10sZj0wOzM+ZjtmKyspQT1oW3IrK10sQj14WzIqQV0sQT14WzIqQSsxXSxCPW5ldyBEKEIsQSksYy5mYWNlVmVydGV4VXZzW2VdW3ZdLnB1c2goQik7dyYmKHc9MypoW3IrK10sdC5ub3JtYWwuc2V0KG1bdysrXSxtW3crK10sbVt3XSkpO2lmKHopZm9yKGU9MDszPmU7ZSsrKXc9MypoW3IrK10sej1uZXcgcChtW3crK10sbVt3KytdLG1bd10pLHQudmVydGV4Tm9ybWFscy5wdXNoKHopO24mJihuPWhbcisrXSx0LmNvbG9yLnNldEhleChsW25dKSk7aWYoaylmb3IoZT0wOzM+ZTtlKyspbj1oW3IrK10sdC52ZXJ0ZXhDb2xvcnMucHVzaChuZXcgSChsW25dKSk7Yy5mYWNlcy5wdXNoKHQpfX1kPWE7cj12b2lkIDAhPT1kLmluZmx1ZW5jZXNQZXJWZXJ0ZXg/XG4gICAgZC5pbmZsdWVuY2VzUGVyVmVydGV4OjI7aWYoZC5za2luV2VpZ2h0cylmb3IoZz0wLGg9ZC5za2luV2VpZ2h0cy5sZW5ndGg7ZzxoO2crPXIpYy5za2luV2VpZ2h0cy5wdXNoKG5ldyBhYShkLnNraW5XZWlnaHRzW2ddLDE8cj9kLnNraW5XZWlnaHRzW2crMV06MCwyPHI/ZC5za2luV2VpZ2h0c1tnKzJdOjAsMzxyP2Quc2tpbldlaWdodHNbZyszXTowKSk7aWYoZC5za2luSW5kaWNlcylmb3IoZz0wLGg9ZC5za2luSW5kaWNlcy5sZW5ndGg7ZzxoO2crPXIpYy5za2luSW5kaWNlcy5wdXNoKG5ldyBhYShkLnNraW5JbmRpY2VzW2ddLDE8cj9kLnNraW5JbmRpY2VzW2crMV06MCwyPHI/ZC5za2luSW5kaWNlc1tnKzJdOjAsMzxyP2Quc2tpbkluZGljZXNbZyszXTowKSk7Yy5ib25lcz1kLmJvbmVzO2MuYm9uZXMmJjA8Yy5ib25lcy5sZW5ndGgmJihjLnNraW5XZWlnaHRzLmxlbmd0aCE9PWMuc2tpbkluZGljZXMubGVuZ3RofHxjLnNraW5JbmRpY2VzLmxlbmd0aCE9PWMudmVydGljZXMubGVuZ3RoKSYmXG4gICAgY29uc29sZS53YXJuKFwiV2hlbiBza2lubmluZywgbnVtYmVyIG9mIHZlcnRpY2VzIChcIitjLnZlcnRpY2VzLmxlbmd0aCtcIiksIHNraW5JbmRpY2VzIChcIitjLnNraW5JbmRpY2VzLmxlbmd0aCtcIiksIGFuZCBza2luV2VpZ2h0cyAoXCIrYy5za2luV2VpZ2h0cy5sZW5ndGgrXCIpIHNob3VsZCBtYXRjaC5cIik7Zz1hO2g9Zy5zY2FsZTtpZih2b2lkIDAhPT1nLm1vcnBoVGFyZ2V0cylmb3IoZD0wLHI9Zy5tb3JwaFRhcmdldHMubGVuZ3RoO2Q8cjtkKyspZm9yKGMubW9ycGhUYXJnZXRzW2RdPXt9LGMubW9ycGhUYXJnZXRzW2RdLm5hbWU9Zy5tb3JwaFRhcmdldHNbZF0ubmFtZSxjLm1vcnBoVGFyZ2V0c1tkXS52ZXJ0aWNlcz1bXSxtPWMubW9ycGhUYXJnZXRzW2RdLnZlcnRpY2VzLGw9Zy5tb3JwaFRhcmdldHNbZF0udmVydGljZXMsdT0wLGs9bC5sZW5ndGg7dTxrO3UrPTMpbj1uZXcgcCxuLng9bFt1XSpoLG4ueT1sW3UrMV0qaCxuLno9bFt1KzJdKmgsbS5wdXNoKG4pO2lmKHZvaWQgMCE9PVxuICAgIGcubW9ycGhDb2xvcnMmJjA8Zy5tb3JwaENvbG9ycy5sZW5ndGgpZm9yKGNvbnNvbGUud2FybignVEhSRUUuSlNPTkxvYWRlcjogXCJtb3JwaENvbG9yc1wiIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFVzaW5nIHRoZW0gYXMgZmFjZSBjb2xvcnMuJyksaD1jLmZhY2VzLGc9Zy5tb3JwaENvbG9yc1swXS5jb2xvcnMsZD0wLHI9aC5sZW5ndGg7ZDxyO2QrKyloW2RdLmNvbG9yLmZyb21BcnJheShnLDMqZCk7Zz1hO2Q9W107cj1bXTt2b2lkIDAhPT1nLmFuaW1hdGlvbiYmci5wdXNoKGcuYW5pbWF0aW9uKTt2b2lkIDAhPT1nLmFuaW1hdGlvbnMmJihnLmFuaW1hdGlvbnMubGVuZ3RoP3I9ci5jb25jYXQoZy5hbmltYXRpb25zKTpyLnB1c2goZy5hbmltYXRpb25zKSk7Zm9yKGc9MDtnPHIubGVuZ3RoO2crKykoaD1DYS5wYXJzZUFuaW1hdGlvbihyW2ddLGMuYm9uZXMpKSYmZC5wdXNoKGgpO2MubW9ycGhUYXJnZXRzJiYocj1DYS5DcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcyhjLm1vcnBoVGFyZ2V0cyxcbiAgICAxMCksZD1kLmNvbmNhdChyKSk7MDxkLmxlbmd0aCYmKGMuYW5pbWF0aW9ucz1kKTtjLmNvbXB1dGVGYWNlTm9ybWFscygpO2MuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7aWYodm9pZCAwPT09YS5tYXRlcmlhbHN8fDA9PT1hLm1hdGVyaWFscy5sZW5ndGgpcmV0dXJue2dlb21ldHJ5OmN9O2E9a2MucHJvdG90eXBlLmluaXRNYXRlcmlhbHMoYS5tYXRlcmlhbHMsYix0aGlzLmNyb3NzT3JpZ2luKTtyZXR1cm57Z2VvbWV0cnk6YyxtYXRlcmlhbHM6YX19fSgpfSk7T2JqZWN0LmFzc2lnbihqZi5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7XCJcIj09PXRoaXMudGV4dHVyZVBhdGgmJih0aGlzLnRleHR1cmVQYXRoPWEuc3Vic3RyaW5nKDAsYS5sYXN0SW5kZXhPZihcIi9cIikrMSkpO3ZhciBlPXRoaXM7KG5ldyBOYShlLm1hbmFnZXIpKS5sb2FkKGEsZnVuY3Rpb24oYyl7dmFyIGY9bnVsbDt0cnl7Zj1KU09OLnBhcnNlKGMpfWNhdGNoKGgpe3ZvaWQgMCE9PWQmJmQoaCk7Y29uc29sZS5lcnJvcihcIlRIUkVFOk9iamVjdExvYWRlcjogQ2FuJ3QgcGFyc2UgXCIrXG4gICAgYStcIi5cIixoLm1lc3NhZ2UpO3JldHVybn1jPWYubWV0YWRhdGE7dm9pZCAwPT09Y3x8dm9pZCAwPT09Yy50eXBlfHxcImdlb21ldHJ5XCI9PT1jLnR5cGUudG9Mb3dlckNhc2UoKT9jb25zb2xlLmVycm9yKFwiVEhSRUUuT2JqZWN0TG9hZGVyOiBDYW4ndCBsb2FkIFwiK2ErXCIuIFVzZSBUSFJFRS5KU09OTG9hZGVyIGluc3RlYWQuXCIpOmUucGFyc2UoZixiKX0sYyxkKX0sc2V0VGV4dHVyZVBhdGg6ZnVuY3Rpb24oYSl7dGhpcy50ZXh0dXJlUGF0aD1hfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWF9LHBhcnNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5wYXJzZVNoYXBlKGEuc2hhcGVzKSxjPXRoaXMucGFyc2VHZW9tZXRyaWVzKGEuZ2VvbWV0cmllcyxjKSxkPXRoaXMucGFyc2VJbWFnZXMoYS5pbWFnZXMsZnVuY3Rpb24oKXt2b2lkIDAhPT1iJiZiKGUpfSksZD10aGlzLnBhcnNlVGV4dHVyZXMoYS50ZXh0dXJlcyxkKSxkPXRoaXMucGFyc2VNYXRlcmlhbHMoYS5tYXRlcmlhbHMsXG4gICAgZCksZT10aGlzLnBhcnNlT2JqZWN0KGEub2JqZWN0LGMsZCk7YS5hbmltYXRpb25zJiYoZS5hbmltYXRpb25zPXRoaXMucGFyc2VBbmltYXRpb25zKGEuYW5pbWF0aW9ucykpO3ZvaWQgMCE9PWEuaW1hZ2VzJiYwIT09YS5pbWFnZXMubGVuZ3RofHx2b2lkIDA9PT1ifHxiKGUpO3JldHVybiBlfSxwYXJzZVNoYXBlOmZ1bmN0aW9uKGEpe3ZhciBiPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT0obmV3IGpiKS5mcm9tSlNPTihhW2NdKTtiW2UudXVpZF09ZX1yZXR1cm4gYn0scGFyc2VHZW9tZXRyaWVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9e307aWYodm9pZCAwIT09YSlmb3IodmFyIGQ9bmV3IG1lLGU9bmV3IGxlLGY9MCxnPWEubGVuZ3RoO2Y8ZztmKyspe3ZhciBoPWFbZl07c3dpdGNoKGgudHlwZSl7Y2FzZSBcIlBsYW5lR2VvbWV0cnlcIjpjYXNlIFwiUGxhbmVCdWZmZXJHZW9tZXRyeVwiOnZhciBrPW5ldyBrYVtoLnR5cGVdKGgud2lkdGgsXG4gICAgaC5oZWlnaHQsaC53aWR0aFNlZ21lbnRzLGguaGVpZ2h0U2VnbWVudHMpO2JyZWFrO2Nhc2UgXCJCb3hHZW9tZXRyeVwiOmNhc2UgXCJCb3hCdWZmZXJHZW9tZXRyeVwiOmNhc2UgXCJDdWJlR2VvbWV0cnlcIjprPW5ldyBrYVtoLnR5cGVdKGgud2lkdGgsaC5oZWlnaHQsaC5kZXB0aCxoLndpZHRoU2VnbWVudHMsaC5oZWlnaHRTZWdtZW50cyxoLmRlcHRoU2VnbWVudHMpO2JyZWFrO2Nhc2UgXCJDaXJjbGVHZW9tZXRyeVwiOmNhc2UgXCJDaXJjbGVCdWZmZXJHZW9tZXRyeVwiOms9bmV3IGthW2gudHlwZV0oaC5yYWRpdXMsaC5zZWdtZW50cyxoLnRoZXRhU3RhcnQsaC50aGV0YUxlbmd0aCk7YnJlYWs7Y2FzZSBcIkN5bGluZGVyR2VvbWV0cnlcIjpjYXNlIFwiQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeVwiOms9bmV3IGthW2gudHlwZV0oaC5yYWRpdXNUb3AsaC5yYWRpdXNCb3R0b20saC5oZWlnaHQsaC5yYWRpYWxTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLGgub3BlbkVuZGVkLGgudGhldGFTdGFydCxoLnRoZXRhTGVuZ3RoKTtcbiAgICBicmVhaztjYXNlIFwiQ29uZUdlb21ldHJ5XCI6Y2FzZSBcIkNvbmVCdWZmZXJHZW9tZXRyeVwiOms9bmV3IGthW2gudHlwZV0oaC5yYWRpdXMsaC5oZWlnaHQsaC5yYWRpYWxTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLGgub3BlbkVuZGVkLGgudGhldGFTdGFydCxoLnRoZXRhTGVuZ3RoKTticmVhaztjYXNlIFwiU3BoZXJlR2VvbWV0cnlcIjpjYXNlIFwiU3BoZXJlQnVmZmVyR2VvbWV0cnlcIjprPW5ldyBrYVtoLnR5cGVdKGgucmFkaXVzLGgud2lkdGhTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLGgucGhpU3RhcnQsaC5waGlMZW5ndGgsaC50aGV0YVN0YXJ0LGgudGhldGFMZW5ndGgpO2JyZWFrO2Nhc2UgXCJEb2RlY2FoZWRyb25HZW9tZXRyeVwiOmNhc2UgXCJEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeVwiOmNhc2UgXCJJY29zYWhlZHJvbkdlb21ldHJ5XCI6Y2FzZSBcIkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjpjYXNlIFwiT2N0YWhlZHJvbkdlb21ldHJ5XCI6Y2FzZSBcIk9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeVwiOmNhc2UgXCJUZXRyYWhlZHJvbkdlb21ldHJ5XCI6Y2FzZSBcIlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjprPVxuICAgIG5ldyBrYVtoLnR5cGVdKGgucmFkaXVzLGguZGV0YWlsKTticmVhaztjYXNlIFwiUmluZ0dlb21ldHJ5XCI6Y2FzZSBcIlJpbmdCdWZmZXJHZW9tZXRyeVwiOms9bmV3IGthW2gudHlwZV0oaC5pbm5lclJhZGl1cyxoLm91dGVyUmFkaXVzLGgudGhldGFTZWdtZW50cyxoLnBoaVNlZ21lbnRzLGgudGhldGFTdGFydCxoLnRoZXRhTGVuZ3RoKTticmVhaztjYXNlIFwiVG9ydXNHZW9tZXRyeVwiOmNhc2UgXCJUb3J1c0J1ZmZlckdlb21ldHJ5XCI6az1uZXcga2FbaC50eXBlXShoLnJhZGl1cyxoLnR1YmUsaC5yYWRpYWxTZWdtZW50cyxoLnR1YnVsYXJTZWdtZW50cyxoLmFyYyk7YnJlYWs7Y2FzZSBcIlRvcnVzS25vdEdlb21ldHJ5XCI6Y2FzZSBcIlRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5XCI6az1uZXcga2FbaC50eXBlXShoLnJhZGl1cyxoLnR1YmUsaC50dWJ1bGFyU2VnbWVudHMsaC5yYWRpYWxTZWdtZW50cyxoLnAsaC5xKTticmVhaztjYXNlIFwiTGF0aGVHZW9tZXRyeVwiOmNhc2UgXCJMYXRoZUJ1ZmZlckdlb21ldHJ5XCI6az1cbiAgICBuZXcga2FbaC50eXBlXShoLnBvaW50cyxoLnNlZ21lbnRzLGgucGhpU3RhcnQsaC5waGlMZW5ndGgpO2JyZWFrO2Nhc2UgXCJQb2x5aGVkcm9uR2VvbWV0cnlcIjpjYXNlIFwiUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCI6az1uZXcga2FbaC50eXBlXShoLnZlcnRpY2VzLGguaW5kaWNlcyxoLnJhZGl1cyxoLmRldGFpbHMpO2JyZWFrO2Nhc2UgXCJTaGFwZUdlb21ldHJ5XCI6Y2FzZSBcIlNoYXBlQnVmZmVyR2VvbWV0cnlcIjprPVtdO2Y9MDtmb3IoZz1oLnNoYXBlcy5sZW5ndGg7ZjxnO2YrKylrLnB1c2goYltoLnNoYXBlc1tmXV0pO2s9bmV3IGthW2gudHlwZV0oayxoLmN1cnZlU2VnbWVudHMpO2JyZWFrO2Nhc2UgXCJCdWZmZXJHZW9tZXRyeVwiOms9ZS5wYXJzZShoKTticmVhaztjYXNlIFwiR2VvbWV0cnlcIjprPWQucGFyc2UoaCx0aGlzLnRleHR1cmVQYXRoKS5nZW9tZXRyeTticmVhaztkZWZhdWx0OmNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0TG9hZGVyOiBVbnN1cHBvcnRlZCBnZW9tZXRyeSB0eXBlIFwiJytcbiAgICBoLnR5cGUrJ1wiJyk7Y29udGludWV9ay51dWlkPWgudXVpZDt2b2lkIDAhPT1oLm5hbWUmJihrLm5hbWU9aC5uYW1lKTtjW2gudXVpZF09a31yZXR1cm4gY30scGFyc2VNYXRlcmlhbHM6ZnVuY3Rpb24oYSxiKXt2YXIgYz17fTtpZih2b2lkIDAhPT1hKXt2YXIgZD1uZXcgUGQ7ZC5zZXRUZXh0dXJlcyhiKTtiPTA7Zm9yKHZhciBlPWEubGVuZ3RoO2I8ZTtiKyspe3ZhciBmPWFbYl07aWYoXCJNdWx0aU1hdGVyaWFsXCI9PT1mLnR5cGUpe2Zvcih2YXIgZz1bXSxoPTA7aDxmLm1hdGVyaWFscy5sZW5ndGg7aCsrKWcucHVzaChkLnBhcnNlKGYubWF0ZXJpYWxzW2hdKSk7Y1tmLnV1aWRdPWd9ZWxzZSBjW2YudXVpZF09ZC5wYXJzZShmKX19cmV0dXJuIGN9LHBhcnNlQW5pbWF0aW9uczpmdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1DYS5wYXJzZShhW2NdKTtiLnB1c2goZCl9cmV0dXJuIGJ9LHBhcnNlSW1hZ2VzOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtkLm1hbmFnZXIuaXRlbVN0YXJ0KGEpO1xuICAgIHJldHVybiBmLmxvYWQoYSxmdW5jdGlvbigpe2QubWFuYWdlci5pdGVtRW5kKGEpfSx2b2lkIDAsZnVuY3Rpb24oKXtkLm1hbmFnZXIuaXRlbUVuZChhKTtkLm1hbmFnZXIuaXRlbUVycm9yKGEpfSl9dmFyIGQ9dGhpcyxlPXt9O2lmKHZvaWQgMCE9PWEmJjA8YS5sZW5ndGgpe2I9bmV3IGhlKGIpO3ZhciBmPW5ldyBhZChiKTtmLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2I9MDtmb3IodmFyIGc9YS5sZW5ndGg7YjxnO2IrKyl7dmFyIGg9YVtiXSxrPS9eKFxcL1xcLyl8KFthLXpdKzooXFwvXFwvKT8pL2kudGVzdChoLnVybCk/aC51cmw6ZC50ZXh0dXJlUGF0aCtoLnVybDtlW2gudXVpZF09YyhrKX19cmV0dXJuIGV9LHBhcnNlVGV4dHVyZXM6ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBhKXJldHVybiBhO2NvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uXCIsXG4gICAgYSk7cmV0dXJuIGJbYV19dmFyIGQ9e307aWYodm9pZCAwIT09YSlmb3IodmFyIGU9MCxmPWEubGVuZ3RoO2U8ZjtlKyspe3ZhciBnPWFbZV07dm9pZCAwPT09Zy5pbWFnZSYmY29uc29sZS53YXJuKCdUSFJFRS5PYmplY3RMb2FkZXI6IE5vIFwiaW1hZ2VcIiBzcGVjaWZpZWQgZm9yJyxnLnV1aWQpO3ZvaWQgMD09PWJbZy5pbWFnZV0mJmNvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGltYWdlXCIsZy5pbWFnZSk7dmFyIGg9bmV3IFUoYltnLmltYWdlXSk7aC5uZWVkc1VwZGF0ZT0hMDtoLnV1aWQ9Zy51dWlkO3ZvaWQgMCE9PWcubmFtZSYmKGgubmFtZT1nLm5hbWUpO3ZvaWQgMCE9PWcubWFwcGluZyYmKGgubWFwcGluZz1jKGcubWFwcGluZyxPZykpO3ZvaWQgMCE9PWcub2Zmc2V0JiZoLm9mZnNldC5mcm9tQXJyYXkoZy5vZmZzZXQpO3ZvaWQgMCE9PWcucmVwZWF0JiZoLnJlcGVhdC5mcm9tQXJyYXkoZy5yZXBlYXQpO3ZvaWQgMCE9PWcuY2VudGVyJiZoLmNlbnRlci5mcm9tQXJyYXkoZy5jZW50ZXIpO1xuICAgIHZvaWQgMCE9PWcucm90YXRpb24mJihoLnJvdGF0aW9uPWcucm90YXRpb24pO3ZvaWQgMCE9PWcud3JhcCYmKGgud3JhcFM9YyhnLndyYXBbMF0seWYpLGgud3JhcFQ9YyhnLndyYXBbMV0seWYpKTt2b2lkIDAhPT1nLm1pbkZpbHRlciYmKGgubWluRmlsdGVyPWMoZy5taW5GaWx0ZXIsemYpKTt2b2lkIDAhPT1nLm1hZ0ZpbHRlciYmKGgubWFnRmlsdGVyPWMoZy5tYWdGaWx0ZXIsemYpKTt2b2lkIDAhPT1nLmFuaXNvdHJvcHkmJihoLmFuaXNvdHJvcHk9Zy5hbmlzb3Ryb3B5KTt2b2lkIDAhPT1nLmZsaXBZJiYoaC5mbGlwWT1nLmZsaXBZKTtkW2cudXVpZF09aH1yZXR1cm4gZH0scGFyc2VPYmplY3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYixjLGQpe2Z1bmN0aW9uIGUoYSl7dm9pZCAwPT09Y1thXSYmY29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgZ2VvbWV0cnlcIixhKTtyZXR1cm4gY1thXX1mdW5jdGlvbiBmKGEpe2lmKHZvaWQgMCE9PVxuICAgIGEpe2lmKEFycmF5LmlzQXJyYXkoYSkpe2Zvcih2YXIgYj1bXSxjPTAsZT1hLmxlbmd0aDtjPGU7YysrKXt2YXIgZj1hW2NdO3ZvaWQgMD09PWRbZl0mJmNvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsXCIsZik7Yi5wdXNoKGRbZl0pfXJldHVybiBifXZvaWQgMD09PWRbYV0mJmNvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsXCIsYSk7cmV0dXJuIGRbYV19fXN3aXRjaChiLnR5cGUpe2Nhc2UgXCJTY2VuZVwiOnZhciBnPW5ldyB2ZDt2b2lkIDAhPT1iLmJhY2tncm91bmQmJk51bWJlci5pc0ludGVnZXIoYi5iYWNrZ3JvdW5kKSYmKGcuYmFja2dyb3VuZD1uZXcgSChiLmJhY2tncm91bmQpKTt2b2lkIDAhPT1iLmZvZyYmKFwiRm9nXCI9PT1iLmZvZy50eXBlP2cuZm9nPW5ldyBRYihiLmZvZy5jb2xvcixiLmZvZy5uZWFyLGIuZm9nLmZhcik6XCJGb2dFeHAyXCI9PT1iLmZvZy50eXBlJiYoZy5mb2c9bmV3IFBiKGIuZm9nLmNvbG9yLFxuICAgIGIuZm9nLmRlbnNpdHkpKSk7YnJlYWs7Y2FzZSBcIlBlcnNwZWN0aXZlQ2FtZXJhXCI6Zz1uZXcgYmEoYi5mb3YsYi5hc3BlY3QsYi5uZWFyLGIuZmFyKTt2b2lkIDAhPT1iLmZvY3VzJiYoZy5mb2N1cz1iLmZvY3VzKTt2b2lkIDAhPT1iLnpvb20mJihnLnpvb209Yi56b29tKTt2b2lkIDAhPT1iLmZpbG1HYXVnZSYmKGcuZmlsbUdhdWdlPWIuZmlsbUdhdWdlKTt2b2lkIDAhPT1iLmZpbG1PZmZzZXQmJihnLmZpbG1PZmZzZXQ9Yi5maWxtT2Zmc2V0KTt2b2lkIDAhPT1iLnZpZXcmJihnLnZpZXc9T2JqZWN0LmFzc2lnbih7fSxiLnZpZXcpKTticmVhaztjYXNlIFwiT3J0aG9ncmFwaGljQ2FtZXJhXCI6Zz1uZXcgTGIoYi5sZWZ0LGIucmlnaHQsYi50b3AsYi5ib3R0b20sYi5uZWFyLGIuZmFyKTticmVhaztjYXNlIFwiQW1iaWVudExpZ2h0XCI6Zz1uZXcgSGQoYi5jb2xvcixiLmludGVuc2l0eSk7YnJlYWs7Y2FzZSBcIkRpcmVjdGlvbmFsTGlnaHRcIjpnPW5ldyBHZChiLmNvbG9yLGIuaW50ZW5zaXR5KTtcbiAgICBicmVhaztjYXNlIFwiUG9pbnRMaWdodFwiOmc9bmV3IEVkKGIuY29sb3IsYi5pbnRlbnNpdHksYi5kaXN0YW5jZSxiLmRlY2F5KTticmVhaztjYXNlIFwiUmVjdEFyZWFMaWdodFwiOmc9bmV3IElkKGIuY29sb3IsYi5pbnRlbnNpdHksYi53aWR0aCxiLmhlaWdodCk7YnJlYWs7Y2FzZSBcIlNwb3RMaWdodFwiOmc9bmV3IERkKGIuY29sb3IsYi5pbnRlbnNpdHksYi5kaXN0YW5jZSxiLmFuZ2xlLGIucGVudW1icmEsYi5kZWNheSk7YnJlYWs7Y2FzZSBcIkhlbWlzcGhlcmVMaWdodFwiOmc9bmV3IEJkKGIuY29sb3IsYi5ncm91bmRDb2xvcixiLmludGVuc2l0eSk7YnJlYWs7Y2FzZSBcIlNraW5uZWRNZXNoXCI6Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0TG9hZGVyLnBhcnNlT2JqZWN0KCkgZG9lcyBub3Qgc3VwcG9ydCBTa2lubmVkTWVzaCB5ZXQuXCIpO2Nhc2UgXCJNZXNoXCI6Zz1lKGIuZ2VvbWV0cnkpO3ZhciBoPWYoYi5tYXRlcmlhbCk7Zz1nLmJvbmVzJiYwPGcuYm9uZXMubGVuZ3RoP25ldyB4ZChnLFxuICAgIGgpOm5ldyByYShnLGgpO2JyZWFrO2Nhc2UgXCJMT0RcIjpnPW5ldyBEYzticmVhaztjYXNlIFwiTGluZVwiOmc9bmV3IHNhKGUoYi5nZW9tZXRyeSksZihiLm1hdGVyaWFsKSxiLm1vZGUpO2JyZWFrO2Nhc2UgXCJMaW5lTG9vcFwiOmc9bmV3IHlkKGUoYi5nZW9tZXRyeSksZihiLm1hdGVyaWFsKSk7YnJlYWs7Y2FzZSBcIkxpbmVTZWdtZW50c1wiOmc9bmV3IFgoZShiLmdlb21ldHJ5KSxmKGIubWF0ZXJpYWwpKTticmVhaztjYXNlIFwiUG9pbnRDbG91ZFwiOmNhc2UgXCJQb2ludHNcIjpnPW5ldyBSYihlKGIuZ2VvbWV0cnkpLGYoYi5tYXRlcmlhbCkpO2JyZWFrO2Nhc2UgXCJTcHJpdGVcIjpnPW5ldyBDYyhmKGIubWF0ZXJpYWwpKTticmVhaztjYXNlIFwiR3JvdXBcIjpnPW5ldyBGYzticmVhaztkZWZhdWx0Omc9bmV3IHh9Zy51dWlkPWIudXVpZDt2b2lkIDAhPT1iLm5hbWUmJihnLm5hbWU9Yi5uYW1lKTt2b2lkIDAhPT1iLm1hdHJpeD8oYS5mcm9tQXJyYXkoYi5tYXRyaXgpLGEuZGVjb21wb3NlKGcucG9zaXRpb24sXG4gICAgZy5xdWF0ZXJuaW9uLGcuc2NhbGUpKToodm9pZCAwIT09Yi5wb3NpdGlvbiYmZy5wb3NpdGlvbi5mcm9tQXJyYXkoYi5wb3NpdGlvbiksdm9pZCAwIT09Yi5yb3RhdGlvbiYmZy5yb3RhdGlvbi5mcm9tQXJyYXkoYi5yb3RhdGlvbiksdm9pZCAwIT09Yi5xdWF0ZXJuaW9uJiZnLnF1YXRlcm5pb24uZnJvbUFycmF5KGIucXVhdGVybmlvbiksdm9pZCAwIT09Yi5zY2FsZSYmZy5zY2FsZS5mcm9tQXJyYXkoYi5zY2FsZSkpO3ZvaWQgMCE9PWIuY2FzdFNoYWRvdyYmKGcuY2FzdFNoYWRvdz1iLmNhc3RTaGFkb3cpO3ZvaWQgMCE9PWIucmVjZWl2ZVNoYWRvdyYmKGcucmVjZWl2ZVNoYWRvdz1iLnJlY2VpdmVTaGFkb3cpO2Iuc2hhZG93JiYodm9pZCAwIT09Yi5zaGFkb3cuYmlhcyYmKGcuc2hhZG93LmJpYXM9Yi5zaGFkb3cuYmlhcyksdm9pZCAwIT09Yi5zaGFkb3cucmFkaXVzJiYoZy5zaGFkb3cucmFkaXVzPWIuc2hhZG93LnJhZGl1cyksdm9pZCAwIT09Yi5zaGFkb3cubWFwU2l6ZSYmXG4gICAgZy5zaGFkb3cubWFwU2l6ZS5mcm9tQXJyYXkoYi5zaGFkb3cubWFwU2l6ZSksdm9pZCAwIT09Yi5zaGFkb3cuY2FtZXJhJiYoZy5zaGFkb3cuY2FtZXJhPXRoaXMucGFyc2VPYmplY3QoYi5zaGFkb3cuY2FtZXJhKSkpO3ZvaWQgMCE9PWIudmlzaWJsZSYmKGcudmlzaWJsZT1iLnZpc2libGUpO3ZvaWQgMCE9PWIudXNlckRhdGEmJihnLnVzZXJEYXRhPWIudXNlckRhdGEpO2lmKHZvaWQgMCE9PWIuY2hpbGRyZW4pZm9yKHZhciBoPWIuY2hpbGRyZW4saz0wO2s8aC5sZW5ndGg7aysrKWcuYWRkKHRoaXMucGFyc2VPYmplY3QoaFtrXSxjLGQpKTtpZihcIkxPRFwiPT09Yi50eXBlKWZvcihiPWIubGV2ZWxzLGg9MDtoPGIubGVuZ3RoO2grKyl7dmFyIGs9YltoXSxtPWcuZ2V0T2JqZWN0QnlQcm9wZXJ0eShcInV1aWRcIixrLm9iamVjdCk7dm9pZCAwIT09bSYmZy5hZGRMZXZlbChtLGsuZGlzdGFuY2UpfXJldHVybiBnfX0oKX0pO3ZhciBPZz17VVZNYXBwaW5nOjMwMCxDdWJlUmVmbGVjdGlvbk1hcHBpbmc6MzAxLFxuICAgIEN1YmVSZWZyYWN0aW9uTWFwcGluZzozMDIsRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6MzAzLEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOjMwNCxTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzozMDUsQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6MzA2LEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nOjMwN30seWY9e1JlcGVhdFdyYXBwaW5nOjFFMyxDbGFtcFRvRWRnZVdyYXBwaW5nOjEwMDEsTWlycm9yZWRSZXBlYXRXcmFwcGluZzoxMDAyfSx6Zj17TmVhcmVzdEZpbHRlcjoxMDAzLE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyOjEwMDQsTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcjoxMDA1LExpbmVhckZpbHRlcjoxMDA2LExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXI6MTAwNyxMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI6MTAwOH07bmUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpuZSxzZXRPcHRpb25zOmZ1bmN0aW9uKGEpe3RoaXMub3B0aW9ucz1hO3JldHVybiB0aGlzfSxcbiAgICBsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZvaWQgMD09PWEmJihhPVwiXCIpO3ZvaWQgMCE9PXRoaXMucGF0aCYmKGE9dGhpcy5wYXRoK2EpO3ZhciBlPXRoaXMsZj1JYi5nZXQoYSk7aWYodm9pZCAwIT09ZilyZXR1cm4gZS5tYW5hZ2VyLml0ZW1TdGFydChhKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YiYmYihmKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sMCksZjtmZXRjaChhKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBhLmJsb2IoKX0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKGEsZS5vcHRpb25zKX0pLnRoZW4oZnVuY3Rpb24oYyl7SWIuYWRkKGEsYyk7YiYmYihjKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0pLmNhdGNoKGZ1bmN0aW9uKGIpe2QmJmQoYik7ZS5tYW5hZ2VyLml0ZW1FbmQoYSk7ZS5tYW5hZ2VyLml0ZW1FcnJvcihhKX0pfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbigpe3JldHVybiB0aGlzfSxzZXRQYXRoOmZ1bmN0aW9uKGEpe3RoaXMucGF0aD1cbiAgICBhO3JldHVybiB0aGlzfX07T2JqZWN0LmFzc2lnbihvZS5wcm90b3R5cGUse21vdmVUbzpmdW5jdGlvbihhLGIpe3RoaXMuY3VycmVudFBhdGg9bmV3IFNhO3RoaXMuc3ViUGF0aHMucHVzaCh0aGlzLmN1cnJlbnRQYXRoKTt0aGlzLmN1cnJlbnRQYXRoLm1vdmVUbyhhLGIpfSxsaW5lVG86ZnVuY3Rpb24oYSxiKXt0aGlzLmN1cnJlbnRQYXRoLmxpbmVUbyhhLGIpfSxxdWFkcmF0aWNDdXJ2ZVRvOmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuY3VycmVudFBhdGgucXVhZHJhdGljQ3VydmVUbyhhLGIsYyxkKX0sYmV6aWVyQ3VydmVUbzpmdW5jdGlvbihhLGIsYyxkLGUsZil7dGhpcy5jdXJyZW50UGF0aC5iZXppZXJDdXJ2ZVRvKGEsYixjLGQsZSxmKX0sc3BsaW5lVGhydTpmdW5jdGlvbihhKXt0aGlzLmN1cnJlbnRQYXRoLnNwbGluZVRocnUoYSl9LHRvU2hhcGVzOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtmb3IodmFyIGI9W10sYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9XG4gICAgYVtjXSxmPW5ldyBqYjtmLmN1cnZlcz1lLmN1cnZlcztiLnB1c2goZil9cmV0dXJuIGJ9ZnVuY3Rpb24gZChhLGIpe2Zvcih2YXIgYz1iLmxlbmd0aCxkPSExLGU9Yy0xLGY9MDtmPGM7ZT1mKyspe3ZhciBnPWJbZV0saD1iW2ZdLGs9aC54LWcueCxtPWgueS1nLnk7aWYoTWF0aC5hYnMobSk+TnVtYmVyLkVQU0lMT04pe2lmKDA+bSYmKGc9YltmXSxrPS1rLGg9YltlXSxtPS1tKSwhKGEueTxnLnl8fGEueT5oLnkpKWlmKGEueT09PWcueSl7aWYoYS54PT09Zy54KXJldHVybiEwfWVsc2V7ZT1tKihhLngtZy54KS1rKihhLnktZy55KTtpZigwPT09ZSlyZXR1cm4hMDswPmV8fChkPSFkKX19ZWxzZSBpZihhLnk9PT1nLnkmJihoLng8PWEueCYmYS54PD1nLnh8fGcueDw9YS54JiZhLng8PWgueCkpcmV0dXJuITB9cmV0dXJuIGR9dmFyIGU9JGEuaXNDbG9ja1dpc2UsZj10aGlzLnN1YlBhdGhzO2lmKDA9PT1mLmxlbmd0aClyZXR1cm5bXTtpZighMD09PWIpcmV0dXJuIGMoZik7Yj1bXTtpZigxPT09XG4gICAgZi5sZW5ndGgpe3ZhciBnPWZbMF07dmFyIGg9bmV3IGpiO2guY3VydmVzPWcuY3VydmVzO2IucHVzaChoKTtyZXR1cm4gYn12YXIgaz0hZShmWzBdLmdldFBvaW50cygpKSxrPWE/IWs6aztoPVtdO3ZhciBtPVtdLGw9W10sbj0wO21bbl09dm9pZCAwO2xbbl09W107Zm9yKHZhciBwPTAscj1mLmxlbmd0aDtwPHI7cCsrKXtnPWZbcF07dmFyIHQ9Zy5nZXRQb2ludHMoKTt2YXIgdj1lKHQpOyh2PWE/IXY6dik/KCFrJiZtW25dJiZuKyssbVtuXT17czpuZXcgamIscDp0fSxtW25dLnMuY3VydmVzPWcuY3VydmVzLGsmJm4rKyxsW25dPVtdKTpsW25dLnB1c2goe2g6ZyxwOnRbMF19KX1pZighbVswXSlyZXR1cm4gYyhmKTtpZigxPG0ubGVuZ3RoKXtwPSExO2E9W107ZT0wO2ZvcihmPW0ubGVuZ3RoO2U8ZjtlKyspaFtlXT1bXTtlPTA7Zm9yKGY9bS5sZW5ndGg7ZTxmO2UrKylmb3IoZz1sW2VdLHY9MDt2PGcubGVuZ3RoO3YrKyl7az1nW3ZdO249ITA7Zm9yKHQ9MDt0PG0ubGVuZ3RoO3QrKylkKGsucCxcbiAgICBtW3RdLnApJiYoZSE9PXQmJmEucHVzaCh7ZnJvbXM6ZSx0b3M6dCxob2xlOnZ9KSxuPyhuPSExLGhbdF0ucHVzaChrKSk6cD0hMCk7biYmaFtlXS5wdXNoKGspfTA8YS5sZW5ndGgmJihwfHwobD1oKSl9cD0wO2ZvcihlPW0ubGVuZ3RoO3A8ZTtwKyspZm9yKGg9bVtwXS5zLGIucHVzaChoKSxhPWxbcF0sZj0wLGc9YS5sZW5ndGg7ZjxnO2YrKyloLmhvbGVzLnB1c2goYVtmXS5oKTtyZXR1cm4gYn19KTtPYmplY3QuYXNzaWduKHBlLnByb3RvdHlwZSx7aXNGb250OiEwLGdlbmVyYXRlU2hhcGVzOmZ1bmN0aW9uKGEsYixjKXt2b2lkIDA9PT1iJiYoYj0xMDApO2M9dGhpcy5kYXRhO2E9U3RyaW5nKGEpLnNwbGl0KFwiXCIpO3ZhciBkPWIvYy5yZXNvbHV0aW9uLGU9KGMuYm91bmRpbmdCb3gueU1heC1jLmJvdW5kaW5nQm94LnlNaW4rYy51bmRlcmxpbmVUaGlja25lc3MpKmQsZj0wLGc9MDtiPVtdO2Zvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXt2YXIgaz1hW2hdO2lmKFwiXFxuXCI9PT1rKWY9XG4gICAgMCxnLT1lO2Vsc2V7dmFyIG09ZDt2YXIgbD1mLG49ZztpZihrPWMuZ2x5cGhzW2tdfHxjLmdseXBoc1tcIj9cIl0pe3ZhciBwPW5ldyBvZTtpZihrLm8pZm9yKHZhciByPWsuX2NhY2hlZE91dGxpbmV8fChrLl9jYWNoZWRPdXRsaW5lPWsuby5zcGxpdChcIiBcIikpLHQ9MCx2PXIubGVuZ3RoO3Q8djspc3dpdGNoKHJbdCsrXSl7Y2FzZSBcIm1cIjp2YXIgdz1yW3QrK10qbStsO3ZhciB4PXJbdCsrXSptK247cC5tb3ZlVG8odyx4KTticmVhaztjYXNlIFwibFwiOnc9clt0KytdKm0rbDt4PXJbdCsrXSptK247cC5saW5lVG8odyx4KTticmVhaztjYXNlIFwicVwiOnZhciB5PXJbdCsrXSptK2w7dmFyIEI9clt0KytdKm0rbjt2YXIgQT1yW3QrK10qbStsO3ZhciBDPXJbdCsrXSptK247cC5xdWFkcmF0aWNDdXJ2ZVRvKEEsQyx5LEIpO2JyZWFrO2Nhc2UgXCJiXCI6eT1yW3QrK10qbStsLEI9clt0KytdKm0rbixBPXJbdCsrXSptK2wsQz1yW3QrK10qbStuLHc9clt0KytdKm0rbCx4PXJbdCsrXSptK24scC5iZXppZXJDdXJ2ZVRvKEEsXG4gICAgQyx3LHgseSxCKX1tPXtvZmZzZXRYOmsuaGEqbSxwYXRoOnB9fWVsc2UgbT12b2lkIDA7Zis9bS5vZmZzZXRYO2IucHVzaChtLnBhdGgpfX1jPVtdO2E9MDtmb3IoZD1iLmxlbmd0aDthPGQ7YSsrKUFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGMsYlthXS50b1NoYXBlcygpKTtyZXR1cm4gY319KTtPYmplY3QuYXNzaWduKGtmLnByb3RvdHlwZSx7bG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGY9bmV3IE5hKHRoaXMubWFuYWdlcik7Zi5zZXRQYXRoKHRoaXMucGF0aCk7Zi5sb2FkKGEsZnVuY3Rpb24oYSl7dHJ5e3ZhciBjPUpTT04ucGFyc2UoYSl9Y2F0Y2goayl7Y29uc29sZS53YXJuKFwiVEhSRUUuRm9udExvYWRlcjogdHlwZWZhY2UuanMgc3VwcG9ydCBpcyBiZWluZyBkZXByZWNhdGVkLiBVc2UgdHlwZWZhY2UuanNvbiBpbnN0ZWFkLlwiKSxjPUpTT04ucGFyc2UoYS5zdWJzdHJpbmcoNjUsYS5sZW5ndGgtMikpfWE9ZS5wYXJzZShjKTtiJiZiKGEpfSxjLGQpfSxcbiAgICBwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gbmV3IHBlKGEpfSxzZXRQYXRoOmZ1bmN0aW9uKGEpe3RoaXMucGF0aD1hO3JldHVybiB0aGlzfX0pO3ZhciBVZCxzZT17Z2V0Q29udGV4dDpmdW5jdGlvbigpe3ZvaWQgMD09PVVkJiYoVWQ9bmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0fHx3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSk7cmV0dXJuIFVkfSxzZXRDb250ZXh0OmZ1bmN0aW9uKGEpe1VkPWF9fTtPYmplY3QuYXNzaWduKHFlLnByb3RvdHlwZSx7bG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1uZXcgTmEodGhpcy5tYW5hZ2VyKTtlLnNldFJlc3BvbnNlVHlwZShcImFycmF5YnVmZmVyXCIpO2UubG9hZChhLGZ1bmN0aW9uKGEpe3NlLmdldENvbnRleHQoKS5kZWNvZGVBdWRpb0RhdGEoYSxmdW5jdGlvbihhKXtiKGEpfSl9LGMsZCl9fSk7T2JqZWN0LmFzc2lnbihsZi5wcm90b3R5cGUse3VwZGF0ZTpmdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnLGgsaz1uZXcgTyxtPW5ldyBPO1xuICAgIHJldHVybiBmdW5jdGlvbihsKXtpZihhIT09dGhpc3x8YiE9PWwuZm9jdXN8fGMhPT1sLmZvdnx8ZCE9PWwuYXNwZWN0KnRoaXMuYXNwZWN0fHxlIT09bC5uZWFyfHxmIT09bC5mYXJ8fGchPT1sLnpvb218fGghPT10aGlzLmV5ZVNlcCl7YT10aGlzO2I9bC5mb2N1cztjPWwuZm92O2Q9bC5hc3BlY3QqdGhpcy5hc3BlY3Q7ZT1sLm5lYXI7Zj1sLmZhcjtnPWwuem9vbTt2YXIgbj1sLnByb2plY3Rpb25NYXRyaXguY2xvbmUoKTtoPXRoaXMuZXllU2VwLzI7dmFyIHA9aCplL2IscT1lKk1hdGgudGFuKFEuREVHMlJBRCpjKi41KS9nO20uZWxlbWVudHNbMTJdPS1oO2suZWxlbWVudHNbMTJdPWg7dmFyIHQ9LXEqZCtwO3ZhciB2PXEqZCtwO24uZWxlbWVudHNbMF09MiplLyh2LXQpO24uZWxlbWVudHNbOF09KHYrdCkvKHYtdCk7dGhpcy5jYW1lcmFMLnByb2plY3Rpb25NYXRyaXguY29weShuKTt0PS1xKmQtcDt2PXEqZC1wO24uZWxlbWVudHNbMF09MiplLyh2LXQpO24uZWxlbWVudHNbOF09XG4gICAgKHYrdCkvKHYtdCk7dGhpcy5jYW1lcmFSLnByb2plY3Rpb25NYXRyaXguY29weShuKX10aGlzLmNhbWVyYUwubWF0cml4V29ybGQuY29weShsLm1hdHJpeFdvcmxkKS5tdWx0aXBseShtKTt0aGlzLmNhbWVyYVIubWF0cml4V29ybGQuY29weShsLm1hdHJpeFdvcmxkKS5tdWx0aXBseShrKX19KCl9KTtmZC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSk7ZmQucHJvdG90eXBlLmNvbnN0cnVjdG9yPWZkO3JlLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpyZSxnZXRJbnB1dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdhaW59LHJlbW92ZUZpbHRlcjpmdW5jdGlvbigpe251bGwhPT10aGlzLmZpbHRlciYmKHRoaXMuZ2Fpbi5kaXNjb25uZWN0KHRoaXMuZmlsdGVyKSx0aGlzLmZpbHRlci5kaXNjb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiksdGhpcy5nYWluLmNvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKSxcbiAgICB0aGlzLmZpbHRlcj1udWxsKX0sZ2V0RmlsdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmlsdGVyfSxzZXRGaWx0ZXI6ZnVuY3Rpb24oYSl7bnVsbCE9PXRoaXMuZmlsdGVyPyh0aGlzLmdhaW4uZGlzY29ubmVjdCh0aGlzLmZpbHRlciksdGhpcy5maWx0ZXIuZGlzY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pKTp0aGlzLmdhaW4uZGlzY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO3RoaXMuZmlsdGVyPWE7dGhpcy5nYWluLmNvbm5lY3QodGhpcy5maWx0ZXIpO3RoaXMuZmlsdGVyLmNvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKX0sZ2V0TWFzdGVyVm9sdW1lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlfSxzZXRNYXN0ZXJWb2x1bWU6ZnVuY3Rpb24oYSl7dGhpcy5nYWluLmdhaW4udmFsdWU9YX0sdXBkYXRlTWF0cml4V29ybGQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBoYSxjPW5ldyBwLGQ9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGUpe3gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxcbiAgICBlKTtlPXRoaXMuY29udGV4dC5saXN0ZW5lcjt2YXIgZj10aGlzLnVwO3RoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGEsYixjKTtkLnNldCgwLDAsLTEpLmFwcGx5UXVhdGVybmlvbihiKTtlLnBvc2l0aW9uWD8oZS5wb3NpdGlvblguc2V0VmFsdWVBdFRpbWUoYS54LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksZS5wb3NpdGlvblkuc2V0VmFsdWVBdFRpbWUoYS55LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksZS5wb3NpdGlvblouc2V0VmFsdWVBdFRpbWUoYS56LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksZS5mb3J3YXJkWC5zZXRWYWx1ZUF0VGltZShkLngsdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lKSxlLmZvcndhcmRZLnNldFZhbHVlQXRUaW1lKGQueSx0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpLGUuZm9yd2FyZFouc2V0VmFsdWVBdFRpbWUoZC56LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksZS51cFguc2V0VmFsdWVBdFRpbWUoZi54LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksXG4gICAgZS51cFkuc2V0VmFsdWVBdFRpbWUoZi55LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksZS51cFouc2V0VmFsdWVBdFRpbWUoZi56LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSkpOihlLnNldFBvc2l0aW9uKGEueCxhLnksYS56KSxlLnNldE9yaWVudGF0aW9uKGQueCxkLnksZC56LGYueCxmLnksZi56KSl9fSgpfSk7bGMucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOmxjLGdldE91dHB1dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdhaW59LHNldE5vZGVTb3VyY2U6ZnVuY3Rpb24oYSl7dGhpcy5oYXNQbGF5YmFja0NvbnRyb2w9ITE7dGhpcy5zb3VyY2VUeXBlPVwiYXVkaW9Ob2RlXCI7dGhpcy5zb3VyY2U9YTt0aGlzLmNvbm5lY3QoKTtyZXR1cm4gdGhpc30sc2V0QnVmZmVyOmZ1bmN0aW9uKGEpe3RoaXMuYnVmZmVyPWE7dGhpcy5zb3VyY2VUeXBlPVwiYnVmZmVyXCI7dGhpcy5hdXRvcGxheSYmdGhpcy5wbGF5KCk7cmV0dXJuIHRoaXN9LFxuICAgIHBsYXk6ZnVuY3Rpb24oKXtpZighMD09PXRoaXMuaXNQbGF5aW5nKWNvbnNvbGUud2FybihcIlRIUkVFLkF1ZGlvOiBBdWRpbyBpcyBhbHJlYWR5IHBsYXlpbmcuXCIpO2Vsc2UgaWYoITE9PT10aGlzLmhhc1BsYXliYWNrQ29udHJvbCljb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC5cIik7ZWxzZXt2YXIgYT10aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7YS5idWZmZXI9dGhpcy5idWZmZXI7YS5sb29wPXRoaXMubG9vcDthLm9uZW5kZWQ9dGhpcy5vbkVuZGVkLmJpbmQodGhpcyk7YS5wbGF5YmFja1JhdGUuc2V0VmFsdWVBdFRpbWUodGhpcy5wbGF5YmFja1JhdGUsdGhpcy5zdGFydFRpbWUpO3RoaXMuc3RhcnRUaW1lPXRoaXMuY29udGV4dC5jdXJyZW50VGltZTthLnN0YXJ0KHRoaXMuc3RhcnRUaW1lLHRoaXMub2Zmc2V0KTt0aGlzLmlzUGxheWluZz0hMDt0aGlzLnNvdXJjZT1hO3JldHVybiB0aGlzLmNvbm5lY3QoKX19LFxuICAgIHBhdXNlOmZ1bmN0aW9uKCl7aWYoITE9PT10aGlzLmhhc1BsYXliYWNrQ29udHJvbCljb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC5cIik7ZWxzZSByZXR1cm4hMD09PXRoaXMuaXNQbGF5aW5nJiYodGhpcy5zb3VyY2Uuc3RvcCgpLHRoaXMub2Zmc2V0Kz0odGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLXRoaXMuc3RhcnRUaW1lKSp0aGlzLnBsYXliYWNrUmF0ZSx0aGlzLmlzUGxheWluZz0hMSksdGhpc30sc3RvcDpmdW5jdGlvbigpe2lmKCExPT09dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wpY29uc29sZS53YXJuKFwiVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuXCIpO2Vsc2UgcmV0dXJuIHRoaXMuc291cmNlLnN0b3AoKSx0aGlzLm9mZnNldD0wLHRoaXMuaXNQbGF5aW5nPSExLHRoaXN9LGNvbm5lY3Q6ZnVuY3Rpb24oKXtpZigwPHRoaXMuZmlsdGVycy5sZW5ndGgpe3RoaXMuc291cmNlLmNvbm5lY3QodGhpcy5maWx0ZXJzWzBdKTtcbiAgICBmb3IodmFyIGE9MSxiPXRoaXMuZmlsdGVycy5sZW5ndGg7YTxiO2ErKyl0aGlzLmZpbHRlcnNbYS0xXS5jb25uZWN0KHRoaXMuZmlsdGVyc1thXSk7dGhpcy5maWx0ZXJzW3RoaXMuZmlsdGVycy5sZW5ndGgtMV0uY29ubmVjdCh0aGlzLmdldE91dHB1dCgpKX1lbHNlIHRoaXMuc291cmNlLmNvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSk7cmV0dXJuIHRoaXN9LGRpc2Nvbm5lY3Q6ZnVuY3Rpb24oKXtpZigwPHRoaXMuZmlsdGVycy5sZW5ndGgpe3RoaXMuc291cmNlLmRpc2Nvbm5lY3QodGhpcy5maWx0ZXJzWzBdKTtmb3IodmFyIGE9MSxiPXRoaXMuZmlsdGVycy5sZW5ndGg7YTxiO2ErKyl0aGlzLmZpbHRlcnNbYS0xXS5kaXNjb25uZWN0KHRoaXMuZmlsdGVyc1thXSk7dGhpcy5maWx0ZXJzW3RoaXMuZmlsdGVycy5sZW5ndGgtMV0uZGlzY29ubmVjdCh0aGlzLmdldE91dHB1dCgpKX1lbHNlIHRoaXMuc291cmNlLmRpc2Nvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSk7cmV0dXJuIHRoaXN9LFxuICAgIGdldEZpbHRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5maWx0ZXJzfSxzZXRGaWx0ZXJzOmZ1bmN0aW9uKGEpe2F8fChhPVtdKTshMD09PXRoaXMuaXNQbGF5aW5nPyh0aGlzLmRpc2Nvbm5lY3QoKSx0aGlzLmZpbHRlcnM9YSx0aGlzLmNvbm5lY3QoKSk6dGhpcy5maWx0ZXJzPWE7cmV0dXJuIHRoaXN9LGdldEZpbHRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEZpbHRlcnMoKVswXX0sc2V0RmlsdGVyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnNldEZpbHRlcnMoYT9bYV06W10pfSxzZXRQbGF5YmFja1JhdGU6ZnVuY3Rpb24oYSl7aWYoITE9PT10aGlzLmhhc1BsYXliYWNrQ29udHJvbCljb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC5cIik7ZWxzZSByZXR1cm4gdGhpcy5wbGF5YmFja1JhdGU9YSwhMD09PXRoaXMuaXNQbGF5aW5nJiZ0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUuc2V0VmFsdWVBdFRpbWUodGhpcy5wbGF5YmFja1JhdGUsXG4gICAgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lKSx0aGlzfSxnZXRQbGF5YmFja1JhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wbGF5YmFja1JhdGV9LG9uRW5kZWQ6ZnVuY3Rpb24oKXt0aGlzLmlzUGxheWluZz0hMX0sZ2V0TG9vcDpmdW5jdGlvbigpe3JldHVybiExPT09dGhpcy5oYXNQbGF5YmFja0NvbnRyb2w/KGNvbnNvbGUud2FybihcIlRIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLlwiKSwhMSk6dGhpcy5sb29wfSxzZXRMb29wOmZ1bmN0aW9uKGEpe2lmKCExPT09dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wpY29uc29sZS53YXJuKFwiVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuXCIpO2Vsc2UgcmV0dXJuIHRoaXMubG9vcD1hLCEwPT09dGhpcy5pc1BsYXlpbmcmJih0aGlzLnNvdXJjZS5sb29wPXRoaXMubG9vcCksdGhpc30sZ2V0Vm9sdW1lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlfSxcbiAgICBzZXRWb2x1bWU6ZnVuY3Rpb24oYSl7dGhpcy5nYWluLmdhaW4udmFsdWU9YTtyZXR1cm4gdGhpc319KTt0ZS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGxjLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOnRlLGdldE91dHB1dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhbm5lcn0sZ2V0UmVmRGlzdGFuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYW5uZXIucmVmRGlzdGFuY2V9LHNldFJlZkRpc3RhbmNlOmZ1bmN0aW9uKGEpe3RoaXMucGFubmVyLnJlZkRpc3RhbmNlPWF9LGdldFJvbGxvZmZGYWN0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3Rvcn0sc2V0Um9sbG9mZkZhY3RvcjpmdW5jdGlvbihhKXt0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yPWF9LGdldERpc3RhbmNlTW9kZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYW5uZXIuZGlzdGFuY2VNb2RlbH0sc2V0RGlzdGFuY2VNb2RlbDpmdW5jdGlvbihhKXt0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsPVxuICAgIGF9LGdldE1heERpc3RhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFubmVyLm1heERpc3RhbmNlfSxzZXRNYXhEaXN0YW5jZTpmdW5jdGlvbihhKXt0aGlzLnBhbm5lci5tYXhEaXN0YW5jZT1hfSx1cGRhdGVNYXRyaXhXb3JsZDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXt4LnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsYik7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7dGhpcy5wYW5uZXIuc2V0UG9zaXRpb24oYS54LGEueSxhLnopfX0oKX0pO09iamVjdC5hc3NpZ24odWUucHJvdG90eXBlLHtnZXRGcmVxdWVuY3lEYXRhOmZ1bmN0aW9uKCl7dGhpcy5hbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YSh0aGlzLmRhdGEpO3JldHVybiB0aGlzLmRhdGF9LGdldEF2ZXJhZ2VGcmVxdWVuY3k6ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpLGM9MDtjPGIubGVuZ3RoO2MrKylhKz1cbiAgICBiW2NdO3JldHVybiBhL2IubGVuZ3RofX0pO09iamVjdC5hc3NpZ24odmUucHJvdG90eXBlLHthY2N1bXVsYXRlOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5idWZmZXIsZD10aGlzLnZhbHVlU2l6ZTthPWEqZCtkO3ZhciBlPXRoaXMuY3VtdWxhdGl2ZVdlaWdodDtpZigwPT09ZSl7Zm9yKGU9MDtlIT09ZDsrK2UpY1thK2VdPWNbZV07ZT1ifWVsc2UgZSs9Yix0aGlzLl9taXhCdWZmZXJSZWdpb24oYyxhLDAsYi9lLGQpO3RoaXMuY3VtdWxhdGl2ZVdlaWdodD1lfSxhcHBseTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnZhbHVlU2l6ZSxjPXRoaXMuYnVmZmVyO2E9YSpiK2I7dmFyIGQ9dGhpcy5jdW11bGF0aXZlV2VpZ2h0LGU9dGhpcy5iaW5kaW5nO3RoaXMuY3VtdWxhdGl2ZVdlaWdodD0wOzE+ZCYmdGhpcy5fbWl4QnVmZmVyUmVnaW9uKGMsYSwzKmIsMS1kLGIpO2Zvcih2YXIgZD1iLGY9YitiO2QhPT1mOysrZClpZihjW2RdIT09Y1tkK2JdKXtlLnNldFZhbHVlKGMsYSk7YnJlYWt9fSxcbiAgICBzYXZlT3JpZ2luYWxTdGF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuYnVmZmVyLGI9dGhpcy52YWx1ZVNpemUsYz0zKmI7dGhpcy5iaW5kaW5nLmdldFZhbHVlKGEsYyk7Zm9yKHZhciBkPWI7ZCE9PWM7KytkKWFbZF09YVtjK2QlYl07dGhpcy5jdW11bGF0aXZlV2VpZ2h0PTB9LHJlc3RvcmVPcmlnaW5hbFN0YXRlOmZ1bmN0aW9uKCl7dGhpcy5iaW5kaW5nLnNldFZhbHVlKHRoaXMuYnVmZmVyLDMqdGhpcy52YWx1ZVNpemUpfSxfc2VsZWN0OmZ1bmN0aW9uKGEsYixjLGQsZSl7aWYoLjU8PWQpZm9yKGQ9MDtkIT09ZTsrK2QpYVtiK2RdPWFbYytkXX0sX3NsZXJwOmZ1bmN0aW9uKGEsYixjLGQpe2hhLnNsZXJwRmxhdChhLGIsYSxiLGEsYyxkKX0sX2xlcnA6ZnVuY3Rpb24oYSxiLGMsZCxlKXtmb3IodmFyIGY9MS1kLGc9MDtnIT09ZTsrK2cpe3ZhciBoPWIrZzthW2hdPWFbaF0qZithW2MrZ10qZH19fSk7T2JqZWN0LmFzc2lnbihtZi5wcm90b3R5cGUse2dldFZhbHVlOmZ1bmN0aW9uKGEsXG4gICAgYil7dGhpcy5iaW5kKCk7dmFyIGM9dGhpcy5fYmluZGluZ3NbdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfXTt2b2lkIDAhPT1jJiZjLmdldFZhbHVlKGEsYil9LHNldFZhbHVlOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuX2JpbmRpbmdzLGQ9dGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLGU9Yy5sZW5ndGg7ZCE9PWU7KytkKWNbZF0uc2V0VmFsdWUoYSxiKX0sYmluZDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9iaW5kaW5ncyxiPXRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXyxjPWEubGVuZ3RoO2IhPT1jOysrYilhW2JdLmJpbmQoKX0sdW5iaW5kOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuX2JpbmRpbmdzLGI9dGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLGM9YS5sZW5ndGg7YiE9PWM7KytiKWFbYl0udW5iaW5kKCl9fSk7T2JqZWN0LmFzc2lnbihxYSx7Q29tcG9zaXRlOm1mLGNyZWF0ZTpmdW5jdGlvbihhLFxuICAgIGIsYyl7cmV0dXJuIGEmJmEuaXNBbmltYXRpb25PYmplY3RHcm91cD9uZXcgcWEuQ29tcG9zaXRlKGEsYixjKTpuZXcgcWEoYSxiLGMpfSxzYW5pdGl6ZU5vZGVOYW1lOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xccy9nLFwiX1wiKS5yZXBsYWNlKC9bXlxcdy1dL2csXCJcIil9LHBhcnNlVHJhY2tOYW1lOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFJlZ0V4cChcIl5cIisvKCg/OltcXHctXStbXFwvOl0pKikvLnNvdXJjZSsvKFtcXHctXFwuXSspPy8uc291cmNlKy8oPzpcXC4oW1xcdy1dKykoPzpcXFsoLispXFxdKT8pPy8uc291cmNlKy9cXC4oW1xcdy1dKykoPzpcXFsoLispXFxdKT8vLnNvdXJjZStcIiRcIiksYj1bXCJtYXRlcmlhbFwiLFwibWF0ZXJpYWxzXCIsXCJib25lc1wiXTtyZXR1cm4gZnVuY3Rpb24oYyl7dmFyIGQ9YS5leGVjKGMpO2lmKCFkKXRocm93IEVycm9yKFwiUHJvcGVydHlCaW5kaW5nOiBDYW5ub3QgcGFyc2UgdHJhY2tOYW1lOiBcIitjKTt2YXIgZD17bm9kZU5hbWU6ZFsyXSxvYmplY3ROYW1lOmRbM10sXG4gICAgb2JqZWN0SW5kZXg6ZFs0XSxwcm9wZXJ0eU5hbWU6ZFs1XSxwcm9wZXJ0eUluZGV4OmRbNl19LGU9ZC5ub2RlTmFtZSYmZC5ub2RlTmFtZS5sYXN0SW5kZXhPZihcIi5cIik7aWYodm9pZCAwIT09ZSYmLTEhPT1lKXt2YXIgZj1kLm5vZGVOYW1lLnN1YnN0cmluZyhlKzEpOy0xIT09Yi5pbmRleE9mKGYpJiYoZC5ub2RlTmFtZT1kLm5vZGVOYW1lLnN1YnN0cmluZygwLGUpLGQub2JqZWN0TmFtZT1mKX1pZihudWxsPT09ZC5wcm9wZXJ0eU5hbWV8fDA9PT1kLnByb3BlcnR5TmFtZS5sZW5ndGgpdGhyb3cgRXJyb3IoXCJQcm9wZXJ0eUJpbmRpbmc6IGNhbiBub3QgcGFyc2UgcHJvcGVydHlOYW1lIGZyb20gdHJhY2tOYW1lOiBcIitjKTtyZXR1cm4gZH19KCksZmluZE5vZGU6ZnVuY3Rpb24oYSxiKXtpZighYnx8XCJcIj09PWJ8fFwicm9vdFwiPT09Ynx8XCIuXCI9PT1ifHwtMT09PWJ8fGI9PT1hLm5hbWV8fGI9PT1hLnV1aWQpcmV0dXJuIGE7aWYoYS5za2VsZXRvbil7dmFyIGM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVxuICAgIDA7YzxhLmJvbmVzLmxlbmd0aDtjKyspe3ZhciBkPWEuYm9uZXNbY107aWYoZC5uYW1lPT09YilyZXR1cm4gZH1yZXR1cm4gbnVsbH0oYS5za2VsZXRvbik7aWYoYylyZXR1cm4gY31pZihhLmNoaWxkcmVuKXt2YXIgZD1mdW5jdGlvbihhKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGU9YVtjXTtpZihlLm5hbWU9PT1ifHxlLnV1aWQ9PT1ifHwoZT1kKGUuY2hpbGRyZW4pKSlyZXR1cm4gZX1yZXR1cm4gbnVsbH07aWYoYT1kKGEuY2hpbGRyZW4pKXJldHVybiBhfXJldHVybiBudWxsfX0pO09iamVjdC5hc3NpZ24ocWEucHJvdG90eXBlLHtfZ2V0VmFsdWVfdW5hdmFpbGFibGU6ZnVuY3Rpb24oKXt9LF9zZXRWYWx1ZV91bmF2YWlsYWJsZTpmdW5jdGlvbigpe30sQmluZGluZ1R5cGU6e0RpcmVjdDowLEVudGlyZUFycmF5OjEsQXJyYXlFbGVtZW50OjIsSGFzRnJvbVRvQXJyYXk6M30sVmVyc2lvbmluZzp7Tm9uZTowLE5lZWRzVXBkYXRlOjEsTWF0cml4V29ybGROZWVkc1VwZGF0ZToyfSxcbiAgICBHZXR0ZXJCeUJpbmRpbmdUeXBlOltmdW5jdGlvbihhLGIpe2FbYl09dGhpcy5ub2RlW3RoaXMucHJvcGVydHlOYW1lXX0sZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5yZXNvbHZlZFByb3BlcnR5LGQ9MCxlPWMubGVuZ3RoO2QhPT1lOysrZClhW2IrK109Y1tkXX0sZnVuY3Rpb24oYSxiKXthW2JdPXRoaXMucmVzb2x2ZWRQcm9wZXJ0eVt0aGlzLnByb3BlcnR5SW5kZXhdfSxmdW5jdGlvbihhLGIpe3RoaXMucmVzb2x2ZWRQcm9wZXJ0eS50b0FycmF5KGEsYil9XSxTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZzpbW2Z1bmN0aW9uKGEsYil7dGhpcy50YXJnZXRPYmplY3RbdGhpcy5wcm9wZXJ0eU5hbWVdPWFbYl19LGZ1bmN0aW9uKGEsYil7dGhpcy50YXJnZXRPYmplY3RbdGhpcy5wcm9wZXJ0eU5hbWVdPWFbYl07dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGU9ITB9LGZ1bmN0aW9uKGEsYil7dGhpcy50YXJnZXRPYmplY3RbdGhpcy5wcm9wZXJ0eU5hbWVdPWFbYl07XG4gICAgdGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMH1dLFtmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLnJlc29sdmVkUHJvcGVydHksZD0wLGU9Yy5sZW5ndGg7ZCE9PWU7KytkKWNbZF09YVtiKytdfSxmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLnJlc29sdmVkUHJvcGVydHksZD0wLGU9Yy5sZW5ndGg7ZCE9PWU7KytkKWNbZF09YVtiKytdO3RoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlPSEwfSxmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLnJlc29sdmVkUHJvcGVydHksZD0wLGU9Yy5sZW5ndGg7ZCE9PWU7KytkKWNbZF09YVtiKytdO3RoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITB9XSxbZnVuY3Rpb24oYSxiKXt0aGlzLnJlc29sdmVkUHJvcGVydHlbdGhpcy5wcm9wZXJ0eUluZGV4XT1hW2JdfSxmdW5jdGlvbihhLGIpe3RoaXMucmVzb2x2ZWRQcm9wZXJ0eVt0aGlzLnByb3BlcnR5SW5kZXhdPWFbYl07XG4gICAgdGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGU9ITB9LGZ1bmN0aW9uKGEsYil7dGhpcy5yZXNvbHZlZFByb3BlcnR5W3RoaXMucHJvcGVydHlJbmRleF09YVtiXTt0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSEwfV0sW2Z1bmN0aW9uKGEsYil7dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheShhLGIpfSxmdW5jdGlvbihhLGIpe3RoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoYSxiKTt0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZT0hMH0sZnVuY3Rpb24oYSxiKXt0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KGEsYik7dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMH1dXSxnZXRWYWx1ZTpmdW5jdGlvbihhLGIpe3RoaXMuYmluZCgpO3RoaXMuZ2V0VmFsdWUoYSxiKX0sc2V0VmFsdWU6ZnVuY3Rpb24oYSxiKXt0aGlzLmJpbmQoKTt0aGlzLnNldFZhbHVlKGEsYil9LGJpbmQ6ZnVuY3Rpb24oKXt2YXIgYT1cbiAgICB0aGlzLm5vZGUsYj10aGlzLnBhcnNlZFBhdGgsYz1iLm9iamVjdE5hbWUsZD1iLnByb3BlcnR5TmFtZSxlPWIucHJvcGVydHlJbmRleDthfHwodGhpcy5ub2RlPWE9cWEuZmluZE5vZGUodGhpcy5yb290Tm9kZSxiLm5vZGVOYW1lKXx8dGhpcy5yb290Tm9kZSk7dGhpcy5nZXRWYWx1ZT10aGlzLl9nZXRWYWx1ZV91bmF2YWlsYWJsZTt0aGlzLnNldFZhbHVlPXRoaXMuX3NldFZhbHVlX3VuYXZhaWxhYmxlO2lmKGEpe2lmKGMpe3ZhciBmPWIub2JqZWN0SW5kZXg7c3dpdGNoKGMpe2Nhc2UgXCJtYXRlcmlhbHNcIjppZighYS5tYXRlcmlhbCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFsLlwiLHRoaXMpO3JldHVybn1pZighYS5tYXRlcmlhbC5tYXRlcmlhbHMpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXRlcmlhbHMgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWxzIGFycmF5LlwiLFxuICAgIHRoaXMpO3JldHVybn1hPWEubWF0ZXJpYWwubWF0ZXJpYWxzO2JyZWFrO2Nhc2UgXCJib25lc1wiOmlmKCFhLnNrZWxldG9uKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gYm9uZXMgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgc2tlbGV0b24uXCIsdGhpcyk7cmV0dXJufWE9YS5za2VsZXRvbi5ib25lcztmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWlmKGFbY10ubmFtZT09PWYpe2Y9YzticmVha31icmVhaztkZWZhdWx0OmlmKHZvaWQgMD09PWFbY10pe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBvYmplY3ROYW1lIG9mIG5vZGUgdW5kZWZpbmVkLlwiLHRoaXMpO3JldHVybn1hPWFbY119aWYodm9pZCAwIT09Zil7aWYodm9pZCAwPT09YVtmXSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIGJpbmQgdG8gb2JqZWN0SW5kZXggb2Ygb2JqZWN0TmFtZSwgYnV0IGlzIHVuZGVmaW5lZC5cIixcbiAgICB0aGlzLGEpO3JldHVybn1hPWFbZl19fWY9YVtkXTtpZih2b2lkIDA9PT1mKWNvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byB1cGRhdGUgcHJvcGVydHkgZm9yIHRyYWNrOiBcIitiLm5vZGVOYW1lK1wiLlwiK2QrXCIgYnV0IGl0IHdhc24ndCBmb3VuZC5cIixhKTtlbHNle2I9dGhpcy5WZXJzaW9uaW5nLk5vbmU7dm9pZCAwIT09YS5uZWVkc1VwZGF0ZT8oYj10aGlzLlZlcnNpb25pbmcuTmVlZHNVcGRhdGUsdGhpcy50YXJnZXRPYmplY3Q9YSk6dm9pZCAwIT09YS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlJiYoYj10aGlzLlZlcnNpb25pbmcuTWF0cml4V29ybGROZWVkc1VwZGF0ZSx0aGlzLnRhcmdldE9iamVjdD1hKTtjPXRoaXMuQmluZGluZ1R5cGUuRGlyZWN0O2lmKHZvaWQgMCE9PWUpe2lmKFwibW9ycGhUYXJnZXRJbmZsdWVuY2VzXCI9PT1kKXtpZighYS5nZW9tZXRyeSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5LlwiLFxuICAgIHRoaXMpO3JldHVybn1pZihhLmdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkpe2lmKCFhLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5cIix0aGlzKTtyZXR1cm59Zm9yKGM9MDtjPHRoaXMubm9kZS5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24ubGVuZ3RoO2MrKylpZihhLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbltjXS5uYW1lPT09ZSl7ZT1jO2JyZWFrfX1lbHNle2lmKCFhLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5cIixcbiAgICB0aGlzKTtyZXR1cm59Zm9yKGM9MDtjPHRoaXMubm9kZS5nZW9tZXRyeS5tb3JwaFRhcmdldHMubGVuZ3RoO2MrKylpZihhLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1tjXS5uYW1lPT09ZSl7ZT1jO2JyZWFrfX19Yz10aGlzLkJpbmRpbmdUeXBlLkFycmF5RWxlbWVudDt0aGlzLnJlc29sdmVkUHJvcGVydHk9Zjt0aGlzLnByb3BlcnR5SW5kZXg9ZX1lbHNlIHZvaWQgMCE9PWYuZnJvbUFycmF5JiZ2b2lkIDAhPT1mLnRvQXJyYXk/KGM9dGhpcy5CaW5kaW5nVHlwZS5IYXNGcm9tVG9BcnJheSx0aGlzLnJlc29sdmVkUHJvcGVydHk9Zik6QXJyYXkuaXNBcnJheShmKT8oYz10aGlzLkJpbmRpbmdUeXBlLkVudGlyZUFycmF5LHRoaXMucmVzb2x2ZWRQcm9wZXJ0eT1mKTp0aGlzLnByb3BlcnR5TmFtZT1kO3RoaXMuZ2V0VmFsdWU9dGhpcy5HZXR0ZXJCeUJpbmRpbmdUeXBlW2NdO3RoaXMuc2V0VmFsdWU9dGhpcy5TZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZ1tjXVtiXX19ZWxzZSBjb25zb2xlLmVycm9yKFwiVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIG5vZGUgZm9yIHRyYWNrOiBcIitcbiAgICB0aGlzLnBhdGgrXCIgYnV0IGl0IHdhc24ndCBmb3VuZC5cIil9LHVuYmluZDpmdW5jdGlvbigpe3RoaXMubm9kZT1udWxsO3RoaXMuZ2V0VmFsdWU9dGhpcy5fZ2V0VmFsdWVfdW5ib3VuZDt0aGlzLnNldFZhbHVlPXRoaXMuX3NldFZhbHVlX3VuYm91bmR9fSk7T2JqZWN0LmFzc2lnbihxYS5wcm90b3R5cGUse19nZXRWYWx1ZV91bmJvdW5kOnFhLnByb3RvdHlwZS5nZXRWYWx1ZSxfc2V0VmFsdWVfdW5ib3VuZDpxYS5wcm90b3R5cGUuc2V0VmFsdWV9KTtPYmplY3QuYXNzaWduKG5mLnByb3RvdHlwZSx7aXNBbmltYXRpb25PYmplY3RHcm91cDohMCxhZGQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fb2JqZWN0cyxiPWEubGVuZ3RoLGM9dGhpcy5uQ2FjaGVkT2JqZWN0c18sZD10aGlzLl9pbmRpY2VzQnlVVUlELGU9dGhpcy5fcGF0aHMsZj10aGlzLl9wYXJzZWRQYXRocyxnPXRoaXMuX2JpbmRpbmdzLGg9Zy5sZW5ndGgsaz0wLG09YXJndW1lbnRzLmxlbmd0aDtrIT09bTsrK2spe3ZhciBsPVxuICAgIGFyZ3VtZW50c1trXSxuPWwudXVpZCxwPWRbbl07aWYodm9pZCAwPT09cCl7cD1iKys7ZFtuXT1wO2EucHVzaChsKTtmb3IodmFyIG49MCxyPWg7biE9PXI7KytuKWdbbl0ucHVzaChuZXcgcWEobCxlW25dLGZbbl0pKX1lbHNlIGlmKHA8Yyl7dmFyIHQ9LS1jLHI9YVt0XTtkW3IudXVpZF09cDthW3BdPXI7ZFtuXT10O2FbdF09bDtuPTA7Zm9yKHI9aDtuIT09cjsrK24pe3ZhciB2PWdbbl0sdz12W3BdO3ZbcF09dlt0XTt2b2lkIDA9PT13JiYodz1uZXcgcWEobCxlW25dLGZbbl0pKTt2W3RdPXd9fWVsc2Ugdm9pZCAwIT09YVtwXSYmY29uc29sZS5lcnJvcihcIlRIUkVFLkFuaW1hdGlvbk9iamVjdEdyb3VwOiBEaWZmZXJlbnQgb2JqZWN0cyB3aXRoIHRoZSBzYW1lIFVVSUQgZGV0ZWN0ZWQuIENsZWFuIHRoZSBjYWNoZXMgb3IgcmVjcmVhdGUgeW91ciBpbmZyYXN0cnVjdHVyZSB3aGVuIHJlbG9hZGluZyBzY2VuZXMuXCIpfXRoaXMubkNhY2hlZE9iamVjdHNfPWN9LHJlbW92ZTpmdW5jdGlvbigpe2Zvcih2YXIgYT1cbiAgICB0aGlzLl9vYmplY3RzLGI9dGhpcy5uQ2FjaGVkT2JqZWN0c18sYz10aGlzLl9pbmRpY2VzQnlVVUlELGQ9dGhpcy5fYmluZGluZ3MsZT1kLmxlbmd0aCxmPTAsZz1hcmd1bWVudHMubGVuZ3RoO2YhPT1nOysrZil7dmFyIGg9YXJndW1lbnRzW2ZdLGs9aC51dWlkLG09Y1trXTtpZih2b2lkIDAhPT1tJiZtPj1iKXt2YXIgbD1iKyssbj1hW2xdO2Nbbi51dWlkXT1tO2FbbV09bjtjW2tdPWw7YVtsXT1oO2g9MDtmb3Ioaz1lO2ghPT1rOysraCl7dmFyIG49ZFtoXSxwPW5bbV07blttXT1uW2xdO25bbF09cH19fXRoaXMubkNhY2hlZE9iamVjdHNfPWJ9LHVuY2FjaGU6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYixjPXRoaXMuX29iamVjdHMsZD1jLmxlbmd0aCxlPXRoaXMubkNhY2hlZE9iamVjdHNfLGY9dGhpcy5faW5kaWNlc0J5VVVJRCxnPXRoaXMuX2JpbmRpbmdzLGg9Zy5sZW5ndGgsaz0wLG09YXJndW1lbnRzLmxlbmd0aDtrIT09bTsrK2spe2I9YXJndW1lbnRzW2tdLnV1aWQ7dmFyIGw9XG4gICAgZltiXTtpZih2b2lkIDAhPT1sKWlmKGRlbGV0ZSBmW2JdLGw8ZSl7dmFyIG49LS1lLHA9Y1tuXTtiPS0tZDthPWNbYl07ZltwLnV1aWRdPWw7Y1tsXT1wO2ZbYS51dWlkXT1uO2Nbbl09YTtjLnBvcCgpO2Zvcih2YXIgcD0wLHI9aDtwIT09cjsrK3Ape2E9Z1twXTt2YXIgdD1hW2JdO2FbbF09YVtuXTthW25dPXQ7YS5wb3AoKX19ZWxzZSBmb3IoYj0tLWQsYT1jW2JdLGZbYS51dWlkXT1sLGNbbF09YSxjLnBvcCgpLHA9MCxyPWg7cCE9PXI7KytwKWE9Z1twXSxhW2xdPWFbYl0sYS5wb3AoKX10aGlzLm5DYWNoZWRPYmplY3RzXz1lfSxzdWJzY3JpYmVfOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLGQ9Y1thXSxlPXRoaXMuX2JpbmRpbmdzO2lmKHZvaWQgMCE9PWQpcmV0dXJuIGVbZF07dmFyIGY9dGhpcy5fcGF0aHMsZz10aGlzLl9wYXJzZWRQYXRocyxoPXRoaXMuX29iamVjdHMsaz10aGlzLm5DYWNoZWRPYmplY3RzXyxtPUFycmF5KGgubGVuZ3RoKSxcbiAgICBkPWUubGVuZ3RoO2NbYV09ZDtmLnB1c2goYSk7Zy5wdXNoKGIpO2UucHVzaChtKTtjPWs7Zm9yKGQ9aC5sZW5ndGg7YyE9PWQ7KytjKW1bY109bmV3IHFhKGhbY10sYSxiKTtyZXR1cm4gbX0sdW5zdWJzY3JpYmVfOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxjPWJbYV07aWYodm9pZCAwIT09Yyl7dmFyIGQ9dGhpcy5fcGF0aHMsZT10aGlzLl9wYXJzZWRQYXRocyxmPXRoaXMuX2JpbmRpbmdzLGc9Zi5sZW5ndGgtMSxoPWZbZ107YlthW2ddXT1jO2ZbY109aDtmLnBvcCgpO2VbY109ZVtnXTtlLnBvcCgpO2RbY109ZFtnXTtkLnBvcCgpfX19KTtPYmplY3QuYXNzaWduKG9mLnByb3RvdHlwZSx7cGxheTpmdW5jdGlvbigpe3RoaXMuX21peGVyLl9hY3RpdmF0ZUFjdGlvbih0aGlzKTtyZXR1cm4gdGhpc30sc3RvcDpmdW5jdGlvbigpe3RoaXMuX21peGVyLl9kZWFjdGl2YXRlQWN0aW9uKHRoaXMpO3JldHVybiB0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5wYXVzZWQ9XG4gICAgITE7dGhpcy5lbmFibGVkPSEwO3RoaXMudGltZT0wO3RoaXMuX2xvb3BDb3VudD0tMTt0aGlzLl9zdGFydFRpbWU9bnVsbDtyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCkuc3RvcFdhcnBpbmcoKX0saXNSdW5uaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5hYmxlZCYmIXRoaXMucGF1c2VkJiYwIT09dGhpcy50aW1lU2NhbGUmJm51bGw9PT10aGlzLl9zdGFydFRpbWUmJnRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbih0aGlzKX0saXNTY2hlZHVsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWl4ZXIuX2lzQWN0aXZlQWN0aW9uKHRoaXMpfSxzdGFydEF0OmZ1bmN0aW9uKGEpe3RoaXMuX3N0YXJ0VGltZT1hO3JldHVybiB0aGlzfSxzZXRMb29wOmZ1bmN0aW9uKGEsYil7dGhpcy5sb29wPWE7dGhpcy5yZXBldGl0aW9ucz1iO3JldHVybiB0aGlzfSxzZXRFZmZlY3RpdmVXZWlnaHQ6ZnVuY3Rpb24oYSl7dGhpcy53ZWlnaHQ9YTt0aGlzLl9lZmZlY3RpdmVXZWlnaHQ9dGhpcy5lbmFibGVkP1xuICAgIGE6MDtyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCl9LGdldEVmZmVjdGl2ZVdlaWdodDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lZmZlY3RpdmVXZWlnaHR9LGZhZGVJbjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fc2NoZWR1bGVGYWRpbmcoYSwwLDEpfSxmYWRlT3V0OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyhhLDEsMCl9LGNyb3NzRmFkZUZyb206ZnVuY3Rpb24oYSxiLGMpe2EuZmFkZU91dChiKTt0aGlzLmZhZGVJbihiKTtpZihjKXtjPXRoaXMuX2NsaXAuZHVyYXRpb247dmFyIGQ9YS5fY2xpcC5kdXJhdGlvbixlPWMvZDthLndhcnAoMSxkL2MsYik7dGhpcy53YXJwKGUsMSxiKX1yZXR1cm4gdGhpc30sY3Jvc3NGYWRlVG86ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBhLmNyb3NzRmFkZUZyb20odGhpcyxiLGMpfSxzdG9wRmFkaW5nOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7bnVsbCE9PWEmJih0aGlzLl93ZWlnaHRJbnRlcnBvbGFudD1cbiAgICBudWxsLHRoaXMuX21peGVyLl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudChhKSk7cmV0dXJuIHRoaXN9LHNldEVmZmVjdGl2ZVRpbWVTY2FsZTpmdW5jdGlvbihhKXt0aGlzLnRpbWVTY2FsZT1hO3RoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZT10aGlzLnBhdXNlZD8wOmE7cmV0dXJuIHRoaXMuc3RvcFdhcnBpbmcoKX0sZ2V0RWZmZWN0aXZlVGltZVNjYWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZX0sc2V0RHVyYXRpb246ZnVuY3Rpb24oYSl7dGhpcy50aW1lU2NhbGU9dGhpcy5fY2xpcC5kdXJhdGlvbi9hO3JldHVybiB0aGlzLnN0b3BXYXJwaW5nKCl9LHN5bmNXaXRoOmZ1bmN0aW9uKGEpe3RoaXMudGltZT1hLnRpbWU7dGhpcy50aW1lU2NhbGU9YS50aW1lU2NhbGU7cmV0dXJuIHRoaXMuc3RvcFdhcnBpbmcoKX0saGFsdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy53YXJwKHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwwLGEpfSx3YXJwOmZ1bmN0aW9uKGEsXG4gICAgYixjKXt2YXIgZD10aGlzLl9taXhlcixlPWQudGltZSxmPXRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50LGc9dGhpcy50aW1lU2NhbGU7bnVsbD09PWYmJih0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudD1mPWQuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKSk7ZD1mLnBhcmFtZXRlclBvc2l0aW9ucztmPWYuc2FtcGxlVmFsdWVzO2RbMF09ZTtkWzFdPWUrYztmWzBdPWEvZztmWzFdPWIvZztyZXR1cm4gdGhpc30sc3RvcFdhcnBpbmc6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudDtudWxsIT09YSYmKHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50PW51bGwsdGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KGEpKTtyZXR1cm4gdGhpc30sZ2V0TWl4ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWl4ZXJ9LGdldENsaXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2xpcH0sZ2V0Um9vdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9sb2NhbFJvb3R8fFxuICAgIHRoaXMuX21peGVyLl9yb290fSxfdXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQpe2lmKHRoaXMuZW5hYmxlZCl7dmFyIGU9dGhpcy5fc3RhcnRUaW1lO2lmKG51bGwhPT1lKXtiPShhLWUpKmM7aWYoMD5ifHwwPT09YylyZXR1cm47dGhpcy5fc3RhcnRUaW1lPW51bGw7Yio9Y31iKj10aGlzLl91cGRhdGVUaW1lU2NhbGUoYSk7Yz10aGlzLl91cGRhdGVUaW1lKGIpO2E9dGhpcy5fdXBkYXRlV2VpZ2h0KGEpO2lmKDA8YSl7Yj10aGlzLl9pbnRlcnBvbGFudHM7Zm9yKHZhciBlPXRoaXMuX3Byb3BlcnR5QmluZGluZ3MsZj0wLGc9Yi5sZW5ndGg7ZiE9PWc7KytmKWJbZl0uZXZhbHVhdGUoYyksZVtmXS5hY2N1bXVsYXRlKGQsYSl9fWVsc2UgdGhpcy5fdXBkYXRlV2VpZ2h0KGEpfSxfdXBkYXRlV2VpZ2h0OmZ1bmN0aW9uKGEpe3ZhciBiPTA7aWYodGhpcy5lbmFibGVkKXt2YXIgYj10aGlzLndlaWdodCxjPXRoaXMuX3dlaWdodEludGVycG9sYW50O2lmKG51bGwhPT1jKXt2YXIgZD1jLmV2YWx1YXRlKGEpWzBdLFxuICAgIGI9YipkO2E+Yy5wYXJhbWV0ZXJQb3NpdGlvbnNbMV0mJih0aGlzLnN0b3BGYWRpbmcoKSwwPT09ZCYmKHRoaXMuZW5hYmxlZD0hMSkpfX1yZXR1cm4gdGhpcy5fZWZmZWN0aXZlV2VpZ2h0PWJ9LF91cGRhdGVUaW1lU2NhbGU6ZnVuY3Rpb24oYSl7dmFyIGI9MDtpZighdGhpcy5wYXVzZWQpe3ZhciBiPXRoaXMudGltZVNjYWxlLGM9dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7aWYobnVsbCE9PWMpe3ZhciBkPWMuZXZhbHVhdGUoYSlbMF0sYj1iKmQ7YT5jLnBhcmFtZXRlclBvc2l0aW9uc1sxXSYmKHRoaXMuc3RvcFdhcnBpbmcoKSwwPT09Yj90aGlzLnBhdXNlZD0hMDp0aGlzLnRpbWVTY2FsZT1iKX19cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZT1ifSxfdXBkYXRlVGltZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnRpbWUrYTtpZigwPT09YSlyZXR1cm4gYjt2YXIgYz10aGlzLl9jbGlwLmR1cmF0aW9uLGQ9dGhpcy5sb29wLGU9dGhpcy5fbG9vcENvdW50O2lmKDIyMDA9PT1cbiAgICBkKWE6e2lmKC0xPT09ZSYmKHRoaXMuX2xvb3BDb3VudD0wLHRoaXMuX3NldEVuZGluZ3MoITAsITAsITEpKSxiPj1jKWI9YztlbHNlIGlmKDA+YiliPTA7ZWxzZSBicmVhayBhO3RoaXMuY2xhbXBXaGVuRmluaXNoZWQ/dGhpcy5wYXVzZWQ9ITA6dGhpcy5lbmFibGVkPSExO3RoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJmaW5pc2hlZFwiLGFjdGlvbjp0aGlzLGRpcmVjdGlvbjowPmE/LTE6MX0pfWVsc2V7ZD0yMjAyPT09ZDstMT09PWUmJigwPD1hPyhlPTAsdGhpcy5fc2V0RW5kaW5ncyghMCwwPT09dGhpcy5yZXBldGl0aW9ucyxkKSk6dGhpcy5fc2V0RW5kaW5ncygwPT09dGhpcy5yZXBldGl0aW9ucywhMCxkKSk7aWYoYj49Y3x8MD5iKXt2YXIgZj1NYXRoLmZsb29yKGIvYyksYj1iLWMqZixlPWUrTWF0aC5hYnMoZiksZz10aGlzLnJlcGV0aXRpb25zLWU7MD5nPyh0aGlzLmNsYW1wV2hlbkZpbmlzaGVkP3RoaXMucGF1c2VkPSEwOnRoaXMuZW5hYmxlZD0hMSxiPTA8YT9cbiAgICBjOjAsdGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImZpbmlzaGVkXCIsYWN0aW9uOnRoaXMsZGlyZWN0aW9uOjA8YT8xOi0xfSkpOigwPT09Zz8oYT0wPmEsdGhpcy5fc2V0RW5kaW5ncyhhLCFhLGQpKTp0aGlzLl9zZXRFbmRpbmdzKCExLCExLGQpLHRoaXMuX2xvb3BDb3VudD1lLHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJsb29wXCIsYWN0aW9uOnRoaXMsbG9vcERlbHRhOmZ9KSl9aWYoZCYmMT09PShlJjEpKXJldHVybiB0aGlzLnRpbWU9YixjLWJ9cmV0dXJuIHRoaXMudGltZT1ifSxfc2V0RW5kaW5nczpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJwb2xhbnRTZXR0aW5ncztjPyhkLmVuZGluZ1N0YXJ0PTI0MDEsZC5lbmRpbmdFbmQ9MjQwMSk6KGQuZW5kaW5nU3RhcnQ9YT90aGlzLnplcm9TbG9wZUF0U3RhcnQ/MjQwMToyNDAwOjI0MDIsZC5lbmRpbmdFbmQ9Yj90aGlzLnplcm9TbG9wZUF0RW5kPzI0MDE6MjQwMDoyNDAyKX0sX3NjaGVkdWxlRmFkaW5nOmZ1bmN0aW9uKGEsXG4gICAgYixjKXt2YXIgZD10aGlzLl9taXhlcixlPWQudGltZSxmPXRoaXMuX3dlaWdodEludGVycG9sYW50O251bGw9PT1mJiYodGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ9Zj1kLl9sZW5kQ29udHJvbEludGVycG9sYW50KCkpO2Q9Zi5wYXJhbWV0ZXJQb3NpdGlvbnM7Zj1mLnNhbXBsZVZhbHVlcztkWzBdPWU7ZlswXT1iO2RbMV09ZSthO2ZbMV09YztyZXR1cm4gdGhpc319KTt3ZS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHphLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOndlLF9iaW5kQWN0aW9uOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5fbG9jYWxSb290fHx0aGlzLl9yb290LGQ9YS5fY2xpcC50cmFja3MsZT1kLmxlbmd0aCxmPWEuX3Byb3BlcnR5QmluZGluZ3M7YT1hLl9pbnRlcnBvbGFudHM7dmFyIGc9Yy51dWlkLGg9dGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLGs9aFtnXTt2b2lkIDA9PT1rJiYoaz17fSxoW2ddPWspO2ZvcihoPTA7aCE9PWU7KytoKXt2YXIgbT1cbiAgICBkW2hdLGw9bS5uYW1lLG49a1tsXTtpZih2b2lkIDA9PT1uKXtuPWZbaF07aWYodm9pZCAwIT09bil7bnVsbD09PW4uX2NhY2hlSW5kZXgmJigrK24ucmVmZXJlbmNlQ291bnQsdGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKG4sZyxsKSk7Y29udGludWV9bj1uZXcgdmUocWEuY3JlYXRlKGMsbCxiJiZiLl9wcm9wZXJ0eUJpbmRpbmdzW2hdLmJpbmRpbmcucGFyc2VkUGF0aCksbS5WYWx1ZVR5cGVOYW1lLG0uZ2V0VmFsdWVTaXplKCkpOysrbi5yZWZlcmVuY2VDb3VudDt0aGlzLl9hZGRJbmFjdGl2ZUJpbmRpbmcobixnLGwpfWZbaF09bjthW2hdLnJlc3VsdEJ1ZmZlcj1uLmJ1ZmZlcn19LF9hY3RpdmF0ZUFjdGlvbjpmdW5jdGlvbihhKXtpZighdGhpcy5faXNBY3RpdmVBY3Rpb24oYSkpe2lmKG51bGw9PT1hLl9jYWNoZUluZGV4KXt2YXIgYj0oYS5fbG9jYWxSb290fHx0aGlzLl9yb290KS51dWlkLGM9YS5fY2xpcC51dWlkLGQ9dGhpcy5fYWN0aW9uc0J5Q2xpcFtjXTt0aGlzLl9iaW5kQWN0aW9uKGEsXG4gICAgZCYmZC5rbm93bkFjdGlvbnNbMF0pO3RoaXMuX2FkZEluYWN0aXZlQWN0aW9uKGEsYyxiKX1iPWEuX3Byb3BlcnR5QmluZGluZ3M7Yz0wO2ZvcihkPWIubGVuZ3RoO2MhPT1kOysrYyl7dmFyIGU9YltjXTswPT09ZS51c2VDb3VudCsrJiYodGhpcy5fbGVuZEJpbmRpbmcoZSksZS5zYXZlT3JpZ2luYWxTdGF0ZSgpKX10aGlzLl9sZW5kQWN0aW9uKGEpfX0sX2RlYWN0aXZhdGVBY3Rpb246ZnVuY3Rpb24oYSl7aWYodGhpcy5faXNBY3RpdmVBY3Rpb24oYSkpe2Zvcih2YXIgYj1hLl9wcm9wZXJ0eUJpbmRpbmdzLGM9MCxkPWIubGVuZ3RoO2MhPT1kOysrYyl7dmFyIGU9YltjXTswPT09LS1lLnVzZUNvdW50JiYoZS5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpLHRoaXMuX3Rha2VCYWNrQmluZGluZyhlKSl9dGhpcy5fdGFrZUJhY2tBY3Rpb24oYSl9fSxfaW5pdE1lbW9yeU1hbmFnZXI6ZnVuY3Rpb24oKXt0aGlzLl9hY3Rpb25zPVtdO3RoaXMuX25BY3RpdmVBY3Rpb25zPTA7dGhpcy5fYWN0aW9uc0J5Q2xpcD1cbiAgICB7fTt0aGlzLl9iaW5kaW5ncz1bXTt0aGlzLl9uQWN0aXZlQmluZGluZ3M9MDt0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWU9e307dGhpcy5fY29udHJvbEludGVycG9sYW50cz1bXTt0aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cz0wO3ZhciBhPXRoaXM7dGhpcy5zdGF0cz17YWN0aW9uczp7Z2V0IHRvdGFsKCl7cmV0dXJuIGEuX2FjdGlvbnMubGVuZ3RofSxnZXQgaW5Vc2UoKXtyZXR1cm4gYS5fbkFjdGl2ZUFjdGlvbnN9fSxiaW5kaW5nczp7Z2V0IHRvdGFsKCl7cmV0dXJuIGEuX2JpbmRpbmdzLmxlbmd0aH0sZ2V0IGluVXNlKCl7cmV0dXJuIGEuX25BY3RpdmVCaW5kaW5nc319LGNvbnRyb2xJbnRlcnBvbGFudHM6e2dldCB0b3RhbCgpe3JldHVybiBhLl9jb250cm9sSW50ZXJwb2xhbnRzLmxlbmd0aH0sZ2V0IGluVXNlKCl7cmV0dXJuIGEuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzfX19fSxfaXNBY3RpdmVBY3Rpb246ZnVuY3Rpb24oYSl7YT1hLl9jYWNoZUluZGV4O1xuICAgIHJldHVybiBudWxsIT09YSYmYTx0aGlzLl9uQWN0aXZlQWN0aW9uc30sX2FkZEluYWN0aXZlQWN0aW9uOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9hY3Rpb25zLGU9dGhpcy5fYWN0aW9uc0J5Q2xpcCxmPWVbYl07dm9pZCAwPT09Zj8oZj17a25vd25BY3Rpb25zOlthXSxhY3Rpb25CeVJvb3Q6e319LGEuX2J5Q2xpcENhY2hlSW5kZXg9MCxlW2JdPWYpOihiPWYua25vd25BY3Rpb25zLGEuX2J5Q2xpcENhY2hlSW5kZXg9Yi5sZW5ndGgsYi5wdXNoKGEpKTthLl9jYWNoZUluZGV4PWQubGVuZ3RoO2QucHVzaChhKTtmLmFjdGlvbkJ5Um9vdFtjXT1hfSxfcmVtb3ZlSW5hY3RpdmVBY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fYWN0aW9ucyxjPWJbYi5sZW5ndGgtMV0sZD1hLl9jYWNoZUluZGV4O2MuX2NhY2hlSW5kZXg9ZDtiW2RdPWM7Yi5wb3AoKTthLl9jYWNoZUluZGV4PW51bGw7dmFyIGI9YS5fY2xpcC51dWlkLGM9dGhpcy5fYWN0aW9uc0J5Q2xpcCxkPWNbYl0sZT1cbiAgICBkLmtub3duQWN0aW9ucyxmPWVbZS5sZW5ndGgtMV0sZz1hLl9ieUNsaXBDYWNoZUluZGV4O2YuX2J5Q2xpcENhY2hlSW5kZXg9ZztlW2ddPWY7ZS5wb3AoKTthLl9ieUNsaXBDYWNoZUluZGV4PW51bGw7ZGVsZXRlIGQuYWN0aW9uQnlSb290WyhhLl9sb2NhbFJvb3R8fHRoaXMuX3Jvb3QpLnV1aWRdOzA9PT1lLmxlbmd0aCYmZGVsZXRlIGNbYl07dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbihhKX0sX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb246ZnVuY3Rpb24oYSl7YT1hLl9wcm9wZXJ0eUJpbmRpbmdzO2Zvcih2YXIgYj0wLGM9YS5sZW5ndGg7YiE9PWM7KytiKXt2YXIgZD1hW2JdOzA9PT0tLWQucmVmZXJlbmNlQ291bnQmJnRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyhkKX19LF9sZW5kQWN0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2FjdGlvbnMsYz1hLl9jYWNoZUluZGV4LGQ9dGhpcy5fbkFjdGl2ZUFjdGlvbnMrKyxlPWJbZF07YS5fY2FjaGVJbmRleD1cbiAgICBkO2JbZF09YTtlLl9jYWNoZUluZGV4PWM7YltjXT1lfSxfdGFrZUJhY2tBY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fYWN0aW9ucyxjPWEuX2NhY2hlSW5kZXgsZD0tLXRoaXMuX25BY3RpdmVBY3Rpb25zLGU9YltkXTthLl9jYWNoZUluZGV4PWQ7YltkXT1hO2UuX2NhY2hlSW5kZXg9YztiW2NdPWV9LF9hZGRJbmFjdGl2ZUJpbmRpbmc6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxlPWRbYl0sZj10aGlzLl9iaW5kaW5nczt2b2lkIDA9PT1lJiYoZT17fSxkW2JdPWUpO2VbY109YTthLl9jYWNoZUluZGV4PWYubGVuZ3RoO2YucHVzaChhKX0sX3JlbW92ZUluYWN0aXZlQmluZGluZzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9iaW5kaW5ncyxjPWEuYmluZGluZyxkPWMucm9vdE5vZGUudXVpZCxjPWMucGF0aCxlPXRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxmPWVbZF0sZz1iW2IubGVuZ3RoLTFdO2E9YS5fY2FjaGVJbmRleDtcbiAgICBnLl9jYWNoZUluZGV4PWE7YlthXT1nO2IucG9wKCk7ZGVsZXRlIGZbY107YTp7Zm9yKHZhciBoIGluIGYpYnJlYWsgYTtkZWxldGUgZVtkXX19LF9sZW5kQmluZGluZzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9iaW5kaW5ncyxjPWEuX2NhY2hlSW5kZXgsZD10aGlzLl9uQWN0aXZlQmluZGluZ3MrKyxlPWJbZF07YS5fY2FjaGVJbmRleD1kO2JbZF09YTtlLl9jYWNoZUluZGV4PWM7YltjXT1lfSxfdGFrZUJhY2tCaW5kaW5nOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2JpbmRpbmdzLGM9YS5fY2FjaGVJbmRleCxkPS0tdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLGU9YltkXTthLl9jYWNoZUluZGV4PWQ7YltkXT1hO2UuX2NhY2hlSW5kZXg9YztiW2NdPWV9LF9sZW5kQ29udHJvbEludGVycG9sYW50OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fY29udHJvbEludGVycG9sYW50cyxiPXRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzKyssYz1hW2JdO3ZvaWQgMD09PWMmJihjPW5ldyBlZChuZXcgRmxvYXQzMkFycmF5KDIpLFxuICAgIG5ldyBGbG9hdDMyQXJyYXkoMiksMSx0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyKSxjLl9fY2FjaGVJbmRleD1iLGFbYl09Yyk7cmV0dXJuIGN9LF90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLGM9YS5fX2NhY2hlSW5kZXgsZD0tLXRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzLGU9YltkXTthLl9fY2FjaGVJbmRleD1kO2JbZF09YTtlLl9fY2FjaGVJbmRleD1jO2JbY109ZX0sX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXI6bmV3IEZsb2F0MzJBcnJheSgxKSxjbGlwQWN0aW9uOmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8dGhpcy5fcm9vdCxkPWMudXVpZCxjPVwic3RyaW5nXCI9PT10eXBlb2YgYT9DYS5maW5kQnlOYW1lKGMsYSk6YTthPW51bGwhPT1jP2MudXVpZDphO3ZhciBlPXRoaXMuX2FjdGlvbnNCeUNsaXBbYV0sZj1udWxsO2lmKHZvaWQgMCE9PWUpe2Y9XG4gICAgZS5hY3Rpb25CeVJvb3RbZF07aWYodm9pZCAwIT09ZilyZXR1cm4gZjtmPWUua25vd25BY3Rpb25zWzBdO251bGw9PT1jJiYoYz1mLl9jbGlwKX1pZihudWxsPT09YylyZXR1cm4gbnVsbDtiPW5ldyBvZih0aGlzLGMsYik7dGhpcy5fYmluZEFjdGlvbihiLGYpO3RoaXMuX2FkZEluYWN0aXZlQWN0aW9uKGIsYSxkKTtyZXR1cm4gYn0sZXhpc3RpbmdBY3Rpb246ZnVuY3Rpb24oYSxiKXt2YXIgYz1ifHx0aGlzLl9yb290O2I9Yy51dWlkO2M9XCJzdHJpbmdcIj09PXR5cGVvZiBhP0NhLmZpbmRCeU5hbWUoYyxhKTphO2E9dGhpcy5fYWN0aW9uc0J5Q2xpcFtjP2MudXVpZDphXTtyZXR1cm4gdm9pZCAwIT09YT9hLmFjdGlvbkJ5Um9vdFtiXXx8bnVsbDpudWxsfSxzdG9wQWxsQWN0aW9uOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuX2FjdGlvbnMsYj10aGlzLl9uQWN0aXZlQWN0aW9ucyxjPXRoaXMuX2JpbmRpbmdzLGQ9dGhpcy5fbkFjdGl2ZUJpbmRpbmdzLGU9dGhpcy5fbkFjdGl2ZUJpbmRpbmdzPVxuICAgIHRoaXMuX25BY3RpdmVBY3Rpb25zPTA7ZSE9PWI7KytlKWFbZV0ucmVzZXQoKTtmb3IoZT0wO2UhPT1kOysrZSljW2VdLnVzZUNvdW50PTA7cmV0dXJuIHRoaXN9LHVwZGF0ZTpmdW5jdGlvbihhKXthKj10aGlzLnRpbWVTY2FsZTtmb3IodmFyIGI9dGhpcy5fYWN0aW9ucyxjPXRoaXMuX25BY3RpdmVBY3Rpb25zLGQ9dGhpcy50aW1lKz1hLGU9TWF0aC5zaWduKGEpLGY9dGhpcy5fYWNjdUluZGV4Xj0xLGc9MDtnIT09YzsrK2cpYltnXS5fdXBkYXRlKGQsYSxlLGYpO2E9dGhpcy5fYmluZGluZ3M7Yj10aGlzLl9uQWN0aXZlQmluZGluZ3M7Zm9yKGc9MDtnIT09YjsrK2cpYVtnXS5hcHBseShmKTtyZXR1cm4gdGhpc30sZ2V0Um9vdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yb290fSx1bmNhY2hlQ2xpcDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9hY3Rpb25zO2E9YS51dWlkO3ZhciBjPXRoaXMuX2FjdGlvbnNCeUNsaXAsZD1jW2FdO2lmKHZvaWQgMCE9PWQpe2Zvcih2YXIgZD1kLmtub3duQWN0aW9ucyxcbiAgICBlPTAsZj1kLmxlbmd0aDtlIT09ZjsrK2Upe3ZhciBnPWRbZV07dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbihnKTt2YXIgaD1nLl9jYWNoZUluZGV4LGs9YltiLmxlbmd0aC0xXTtnLl9jYWNoZUluZGV4PW51bGw7Zy5fYnlDbGlwQ2FjaGVJbmRleD1udWxsO2suX2NhY2hlSW5kZXg9aDtiW2hdPWs7Yi5wb3AoKTt0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKGcpfWRlbGV0ZSBjW2FdfX0sdW5jYWNoZVJvb3Q6ZnVuY3Rpb24oYSl7YT1hLnV1aWQ7dmFyIGI9dGhpcy5fYWN0aW9uc0J5Q2xpcDtmb3IoZCBpbiBiKXt2YXIgYz1iW2RdLmFjdGlvbkJ5Um9vdFthXTt2b2lkIDAhPT1jJiYodGhpcy5fZGVhY3RpdmF0ZUFjdGlvbihjKSx0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbihjKSl9dmFyIGQ9dGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lW2FdO2lmKHZvaWQgMCE9PWQpZm9yKHZhciBlIGluIGQpYT1kW2VdLGEucmVzdG9yZU9yaWdpbmFsU3RhdGUoKSx0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoYSl9LFxuICAgIHVuY2FjaGVBY3Rpb246ZnVuY3Rpb24oYSxiKXthPXRoaXMuZXhpc3RpbmdBY3Rpb24oYSxiKTtudWxsIT09YSYmKHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oYSksdGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oYSkpfX0pO1FkLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgUWQodm9pZCAwPT09dGhpcy52YWx1ZS5jbG9uZT90aGlzLnZhbHVlOnRoaXMudmFsdWUuY2xvbmUoKSl9O3hlLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpLHtjb25zdHJ1Y3Rvcjp4ZSxpc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5OiEwLGNvcHk6ZnVuY3Rpb24oYSl7RS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5tYXhJbnN0YW5jZWRDb3VudD1hLm1heEluc3RhbmNlZENvdW50O3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyh5ZS5wcm90b3R5cGUsXG4gICAge2NvdW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhLmNvdW50fX0sYXJyYXk6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGEuYXJyYXl9fX0pO09iamVjdC5hc3NpZ24oeWUucHJvdG90eXBlLHtpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlOiEwLHNldFg6ZnVuY3Rpb24oYSxiKXt0aGlzLmRhdGEuYXJyYXlbYSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0XT1iO3JldHVybiB0aGlzfSxzZXRZOmZ1bmN0aW9uKGEsYil7dGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCsxXT1iO3JldHVybiB0aGlzfSxzZXRaOmZ1bmN0aW9uKGEsYil7dGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCsyXT1iO3JldHVybiB0aGlzfSxzZXRXOmZ1bmN0aW9uKGEsYil7dGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCszXT1iO3JldHVybiB0aGlzfSxnZXRYOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmRhdGEuYXJyYXlbYSpcbiAgICB0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0XX0sZ2V0WTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCsxXX0sZ2V0WjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCsyXX0sZ2V0VzpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldCszXX0sc2V0WFk6ZnVuY3Rpb24oYSxiLGMpe2E9YSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0O3RoaXMuZGF0YS5hcnJheVthKzBdPWI7dGhpcy5kYXRhLmFycmF5W2ErMV09YztyZXR1cm4gdGhpc30sc2V0WFlaOmZ1bmN0aW9uKGEsYixjLGQpe2E9YSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0O3RoaXMuZGF0YS5hcnJheVthKzBdPWI7dGhpcy5kYXRhLmFycmF5W2ErMV09Yzt0aGlzLmRhdGEuYXJyYXlbYSsyXT1kO3JldHVybiB0aGlzfSxcbiAgICBzZXRYWVpXOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQ7dGhpcy5kYXRhLmFycmF5W2ErMF09Yjt0aGlzLmRhdGEuYXJyYXlbYSsxXT1jO3RoaXMuZGF0YS5hcnJheVthKzJdPWQ7dGhpcy5kYXRhLmFycmF5W2ErM109ZTtyZXR1cm4gdGhpc319KTtPYmplY3QuZGVmaW5lUHJvcGVydHkobWMucHJvdG90eXBlLFwibmVlZHNVcGRhdGVcIix7c2V0OmZ1bmN0aW9uKGEpeyEwPT09YSYmdGhpcy52ZXJzaW9uKyt9fSk7T2JqZWN0LmFzc2lnbihtYy5wcm90b3R5cGUse2lzSW50ZXJsZWF2ZWRCdWZmZXI6ITAsc2V0QXJyYXk6ZnVuY3Rpb24oYSl7aWYoQXJyYXkuaXNBcnJheShhKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS5cIik7dGhpcy5jb3VudD12b2lkIDAhPT1hP2EubGVuZ3RoL3RoaXMuc3RyaWRlOjA7dGhpcy5hcnJheT1hfSxzZXREeW5hbWljOmZ1bmN0aW9uKGEpe3RoaXMuZHluYW1pYz1cbiAgICBhO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYXJyYXk9bmV3IGEuYXJyYXkuY29uc3RydWN0b3IoYS5hcnJheSk7dGhpcy5jb3VudD1hLmNvdW50O3RoaXMuc3RyaWRlPWEuc3RyaWRlO3RoaXMuZHluYW1pYz1hLmR5bmFtaWM7cmV0dXJuIHRoaXN9LGNvcHlBdDpmdW5jdGlvbihhLGIsYyl7YSo9dGhpcy5zdHJpZGU7Yyo9Yi5zdHJpZGU7Zm9yKHZhciBkPTAsZT10aGlzLnN0cmlkZTtkPGU7ZCsrKXRoaXMuYXJyYXlbYStkXT1iLmFycmF5W2MrZF07cmV0dXJuIHRoaXN9LHNldDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMuYXJyYXkuc2V0KGEsYik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxvblVwbG9hZDpmdW5jdGlvbihhKXt0aGlzLm9uVXBsb2FkQ2FsbGJhY2s9YTtyZXR1cm4gdGhpc319KTt6ZS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG1jLnByb3RvdHlwZSksXG4gICAge2NvbnN0cnVjdG9yOnplLGlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI6ITAsY29weTpmdW5jdGlvbihhKXttYy5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5tZXNoUGVyQXR0cmlidXRlPWEubWVzaFBlckF0dHJpYnV0ZTtyZXR1cm4gdGhpc319KTtBZS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE0ucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6QWUsaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6ITAsY29weTpmdW5jdGlvbihhKXtNLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLm1lc2hQZXJBdHRyaWJ1dGU9YS5tZXNoUGVyQXR0cmlidXRlO3JldHVybiB0aGlzfX0pO09iamVjdC5hc3NpZ24ocGYucHJvdG90eXBlLHtsaW5lUHJlY2lzaW9uOjEsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5yYXkuc2V0KGEsYil9LHNldEZyb21DYW1lcmE6ZnVuY3Rpb24oYSxiKXtiJiZiLmlzUGVyc3BlY3RpdmVDYW1lcmE/KHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oYi5tYXRyaXhXb3JsZCksXG4gICAgdGhpcy5yYXkuZGlyZWN0aW9uLnNldChhLngsYS55LC41KS51bnByb2plY3QoYikuc3ViKHRoaXMucmF5Lm9yaWdpbikubm9ybWFsaXplKCkpOmImJmIuaXNPcnRob2dyYXBoaWNDYW1lcmE/KHRoaXMucmF5Lm9yaWdpbi5zZXQoYS54LGEueSwoYi5uZWFyK2IuZmFyKS8oYi5uZWFyLWIuZmFyKSkudW5wcm9qZWN0KGIpLHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoMCwwLC0xKS50cmFuc2Zvcm1EaXJlY3Rpb24oYi5tYXRyaXhXb3JsZCkpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5SYXljYXN0ZXI6IFVuc3VwcG9ydGVkIGNhbWVyYSB0eXBlLlwiKX0saW50ZXJzZWN0T2JqZWN0OmZ1bmN0aW9uKGEsYil7dmFyIGM9W107QmUoYSx0aGlzLGMsYik7Yy5zb3J0KHFmKTtyZXR1cm4gY30saW50ZXJzZWN0T2JqZWN0czpmdW5jdGlvbihhLGIpe3ZhciBjPVtdO2lmKCExPT09QXJyYXkuaXNBcnJheShhKSlyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuUmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHM6IG9iamVjdHMgaXMgbm90IGFuIEFycmF5LlwiKSxcbiAgICBjO2Zvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKylCZShhW2RdLHRoaXMsYyxiKTtjLnNvcnQocWYpO3JldHVybiBjfX0pO09iamVjdC5hc3NpZ24ocmYucHJvdG90eXBlLHtzdGFydDpmdW5jdGlvbigpe3RoaXMub2xkVGltZT10aGlzLnN0YXJ0VGltZT0oXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBwZXJmb3JtYW5jZT9EYXRlOnBlcmZvcm1hbmNlKS5ub3coKTt0aGlzLmVsYXBzZWRUaW1lPTA7dGhpcy5ydW5uaW5nPSEwfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5nZXRFbGFwc2VkVGltZSgpO3RoaXMuYXV0b1N0YXJ0PXRoaXMucnVubmluZz0hMX0sZ2V0RWxhcHNlZFRpbWU6ZnVuY3Rpb24oKXt0aGlzLmdldERlbHRhKCk7cmV0dXJuIHRoaXMuZWxhcHNlZFRpbWV9LGdldERlbHRhOmZ1bmN0aW9uKCl7dmFyIGE9MDtpZih0aGlzLmF1dG9TdGFydCYmIXRoaXMucnVubmluZylyZXR1cm4gdGhpcy5zdGFydCgpLDA7aWYodGhpcy5ydW5uaW5nKXt2YXIgYj0oXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBwZXJmb3JtYW5jZT9cbiAgICBEYXRlOnBlcmZvcm1hbmNlKS5ub3coKSxhPShiLXRoaXMub2xkVGltZSkvMUUzO3RoaXMub2xkVGltZT1iO3RoaXMuZWxhcHNlZFRpbWUrPWF9cmV0dXJuIGF9fSk7T2JqZWN0LmFzc2lnbihzZi5wcm90b3R5cGUse3NldDpmdW5jdGlvbihhLGIsYyl7dGhpcy5yYWRpdXM9YTt0aGlzLnBoaT1iO3RoaXMudGhldGE9YztyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5yYWRpdXM9YS5yYWRpdXM7dGhpcy5waGk9YS5waGk7dGhpcy50aGV0YT1hLnRoZXRhO3JldHVybiB0aGlzfSxtYWtlU2FmZTpmdW5jdGlvbigpe3RoaXMucGhpPU1hdGgubWF4KDFFLTYsTWF0aC5taW4oTWF0aC5QSS0xRS02LHRoaXMucGhpKSk7cmV0dXJuIHRoaXN9LHNldEZyb21WZWN0b3IzOmZ1bmN0aW9uKGEpe3RoaXMucmFkaXVzPWEubGVuZ3RoKCk7MD09PXRoaXMucmFkaXVzP3RoaXMucGhpPXRoaXMudGhldGE9XG4gICAgMDoodGhpcy50aGV0YT1NYXRoLmF0YW4yKGEueCxhLnopLHRoaXMucGhpPU1hdGguYWNvcyhRLmNsYW1wKGEueS90aGlzLnJhZGl1cywtMSwxKSkpO3JldHVybiB0aGlzfX0pO09iamVjdC5hc3NpZ24odGYucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RoaXMucmFkaXVzPWE7dGhpcy50aGV0YT1iO3RoaXMueT1jO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLnJhZGl1cz1hLnJhZGl1czt0aGlzLnRoZXRhPWEudGhldGE7dGhpcy55PWEueTtyZXR1cm4gdGhpc30sc2V0RnJvbVZlY3RvcjM6ZnVuY3Rpb24oYSl7dGhpcy5yYWRpdXM9TWF0aC5zcXJ0KGEueCphLngrYS56KmEueik7dGhpcy50aGV0YT1NYXRoLmF0YW4yKGEueCxhLnopO3RoaXMueT1hLnk7cmV0dXJuIHRoaXN9fSk7Z2QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpO2dkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1cbiAgICBnZDtnZC5wcm90b3R5cGUuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3Q9ITA7aGQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoWC5wcm90b3R5cGUpO2hkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1oZDtoZC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBtYTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZCxlPVtcImFcIixcImJcIixcImNcIl07dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoITApO2MuZ2V0Tm9ybWFsTWF0cml4KHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkKTt2YXIgZj10aGlzLm9iamVjdC5tYXRyaXhXb3JsZCxnPXRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtpZigoZD10aGlzLm9iamVjdC5nZW9tZXRyeSkmJmQuaXNHZW9tZXRyeSlmb3IodmFyIGg9ZC52ZXJ0aWNlcyxrPWQuZmFjZXMsbD1kPTAscD1rLmxlbmd0aDtsPHA7bCsrKWZvcih2YXIgbj1rW2xdLHU9MCxyPW4udmVydGV4Tm9ybWFscy5sZW5ndGg7dTxyO3UrKyl7dmFyIHQ9XG4gICAgbi52ZXJ0ZXhOb3JtYWxzW3VdO2EuY29weShoW25bZVt1XV1dKS5hcHBseU1hdHJpeDQoZik7Yi5jb3B5KHQpLmFwcGx5TWF0cml4MyhjKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcih0aGlzLnNpemUpLmFkZChhKTtnLnNldFhZWihkLGEueCxhLnksYS56KTtkKz0xO2cuc2V0WFlaKGQsYi54LGIueSxiLnopO2QrPTF9ZWxzZSBpZihkJiZkLmlzQnVmZmVyR2VvbWV0cnkpZm9yKGU9ZC5hdHRyaWJ1dGVzLnBvc2l0aW9uLGg9ZC5hdHRyaWJ1dGVzLm5vcm1hbCx1PWQ9MCxyPWUuY291bnQ7dTxyO3UrKylhLnNldChlLmdldFgodSksZS5nZXRZKHUpLGUuZ2V0Wih1KSkuYXBwbHlNYXRyaXg0KGYpLGIuc2V0KGguZ2V0WCh1KSxoLmdldFkodSksaC5nZXRaKHUpKSxiLmFwcGx5TWF0cml4MyhjKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcih0aGlzLnNpemUpLmFkZChhKSxnLnNldFhZWihkLGEueCxhLnksYS56KSxkKz0xLGcuc2V0WFlaKGQsYi54LGIueSxiLnopLGQrPTE7Zy5uZWVkc1VwZGF0ZT1cbiAgICAhMH19KCk7bmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpO25jLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1uYztuYy5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKX07bmMucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKCl7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3ZhciBjPXRoaXMubGlnaHQuZGlzdGFuY2U/dGhpcy5saWdodC5kaXN0YW5jZToxRTMsZD1jKk1hdGgudGFuKHRoaXMubGlnaHQuYW5nbGUpO3RoaXMuY29uZS5zY2FsZS5zZXQoZCxkLGMpO2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQubWF0cml4V29ybGQpO2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkKTt0aGlzLmNvbmUubG9va0F0KGIuc3ViKGEpKTtcbiAgICB2b2lkIDAhPT10aGlzLmNvbG9yP3RoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQodGhpcy5jb2xvcik6dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvcil9fSgpO29jLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFgucHJvdG90eXBlKTtvYy5wcm90b3R5cGUuY29uc3RydWN0b3I9b2M7b2MucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgTyxjPW5ldyBPO3JldHVybiBmdW5jdGlvbihkKXt2YXIgZT10aGlzLmJvbmVzLGY9dGhpcy5nZW9tZXRyeSxnPWYuZ2V0QXR0cmlidXRlKFwicG9zaXRpb25cIik7Yy5nZXRJbnZlcnNlKHRoaXMucm9vdC5tYXRyaXhXb3JsZCk7Zm9yKHZhciBoPTAsaz0wO2g8ZS5sZW5ndGg7aCsrKXt2YXIgbD1lW2hdO2wucGFyZW50JiZsLnBhcmVudC5pc0JvbmUmJihiLm11bHRpcGx5TWF0cmljZXMoYyxsLm1hdHJpeFdvcmxkKSxhLnNldEZyb21NYXRyaXhQb3NpdGlvbihiKSxcbiAgICBnLnNldFhZWihrLGEueCxhLnksYS56KSxiLm11bHRpcGx5TWF0cmljZXMoYyxsLnBhcmVudC5tYXRyaXhXb3JsZCksYS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYiksZy5zZXRYWVooaysxLGEueCxhLnksYS56KSxrKz0yKX1mLmdldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIpLm5lZWRzVXBkYXRlPSEwO3gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxkKX19KCk7cGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUocmEucHJvdG90eXBlKTtwYy5wcm90b3R5cGUuY29uc3RydWN0b3I9cGM7cGMucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTt0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKX07cGMucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZvaWQgMCE9PXRoaXMuY29sb3I/dGhpcy5tYXRlcmlhbC5jb2xvci5zZXQodGhpcy5jb2xvcik6dGhpcy5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpfTtxYy5wcm90b3R5cGU9XG4gICAgT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSk7cWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXFjO3FjLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jaGlsZHJlblswXS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5jaGlsZHJlblswXS5tYXRlcmlhbC5kaXNwb3NlKCl9O3FjLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT0uNSp0aGlzLmxpZ2h0LndpZHRoLGI9LjUqdGhpcy5saWdodC5oZWlnaHQsYz10aGlzLmxpbmUuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbixkPWMuYXJyYXk7ZFswXT1hO2RbMV09LWI7ZFsyXT0wO2RbM109YTtkWzRdPWI7ZFs1XT0wO2RbNl09LWE7ZFs3XT1iO2RbOF09MDtkWzldPS1hO2RbMTBdPS1iO2RbMTFdPTA7ZFsxMl09YTtkWzEzXT0tYjtkWzE0XT0wO2MubmVlZHNVcGRhdGU9ITA7dm9pZCAwIT09dGhpcy5jb2xvcj90aGlzLmxpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3IpOnRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpfTtcbiAgICByYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSk7cmMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXJjO3JjLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jaGlsZHJlblswXS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5jaGlsZHJlblswXS5tYXRlcmlhbC5kaXNwb3NlKCl9O3JjLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBILGM9bmV3IEg7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5jaGlsZHJlblswXTtpZih2b2lkIDAhPT10aGlzLmNvbG9yKXRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3IpO2Vsc2V7dmFyIGU9ZC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoXCJjb2xvclwiKTtiLmNvcHkodGhpcy5saWdodC5jb2xvcik7Yy5jb3B5KHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IpO2Zvcih2YXIgZj0wLGc9ZS5jb3VudDtmPGc7ZisrKXt2YXIgaD1mPGcvMj9iOmM7ZS5zZXRYWVooZixoLnIsaC5nLGguYil9ZS5uZWVkc1VwZGF0ZT1cbiAgICAhMH1kLmxvb2tBdChhLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKS5uZWdhdGUoKSl9fSgpO2lkLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFgucHJvdG90eXBlKTtpZC5wcm90b3R5cGUuY29uc3RydWN0b3I9aWQ7UmQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoWC5wcm90b3R5cGUpO1JkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1SZDtqZC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShYLnByb3RvdHlwZSk7amQucHJvdG90eXBlLmNvbnN0cnVjdG9yPWpkO2pkLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwLGM9bmV3IG1hO3JldHVybiBmdW5jdGlvbigpe3RoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTtjLmdldE5vcm1hbE1hdHJpeCh0aGlzLm9iamVjdC5tYXRyaXhXb3JsZCk7Zm9yKHZhciBkPXRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkLGU9dGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLFxuICAgIGY9dGhpcy5vYmplY3QuZ2VvbWV0cnksZz1mLnZlcnRpY2VzLGY9Zi5mYWNlcyxoPTAsaz0wLGw9Zi5sZW5ndGg7azxsO2srKyl7dmFyIHA9ZltrXSxuPXAubm9ybWFsO2EuY29weShnW3AuYV0pLmFkZChnW3AuYl0pLmFkZChnW3AuY10pLmRpdmlkZVNjYWxhcigzKS5hcHBseU1hdHJpeDQoZCk7Yi5jb3B5KG4pLmFwcGx5TWF0cml4MyhjKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcih0aGlzLnNpemUpLmFkZChhKTtlLnNldFhZWihoLGEueCxhLnksYS56KTtoKz0xO2Uuc2V0WFlaKGgsYi54LGIueSxiLnopO2grPTF9ZS5uZWVkc1VwZGF0ZT0hMH19KCk7c2MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpO3NjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1zYztzYy5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMubGlnaHRQbGFuZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTt0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgIHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5kaXNwb3NlKCl9O3NjLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwLGM9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKCl7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5saWdodC5tYXRyaXhXb3JsZCk7Yi5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQpO2Muc3ViVmVjdG9ycyhiLGEpO3RoaXMubGlnaHRQbGFuZS5sb29rQXQoYyk7dm9pZCAwIT09dGhpcy5jb2xvcj8odGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yKSx0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3IpKToodGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvciksdGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvcikpO3RoaXMudGFyZ2V0TGluZS5sb29rQXQoYyk7XG4gICAgdGhpcy50YXJnZXRMaW5lLnNjYWxlLno9Yy5sZW5ndGgoKX19KCk7a2QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoWC5wcm90b3R5cGUpO2tkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1rZDtrZC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGcsaCxrKXtkLnNldChnLGgsaykudW5wcm9qZWN0KGUpO2E9Y1thXTtpZih2b2lkIDAhPT1hKWZvcihnPWIuZ2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiksaD0wLGs9YS5sZW5ndGg7aDxrO2grKylnLnNldFhZWihhW2hdLGQueCxkLnksZC56KX12YXIgYixjLGQ9bmV3IHAsZT1uZXcgVGE7cmV0dXJuIGZ1bmN0aW9uKCl7Yj10aGlzLmdlb21ldHJ5O2M9dGhpcy5wb2ludE1hcDtlLnByb2plY3Rpb25NYXRyaXguY29weSh0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4KTthKFwiY1wiLDAsMCwtMSk7YShcInRcIiwwLDAsMSk7YShcIm4xXCIsLTEsLTEsLTEpO2EoXCJuMlwiLDEsLTEsLTEpO2EoXCJuM1wiLC0xLDEsLTEpO2EoXCJuNFwiLDEsXG4gICAgMSwtMSk7YShcImYxXCIsLTEsLTEsMSk7YShcImYyXCIsMSwtMSwxKTthKFwiZjNcIiwtMSwxLDEpO2EoXCJmNFwiLDEsMSwxKTthKFwidTFcIiwuNywxLjEsLTEpO2EoXCJ1MlwiLC0uNywxLjEsLTEpO2EoXCJ1M1wiLDAsMiwtMSk7YShcImNmMVwiLC0xLDAsMSk7YShcImNmMlwiLDEsMCwxKTthKFwiY2YzXCIsMCwtMSwxKTthKFwiY2Y0XCIsMCwxLDEpO2EoXCJjbjFcIiwtMSwwLC0xKTthKFwiY24yXCIsMSwwLC0xKTthKFwiY24zXCIsMCwtMSwtMSk7YShcImNuNFwiLDAsMSwtMSk7Yi5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKS5uZWVkc1VwZGF0ZT0hMH19KCk7R2IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoWC5wcm90b3R5cGUpO0diLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1HYjtHYi5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFhhO3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDAhPT1iJiZjb25zb2xlLndhcm4oXCJUSFJFRS5Cb3hIZWxwZXI6IC51cGRhdGUoKSBoYXMgbm8gbG9uZ2VyIGFyZ3VtZW50cy5cIik7XG4gICAgdm9pZCAwIT09dGhpcy5vYmplY3QmJmEuc2V0RnJvbU9iamVjdCh0aGlzLm9iamVjdCk7aWYoIWEuaXNFbXB0eSgpKXtiPWEubWluO3ZhciBjPWEubWF4LGQ9dGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLGU9ZC5hcnJheTtlWzBdPWMueDtlWzFdPWMueTtlWzJdPWMuejtlWzNdPWIueDtlWzRdPWMueTtlWzVdPWMuejtlWzZdPWIueDtlWzddPWIueTtlWzhdPWMuejtlWzldPWMueDtlWzEwXT1iLnk7ZVsxMV09Yy56O2VbMTJdPWMueDtlWzEzXT1jLnk7ZVsxNF09Yi56O2VbMTVdPWIueDtlWzE2XT1jLnk7ZVsxN109Yi56O2VbMThdPWIueDtlWzE5XT1iLnk7ZVsyMF09Yi56O2VbMjFdPWMueDtlWzIyXT1iLnk7ZVsyM109Yi56O2QubmVlZHNVcGRhdGU9ITA7dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKX19fSgpO0diLnByb3RvdHlwZS5zZXRGcm9tT2JqZWN0PWZ1bmN0aW9uKGEpe3RoaXMub2JqZWN0PWE7dGhpcy51cGRhdGUoKTtyZXR1cm4gdGhpc307XG4gICAgbGQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoWC5wcm90b3R5cGUpO2xkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1sZDtsZC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5ib3g7Yi5pc0VtcHR5KCl8fChiLmdldENlbnRlcih0aGlzLnBvc2l0aW9uKSxiLmdldFNpemUodGhpcy5zY2FsZSksdGhpcy5zY2FsZS5tdWx0aXBseVNjYWxhciguNSkseC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLGEpKX07bWQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc2EucHJvdG90eXBlKTttZC5wcm90b3R5cGUuY29uc3RydWN0b3I9bWQ7bWQucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkPWZ1bmN0aW9uKGEpe3ZhciBiPS10aGlzLnBsYW5lLmNvbnN0YW50OzFFLTg+TWF0aC5hYnMoYikmJihiPTFFLTgpO3RoaXMuc2NhbGUuc2V0KC41KnRoaXMuc2l6ZSwuNSp0aGlzLnNpemUsYik7dGhpcy5sb29rQXQodGhpcy5wbGFuZS5ub3JtYWwpO1xuICAgIHgucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxhKX07dmFyIFNkLENlO0hiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKTtIYi5wcm90b3R5cGUuY29uc3RydWN0b3I9SGI7SGIucHJvdG90eXBlLnNldERpcmVjdGlvbj1mdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI7cmV0dXJuIGZ1bmN0aW9uKGMpey45OTk5OTxjLnk/dGhpcy5xdWF0ZXJuaW9uLnNldCgwLDAsMCwxKTotLjk5OTk5PmMueT90aGlzLnF1YXRlcm5pb24uc2V0KDEsMCwwLDApOihhLnNldChjLnosMCwtYy54KS5ub3JtYWxpemUoKSxiPU1hdGguYWNvcyhjLnkpLHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKGEsYikpfX0oKTtIYi5wcm90b3R5cGUuc2V0TGVuZ3RoPWZ1bmN0aW9uKGEsYixjKXt2b2lkIDA9PT1iJiYoYj0uMiphKTt2b2lkIDA9PT1jJiYoYz0uMipiKTt0aGlzLmxpbmUuc2NhbGUuc2V0KDEsTWF0aC5tYXgoMCxhLWIpLDEpO3RoaXMubGluZS51cGRhdGVNYXRyaXgoKTtcbiAgICB0aGlzLmNvbmUuc2NhbGUuc2V0KGMsYixjKTt0aGlzLmNvbmUucG9zaXRpb24ueT1hO3RoaXMuY29uZS51cGRhdGVNYXRyaXgoKX07SGIucHJvdG90eXBlLnNldENvbG9yPWZ1bmN0aW9uKGEpe3RoaXMubGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KGEpO3RoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KGEpfTtuZC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShYLnByb3RvdHlwZSk7bmQucHJvdG90eXBlLmNvbnN0cnVjdG9yPW5kO0MuY3JlYXRlPWZ1bmN0aW9uKGEsYil7Y29uc29sZS5sb2coXCJUSFJFRS5DdXJ2ZS5jcmVhdGUoKSBoYXMgYmVlbiBkZXByZWNhdGVkXCIpO2EucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQy5wcm90b3R5cGUpO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5wcm90b3R5cGUuZ2V0UG9pbnQ9YjtyZXR1cm4gYX07T2JqZWN0LmFzc2lnbihiYi5wcm90b3R5cGUse2NyZWF0ZVBvaW50c0dlb21ldHJ5OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZVBvaW50c0dlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuXCIpO1xuICAgIGE9dGhpcy5nZXRQb2ludHMoYSk7cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoYSl9LGNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuXCIpO2E9dGhpcy5nZXRTcGFjZWRQb2ludHMoYSk7cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoYSl9LGNyZWF0ZUdlb21ldHJ5OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuXCIpO2Zvcih2YXIgYj1uZXcgTCxjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT1hW2NdO2IudmVydGljZXMucHVzaChuZXcgcChlLngsXG4gICAgZS55LGUuenx8MCkpfXJldHVybiBifX0pO09iamVjdC5hc3NpZ24oU2EucHJvdG90eXBlLHtmcm9tUG9pbnRzOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlBhdGg6IC5mcm9tUG9pbnRzKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbVBvaW50cygpLlwiKTt0aGlzLnNldEZyb21Qb2ludHMoYSl9fSk7dmYucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoY2EucHJvdG90eXBlKTt3Zi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShjYS5wcm90b3R5cGUpO0RlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGNhLnByb3RvdHlwZSk7T2JqZWN0LmFzc2lnbihEZS5wcm90b3R5cGUse2luaXRGcm9tQXJyYXk6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuU3BsaW5lOiAuaW5pdEZyb21BcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxnZXRDb250cm9sUG9pbnRzQXJyYXk6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuU3BsaW5lOiAuZ2V0Q29udHJvbFBvaW50c0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LFxuICAgIHJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aDpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5TcGxpbmU6IC5yZXBhcmFtZXRyaXplQnlBcmNMZW5ndGgoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX19KTtpZC5wcm90b3R5cGUuc2V0Q29sb3JzPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkdyaWRIZWxwZXI6IHNldENvbG9ycygpIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBhc3MgdGhlbSBpbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZC5cIil9O29jLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuU2tlbGV0b25IZWxwZXI6IHVwZGF0ZSgpIG5vIGxvbmdlciBuZWVkcyB0byBiZSBjYWxsZWQuXCIpfTtPYmplY3QuYXNzaWduKGtjLnByb3RvdHlwZSx7ZXh0cmFjdFVybEJhc2U6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTG9hZGVyOiAuZXh0cmFjdFVybEJhc2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoKSBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gSGUuZXh0cmFjdFVybEJhc2UoYSl9fSk7T2JqZWN0LmFzc2lnbihvZC5wcm90b3R5cGUse2NlbnRlcjpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Cb3gyOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuXCIpO3JldHVybiB0aGlzLmdldENlbnRlcihhKX0sZW1wdHk6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Cb3gyOiAuZW1wdHkoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pc0VtcHR5KCkuXCIpO3JldHVybiB0aGlzLmlzRW1wdHkoKX0saXNJbnRlcnNlY3Rpb25Cb3g6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQm94MjogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLlwiKTtyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KGEpfSxzaXplOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkJveDI6IC5zaXplKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0U2l6ZSgpLlwiKTtcbiAgICByZXR1cm4gdGhpcy5nZXRTaXplKGEpfX0pO09iamVjdC5hc3NpZ24oWGEucHJvdG90eXBlLHtjZW50ZXI6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQm94MzogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLlwiKTtyZXR1cm4gdGhpcy5nZXRDZW50ZXIoYSl9LGVtcHR5OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQm94MzogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLlwiKTtyZXR1cm4gdGhpcy5pc0VtcHR5KCl9LGlzSW50ZXJzZWN0aW9uQm94OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS5cIik7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveChhKX0saXNJbnRlcnNlY3Rpb25TcGhlcmU6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQm94MzogLmlzSW50ZXJzZWN0aW9uU3BoZXJlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1NwaGVyZSgpLlwiKTtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKGEpfSxzaXplOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkJveDM6IC5zaXplKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0U2l6ZSgpLlwiKTtyZXR1cm4gdGhpcy5nZXRTaXplKGEpfX0pO05iLnByb3RvdHlwZS5jZW50ZXI9ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGluZTM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS5cIik7cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKGEpfTtPYmplY3QuYXNzaWduKFEse3JhbmRvbTE2OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0aDogLnJhbmRvbTE2KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIE1hdGgucmFuZG9tKCkgaW5zdGVhZC5cIik7cmV0dXJuIE1hdGgucmFuZG9tKCl9LG5lYXJlc3RQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdGg6IC5uZWFyZXN0UG93ZXJPZlR3bygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZsb29yUG93ZXJPZlR3bygpLlwiKTtcbiAgICByZXR1cm4gUS5mbG9vclBvd2VyT2ZUd28oYSl9LG5leHRQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdGg6IC5uZXh0UG93ZXJPZlR3bygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNlaWxQb3dlck9mVHdvKCkuXCIpO3JldHVybiBRLmNlaWxQb3dlck9mVHdvKGEpfX0pO09iamVjdC5hc3NpZ24obWEucHJvdG90eXBlLHtmbGF0dGVuVG9BcnJheU9mZnNldDpmdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDM6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLnRvQXJyYXkoYSxiKX0sbXVsdGlwbHlWZWN0b3IzOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4MyggbWF0cml4ICkgaW5zdGVhZC5cIik7cmV0dXJuIGEuYXBwbHlNYXRyaXgzKHRoaXMpfSxcbiAgICBtdWx0aXBseVZlY3RvcjNBcnJheTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXgzOiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sYXBwbHlUb0J1ZmZlcjpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXgzOiAuYXBwbHlUb0J1ZmZlcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZShhKX0sYXBwbHlUb1ZlY3RvcjNBcnJheTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXgzOiAuYXBwbHlUb1ZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX0pO09iamVjdC5hc3NpZ24oTy5wcm90b3R5cGUse2V4dHJhY3RQb3NpdGlvbjpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuZXh0cmFjdFBvc2l0aW9uKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY29weVBvc2l0aW9uKCkuXCIpO1xuICAgIHJldHVybiB0aGlzLmNvcHlQb3NpdGlvbihhKX0sZmxhdHRlblRvQXJyYXlPZmZzZXQ6ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuZmxhdHRlblRvQXJyYXlPZmZzZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnRvQXJyYXkoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy50b0FycmF5KGEsYil9LGdldFBvc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKCl7dm9pZCAwPT09YSYmKGE9bmV3IHApO2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5nZXRQb3NpdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbWF0cml4ICkgaW5zdGVhZC5cIik7cmV0dXJuIGEuc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLDMpfX0oKSxzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKS5cIik7XG4gICAgcmV0dXJuIHRoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oYSl9LG11bHRpcGx5VG9BcnJheTpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVRvQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sbXVsdGlwbHlWZWN0b3IzOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC5cIik7cmV0dXJuIGEuYXBwbHlNYXRyaXg0KHRoaXMpfSxtdWx0aXBseVZlY3RvcjQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLlwiKTtyZXR1cm4gYS5hcHBseU1hdHJpeDQodGhpcyl9LG11bHRpcGx5VmVjdG9yM0FycmF5OmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxcbiAgICByb3RhdGVBeGlzOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLlwiKTthLnRyYW5zZm9ybURpcmVjdGlvbih0aGlzKX0sY3Jvc3NWZWN0b3I6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmNyb3NzVmVjdG9yKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuXCIpO3JldHVybiBhLmFwcGx5TWF0cml4NCh0aGlzKX0sdHJhbnNsYXRlOmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC50cmFuc2xhdGUoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0scm90YXRlWDpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlWCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxyb3RhdGVZOmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVZKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LFxuICAgIHJvdGF0ZVo6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4NDogLnJvdGF0ZVooKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0scm90YXRlQnlBeGlzOmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVCeUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sYXBwbHlUb0J1ZmZlcjpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuYXBwbHlUb0J1ZmZlcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZShhKX0sYXBwbHlUb1ZlY3RvcjNBcnJheTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAuYXBwbHlUb1ZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxtYWtlRnJ1c3R1bTpmdW5jdGlvbihhLGIsYyxkLGUsZil7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm1ha2VGcnVzdHVtKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIHRoaXMubWFrZVBlcnNwZWN0aXZlKGEsYixkLGMsZSxmKX19KTtFYS5wcm90b3R5cGUuaXNJbnRlcnNlY3Rpb25MaW5lPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlBsYW5lOiAuaXNJbnRlcnNlY3Rpb25MaW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0xpbmUoKS5cIik7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0xpbmUoYSl9O2hhLnByb3RvdHlwZS5tdWx0aXBseVZlY3RvcjM9ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBpcyBub3cgdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbiApIGluc3RlYWQuXCIpO3JldHVybiBhLmFwcGx5UXVhdGVybmlvbih0aGlzKX07T2JqZWN0LmFzc2lnbihzYi5wcm90b3R5cGUse2lzSW50ZXJzZWN0aW9uQm94OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLlwiKTtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KGEpfSxpc0ludGVyc2VjdGlvblBsYW5lOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uUGxhbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzUGxhbmUoKS5cIik7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1BsYW5lKGEpfSxpc0ludGVyc2VjdGlvblNwaGVyZTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS5cIik7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZShhKX19KTtPYmplY3QuYXNzaWduKGpiLnByb3RvdHlwZSx7ZXh0cmFjdEFsbFBvaW50czpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5TaGFwZTogLmV4dHJhY3RBbGxQb2ludHMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmV4dHJhY3RQb2ludHMoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy5leHRyYWN0UG9pbnRzKGEpfSxcbiAgICBleHRydWRlOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlNoYXBlOiAuZXh0cnVkZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFeHRydWRlR2VvbWV0cnkoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IGliKHRoaXMsYSl9LG1ha2VHZW9tZXRyeTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5TaGFwZTogLm1ha2VHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBTaGFwZUdlb21ldHJ5KCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyB4Yih0aGlzLGEpfX0pO09iamVjdC5hc3NpZ24oRC5wcm90b3R5cGUse2Zyb21BdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjI6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLlwiKTtyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKGEsYixjKX0sZGlzdGFuY2VUb01hbmhhdHRhbjpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IyOiAuZGlzdGFuY2VUb01hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkRpc3RhbmNlVG8oKS5cIik7XG4gICAgcmV0dXJuIHRoaXMubWFuaGF0dGFuRGlzdGFuY2VUbyhhKX0sbGVuZ3RoTWFuaGF0dGFuOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMjogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLlwiKTtyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKX19KTtPYmplY3QuYXNzaWduKHAucHJvdG90eXBlLHtzZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgaW5zdGVhZC5cIil9LHNldEV1bGVyRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVF1YXRlcm5pb24oKSBpbnN0ZWFkLlwiKX0sXG4gICAgZ2V0UG9zaXRpb25Gcm9tTWF0cml4OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5nZXRQb3NpdGlvbkZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4UG9zaXRpb24oKS5cIik7cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGEpfSxnZXRTY2FsZUZyb21NYXRyaXg6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmdldFNjYWxlRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhTY2FsZSgpLlwiKTtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUoYSl9LGdldENvbHVtbkZyb21NYXRyaXg6ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAuZ2V0Q29sdW1uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhDb2x1bW4oKS5cIik7cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbihiLFxuICAgIGEpfSxhcHBseVByb2plY3Rpb246ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmFwcGx5UHJvamVjdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuYXBwbHlNYXRyaXg0KCBtICkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KGEpfSxmcm9tQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS5cIik7cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZShhLGIsYyl9LGRpc3RhbmNlVG9NYW5oYXR0YW46ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuXCIpO3JldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oYSl9LGxlbmd0aE1hbmhhdHRhbjpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS5cIik7XG4gICAgcmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCl9fSk7T2JqZWN0LmFzc2lnbihhYS5wcm90b3R5cGUse2Zyb21BdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjQ6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLlwiKTtyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKGEsYixjKX0sbGVuZ3RoTWFuaGF0dGFuOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yNDogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLlwiKTtyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKX19KTtMLnByb3RvdHlwZS5jb21wdXRlVGFuZ2VudHM9ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5HZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfTtPYmplY3QuYXNzaWduKHgucHJvdG90eXBlLFxuICAgIHtnZXRDaGlsZEJ5TmFtZTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLmdldENoaWxkQnlOYW1lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0T2JqZWN0QnlOYW1lKCkuXCIpO3JldHVybiB0aGlzLmdldE9iamVjdEJ5TmFtZShhKX0scmVuZGVyRGVwdGg6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLnJlbmRlckRlcHRoIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAucmVuZGVyT3JkZXIsIGluc3RlYWQuXCIpfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhiLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHgucHJvdG90eXBlLHtldWxlck9yZGVyOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLmV1bGVyT3JkZXIgaXMgbm93IC5yb3RhdGlvbi5vcmRlci5cIik7XG4gICAgcmV0dXJuIHRoaXMucm90YXRpb24ub3JkZXJ9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLmV1bGVyT3JkZXIgaXMgbm93IC5yb3RhdGlvbi5vcmRlci5cIik7dGhpcy5yb3RhdGlvbi5vcmRlcj1hfX0sdXNlUXVhdGVybmlvbjp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuXCIpfSxzZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC5cIil9fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKERjLnByb3RvdHlwZSx7b2JqZWN0czp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTE9EOiAub2JqZWN0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5sZXZlbHMuXCIpO1xuICAgIHJldHVybiB0aGlzLmxldmVsc319fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KEVjLnByb3RvdHlwZSxcInVzZVZlcnRleFRleHR1cmVcIix7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuU2tlbGV0b246IHVzZVZlcnRleFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHNldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlNrZWxldG9uOiB1c2VWZXJ0ZXhUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShDLnByb3RvdHlwZSxcIl9fYXJjTGVuZ3RoRGl2aXNpb25zXCIse2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkN1cnZlOiAuX19hcmNMZW5ndGhEaXZpc2lvbnMgaXMgbm93IC5hcmNMZW5ndGhEaXZpc2lvbnMuXCIpO3JldHVybiB0aGlzLmFyY0xlbmd0aERpdmlzaW9uc30sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkN1cnZlOiAuX19hcmNMZW5ndGhEaXZpc2lvbnMgaXMgbm93IC5hcmNMZW5ndGhEaXZpc2lvbnMuXCIpO1xuICAgIHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zPWF9fSk7YmEucHJvdG90eXBlLnNldExlbnM9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5zZXRMZW5zIGlzIGRlcHJlY2F0ZWQuIFVzZSAuc2V0Rm9jYWxMZW5ndGggYW5kIC5maWxtR2F1Z2UgZm9yIGEgcGhvdG9ncmFwaGljIHNldHVwLlwiKTt2b2lkIDAhPT1iJiYodGhpcy5maWxtR2F1Z2U9Yik7dGhpcy5zZXRGb2NhbExlbmd0aChhKX07T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZGEucHJvdG90eXBlLHtvbmx5U2hhZG93OntzZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLm9ubHlTaGFkb3cgaGFzIGJlZW4gcmVtb3ZlZC5cIil9fSxzaGFkb3dDYW1lcmFGb3Y6e3NldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUZvdiBpcyBub3cgLnNoYWRvdy5jYW1lcmEuZm92LlwiKTt0aGlzLnNoYWRvdy5jYW1lcmEuZm92PWF9fSxcbiAgICBzaGFkb3dDYW1lcmFMZWZ0OntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFMZWZ0IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5sZWZ0LlwiKTt0aGlzLnNoYWRvdy5jYW1lcmEubGVmdD1hfX0sc2hhZG93Q2FtZXJhUmlnaHQ6e3NldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVJpZ2h0IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5yaWdodC5cIik7dGhpcy5zaGFkb3cuY2FtZXJhLnJpZ2h0PWF9fSxzaGFkb3dDYW1lcmFUb3A6e3NldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVRvcCBpcyBub3cgLnNoYWRvdy5jYW1lcmEudG9wLlwiKTt0aGlzLnNoYWRvdy5jYW1lcmEudG9wPWF9fSxzaGFkb3dDYW1lcmFCb3R0b206e3NldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUJvdHRvbSBpcyBub3cgLnNoYWRvdy5jYW1lcmEuYm90dG9tLlwiKTtcbiAgICB0aGlzLnNoYWRvdy5jYW1lcmEuYm90dG9tPWF9fSxzaGFkb3dDYW1lcmFOZWFyOntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFOZWFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5uZWFyLlwiKTt0aGlzLnNoYWRvdy5jYW1lcmEubmVhcj1hfX0sc2hhZG93Q2FtZXJhRmFyOntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGYXIgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZhci5cIik7dGhpcy5zaGFkb3cuY2FtZXJhLmZhcj1hfX0sc2hhZG93Q2FtZXJhVmlzaWJsZTp7c2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFWaXNpYmxlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKCBsaWdodC5zaGFkb3cuY2FtZXJhICkgaW5zdGVhZC5cIil9fSxzaGFkb3dCaWFzOntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dCaWFzIGlzIG5vdyAuc2hhZG93LmJpYXMuXCIpO1xuICAgIHRoaXMuc2hhZG93LmJpYXM9YX19LHNoYWRvd0RhcmtuZXNzOntzZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLnNoYWRvd0RhcmtuZXNzIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX0sc2hhZG93TWFwV2lkdGg6e3NldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLnNoYWRvd01hcFdpZHRoIGlzIG5vdyAuc2hhZG93Lm1hcFNpemUud2lkdGguXCIpO3RoaXMuc2hhZG93Lm1hcFNpemUud2lkdGg9YX19LHNoYWRvd01hcEhlaWdodDp7c2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpZ2h0OiAuc2hhZG93TWFwSGVpZ2h0IGlzIG5vdyAuc2hhZG93Lm1hcFNpemUuaGVpZ2h0LlwiKTt0aGlzLnNoYWRvdy5tYXBTaXplLmhlaWdodD1hfX19KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhNLnByb3RvdHlwZSx7bGVuZ3RoOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IC5sZW5ndGggaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5jb3VudCBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gdGhpcy5hcnJheS5sZW5ndGh9fX0pO09iamVjdC5hc3NpZ24oRS5wcm90b3R5cGUse2FkZEluZGV4OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkSW5kZXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRJbmRleCgpLlwiKTt0aGlzLnNldEluZGV4KGEpfSxhZGREcmF3Q2FsbDpmdW5jdGlvbihhLGIsYyl7dm9pZCAwIT09YyYmY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGREcmF3Q2FsbCgpIG5vIGxvbmdlciBzdXBwb3J0cyBpbmRleE9mZnNldC5cIik7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGREcmF3Q2FsbCgpIGlzIG5vdyAuYWRkR3JvdXAoKS5cIik7dGhpcy5hZGRHcm91cChhLGIpfSxjbGVhckRyYXdDYWxsczpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY2xlYXJEcmF3Q2FsbHMoKSBpcyBub3cgLmNsZWFyR3JvdXBzKCkuXCIpO1xuICAgIHRoaXMuY2xlYXJHcm91cHMoKX0sY29tcHV0ZVRhbmdlbnRzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jb21wdXRlVGFuZ2VudHMoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sY29tcHV0ZU9mZnNldHM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVPZmZzZXRzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRS5wcm90b3R5cGUse2RyYXdjYWxsczp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuZHJhd2NhbGxzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy5cIik7cmV0dXJuIHRoaXMuZ3JvdXBzfX0sb2Zmc2V0czp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5vZmZzZXRzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy5cIik7cmV0dXJuIHRoaXMuZ3JvdXBzfX19KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhRZC5wcm90b3R5cGUse2R5bmFtaWM6e3NldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlVuaWZvcm06IC5keW5hbWljIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBvYmplY3Qub25CZWZvcmVSZW5kZXIoKSBpbnN0ZWFkLlwiKX19LG9uVXBkYXRlOnt2YWx1ZTpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlVuaWZvcm06IC5vblVwZGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBvYmplY3Qub25CZWZvcmVSZW5kZXIoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpc319fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUC5wcm90b3R5cGUse3dyYXBBcm91bmQ6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdGVyaWFsOiAud3JhcEFyb3VuZCBoYXMgYmVlbiByZW1vdmVkLlwiKX0sc2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0ZXJpYWw6IC53cmFwQXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX0sXG4gICAgd3JhcFJHQjp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0ZXJpYWw6IC53cmFwUkdCIGhhcyBiZWVuIHJlbW92ZWQuXCIpO3JldHVybiBuZXcgSH19LHNoYWRpbmc6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5cIit0aGlzLnR5cGUrXCI6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC5cIil9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5cIit0aGlzLnR5cGUrXCI6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC5cIik7dGhpcy5mbGF0U2hhZGluZz0xPT09YX19fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTWEucHJvdG90eXBlLHttZXRhbDp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw6IC5tZXRhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuITF9LHNldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsOiAubWV0YWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsIGluc3RlYWRcIil9fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEZhLnByb3RvdHlwZSx7ZGVyaXZhdGl2ZXM6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlNoYWRlck1hdGVyaWFsOiAuZGVyaXZhdGl2ZXMgaGFzIGJlZW4gbW92ZWQgdG8gLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMuXCIpO3JldHVybiB0aGlzLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXN9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS4gU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy5cIik7dGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzPWF9fX0pO09iamVjdC5hc3NpZ24oY2UucHJvdG90eXBlLFxuICAgIHtnZXRDdXJyZW50UmVuZGVyVGFyZ2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldEN1cnJlbnRSZW5kZXJUYXJnZXQoKSBpcyBub3cgLmdldFJlbmRlclRhcmdldCgpLlwiKTtyZXR1cm4gdGhpcy5nZXRSZW5kZXJUYXJnZXQoKX0sZ2V0TWF4QW5pc290cm9weTpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRNYXhBbmlzb3Ryb3B5KCkgaXMgbm93IC5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpLlwiKTtyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpfSxnZXRQcmVjaXNpb246ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0UHJlY2lzaW9uKCkgaXMgbm93IC5jYXBhYmlsaXRpZXMucHJlY2lzaW9uLlwiKTtyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMucHJlY2lzaW9ufSxyZXNldEdMU3RhdGU6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAucmVzZXRHTFN0YXRlKCkgaXMgbm93IC5zdGF0ZS5yZXNldCgpLlwiKTtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5yZXNldCgpfSxzdXBwb3J0c0Zsb2F0VGV4dHVyZXM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApLlwiKTtyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpfSxzdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKS5cIik7cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpfSxzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycgKS5cIik7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoXCJPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcIil9LHN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApLlwiKTtyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpfSxzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKS5cIik7cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIil9LFxuICAgIHN1cHBvcnRzQmxlbmRNaW5NYXg6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNCbGVuZE1pbk1heCgpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoICdFWFRfYmxlbmRfbWlubWF4JyApLlwiKTtyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldChcIkVYVF9ibGVuZF9taW5tYXhcIil9LHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcygpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLlwiKTtyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMudmVydGV4VGV4dHVyZXN9LHN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICkuXCIpO1xuICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKX0sZW5hYmxlU2Npc3NvclRlc3Q6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmVuYWJsZVNjaXNzb3JUZXN0KCkgaXMgbm93IC5zZXRTY2lzc29yVGVzdCgpLlwiKTt0aGlzLnNldFNjaXNzb3JUZXN0KGEpfSxpbml0TWF0ZXJpYWw6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuaW5pdE1hdGVyaWFsKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LGFkZFByZVBsdWdpbjpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQcmVQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sYWRkUG9zdFBsdWdpbjpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQb3N0UGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHVwZGF0ZVNoYWRvd01hcDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC51cGRhdGVTaGFkb3dNYXAoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX19KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjZS5wcm90b3R5cGUse3NoYWRvd01hcEVuYWJsZWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYWRvd01hcC5lbmFibGVkfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcEVuYWJsZWQgaXMgbm93IC5zaGFkb3dNYXAuZW5hYmxlZC5cIik7dGhpcy5zaGFkb3dNYXAuZW5hYmxlZD1hfX0sc2hhZG93TWFwVHlwZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2hhZG93TWFwLnR5cGV9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwVHlwZSBpcyBub3cgLnNoYWRvd01hcC50eXBlLlwiKTt0aGlzLnNoYWRvd01hcC50eXBlPWF9fSxzaGFkb3dNYXBDdWxsRmFjZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2hhZG93TWFwLmN1bGxGYWNlfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcEN1bGxGYWNlIGlzIG5vdyAuc2hhZG93TWFwLmN1bGxGYWNlLlwiKTtcbiAgICB0aGlzLnNoYWRvd01hcC5jdWxsRmFjZT1hfX19KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhVZS5wcm90b3R5cGUse2N1bGxGYWNlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZW5kZXJSZXZlcnNlU2lkZWQ/MjoxfSxzZXQ6ZnVuY3Rpb24oYSl7YT0xIT09YTtjb25zb2xlLndhcm4oXCJXZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLmN1bGxGYWNlIGlzIGRlcHJlY2F0ZWQuIFNldCAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCB0byBcIithK1wiLlwiKTt0aGlzLnJlbmRlclJldmVyc2VTaWRlZD1hfX19KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhrYi5wcm90b3R5cGUse3dyYXBTOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy5cIik7cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwU30sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFMgaXMgbm93IC50ZXh0dXJlLndyYXBTLlwiKTtcbiAgICB0aGlzLnRleHR1cmUud3JhcFM9YX19LHdyYXBUOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC5cIik7cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwVH0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULlwiKTt0aGlzLnRleHR1cmUud3JhcFQ9YX19LG1hZ0ZpbHRlcjp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci5cIik7cmV0dXJuIHRoaXMudGV4dHVyZS5tYWdGaWx0ZXJ9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLlwiKTt0aGlzLnRleHR1cmUubWFnRmlsdGVyPVxuICAgIGF9fSxtaW5GaWx0ZXI6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuXCIpO3JldHVybiB0aGlzLnRleHR1cmUubWluRmlsdGVyfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5taW5GaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1pbkZpbHRlci5cIik7dGhpcy50ZXh0dXJlLm1pbkZpbHRlcj1hfX0sYW5pc290cm9weTp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LlwiKTtyZXR1cm4gdGhpcy50ZXh0dXJlLmFuaXNvdHJvcHl9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuXCIpO3RoaXMudGV4dHVyZS5hbmlzb3Ryb3B5PVxuICAgIGF9fSxvZmZzZXQ6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuXCIpO3JldHVybiB0aGlzLnRleHR1cmUub2Zmc2V0fSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC5cIik7dGhpcy50ZXh0dXJlLm9mZnNldD1hfX0scmVwZWF0OntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LlwiKTtyZXR1cm4gdGhpcy50ZXh0dXJlLnJlcGVhdH0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAucmVwZWF0IGlzIG5vdyAudGV4dHVyZS5yZXBlYXQuXCIpO3RoaXMudGV4dHVyZS5yZXBlYXQ9YX19LGZvcm1hdDp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC5cIik7XG4gICAgcmV0dXJuIHRoaXMudGV4dHVyZS5mb3JtYXR9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LlwiKTt0aGlzLnRleHR1cmUuZm9ybWF0PWF9fSx0eXBlOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuXCIpO3JldHVybiB0aGlzLnRleHR1cmUudHlwZX0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS5cIik7dGhpcy50ZXh0dXJlLnR5cGU9YX19LGdlbmVyYXRlTWlwbWFwczp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy5cIik7cmV0dXJuIHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHN9LFxuICAgIHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmdlbmVyYXRlTWlwbWFwcyBpcyBub3cgLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzLlwiKTt0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzPWF9fX0pO09iamVjdC5hc3NpZ24oYmUucHJvdG90eXBlLHtnZXRTdGFuZGluZ01hdHJpeDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYlZSTWFuYWdlcjogLmdldFN0YW5kaW5nTWF0cml4KCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYmUucHJvdG90eXBlLHtzdGFuZGluZzp7c2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViVlJNYW5hZ2VyOiAuc3RhbmRpbmcgaGFzIGJlZW4gcmVtb3ZlZC5cIil9fX0pO2xjLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkF1ZGlvOiAubG9hZCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQXVkaW9Mb2FkZXIgaW5zdGVhZC5cIik7XG4gICAgdmFyIGI9dGhpczsobmV3IHFlKS5sb2FkKGEsZnVuY3Rpb24oYSl7Yi5zZXRCdWZmZXIoYSl9KTtyZXR1cm4gdGhpc307dWUucHJvdG90eXBlLmdldERhdGE9ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpb0FuYWx5c2VyOiAuZ2V0RGF0YSgpIGlzIG5vdyAuZ2V0RnJlcXVlbmN5RGF0YSgpLlwiKTtyZXR1cm4gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCl9O2ZkLnByb3RvdHlwZS51cGRhdGVDdWJlTWFwPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuQ3ViZUNhbWVyYTogLnVwZGF0ZUN1YmVNYXAoKSBpcyBub3cgLnVwZGF0ZSgpLlwiKTtyZXR1cm4gdGhpcy51cGRhdGUoYSxiKX07bC5XZWJHTFJlbmRlclRhcmdldEN1YmU9SmI7bC5XZWJHTFJlbmRlclRhcmdldD1rYjtsLldlYkdMUmVuZGVyZXI9Y2U7bC5TaGFkZXJMaWI9dGI7bC5Vbmlmb3Jtc0xpYj1LO2wuVW5pZm9ybXNVdGlscz1HYTtsLlNoYWRlckNodW5rPVI7bC5Gb2dFeHAyPVBiO2wuRm9nPVFiO1xuICAgIGwuU2NlbmU9dmQ7bC5MZW5zRmxhcmU9ZGU7bC5TcHJpdGU9Q2M7bC5MT0Q9RGM7bC5Ta2lubmVkTWVzaD14ZDtsLlNrZWxldG9uPUVjO2wuQm9uZT13ZDtsLk1lc2g9cmE7bC5MaW5lU2VnbWVudHM9WDtsLkxpbmVMb29wPXlkO2wuTGluZT1zYTtsLlBvaW50cz1SYjtsLkdyb3VwPUZjO2wuVmlkZW9UZXh0dXJlPWVlO2wuRGF0YVRleHR1cmU9bGI7bC5Db21wcmVzc2VkVGV4dHVyZT1TYjtsLkN1YmVUZXh0dXJlPWRiO2wuQ2FudmFzVGV4dHVyZT10YztsLkRlcHRoVGV4dHVyZT1HYztsLlRleHR1cmU9VTtsLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyPWdmO2wuRGF0YVRleHR1cmVMb2FkZXI9aWU7bC5DdWJlVGV4dHVyZUxvYWRlcj1qZTtsLlRleHR1cmVMb2FkZXI9QWQ7bC5PYmplY3RMb2FkZXI9amY7bC5NYXRlcmlhbExvYWRlcj1QZDtsLkJ1ZmZlckdlb21ldHJ5TG9hZGVyPWxlO2wuRGVmYXVsdExvYWRpbmdNYW5hZ2VyPXhhO2wuTG9hZGluZ01hbmFnZXI9aGU7bC5KU09OTG9hZGVyPVxuICAgIG1lO2wuSW1hZ2VMb2FkZXI9YWQ7bC5JbWFnZUJpdG1hcExvYWRlcj1uZTtsLkZvbnRMb2FkZXI9a2Y7bC5GaWxlTG9hZGVyPU5hO2wuTG9hZGVyPWtjO2wuTG9hZGVyVXRpbHM9SGU7bC5DYWNoZT1JYjtsLkF1ZGlvTG9hZGVyPXFlO2wuU3BvdExpZ2h0U2hhZG93PUNkO2wuU3BvdExpZ2h0PURkO2wuUG9pbnRMaWdodD1FZDtsLlJlY3RBcmVhTGlnaHQ9SWQ7bC5IZW1pc3BoZXJlTGlnaHQ9QmQ7bC5EaXJlY3Rpb25hbExpZ2h0U2hhZG93PUZkO2wuRGlyZWN0aW9uYWxMaWdodD1HZDtsLkFtYmllbnRMaWdodD1IZDtsLkxpZ2h0U2hhZG93PUZiO2wuTGlnaHQ9ZGE7bC5TdGVyZW9DYW1lcmE9bGY7bC5QZXJzcGVjdGl2ZUNhbWVyYT1iYTtsLk9ydGhvZ3JhcGhpY0NhbWVyYT1MYjtsLkN1YmVDYW1lcmE9ZmQ7bC5BcnJheUNhbWVyYT11ZDtsLkNhbWVyYT1UYTtsLkF1ZGlvTGlzdGVuZXI9cmU7bC5Qb3NpdGlvbmFsQXVkaW89dGU7bC5BdWRpb0NvbnRleHQ9c2U7bC5BdWRpb0FuYWx5c2VyPVxuICAgIHVlO2wuQXVkaW89bGM7bC5WZWN0b3JLZXlmcmFtZVRyYWNrPWpjO2wuU3RyaW5nS2V5ZnJhbWVUcmFjaz1KZDtsLlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrPWRkO2wuTnVtYmVyS2V5ZnJhbWVUcmFjaz1pYztsLkNvbG9yS2V5ZnJhbWVUcmFjaz1NZDtsLkJvb2xlYW5LZXlmcmFtZVRyYWNrPUtkO2wuUHJvcGVydHlNaXhlcj12ZTtsLlByb3BlcnR5QmluZGluZz1xYTtsLktleWZyYW1lVHJhY2s9VDtsLkFuaW1hdGlvblV0aWxzPWdhO2wuQW5pbWF0aW9uT2JqZWN0R3JvdXA9bmY7bC5BbmltYXRpb25NaXhlcj13ZTtsLkFuaW1hdGlvbkNsaXA9Q2E7bC5Vbmlmb3JtPVFkO2wuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnk9eGU7bC5CdWZmZXJHZW9tZXRyeT1FO2wuR2VvbWV0cnk9TDtsLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlPXllO2wuSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI9emU7bC5JbnRlcmxlYXZlZEJ1ZmZlcj1tYztsLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZT1BZTtcbiAgICBsLkZhY2UzPVlhO2wuT2JqZWN0M0Q9eDtsLlJheWNhc3Rlcj1wZjtsLkxheWVycz1XZDtsLkV2ZW50RGlzcGF0Y2hlcj16YTtsLkNsb2NrPXJmO2wuUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50PUxkO2wuTGluZWFySW50ZXJwb2xhbnQ9ZWQ7bC5EaXNjcmV0ZUludGVycG9sYW50PU9kO2wuQ3ViaWNJbnRlcnBvbGFudD1OZDtsLkludGVycG9sYW50PXBhO2wuVHJpYW5nbGU9WmE7bC5NYXRoPVE7bC5TcGhlcmljYWw9c2Y7bC5DeWxpbmRyaWNhbD10ZjtsLlBsYW5lPUVhO2wuRnJ1c3R1bT1yZDtsLlNwaGVyZT1JYTtsLlJheT1zYjtsLk1hdHJpeDQ9TztsLk1hdHJpeDM9bWE7bC5Cb3gzPVhhO2wuQm94Mj1vZDtsLkxpbmUzPU5iO2wuRXVsZXI9Z2I7bC5WZWN0b3I0PWFhO2wuVmVjdG9yMz1wO2wuVmVjdG9yMj1EO2wuUXVhdGVybmlvbj1oYTtsLkNvbG9yPUg7bC5JbW1lZGlhdGVSZW5kZXJPYmplY3Q9Z2Q7bC5WZXJ0ZXhOb3JtYWxzSGVscGVyPWhkO2wuU3BvdExpZ2h0SGVscGVyPVxuICAgIG5jO2wuU2tlbGV0b25IZWxwZXI9b2M7bC5Qb2ludExpZ2h0SGVscGVyPXBjO2wuUmVjdEFyZWFMaWdodEhlbHBlcj1xYztsLkhlbWlzcGhlcmVMaWdodEhlbHBlcj1yYztsLkdyaWRIZWxwZXI9aWQ7bC5Qb2xhckdyaWRIZWxwZXI9UmQ7bC5GYWNlTm9ybWFsc0hlbHBlcj1qZDtsLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXI9c2M7bC5DYW1lcmFIZWxwZXI9a2Q7bC5Cb3hIZWxwZXI9R2I7bC5Cb3gzSGVscGVyPWxkO2wuUGxhbmVIZWxwZXI9bWQ7bC5BcnJvd0hlbHBlcj1IYjtsLkF4ZXNIZWxwZXI9bmQ7bC5TaGFwZT1qYjtsLlBhdGg9U2E7bC5TaGFwZVBhdGg9b2U7bC5Gb250PXBlO2wuQ3VydmVQYXRoPWJiO2wuQ3VydmU9QztsLlNoYXBlVXRpbHM9JGE7bC5TY2VuZVV0aWxzPXtjcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPW5ldyBGYyxkPTAsZT1iLmxlbmd0aDtkPGU7ZCsrKWMuYWRkKG5ldyByYShhLGJbZF0pKTtyZXR1cm4gY30sZGV0YWNoOmZ1bmN0aW9uKGEsXG4gICAgYixjKXthLmFwcGx5TWF0cml4KGIubWF0cml4V29ybGQpO2IucmVtb3ZlKGEpO2MuYWRkKGEpfSxhdHRhY2g6ZnVuY3Rpb24oYSxiLGMpe2EuYXBwbHlNYXRyaXgoKG5ldyBPKS5nZXRJbnZlcnNlKGMubWF0cml4V29ybGQpKTtiLnJlbW92ZShhKTtjLmFkZChhKX19O2wuV2ViR0xVdGlscz1hZjtsLldpcmVmcmFtZUdlb21ldHJ5PVRiO2wuUGFyYW1ldHJpY0dlb21ldHJ5PUhjO2wuUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5PVViO2wuVGV0cmFoZWRyb25HZW9tZXRyeT1KYztsLlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnk9VmI7bC5PY3RhaGVkcm9uR2VvbWV0cnk9S2M7bC5PY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk9dWI7bC5JY29zYWhlZHJvbkdlb21ldHJ5PUxjO2wuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeT1XYjtsLkRvZGVjYWhlZHJvbkdlb21ldHJ5PU1jO2wuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk9WGI7bC5Qb2x5aGVkcm9uR2VvbWV0cnk9SWM7bC5Qb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnk9XG4gICAgamE7bC5UdWJlR2VvbWV0cnk9TmM7bC5UdWJlQnVmZmVyR2VvbWV0cnk9WWI7bC5Ub3J1c0tub3RHZW9tZXRyeT1PYztsLlRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5PVpiO2wuVG9ydXNHZW9tZXRyeT1QYztsLlRvcnVzQnVmZmVyR2VvbWV0cnk9JGI7bC5UZXh0R2VvbWV0cnk9VWM7bC5UZXh0QnVmZmVyR2VvbWV0cnk9YWM7bC5TcGhlcmVHZW9tZXRyeT1WYztsLlNwaGVyZUJ1ZmZlckdlb21ldHJ5PXdiO2wuUmluZ0dlb21ldHJ5PVdjO2wuUmluZ0J1ZmZlckdlb21ldHJ5PWJjO2wuUGxhbmVHZW9tZXRyeT1BYztsLlBsYW5lQnVmZmVyR2VvbWV0cnk9cmI7bC5MYXRoZUdlb21ldHJ5PVhjO2wuTGF0aGVCdWZmZXJHZW9tZXRyeT1jYztsLlNoYXBlR2VvbWV0cnk9eGI7bC5TaGFwZUJ1ZmZlckdlb21ldHJ5PXliO2wuRXh0cnVkZUdlb21ldHJ5PWliO2wuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5PUxhO2wuRWRnZXNHZW9tZXRyeT1kYztsLkNvbmVHZW9tZXRyeT1ZYztsLkNvbmVCdWZmZXJHZW9tZXRyeT1cbiAgICBaYztsLkN5bGluZGVyR2VvbWV0cnk9emI7bC5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5PWFiO2wuQ2lyY2xlR2VvbWV0cnk9JGM7bC5DaXJjbGVCdWZmZXJHZW9tZXRyeT1lYztsLkJveEdlb21ldHJ5PU1iO2wuQm94QnVmZmVyR2VvbWV0cnk9cWI7bC5TaGFkb3dNYXRlcmlhbD1mYztsLlNwcml0ZU1hdGVyaWFsPWhiO2wuUmF3U2hhZGVyTWF0ZXJpYWw9Z2M7bC5TaGFkZXJNYXRlcmlhbD1GYTtsLlBvaW50c01hdGVyaWFsPUthO2wuTWVzaFBoeXNpY2FsTWF0ZXJpYWw9QWI7bC5NZXNoU3RhbmRhcmRNYXRlcmlhbD1VYTtsLk1lc2hQaG9uZ01hdGVyaWFsPU1hO2wuTWVzaFRvb25NYXRlcmlhbD1CYjtsLk1lc2hOb3JtYWxNYXRlcmlhbD1DYjtsLk1lc2hMYW1iZXJ0TWF0ZXJpYWw9RGI7bC5NZXNoRGVwdGhNYXRlcmlhbD1lYjtsLk1lc2hEaXN0YW5jZU1hdGVyaWFsPWZiO2wuTWVzaEJhc2ljTWF0ZXJpYWw9QWE7bC5MaW5lRGFzaGVkTWF0ZXJpYWw9RWI7bC5MaW5lQmFzaWNNYXRlcmlhbD1cbiAgICBXO2wuTWF0ZXJpYWw9UDtsLkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGU9emM7bC5GbG9hdDMyQnVmZmVyQXR0cmlidXRlPUI7bC5VaW50MzJCdWZmZXJBdHRyaWJ1dGU9cGI7bC5JbnQzMkJ1ZmZlckF0dHJpYnV0ZT15YztsLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZT1vYjtsLkludDE2QnVmZmVyQXR0cmlidXRlPXhjO2wuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlPXdjO2wuVWludDhCdWZmZXJBdHRyaWJ1dGU9dmM7bC5JbnQ4QnVmZmVyQXR0cmlidXRlPXVjO2wuQnVmZmVyQXR0cmlidXRlPU07bC5BcmNDdXJ2ZT1oYztsLkNhdG11bGxSb21DdXJ2ZTM9Y2E7bC5DdWJpY0JlemllckN1cnZlPU9hO2wuQ3ViaWNCZXppZXJDdXJ2ZTM9VmE7bC5FbGxpcHNlQ3VydmU9QmE7bC5MaW5lQ3VydmU9eWE7bC5MaW5lQ3VydmUzPVBhO2wuUXVhZHJhdGljQmV6aWVyQ3VydmU9UWE7bC5RdWFkcmF0aWNCZXppZXJDdXJ2ZTM9V2E7bC5TcGxpbmVDdXJ2ZT1SYTtsLlJFVklTSU9OPVwiODlcIjtsLk1PVVNFPVxuICAgIHtMRUZUOjAsTUlERExFOjEsUklHSFQ6Mn07bC5DdWxsRmFjZU5vbmU9MDtsLkN1bGxGYWNlQmFjaz0xO2wuQ3VsbEZhY2VGcm9udD0yO2wuQ3VsbEZhY2VGcm9udEJhY2s9MztsLkZyb250RmFjZURpcmVjdGlvbkNXPTA7bC5Gcm9udEZhY2VEaXJlY3Rpb25DQ1c9MTtsLkJhc2ljU2hhZG93TWFwPTA7bC5QQ0ZTaGFkb3dNYXA9MTtsLlBDRlNvZnRTaGFkb3dNYXA9MjtsLkZyb250U2lkZT0wO2wuQmFja1NpZGU9MTtsLkRvdWJsZVNpZGU9MjtsLkZsYXRTaGFkaW5nPTE7bC5TbW9vdGhTaGFkaW5nPTI7bC5Ob0NvbG9ycz0wO2wuRmFjZUNvbG9ycz0xO2wuVmVydGV4Q29sb3JzPTI7bC5Ob0JsZW5kaW5nPTA7bC5Ob3JtYWxCbGVuZGluZz0xO2wuQWRkaXRpdmVCbGVuZGluZz0yO2wuU3VidHJhY3RpdmVCbGVuZGluZz0zO2wuTXVsdGlwbHlCbGVuZGluZz00O2wuQ3VzdG9tQmxlbmRpbmc9NTtsLkFkZEVxdWF0aW9uPTEwMDtsLlN1YnRyYWN0RXF1YXRpb249MTAxO2wuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb249XG4gICAgMTAyO2wuTWluRXF1YXRpb249MTAzO2wuTWF4RXF1YXRpb249MTA0O2wuWmVyb0ZhY3Rvcj0yMDA7bC5PbmVGYWN0b3I9MjAxO2wuU3JjQ29sb3JGYWN0b3I9MjAyO2wuT25lTWludXNTcmNDb2xvckZhY3Rvcj0yMDM7bC5TcmNBbHBoYUZhY3Rvcj0yMDQ7bC5PbmVNaW51c1NyY0FscGhhRmFjdG9yPTIwNTtsLkRzdEFscGhhRmFjdG9yPTIwNjtsLk9uZU1pbnVzRHN0QWxwaGFGYWN0b3I9MjA3O2wuRHN0Q29sb3JGYWN0b3I9MjA4O2wuT25lTWludXNEc3RDb2xvckZhY3Rvcj0yMDk7bC5TcmNBbHBoYVNhdHVyYXRlRmFjdG9yPTIxMDtsLk5ldmVyRGVwdGg9MDtsLkFsd2F5c0RlcHRoPTE7bC5MZXNzRGVwdGg9MjtsLkxlc3NFcXVhbERlcHRoPTM7bC5FcXVhbERlcHRoPTQ7bC5HcmVhdGVyRXF1YWxEZXB0aD01O2wuR3JlYXRlckRlcHRoPTY7bC5Ob3RFcXVhbERlcHRoPTc7bC5NdWx0aXBseU9wZXJhdGlvbj0wO2wuTWl4T3BlcmF0aW9uPTE7bC5BZGRPcGVyYXRpb249MjtsLk5vVG9uZU1hcHBpbmc9XG4gICAgMDtsLkxpbmVhclRvbmVNYXBwaW5nPTE7bC5SZWluaGFyZFRvbmVNYXBwaW5nPTI7bC5VbmNoYXJ0ZWQyVG9uZU1hcHBpbmc9MztsLkNpbmVvblRvbmVNYXBwaW5nPTQ7bC5VVk1hcHBpbmc9MzAwO2wuQ3ViZVJlZmxlY3Rpb25NYXBwaW5nPTMwMTtsLkN1YmVSZWZyYWN0aW9uTWFwcGluZz0zMDI7bC5FcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZz0zMDM7bC5FcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZz0zMDQ7bC5TcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZz0zMDU7bC5DdWJlVVZSZWZsZWN0aW9uTWFwcGluZz0zMDY7bC5DdWJlVVZSZWZyYWN0aW9uTWFwcGluZz0zMDc7bC5SZXBlYXRXcmFwcGluZz0xRTM7bC5DbGFtcFRvRWRnZVdyYXBwaW5nPTEwMDE7bC5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nPTEwMDI7bC5OZWFyZXN0RmlsdGVyPTEwMDM7bC5OZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcj0xMDA0O2wuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcj0xMDA1O1xuICAgIGwuTGluZWFyRmlsdGVyPTEwMDY7bC5MaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyPTEwMDc7bC5MaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI9MTAwODtsLlVuc2lnbmVkQnl0ZVR5cGU9MTAwOTtsLkJ5dGVUeXBlPTEwMTA7bC5TaG9ydFR5cGU9MTAxMTtsLlVuc2lnbmVkU2hvcnRUeXBlPTEwMTI7bC5JbnRUeXBlPTEwMTM7bC5VbnNpZ25lZEludFR5cGU9MTAxNDtsLkZsb2F0VHlwZT0xMDE1O2wuSGFsZkZsb2F0VHlwZT0xMDE2O2wuVW5zaWduZWRTaG9ydDQ0NDRUeXBlPTEwMTc7bC5VbnNpZ25lZFNob3J0NTU1MVR5cGU9MTAxODtsLlVuc2lnbmVkU2hvcnQ1NjVUeXBlPTEwMTk7bC5VbnNpZ25lZEludDI0OFR5cGU9MTAyMDtsLkFscGhhRm9ybWF0PTEwMjE7bC5SR0JGb3JtYXQ9MTAyMjtsLlJHQkFGb3JtYXQ9MTAyMztsLkx1bWluYW5jZUZvcm1hdD0xMDI0O2wuTHVtaW5hbmNlQWxwaGFGb3JtYXQ9MTAyNTtsLlJHQkVGb3JtYXQ9MTAyMztsLkRlcHRoRm9ybWF0PTEwMjY7bC5EZXB0aFN0ZW5jaWxGb3JtYXQ9XG4gICAgMTAyNztsLlJHQl9TM1RDX0RYVDFfRm9ybWF0PTIwMDE7bC5SR0JBX1MzVENfRFhUMV9Gb3JtYXQ9MjAwMjtsLlJHQkFfUzNUQ19EWFQzX0Zvcm1hdD0yMDAzO2wuUkdCQV9TM1RDX0RYVDVfRm9ybWF0PTIwMDQ7bC5SR0JfUFZSVENfNEJQUFYxX0Zvcm1hdD0yMTAwO2wuUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQ9MjEwMTtsLlJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdD0yMTAyO2wuUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0PTIxMDM7bC5SR0JfRVRDMV9Gb3JtYXQ9MjE1MTtsLkxvb3BPbmNlPTIyMDA7bC5Mb29wUmVwZWF0PTIyMDE7bC5Mb29wUGluZ1Bvbmc9MjIwMjtsLkludGVycG9sYXRlRGlzY3JldGU9MjMwMDtsLkludGVycG9sYXRlTGluZWFyPTIzMDE7bC5JbnRlcnBvbGF0ZVNtb290aD0yMzAyO2wuWmVyb0N1cnZhdHVyZUVuZGluZz0yNDAwO2wuWmVyb1Nsb3BlRW5kaW5nPTI0MDE7bC5XcmFwQXJvdW5kRW5kaW5nPTI0MDI7bC5UcmlhbmdsZXNEcmF3TW9kZT0wO2wuVHJpYW5nbGVTdHJpcERyYXdNb2RlPVxuICAgIDE7bC5UcmlhbmdsZUZhbkRyYXdNb2RlPTI7bC5MaW5lYXJFbmNvZGluZz0zRTM7bC5zUkdCRW5jb2Rpbmc9MzAwMTtsLkdhbW1hRW5jb2Rpbmc9MzAwNztsLlJHQkVFbmNvZGluZz0zMDAyO2wuTG9nTHV2RW5jb2Rpbmc9MzAwMztsLlJHQk03RW5jb2Rpbmc9MzAwNDtsLlJHQk0xNkVuY29kaW5nPTMwMDU7bC5SR0JERW5jb2Rpbmc9MzAwNjtsLkJhc2ljRGVwdGhQYWNraW5nPTMyMDA7bC5SR0JBRGVwdGhQYWNraW5nPTMyMDE7bC5DdWJlR2VvbWV0cnk9TWI7bC5GYWNlND1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXtjb25zb2xlLndhcm4oXCJUSFJFRS5GYWNlNCBoYXMgYmVlbiByZW1vdmVkLiBBIFRIUkVFLkZhY2UzIHdpbGwgYmUgY3JlYXRlZCBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFlhKGEsYixjLGUsZixnKX07bC5MaW5lU3RyaXA9MDtsLkxpbmVQaWVjZXM9MTtsLk1lc2hGYWNlTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWVzaEZhY2VNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIGF9O2wuTXVsdGlNYXRlcmlhbD1mdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1bXSk7Y29uc29sZS53YXJuKFwiVEhSRUUuTXVsdGlNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC5cIik7YS5pc011bHRpTWF0ZXJpYWw9ITA7YS5tYXRlcmlhbHM9YTthLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGEuc2xpY2UoKX07cmV0dXJuIGF9O2wuUG9pbnRDbG91ZD1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLlBvaW50Q2xvdWQgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHMuXCIpO3JldHVybiBuZXcgUmIoYSxiKX07bC5QYXJ0aWNsZT1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXJ0aWNsZSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlNwcml0ZS5cIik7cmV0dXJuIG5ldyBDYyhhKX07bC5QYXJ0aWNsZVN5c3RlbT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLlBhcnRpY2xlU3lzdGVtIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLlwiKTtcbiAgICByZXR1cm4gbmV3IFJiKGEsYil9O2wuUG9pbnRDbG91ZE1hdGVyaWFsPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50c01hdGVyaWFsLlwiKTtyZXR1cm4gbmV3IEthKGEpfTtsLlBhcnRpY2xlQmFzaWNNYXRlcmlhbD1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC5cIik7cmV0dXJuIG5ldyBLYShhKX07bC5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC5cIik7cmV0dXJuIG5ldyBLYShhKX07bC5WZXJ0ZXg9ZnVuY3Rpb24oYSxiLGMpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlcnRleCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuVmVjdG9yMyBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gbmV3IHAoYSxiLGMpfTtsLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5EeW5hbWljQnVmZmVyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCkuc2V0RHluYW1pYyggdHJ1ZSApIGluc3RlYWQuXCIpO3JldHVybihuZXcgTShhLGIpKS5zZXREeW5hbWljKCEwKX07bC5JbnQ4QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuSW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDhCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IHVjKGEsYil9O2wuVWludDhBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5VaW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyB2YyhhLFxuICAgIGIpfTtsLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuXCIpO3JldHVybiBuZXcgd2MoYSxiKX07bC5JbnQxNkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLkludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50MTZCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IHhjKGEsYil9O2wuVWludDE2QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuVWludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBvYihhLGIpfTtsLkludDMyQXR0cmlidXRlPVxuICAgIGZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuSW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuXCIpO3JldHVybiBuZXcgeWMoYSxiKX07bC5VaW50MzJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5VaW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IHBiKGEsYil9O2wuRmxvYXQzMkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLkZsb2F0MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBCKGEsYil9O2wuRmxvYXQ2NEF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLkZsb2F0NjRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDY0QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIG5ldyB6YyhhLGIpfTtsLkNsb3NlZFNwbGluZUN1cnZlMz12ZjtsLlNwbGluZUN1cnZlMz13ZjtsLlNwbGluZT1EZTtsLkF4aXNIZWxwZXI9ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQXhpc0hlbHBlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkF4ZXNIZWxwZXIuXCIpO3JldHVybiBuZXcgbmQoYSl9O2wuQm91bmRpbmdCb3hIZWxwZXI9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Cb3VuZGluZ0JveEhlbHBlciBoYXMgYmVlbiBkZXByZWNhdGVkLiBDcmVhdGluZyBhIFRIUkVFLkJveEhlbHBlciBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IEdiKGEsYil9O2wuRWRnZXNIZWxwZXI9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5FZGdlc0hlbHBlciBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRWRnZXNHZW9tZXRyeSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFgobmV3IGRjKGEuZ2VvbWV0cnkpLG5ldyBXKHtjb2xvcjp2b2lkIDAhPT1cbiAgICBiP2I6MTY3NzcyMTV9KSl9O2wuV2lyZWZyYW1lSGVscGVyPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuV2lyZWZyYW1lSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFgobmV3IFRiKGEuZ2VvbWV0cnkpLG5ldyBXKHtjb2xvcjp2b2lkIDAhPT1iP2I6MTY3NzcyMTV9KSl9O2wuWEhSTG9hZGVyPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlhIUkxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkZpbGVMb2FkZXIuXCIpO3JldHVybiBuZXcgTmEoYSl9O2wuQmluYXJ5VGV4dHVyZUxvYWRlcj1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5CaW5hcnlUZXh0dXJlTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRGF0YVRleHR1cmVMb2FkZXIuXCIpO3JldHVybiBuZXcgaWUoYSl9O2wuR2VvbWV0cnlVdGlscz17bWVyZ2U6ZnVuY3Rpb24oYSxiLGMpe2NvbnNvbGUud2FybihcIlRIUkVFLkdlb21ldHJ5VXRpbHM6IC5tZXJnZSgpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgaW5zdGVhZC5cIik7XG4gICAgaWYoYi5pc01lc2gpe2IubWF0cml4QXV0b1VwZGF0ZSYmYi51cGRhdGVNYXRyaXgoKTt2YXIgZD1iLm1hdHJpeDtiPWIuZ2VvbWV0cnl9YS5tZXJnZShiLGQsYyl9LGNlbnRlcjpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5HZW9tZXRyeVV0aWxzOiAuY2VudGVyKCkgaGFzIGJlZW4gbW92ZWQgdG8gR2VvbWV0cnkuIFVzZSBnZW9tZXRyeS5jZW50ZXIoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gYS5jZW50ZXIoKX19O2wuSW1hZ2VVdGlscz17Y3Jvc3NPcmlnaW46dm9pZCAwLGxvYWRUZXh0dXJlOmZ1bmN0aW9uKGEsYixjLGQpe2NvbnNvbGUud2FybihcIlRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLlRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLlwiKTt2YXIgZT1uZXcgQWQ7ZS5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTthPWUubG9hZChhLGMsdm9pZCAwLGQpO2ImJihhLm1hcHBpbmc9Yik7cmV0dXJuIGF9LFxuICAgIGxvYWRUZXh0dXJlQ3ViZTpmdW5jdGlvbihhLGIsYyxkKXtjb25zb2xlLndhcm4oXCJUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLlwiKTt2YXIgZT1uZXcgamU7ZS5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTthPWUubG9hZChhLGMsdm9pZCAwLGQpO2ImJihhLm1hcHBpbmc9Yik7cmV0dXJuIGF9LGxvYWRDb21wcmVzc2VkVGV4dHVyZTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuXCIpfSxsb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlOmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuXCIpfX07XG4gICAgbC5Qcm9qZWN0b3I9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuUHJvamVjdG9yIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy9yZW5kZXJlcnMvUHJvamVjdG9yLmpzLlwiKTt0aGlzLnByb2plY3RWZWN0b3I9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Qcm9qZWN0b3I6IC5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci5wcm9qZWN0KCkuXCIpO2EucHJvamVjdChiKX07dGhpcy51bnByb2plY3RWZWN0b3I9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Qcm9qZWN0b3I6IC51bnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnVucHJvamVjdCgpLlwiKTthLnVucHJvamVjdChiKX07dGhpcy5waWNraW5nUmF5PWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb2plY3RvcjogLnBpY2tpbmdSYXkoKSBpcyBub3cgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEoKS5cIil9fTtsLkNhbnZhc1JlbmRlcmVyPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkNhbnZhc1JlbmRlcmVyIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy9yZW5kZXJlcnMvQ2FudmFzUmVuZGVyZXIuanNcIik7XG4gICAgdGhpcy5kb21FbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcImNhbnZhc1wiKTt0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7fTt0aGlzLnJlbmRlcj1mdW5jdGlvbigpe307dGhpcy5zZXRDbGVhckNvbG9yPWZ1bmN0aW9uKCl7fTt0aGlzLnNldFNpemU9ZnVuY3Rpb24oKXt9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkobCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pOyIsIi8qKiBAbGljZW5zZSB6bGliLmpzIDIwMTIgLSBpbWF5YSBbIGh0dHBzOi8vZ2l0aHViLmNvbS9pbWF5YS96bGliLmpzIF0gVGhlIE1JVCBMaWNlbnNlICovKGZ1bmN0aW9uKCkgeyd1c2Ugc3RyaWN0Jzt2YXIgbD12b2lkIDAsYWE9dGhpcztmdW5jdGlvbiByKGMsZCl7dmFyIGE9Yy5zcGxpdChcIi5cIiksYj1hYTshKGFbMF1pbiBiKSYmYi5leGVjU2NyaXB0JiZiLmV4ZWNTY3JpcHQoXCJ2YXIgXCIrYVswXSk7Zm9yKHZhciBlO2EubGVuZ3RoJiYoZT1hLnNoaWZ0KCkpOykhYS5sZW5ndGgmJmQhPT1sP2JbZV09ZDpiPWJbZV0/YltlXTpiW2VdPXt9fTt2YXIgdD1cInVuZGVmaW5lZFwiIT09dHlwZW9mIFVpbnQ4QXJyYXkmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgVWludDMyQXJyYXkmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgRGF0YVZpZXc7ZnVuY3Rpb24gdihjKXt2YXIgZD1jLmxlbmd0aCxhPTAsYj1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksZSxmLGcsaCxrLG0sbixwLHMseDtmb3IocD0wO3A8ZDsrK3ApY1twXT5hJiYoYT1jW3BdKSxjW3BdPGImJihiPWNbcF0pO2U9MTw8YTtmPW5ldyAodD9VaW50MzJBcnJheTpBcnJheSkoZSk7Zz0xO2g9MDtmb3Ioaz0yO2c8PWE7KXtmb3IocD0wO3A8ZDsrK3ApaWYoY1twXT09PWcpe209MDtuPWg7Zm9yKHM9MDtzPGc7KytzKW09bTw8MXxuJjEsbj4+PTE7eD1nPDwxNnxwO2ZvcihzPW07czxlO3MrPWspZltzXT14OysraH0rK2c7aDw8PTE7azw8PTF9cmV0dXJuW2YsYSxiXX07ZnVuY3Rpb24gdyhjLGQpe3RoaXMuZz1bXTt0aGlzLmg9MzI3Njg7dGhpcy5kPXRoaXMuZj10aGlzLmE9dGhpcy5sPTA7dGhpcy5pbnB1dD10P25ldyBVaW50OEFycmF5KGMpOmM7dGhpcy5tPSExO3RoaXMuaT15O3RoaXMucj0hMTtpZihkfHwhKGQ9e30pKWQuaW5kZXgmJih0aGlzLmE9ZC5pbmRleCksZC5idWZmZXJTaXplJiYodGhpcy5oPWQuYnVmZmVyU2l6ZSksZC5idWZmZXJUeXBlJiYodGhpcy5pPWQuYnVmZmVyVHlwZSksZC5yZXNpemUmJih0aGlzLnI9ZC5yZXNpemUpO3N3aXRjaCh0aGlzLmkpe2Nhc2UgQTp0aGlzLmI9MzI3Njg7dGhpcy5jPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSgzMjc2OCt0aGlzLmgrMjU4KTticmVhaztjYXNlIHk6dGhpcy5iPTA7dGhpcy5jPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSh0aGlzLmgpO3RoaXMuZT10aGlzLno7dGhpcy5uPXRoaXMudjt0aGlzLmo9dGhpcy53O2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbnZhbGlkIGluZmxhdGUgbW9kZVwiKTtcbn19dmFyIEE9MCx5PTEsQj17dDpBLHM6eX07XG53LnByb3RvdHlwZS5rPWZ1bmN0aW9uKCl7Zm9yKDshdGhpcy5tOyl7dmFyIGM9Qyh0aGlzLDMpO2MmMSYmKHRoaXMubT0hMCk7Yz4+Pj0xO3N3aXRjaChjKXtjYXNlIDA6dmFyIGQ9dGhpcy5pbnB1dCxhPXRoaXMuYSxiPXRoaXMuYyxlPXRoaXMuYixmPWQubGVuZ3RoLGc9bCxoPWwsaz1iLmxlbmd0aCxtPWw7dGhpcy5kPXRoaXMuZj0wO2lmKGErMT49Zil0aHJvdyBFcnJvcihcImludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogTEVOXCIpO2c9ZFthKytdfGRbYSsrXTw8ODtpZihhKzE+PWYpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHVuY29tcHJlc3NlZCBibG9jayBoZWFkZXI6IE5MRU5cIik7aD1kW2ErK118ZFthKytdPDw4O2lmKGc9PT1+aCl0aHJvdyBFcnJvcihcImludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogbGVuZ3RoIHZlcmlmeVwiKTtpZihhK2c+ZC5sZW5ndGgpdGhyb3cgRXJyb3IoXCJpbnB1dCBidWZmZXIgaXMgYnJva2VuXCIpO3N3aXRjaCh0aGlzLmkpe2Nhc2UgQTpmb3IoO2UrXG5nPmIubGVuZ3RoOyl7bT1rLWU7Zy09bTtpZih0KWIuc2V0KGQuc3ViYXJyYXkoYSxhK20pLGUpLGUrPW0sYSs9bTtlbHNlIGZvcig7bS0tOyliW2UrK109ZFthKytdO3RoaXMuYj1lO2I9dGhpcy5lKCk7ZT10aGlzLmJ9YnJlYWs7Y2FzZSB5OmZvcig7ZStnPmIubGVuZ3RoOyliPXRoaXMuZSh7cDoyfSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImludmFsaWQgaW5mbGF0ZSBtb2RlXCIpO31pZih0KWIuc2V0KGQuc3ViYXJyYXkoYSxhK2cpLGUpLGUrPWcsYSs9ZztlbHNlIGZvcig7Zy0tOyliW2UrK109ZFthKytdO3RoaXMuYT1hO3RoaXMuYj1lO3RoaXMuYz1iO2JyZWFrO2Nhc2UgMTp0aGlzLmooYmEsY2EpO2JyZWFrO2Nhc2UgMjpmb3IodmFyIG49Qyh0aGlzLDUpKzI1NyxwPUModGhpcyw1KSsxLHM9Qyh0aGlzLDQpKzQseD1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkoRC5sZW5ndGgpLFM9bCxUPWwsVT1sLHU9bCxNPWwsRj1sLHo9bCxxPWwsVj1sLHE9MDtxPHM7KytxKXhbRFtxXV09XG5DKHRoaXMsMyk7aWYoIXQpe3E9cztmb3Iocz14Lmxlbmd0aDtxPHM7KytxKXhbRFtxXV09MH1TPXYoeCk7dT1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkobitwKTtxPTA7Zm9yKFY9bitwO3E8Vjspc3dpdGNoKE09RSh0aGlzLFMpLE0pe2Nhc2UgMTY6Zm9yKHo9MytDKHRoaXMsMik7ei0tOyl1W3ErK109RjticmVhaztjYXNlIDE3OmZvcih6PTMrQyh0aGlzLDMpO3otLTspdVtxKytdPTA7Rj0wO2JyZWFrO2Nhc2UgMTg6Zm9yKHo9MTErQyh0aGlzLDcpO3otLTspdVtxKytdPTA7Rj0wO2JyZWFrO2RlZmF1bHQ6Rj11W3ErK109TX1UPXQ/dih1LnN1YmFycmF5KDAsbikpOnYodS5zbGljZSgwLG4pKTtVPXQ/dih1LnN1YmFycmF5KG4pKTp2KHUuc2xpY2UobikpO3RoaXMuaihULFUpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJ1bmtub3duIEJUWVBFOiBcIitjKTt9fXJldHVybiB0aGlzLm4oKX07XG52YXIgRz1bMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0sRD10P25ldyBVaW50MTZBcnJheShHKTpHLEg9WzMsNCw1LDYsNyw4LDksMTAsMTEsMTMsMTUsMTcsMTksMjMsMjcsMzEsMzUsNDMsNTEsNTksNjcsODMsOTksMTE1LDEzMSwxNjMsMTk1LDIyNywyNTgsMjU4LDI1OF0sST10P25ldyBVaW50MTZBcnJheShIKTpILEo9WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMCwwLDBdLEs9dD9uZXcgVWludDhBcnJheShKKTpKLEw9WzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3N10sZGE9dD9uZXcgVWludDE2QXJyYXkoTCk6TCxlYT1bMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMixcbjEzLDEzXSxOPXQ/bmV3IFVpbnQ4QXJyYXkoZWEpOmVhLE89bmV3ICh0P1VpbnQ4QXJyYXk6QXJyYXkpKDI4OCksUCxmYTtQPTA7Zm9yKGZhPU8ubGVuZ3RoO1A8ZmE7KytQKU9bUF09MTQzPj1QPzg6MjU1Pj1QPzk6Mjc5Pj1QPzc6ODt2YXIgYmE9dihPKSxRPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSgzMCksUixnYTtSPTA7Zm9yKGdhPVEubGVuZ3RoO1I8Z2E7KytSKVFbUl09NTt2YXIgY2E9dihRKTtmdW5jdGlvbiBDKGMsZCl7Zm9yKHZhciBhPWMuZixiPWMuZCxlPWMuaW5wdXQsZj1jLmEsZz1lLmxlbmd0aCxoO2I8ZDspe2lmKGY+PWcpdGhyb3cgRXJyb3IoXCJpbnB1dCBidWZmZXIgaXMgYnJva2VuXCIpO2F8PWVbZisrXTw8YjtiKz04fWg9YSYoMTw8ZCktMTtjLmY9YT4+PmQ7Yy5kPWItZDtjLmE9ZjtyZXR1cm4gaH1cbmZ1bmN0aW9uIEUoYyxkKXtmb3IodmFyIGE9Yy5mLGI9Yy5kLGU9Yy5pbnB1dCxmPWMuYSxnPWUubGVuZ3RoLGg9ZFswXSxrPWRbMV0sbSxuO2I8ayYmIShmPj1nKTspYXw9ZVtmKytdPDxiLGIrPTg7bT1oW2EmKDE8PGspLTFdO249bT4+PjE2O2lmKG4+Yil0aHJvdyBFcnJvcihcImludmFsaWQgY29kZSBsZW5ndGg6IFwiK24pO2MuZj1hPj5uO2MuZD1iLW47Yy5hPWY7cmV0dXJuIG0mNjU1MzV9XG53LnByb3RvdHlwZS5qPWZ1bmN0aW9uKGMsZCl7dmFyIGE9dGhpcy5jLGI9dGhpcy5iO3RoaXMubz1jO2Zvcih2YXIgZT1hLmxlbmd0aC0yNTgsZixnLGgsazsyNTYhPT0oZj1FKHRoaXMsYykpOylpZigyNTY+ZiliPj1lJiYodGhpcy5iPWIsYT10aGlzLmUoKSxiPXRoaXMuYiksYVtiKytdPWY7ZWxzZXtnPWYtMjU3O2s9SVtnXTswPEtbZ10mJihrKz1DKHRoaXMsS1tnXSkpO2Y9RSh0aGlzLGQpO2g9ZGFbZl07MDxOW2ZdJiYoaCs9Qyh0aGlzLE5bZl0pKTtiPj1lJiYodGhpcy5iPWIsYT10aGlzLmUoKSxiPXRoaXMuYik7Zm9yKDtrLS07KWFbYl09YVtiKystaF19Zm9yKDs4PD10aGlzLmQ7KXRoaXMuZC09OCx0aGlzLmEtLTt0aGlzLmI9Yn07XG53LnByb3RvdHlwZS53PWZ1bmN0aW9uKGMsZCl7dmFyIGE9dGhpcy5jLGI9dGhpcy5iO3RoaXMubz1jO2Zvcih2YXIgZT1hLmxlbmd0aCxmLGcsaCxrOzI1NiE9PShmPUUodGhpcyxjKSk7KWlmKDI1Nj5mKWI+PWUmJihhPXRoaXMuZSgpLGU9YS5sZW5ndGgpLGFbYisrXT1mO2Vsc2V7Zz1mLTI1NztrPUlbZ107MDxLW2ddJiYoays9Qyh0aGlzLEtbZ10pKTtmPUUodGhpcyxkKTtoPWRhW2ZdOzA8TltmXSYmKGgrPUModGhpcyxOW2ZdKSk7YitrPmUmJihhPXRoaXMuZSgpLGU9YS5sZW5ndGgpO2Zvcig7ay0tOylhW2JdPWFbYisrLWhdfWZvcig7ODw9dGhpcy5kOyl0aGlzLmQtPTgsdGhpcy5hLS07dGhpcy5iPWJ9O1xudy5wcm90b3R5cGUuZT1mdW5jdGlvbigpe3ZhciBjPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSh0aGlzLmItMzI3NjgpLGQ9dGhpcy5iLTMyNzY4LGEsYixlPXRoaXMuYztpZih0KWMuc2V0KGUuc3ViYXJyYXkoMzI3NjgsYy5sZW5ndGgpKTtlbHNle2E9MDtmb3IoYj1jLmxlbmd0aDthPGI7KythKWNbYV09ZVthKzMyNzY4XX10aGlzLmcucHVzaChjKTt0aGlzLmwrPWMubGVuZ3RoO2lmKHQpZS5zZXQoZS5zdWJhcnJheShkLGQrMzI3NjgpKTtlbHNlIGZvcihhPTA7MzI3Njg+YTsrK2EpZVthXT1lW2QrYV07dGhpcy5iPTMyNzY4O3JldHVybiBlfTtcbncucHJvdG90eXBlLno9ZnVuY3Rpb24oYyl7dmFyIGQsYT10aGlzLmlucHV0Lmxlbmd0aC90aGlzLmErMXwwLGIsZSxmLGc9dGhpcy5pbnB1dCxoPXRoaXMuYztjJiYoXCJudW1iZXJcIj09PXR5cGVvZiBjLnAmJihhPWMucCksXCJudW1iZXJcIj09PXR5cGVvZiBjLnUmJihhKz1jLnUpKTsyPmE/KGI9KGcubGVuZ3RoLXRoaXMuYSkvdGhpcy5vWzJdLGY9MjU4KihiLzIpfDAsZT1mPGgubGVuZ3RoP2gubGVuZ3RoK2Y6aC5sZW5ndGg8PDEpOmU9aC5sZW5ndGgqYTt0PyhkPW5ldyBVaW50OEFycmF5KGUpLGQuc2V0KGgpKTpkPWg7cmV0dXJuIHRoaXMuYz1kfTtcbncucHJvdG90eXBlLm49ZnVuY3Rpb24oKXt2YXIgYz0wLGQ9dGhpcy5jLGE9dGhpcy5nLGIsZT1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkodGhpcy5sKyh0aGlzLmItMzI3NjgpKSxmLGcsaCxrO2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gdD90aGlzLmMuc3ViYXJyYXkoMzI3NjgsdGhpcy5iKTp0aGlzLmMuc2xpY2UoMzI3NjgsdGhpcy5iKTtmPTA7Zm9yKGc9YS5sZW5ndGg7ZjxnOysrZil7Yj1hW2ZdO2g9MDtmb3Ioaz1iLmxlbmd0aDtoPGs7KytoKWVbYysrXT1iW2hdfWY9MzI3Njg7Zm9yKGc9dGhpcy5iO2Y8ZzsrK2YpZVtjKytdPWRbZl07dGhpcy5nPVtdO3JldHVybiB0aGlzLmJ1ZmZlcj1lfTtcbncucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYyxkPXRoaXMuYjt0P3RoaXMucj8oYz1uZXcgVWludDhBcnJheShkKSxjLnNldCh0aGlzLmMuc3ViYXJyYXkoMCxkKSkpOmM9dGhpcy5jLnN1YmFycmF5KDAsZCk6KHRoaXMuYy5sZW5ndGg+ZCYmKHRoaXMuYy5sZW5ndGg9ZCksYz10aGlzLmMpO3JldHVybiB0aGlzLmJ1ZmZlcj1jfTtmdW5jdGlvbiBXKGMsZCl7dmFyIGEsYjt0aGlzLmlucHV0PWM7dGhpcy5hPTA7aWYoZHx8IShkPXt9KSlkLmluZGV4JiYodGhpcy5hPWQuaW5kZXgpLGQudmVyaWZ5JiYodGhpcy5BPWQudmVyaWZ5KTthPWNbdGhpcy5hKytdO2I9Y1t0aGlzLmErK107c3dpdGNoKGEmMTUpe2Nhc2UgaGE6dGhpcy5tZXRob2Q9aGE7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcInVuc3VwcG9ydGVkIGNvbXByZXNzaW9uIG1ldGhvZFwiKTt9aWYoMCE9PSgoYTw8OCkrYiklMzEpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGZjaGVjayBmbGFnOlwiKygoYTw8OCkrYiklMzEpO2lmKGImMzIpdGhyb3cgRXJyb3IoXCJmZGljdCBmbGFnIGlzIG5vdCBzdXBwb3J0ZWRcIik7dGhpcy5xPW5ldyB3KGMse2luZGV4OnRoaXMuYSxidWZmZXJTaXplOmQuYnVmZmVyU2l6ZSxidWZmZXJUeXBlOmQuYnVmZmVyVHlwZSxyZXNpemU6ZC5yZXNpemV9KX1cblcucHJvdG90eXBlLms9ZnVuY3Rpb24oKXt2YXIgYz10aGlzLmlucHV0LGQsYTtkPXRoaXMucS5rKCk7dGhpcy5hPXRoaXMucS5hO2lmKHRoaXMuQSl7YT0oY1t0aGlzLmErK108PDI0fGNbdGhpcy5hKytdPDwxNnxjW3RoaXMuYSsrXTw8OHxjW3RoaXMuYSsrXSk+Pj4wO3ZhciBiPWQ7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXt2YXIgZT1iLnNwbGl0KFwiXCIpLGYsZztmPTA7Zm9yKGc9ZS5sZW5ndGg7ZjxnO2YrKyllW2ZdPShlW2ZdLmNoYXJDb2RlQXQoMCkmMjU1KT4+PjA7Yj1lfWZvcih2YXIgaD0xLGs9MCxtPWIubGVuZ3RoLG4scD0wOzA8bTspe249MTAyNDxtPzEwMjQ6bTttLT1uO2RvIGgrPWJbcCsrXSxrKz1oO3doaWxlKC0tbik7aCU9NjU1MjE7ayU9NjU1MjF9aWYoYSE9PShrPDwxNnxoKT4+PjApdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGFkbGVyLTMyIGNoZWNrc3VtXCIpO31yZXR1cm4gZH07dmFyIGhhPTg7cihcIlpsaWIuSW5mbGF0ZVwiLFcpO3IoXCJabGliLkluZmxhdGUucHJvdG90eXBlLmRlY29tcHJlc3NcIixXLnByb3RvdHlwZS5rKTt2YXIgWD17QURBUFRJVkU6Qi5zLEJMT0NLOkIudH0sWSxaLCQsaWE7aWYoT2JqZWN0LmtleXMpWT1PYmplY3Qua2V5cyhYKTtlbHNlIGZvcihaIGluIFk9W10sJD0wLFgpWVskKytdPVo7JD0wO2ZvcihpYT1ZLmxlbmd0aDskPGlhOysrJClaPVlbJF0scihcIlpsaWIuSW5mbGF0ZS5CdWZmZXJUeXBlLlwiK1osWFtaXSk7fSkuY2FsbCh0aGlzKTsiLCIvKipcbiAqIEBhdXRob3IgcWlhbyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9xaWFvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGVyaWNoNjY2IC8gaHR0cDovL2VyaWNoYWluZXMuY29tXG4gKi9cblxuLy8gVGhpcyBzZXQgb2YgY29udHJvbHMgcGVyZm9ybXMgb3JiaXRpbmcsIGRvbGx5aW5nICh6b29taW5nKSwgYW5kIHBhbm5pbmcuXG4vLyBVbmxpa2UgVHJhY2tiYWxsQ29udHJvbHMsIGl0IG1haW50YWlucyB0aGUgXCJ1cFwiIGRpcmVjdGlvbiBvYmplY3QudXAgKCtZIGJ5IGRlZmF1bHQpLlxuLy9cbi8vICAgIE9yYml0IC0gbGVmdCBtb3VzZSAvIHRvdWNoOiBvbmUgZmluZ2VyIG1vdmVcbi8vICAgIFpvb20gLSBtaWRkbGUgbW91c2UsIG9yIG1vdXNld2hlZWwgLyB0b3VjaDogdHdvIGZpbmdlciBzcHJlYWQgb3Igc3F1aXNoXG4vLyAgICBQYW4gLSByaWdodCBtb3VzZSwgb3IgYXJyb3cga2V5cyAvIHRvdWNoOiB0aHJlZSBmaW5nZXIgc3dpcGVcblxuVEhSRUUuT3JiaXRDb250cm9scyA9IGZ1bmN0aW9uICggb2JqZWN0LCBkb21FbGVtZW50ICkge1xuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdHRoaXMuZG9tRWxlbWVudCA9ICggZG9tRWxlbWVudCAhPT0gdW5kZWZpbmVkICkgPyBkb21FbGVtZW50IDogZG9jdW1lbnQ7XG5cblx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhpcyBjb250cm9sXG5cdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0Ly8gXCJ0YXJnZXRcIiBzZXRzIHRoZSBsb2NhdGlvbiBvZiBmb2N1cywgd2hlcmUgdGhlIG9iamVjdCBvcmJpdHMgYXJvdW5kXG5cdHRoaXMudGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHQvLyBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgaW4gYW5kIG91dCAoIFBlcnNwZWN0aXZlQ2FtZXJhIG9ubHkgKVxuXHR0aGlzLm1pbkRpc3RhbmNlID0gMDtcblx0dGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xuXG5cdC8vIEhvdyBmYXIgeW91IGNhbiB6b29tIGluIGFuZCBvdXQgKCBPcnRob2dyYXBoaWNDYW1lcmEgb25seSApXG5cdHRoaXMubWluWm9vbSA9IDA7XG5cdHRoaXMubWF4Wm9vbSA9IEluZmluaXR5O1xuXG5cdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCB2ZXJ0aWNhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxuXHQvLyBSYW5nZSBpcyAwIHRvIE1hdGguUEkgcmFkaWFucy5cblx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xuXHR0aGlzLm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJOyAvLyByYWRpYW5zXG5cblx0Ly8gSG93IGZhciB5b3UgY2FuIG9yYml0IGhvcml6b250YWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cblx0Ly8gSWYgc2V0LCBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIHRoZSBpbnRlcnZhbCBbIC0gTWF0aC5QSSwgTWF0aC5QSSBdLlxuXHR0aGlzLm1pbkF6aW11dGhBbmdsZSA9IC0gSW5maW5pdHk7IC8vIHJhZGlhbnNcblx0dGhpcy5tYXhBemltdXRoQW5nbGUgPSBJbmZpbml0eTsgLy8gcmFkaWFuc1xuXG5cdC8vIFNldCB0byB0cnVlIHRvIGVuYWJsZSBkYW1waW5nIChpbmVydGlhKVxuXHQvLyBJZiBkYW1waW5nIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxuXHR0aGlzLmVuYWJsZURhbXBpbmcgPSBmYWxzZTtcblx0dGhpcy5kYW1waW5nRmFjdG9yID0gMC4yNTtcblxuXHQvLyBUaGlzIG9wdGlvbiBhY3R1YWxseSBlbmFibGVzIGRvbGx5aW5nIGluIGFuZCBvdXQ7IGxlZnQgYXMgXCJ6b29tXCIgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB6b29taW5nXG5cdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XG5cdHRoaXMuem9vbVNwZWVkID0gMS4wO1xuXG5cdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHJvdGF0aW5nXG5cdHRoaXMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcblx0dGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcblxuXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYW5uaW5nXG5cdHRoaXMuZW5hYmxlUGFuID0gdHJ1ZTtcblx0dGhpcy5rZXlQYW5TcGVlZCA9IDcuMDtcdC8vIHBpeGVscyBtb3ZlZCBwZXIgYXJyb3cga2V5IHB1c2hcblxuXHQvLyBTZXQgdG8gdHJ1ZSB0byBhdXRvbWF0aWNhbGx5IHJvdGF0ZSBhcm91bmQgdGhlIHRhcmdldFxuXHQvLyBJZiBhdXRvLXJvdGF0ZSBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGNvbnRyb2xzLnVwZGF0ZSgpIGluIHlvdXIgYW5pbWF0aW9uIGxvb3Bcblx0dGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XG5cdHRoaXMuYXV0b1JvdGF0ZVNwZWVkID0gMi4wOyAvLyAzMCBzZWNvbmRzIHBlciByb3VuZCB3aGVuIGZwcyBpcyA2MFxuXG5cdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHVzZSBvZiB0aGUga2V5c1xuXHR0aGlzLmVuYWJsZUtleXMgPSB0cnVlO1xuXG5cdC8vIFRoZSBmb3VyIGFycm93IGtleXNcblx0dGhpcy5rZXlzID0geyBMRUZUOiAzNywgVVA6IDM4LCBSSUdIVDogMzksIEJPVFRPTTogNDAgfTtcblxuXHQvLyBNb3VzZSBidXR0b25zXG5cdHRoaXMubW91c2VCdXR0b25zID0geyBPUkJJVDogVEhSRUUuTU9VU0UuTEVGVCwgWk9PTTogVEhSRUUuTU9VU0UuTUlERExFLCBQQU46IFRIUkVFLk1PVVNFLlJJR0hUIH07XG5cblx0Ly8gZm9yIHJlc2V0XG5cdHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XG5cdHRoaXMucG9zaXRpb24wID0gdGhpcy5vYmplY3QucG9zaXRpb24uY2xvbmUoKTtcblx0dGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XG5cblx0Ly9cblx0Ly8gcHVibGljIG1ldGhvZHNcblx0Ly9cblxuXHR0aGlzLmdldFBvbGFyQW5nbGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJpY2FsLnBoaTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0QXppbXV0aGFsQW5nbGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJpY2FsLnRoZXRhO1xuXG5cdH07XG5cblx0dGhpcy5zYXZlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRzY29wZS50YXJnZXQwLmNvcHkoIHNjb3BlLnRhcmdldCApO1xuXHRcdHNjb3BlLnBvc2l0aW9uMC5jb3B5KCBzY29wZS5vYmplY3QucG9zaXRpb24gKTtcblx0XHRzY29wZS56b29tMCA9IHNjb3BlLm9iamVjdC56b29tO1xuXG5cdH07XG5cblx0dGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHNjb3BlLnRhcmdldC5jb3B5KCBzY29wZS50YXJnZXQwICk7XG5cdFx0c2NvcGUub2JqZWN0LnBvc2l0aW9uLmNvcHkoIHNjb3BlLnBvc2l0aW9uMCApO1xuXHRcdHNjb3BlLm9iamVjdC56b29tID0gc2NvcGUuem9vbTA7XG5cblx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIGNoYW5nZUV2ZW50ICk7XG5cblx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHR9O1xuXG5cdC8vIHRoaXMgbWV0aG9kIGlzIGV4cG9zZWQsIGJ1dCBwZXJoYXBzIGl0IHdvdWxkIGJlIGJldHRlciBpZiB3ZSBjYW4gbWFrZSBpdCBwcml2YXRlLi4uXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cblx0XHQvLyBzbyBjYW1lcmEudXAgaXMgdGhlIG9yYml0IGF4aXNcblx0XHR2YXIgcXVhdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbVVuaXRWZWN0b3JzKCBvYmplY3QudXAsIG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAxLCAwICkgKTtcblx0XHR2YXIgcXVhdEludmVyc2UgPSBxdWF0LmNsb25lKCkuaW52ZXJzZSgpO1xuXG5cdFx0dmFyIGxhc3RQb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cdFx0dmFyIGxhc3RRdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcblxuXHRcdFx0b2Zmc2V0LmNvcHkoIHBvc2l0aW9uICkuc3ViKCBzY29wZS50YXJnZXQgKTtcblxuXHRcdFx0Ly8gcm90YXRlIG9mZnNldCB0byBcInktYXhpcy1pcy11cFwiIHNwYWNlXG5cdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ICk7XG5cblx0XHRcdC8vIGFuZ2xlIGZyb20gei1heGlzIGFyb3VuZCB5LWF4aXNcblx0XHRcdHNwaGVyaWNhbC5zZXRGcm9tVmVjdG9yMyggb2Zmc2V0ICk7XG5cblx0XHRcdGlmICggc2NvcGUuYXV0b1JvdGF0ZSAmJiBzdGF0ZSA9PT0gU1RBVEUuTk9ORSApIHtcblxuXHRcdFx0XHRyb3RhdGVMZWZ0KCBnZXRBdXRvUm90YXRpb25BbmdsZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3BoZXJpY2FsLnRoZXRhICs9IHNwaGVyaWNhbERlbHRhLnRoZXRhO1xuXHRcdFx0c3BoZXJpY2FsLnBoaSArPSBzcGhlcmljYWxEZWx0YS5waGk7XG5cblx0XHRcdC8vIHJlc3RyaWN0IHRoZXRhIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblx0XHRcdHNwaGVyaWNhbC50aGV0YSA9IE1hdGgubWF4KCBzY29wZS5taW5BemltdXRoQW5nbGUsIE1hdGgubWluKCBzY29wZS5tYXhBemltdXRoQW5nbGUsIHNwaGVyaWNhbC50aGV0YSApICk7XG5cblx0XHRcdC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cdFx0XHRzcGhlcmljYWwucGhpID0gTWF0aC5tYXgoIHNjb3BlLm1pblBvbGFyQW5nbGUsIE1hdGgubWluKCBzY29wZS5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpICkgKTtcblxuXHRcdFx0c3BoZXJpY2FsLm1ha2VTYWZlKCk7XG5cblxuXHRcdFx0c3BoZXJpY2FsLnJhZGl1cyAqPSBzY2FsZTtcblxuXHRcdFx0Ly8gcmVzdHJpY3QgcmFkaXVzIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heCggc2NvcGUubWluRGlzdGFuY2UsIE1hdGgubWluKCBzY29wZS5tYXhEaXN0YW5jZSwgc3BoZXJpY2FsLnJhZGl1cyApICk7XG5cblx0XHRcdC8vIG1vdmUgdGFyZ2V0IHRvIHBhbm5lZCBsb2NhdGlvblxuXHRcdFx0c2NvcGUudGFyZ2V0LmFkZCggcGFuT2Zmc2V0ICk7XG5cblx0XHRcdG9mZnNldC5zZXRGcm9tU3BoZXJpY2FsKCBzcGhlcmljYWwgKTtcblxuXHRcdFx0Ly8gcm90YXRlIG9mZnNldCBiYWNrIHRvIFwiY2FtZXJhLXVwLXZlY3Rvci1pcy11cFwiIHNwYWNlXG5cdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0SW52ZXJzZSApO1xuXG5cdFx0XHRwb3NpdGlvbi5jb3B5KCBzY29wZS50YXJnZXQgKS5hZGQoIG9mZnNldCApO1xuXG5cdFx0XHRzY29wZS5vYmplY3QubG9va0F0KCBzY29wZS50YXJnZXQgKTtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhICo9ICggMSAtIHNjb3BlLmRhbXBpbmdGYWN0b3IgKTtcblx0XHRcdFx0c3BoZXJpY2FsRGVsdGEucGhpICo9ICggMSAtIHNjb3BlLmRhbXBpbmdGYWN0b3IgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzcGhlcmljYWxEZWx0YS5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzY2FsZSA9IDE7XG5cdFx0XHRwYW5PZmZzZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdC8vIHVwZGF0ZSBjb25kaXRpb24gaXM6XG5cdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcblx0XHRcdC8vIHVzaW5nIHNtYWxsLWFuZ2xlIGFwcHJveGltYXRpb24gY29zKHgvMikgPSAxIC0geF4yIC8gOFxuXG5cdFx0XHRpZiAoIHpvb21DaGFuZ2VkIHx8XG5cdFx0XHRcdGxhc3RQb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZCggc2NvcGUub2JqZWN0LnBvc2l0aW9uICkgPiBFUFMgfHxcblx0XHRcdFx0OCAqICggMSAtIGxhc3RRdWF0ZXJuaW9uLmRvdCggc2NvcGUub2JqZWN0LnF1YXRlcm5pb24gKSApID4gRVBTICkge1xuXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIGNoYW5nZUV2ZW50ICk7XG5cblx0XHRcdFx0bGFzdFBvc2l0aW9uLmNvcHkoIHNjb3BlLm9iamVjdC5wb3NpdGlvbiApO1xuXHRcdFx0XHRsYXN0UXVhdGVybmlvbi5jb3B5KCBzY29wZS5vYmplY3QucXVhdGVybmlvbiApO1xuXHRcdFx0XHR6b29tQ2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH07XG5cblx0fSgpO1xuXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NvbnRleHRtZW51Jywgb25Db250ZXh0TWVudSwgZmFsc2UgKTtcblx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZWRvd24nLCBvbk1vdXNlRG93biwgZmFsc2UgKTtcblx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTtcblxuXHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlICk7XG5cdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBvblRvdWNoRW5kLCBmYWxzZSApO1xuXHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSApO1xuXG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSApO1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwLCBmYWxzZSApO1xuXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSApO1xuXG5cdFx0Ly9zY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7IC8vIHNob3VsZCB0aGlzIGJlIGFkZGVkIGhlcmU/XG5cblx0fTtcblxuXHQvL1xuXHQvLyBpbnRlcm5hbHNcblx0Ly9cblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHZhciBjaGFuZ2VFdmVudCA9IHsgdHlwZTogJ2NoYW5nZScgfTtcblx0dmFyIHN0YXJ0RXZlbnQgPSB7IHR5cGU6ICdzdGFydCcgfTtcblx0dmFyIGVuZEV2ZW50ID0geyB0eXBlOiAnZW5kJyB9O1xuXG5cdHZhciBTVEFURSA9IHsgTk9ORTogLSAxLCBST1RBVEU6IDAsIERPTExZOiAxLCBQQU46IDIsIFRPVUNIX1JPVEFURTogMywgVE9VQ0hfRE9MTFk6IDQsIFRPVUNIX1BBTjogNSB9O1xuXG5cdHZhciBzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXG5cdC8vIGN1cnJlbnQgcG9zaXRpb24gaW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzXG5cdHZhciBzcGhlcmljYWwgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XG5cdHZhciBzcGhlcmljYWxEZWx0YSA9IG5ldyBUSFJFRS5TcGhlcmljYWwoKTtcblxuXHR2YXIgc2NhbGUgPSAxO1xuXHR2YXIgcGFuT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblx0dmFyIHpvb21DaGFuZ2VkID0gZmFsc2U7XG5cblx0dmFyIHJvdGF0ZVN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0dmFyIHJvdGF0ZUVuZCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cdHZhciByb3RhdGVEZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cblx0dmFyIHBhblN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0dmFyIHBhbkVuZCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cdHZhciBwYW5EZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cblx0dmFyIGRvbGx5U3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXHR2YXIgZG9sbHlFbmQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXHR2YXIgZG9sbHlEZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cblx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XG5cblx0XHRyZXR1cm4gMiAqIE1hdGguUEkgLyA2MCAvIDYwICogc2NvcGUuYXV0b1JvdGF0ZVNwZWVkO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRab29tU2NhbGUoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDAuOTUsIHNjb3BlLnpvb21TcGVlZCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByb3RhdGVMZWZ0KCBhbmdsZSApIHtcblxuXHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByb3RhdGVVcCggYW5nbGUgKSB7XG5cblx0XHRzcGhlcmljYWxEZWx0YS5waGkgLT0gYW5nbGU7XG5cblx0fVxuXG5cdHZhciBwYW5MZWZ0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbkxlZnQoIGRpc3RhbmNlLCBvYmplY3RNYXRyaXggKSB7XG5cblx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAwICk7IC8vIGdldCBYIGNvbHVtbiBvZiBvYmplY3RNYXRyaXhcblx0XHRcdHYubXVsdGlwbHlTY2FsYXIoIC0gZGlzdGFuY2UgKTtcblxuXHRcdFx0cGFuT2Zmc2V0LmFkZCggdiApO1xuXG5cdFx0fTtcblxuXHR9KCk7XG5cblx0dmFyIHBhblVwID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhblVwKCBkaXN0YW5jZSwgb2JqZWN0TWF0cml4ICkge1xuXG5cdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMSApOyAvLyBnZXQgWSBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XG5cdFx0XHR2Lm11bHRpcGx5U2NhbGFyKCBkaXN0YW5jZSApO1xuXG5cdFx0XHRwYW5PZmZzZXQuYWRkKCB2ICk7XG5cblx0XHR9O1xuXG5cdH0oKTtcblxuXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcblx0dmFyIHBhbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbiggZGVsdGFYLCBkZWx0YVkgKSB7XG5cblx0XHRcdHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyBzY29wZS5kb21FbGVtZW50LmJvZHkgOiBzY29wZS5kb21FbGVtZW50O1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHRcdC8vIHBlcnNwZWN0aXZlXG5cdFx0XHRcdHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcblx0XHRcdFx0b2Zmc2V0LmNvcHkoIHBvc2l0aW9uICkuc3ViKCBzY29wZS50YXJnZXQgKTtcblx0XHRcdFx0dmFyIHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xuXG5cdFx0XHRcdC8vIGhhbGYgb2YgdGhlIGZvdiBpcyBjZW50ZXIgdG8gdG9wIG9mIHNjcmVlblxuXHRcdFx0XHR0YXJnZXREaXN0YW5jZSAqPSBNYXRoLnRhbiggKCBzY29wZS5vYmplY3QuZm92IC8gMiApICogTWF0aC5QSSAvIDE4MC4wICk7XG5cblx0XHRcdFx0Ly8gd2UgYWN0dWFsbHkgZG9uJ3QgdXNlIHNjcmVlbldpZHRoLCBzaW5jZSBwZXJzcGVjdGl2ZSBjYW1lcmEgaXMgZml4ZWQgdG8gc2NyZWVuIGhlaWdodFxuXHRcdFx0XHRwYW5MZWZ0KCAyICogZGVsdGFYICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCApO1xuXHRcdFx0XHRwYW5VcCggMiAqIGRlbHRhWSAqIHRhcmdldERpc3RhbmNlIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHNjb3BlLm9iamVjdC5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIGlmICggc2NvcGUub2JqZWN0LmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHRcdC8vIG9ydGhvZ3JhcGhpY1xuXHRcdFx0XHRwYW5MZWZ0KCBkZWx0YVggKiAoIHNjb3BlLm9iamVjdC5yaWdodCAtIHNjb3BlLm9iamVjdC5sZWZ0ICkgLyBzY29wZS5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50V2lkdGgsIHNjb3BlLm9iamVjdC5tYXRyaXggKTtcblx0XHRcdFx0cGFuVXAoIGRlbHRhWSAqICggc2NvcGUub2JqZWN0LnRvcCAtIHNjb3BlLm9iamVjdC5ib3R0b20gKSAvIHNjb3BlLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHNjb3BlLm9iamVjdC5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBjYW1lcmEgbmVpdGhlciBvcnRob2dyYXBoaWMgbm9yIHBlcnNwZWN0aXZlXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIHBhbiBkaXNhYmxlZC4nICk7XG5cdFx0XHRcdHNjb3BlLmVuYWJsZVBhbiA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKTtcblxuXHRmdW5jdGlvbiBkb2xseUluKCBkb2xseVNjYWxlICkge1xuXG5cdFx0aWYgKCBzY29wZS5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0c2NhbGUgLz0gZG9sbHlTY2FsZTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggc2NvcGUubWluWm9vbSwgTWF0aC5taW4oIHNjb3BlLm1heFpvb20sIHNjb3BlLm9iamVjdC56b29tICogZG9sbHlTY2FsZSApICk7XG5cdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXHRcdFx0em9vbUNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gZG9sbHkvem9vbSBkaXNhYmxlZC4nICk7XG5cdFx0XHRzY29wZS5lbmFibGVab29tID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRvbGx5T3V0KCBkb2xseVNjYWxlICkge1xuXG5cdFx0aWYgKCBzY29wZS5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0c2NhbGUgKj0gZG9sbHlTY2FsZTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggc2NvcGUubWluWm9vbSwgTWF0aC5taW4oIHNjb3BlLm1heFpvb20sIHNjb3BlLm9iamVjdC56b29tIC8gZG9sbHlTY2FsZSApICk7XG5cdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXHRcdFx0em9vbUNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gZG9sbHkvem9vbSBkaXNhYmxlZC4nICk7XG5cdFx0XHRzY29wZS5lbmFibGVab29tID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cdC8vIGV2ZW50IGNhbGxiYWNrcyAtIHVwZGF0ZSB0aGUgb2JqZWN0IHN0YXRlXG5cdC8vXG5cblx0ZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duUm90YXRlKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZURvd25Sb3RhdGUnICk7XG5cblx0XHRyb3RhdGVTdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlRG93bkRvbGx5JyApO1xuXG5cdFx0ZG9sbHlTdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duUGFuKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZURvd25QYW4nICk7XG5cblx0XHRwYW5TdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlUm90YXRlKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZU1vdmVSb3RhdGUnICk7XG5cblx0XHRyb3RhdGVFbmQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cdFx0cm90YXRlRGVsdGEuc3ViVmVjdG9ycyggcm90YXRlRW5kLCByb3RhdGVTdGFydCApO1xuXG5cdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHQvLyByb3RhdGluZyBhY3Jvc3Mgd2hvbGUgc2NyZWVuIGdvZXMgMzYwIGRlZ3JlZXMgYXJvdW5kXG5cdFx0cm90YXRlTGVmdCggMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS54IC8gZWxlbWVudC5jbGllbnRXaWR0aCAqIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHQvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcblx0XHRyb3RhdGVVcCggMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS55IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0cm90YXRlU3RhcnQuY29weSggcm90YXRlRW5kICk7XG5cblx0XHRzY29wZS51cGRhdGUoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlTW92ZURvbGx5JyApO1xuXG5cdFx0ZG9sbHlFbmQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0XHRkb2xseURlbHRhLnN1YlZlY3RvcnMoIGRvbGx5RW5kLCBkb2xseVN0YXJ0ICk7XG5cblx0XHRpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XG5cblx0XHRcdGRvbGx5SW4oIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkb2xseURlbHRhLnkgPCAwICkge1xuXG5cdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdH1cblxuXHRcdGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcblxuXHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmVQYW4oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlTW92ZVBhbicgKTtcblxuXHRcdHBhbkVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdHBhbkRlbHRhLnN1YlZlY3RvcnMoIHBhbkVuZCwgcGFuU3RhcnQgKTtcblxuXHRcdHBhbiggcGFuRGVsdGEueCwgcGFuRGVsdGEueSApO1xuXG5cdFx0cGFuU3RhcnQuY29weSggcGFuRW5kICk7XG5cblx0XHRzY29wZS51cGRhdGUoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTW91c2VVcCggZXZlbnQgKSB7XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlVXAnICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlV2hlZWwoIGV2ZW50ICkge1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdoYW5kbGVNb3VzZVdoZWVsJyApO1xuXG5cdFx0aWYgKCBldmVudC5kZWx0YVkgPCAwICkge1xuXG5cdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGV2ZW50LmRlbHRhWSA+IDAgKSB7XG5cblx0XHRcdGRvbGx5SW4oIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHR9XG5cblx0XHRzY29wZS51cGRhdGUoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlS2V5RG93biggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlS2V5RG93bicgKTtcblxuXHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cblx0XHRcdGNhc2Ugc2NvcGUua2V5cy5VUDpcblx0XHRcdFx0cGFuKCAwLCBzY29wZS5rZXlQYW5TcGVlZCApO1xuXHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2Ugc2NvcGUua2V5cy5CT1RUT006XG5cdFx0XHRcdHBhbiggMCwgLSBzY29wZS5rZXlQYW5TcGVlZCApO1xuXHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2Ugc2NvcGUua2V5cy5MRUZUOlxuXHRcdFx0XHRwYW4oIHNjb3BlLmtleVBhblNwZWVkLCAwICk7XG5cdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBzY29wZS5rZXlzLlJJR0hUOlxuXHRcdFx0XHRwYW4oIC0gc2NvcGUua2V5UGFuU3BlZWQsIDAgKTtcblx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0Um90YXRlKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaFN0YXJ0Um90YXRlJyApO1xuXG5cdFx0cm90YXRlU3RhcnQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0RG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoU3RhcnREb2xseScgKTtcblxuXHRcdHZhciBkeCA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWDtcblx0XHR2YXIgZHkgPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVk7XG5cblx0XHR2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoIGR4ICogZHggKyBkeSAqIGR5ICk7XG5cblx0XHRkb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydFBhbiggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hTdGFydFBhbicgKTtcblxuXHRcdHBhblN0YXJ0LnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaE1vdmVSb3RhdGUnICk7XG5cblx0XHRyb3RhdGVFbmQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXHRcdHJvdGF0ZURlbHRhLnN1YlZlY3RvcnMoIHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQgKTtcblxuXHRcdHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyBzY29wZS5kb21FbGVtZW50LmJvZHkgOiBzY29wZS5kb21FbGVtZW50O1xuXG5cdFx0Ly8gcm90YXRpbmcgYWNyb3NzIHdob2xlIHNjcmVlbiBnb2VzIDM2MCBkZWdyZWVzIGFyb3VuZFxuXHRcdHJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0Ly8gcm90YXRpbmcgdXAgYW5kIGRvd24gYWxvbmcgd2hvbGUgc2NyZWVuIGF0dGVtcHRzIHRvIGdvIDM2MCwgYnV0IGxpbWl0ZWQgdG8gMTgwXG5cdFx0cm90YXRlVXAoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICogc2NvcGUucm90YXRlU3BlZWQgKTtcblxuXHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaE1vdmVEb2xseScgKTtcblxuXHRcdHZhciBkeCA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWDtcblx0XHR2YXIgZHkgPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVk7XG5cblx0XHR2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoIGR4ICogZHggKyBkeSAqIGR5ICk7XG5cblx0XHRkb2xseUVuZC5zZXQoIDAsIGRpc3RhbmNlICk7XG5cblx0XHRkb2xseURlbHRhLnN1YlZlY3RvcnMoIGRvbGx5RW5kLCBkb2xseVN0YXJ0ICk7XG5cblx0XHRpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XG5cblx0XHRcdGRvbGx5T3V0KCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0fSBlbHNlIGlmICggZG9sbHlEZWx0YS55IDwgMCApIHtcblxuXHRcdFx0ZG9sbHlJbiggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdH1cblxuXHRcdGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcblxuXHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmVQYW4oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZVBhbicgKTtcblxuXHRcdHBhbkVuZC5zZXQoIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCwgZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VZICk7XG5cblx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XG5cblx0XHRwYW4oIHBhbkRlbHRhLngsIHBhbkRlbHRhLnkgKTtcblxuXHRcdHBhblN0YXJ0LmNvcHkoIHBhbkVuZCApO1xuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaEVuZCcgKTtcblxuXHR9XG5cblx0Ly9cblx0Ly8gZXZlbnQgaGFuZGxlcnMgLSBGU006IGxpc3RlbiBmb3IgZXZlbnRzIGFuZCByZXNldCBzdGF0ZVxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uTW91c2VEb3duKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0c3dpdGNoICggZXZlbnQuYnV0dG9uICkge1xuXG5cdFx0XHRjYXNlIHNjb3BlLm1vdXNlQnV0dG9ucy5PUkJJVDpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VEb3duUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIHNjb3BlLm1vdXNlQnV0dG9ucy5aT09NOlxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VEb3duRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0c3RhdGUgPSBTVEFURS5ET0xMWTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBzY29wZS5tb3VzZUJ1dHRvbnMuUEFOOlxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0c3RhdGUgPSBTVEFURS5QQU47XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5OT05FICkge1xuXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIGZhbHNlICk7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcblxuXHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggc3RhcnRFdmVudCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBvbk1vdXNlTW92ZSggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHN3aXRjaCAoIHN0YXRlICkge1xuXG5cdFx0XHRjYXNlIFNUQVRFLlJPVEFURTpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFNUQVRFLkRPTExZOlxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgU1RBVEUuUEFOOlxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVQYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uTW91c2VVcCggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0aGFuZGxlTW91c2VVcCggZXZlbnQgKTtcblxuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgZmFsc2UgKTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcblxuXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIGVuZEV2ZW50ICk7XG5cblx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uTW91c2VXaGVlbCggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlIHx8ICggc3RhdGUgIT09IFNUQVRFLk5PTkUgJiYgc3RhdGUgIT09IFNUQVRFLlJPVEFURSApICkgcmV0dXJuO1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHN0YXJ0RXZlbnQgKTtcblxuXHRcdGhhbmRsZU1vdXNlV2hlZWwoIGV2ZW50ICk7XG5cblx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvbktleURvd24oIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVLZXlzID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0aGFuZGxlS2V5RG93biggZXZlbnQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRzd2l0Y2ggKCBldmVudC50b3VjaGVzLmxlbmd0aCApIHtcblxuXHRcdFx0Y2FzZSAxOlx0Ly8gb25lLWZpbmdlcmVkIHRvdWNoOiByb3RhdGVcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlVG91Y2hTdGFydFJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX1JPVEFURTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyOlx0Ly8gdHdvLWZpbmdlcmVkIHRvdWNoOiBkb2xseVxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlVG91Y2hTdGFydERvbGx5KCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuVE9VQ0hfRE9MTFk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzogLy8gdGhyZWUtZmluZ2VyZWQgdG91Y2g6IHBhblxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuVE9VQ0hfUEFOO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdH1cblxuXHRcdGlmICggc3RhdGUgIT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHN0YXJ0RXZlbnQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Ub3VjaE1vdmUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRzd2l0Y2ggKCBldmVudC50b3VjaGVzLmxlbmd0aCApIHtcblxuXHRcdFx0Y2FzZSAxOiAvLyBvbmUtZmluZ2VyZWQgdG91Y2g6IHJvdGF0ZVxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblx0XHRcdFx0aWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfUk9UQVRFICkgcmV0dXJuOyAvLyBpcyB0aGlzIG5lZWRlZD8uLi5cblxuXHRcdFx0XHRoYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjogLy8gdHdvLWZpbmdlcmVkIHRvdWNoOiBkb2xseVxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLlRPVUNIX0RPTExZICkgcmV0dXJuOyAvLyBpcyB0aGlzIG5lZWRlZD8uLi5cblxuXHRcdFx0XHRoYW5kbGVUb3VjaE1vdmVEb2xseSggZXZlbnQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzOiAvLyB0aHJlZS1maW5nZXJlZCB0b3VjaDogcGFuXG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdFx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5UT1VDSF9QQU4gKSByZXR1cm47IC8vIGlzIHRoaXMgbmVlZGVkPy4uLlxuXG5cdFx0XHRcdGhhbmRsZVRvdWNoTW92ZVBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVG91Y2hFbmQoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGhhbmRsZVRvdWNoRW5kKCBldmVudCApO1xuXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggZW5kRXZlbnQgKTtcblxuXHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Db250ZXh0TWVudSggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHR9XG5cblx0Ly9cblxuXHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIG9uQ29udGV4dE1lbnUsIGZhbHNlICk7XG5cblx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgb25Nb3VzZURvd24sIGZhbHNlICk7XG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgb25Nb3VzZVdoZWVsLCBmYWxzZSApO1xuXG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlICk7XG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UgKTtcblx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUsIGZhbHNlICk7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSApO1xuXG5cdC8vIGZvcmNlIGFuIHVwZGF0ZSBhdCBzdGFydFxuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn07XG5cblRIUkVFLk9yYml0Q29udHJvbHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApO1xuVEhSRUUuT3JiaXRDb250cm9scy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUSFJFRS5PcmJpdENvbnRyb2xzO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVEhSRUUuT3JiaXRDb250cm9scy5wcm90b3R5cGUsIHtcblxuXHRjZW50ZXI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuY2VudGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnRhcmdldCcgKTtcblx0XHRcdHJldHVybiB0aGlzLnRhcmdldDtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuXHRub1pvb206IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9ab29tIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlWm9vbSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiAhIHRoaXMuZW5hYmxlWm9vbTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1pvb20gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVab29tIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVab29tID0gISB2YWx1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG5vUm90YXRlOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vUm90YXRlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlUm90YXRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVSb3RhdGU7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9Sb3RhdGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVSb3RhdGUgaW5zdGVhZC4nICk7XG5cdFx0XHR0aGlzLmVuYWJsZVJvdGF0ZSA9ICEgdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRub1Bhbjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1BhbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVBhbiBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiAhIHRoaXMuZW5hYmxlUGFuO1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vUGFuIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlUGFuIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVQYW4gPSAhIHZhbHVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bm9LZXlzOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vS2V5cyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZUtleXMgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZUtleXM7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9LZXlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlS2V5cyBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlS2V5cyA9ICEgdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRzdGF0aWNNb3Zpbmc6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuc3RhdGljTW92aW5nIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlRGFtcGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiAhIHRoaXMuZW5hYmxlRGFtcGluZztcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5zdGF0aWNNb3ZpbmcgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVEYW1waW5nIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVEYW1waW5nID0gISB2YWx1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGR5bmFtaWNEYW1waW5nRmFjdG9yOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLmR5bmFtaWNEYW1waW5nRmFjdG9yIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSAuZGFtcGluZ0ZhY3RvciBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmRhbXBpbmdGYWN0b3I7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuZHluYW1pY0RhbXBpbmdGYWN0b3IgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIC5kYW1waW5nRmFjdG9yIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG4iLCIvKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuVEhSRUUuT0JKTG9hZGVyID0gZnVuY3Rpb24gKCBtYW5hZ2VyICkge1xuICAgIFxuICAgICAgICB0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjtcbiAgICBcbiAgICAgICAgdGhpcy5tYXRlcmlhbHMgPSBudWxsO1xuICAgIFxuICAgICAgICB0aGlzLnJlZ2V4cCA9IHtcbiAgICAgICAgICAgIC8vIHYgZmxvYXQgZmxvYXQgZmxvYXRcbiAgICAgICAgICAgIHZlcnRleF9wYXR0ZXJuICAgICAgICAgICA6IC9edlxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAgICAgICAvLyB2biBmbG9hdCBmbG9hdCBmbG9hdFxuICAgICAgICAgICAgbm9ybWFsX3BhdHRlcm4gICAgICAgICAgIDogL152blxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAgICAgICAvLyB2dCBmbG9hdCBmbG9hdFxuICAgICAgICAgICAgdXZfcGF0dGVybiAgICAgICAgICAgICAgIDogL152dFxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspLyxcbiAgICAgICAgICAgIC8vIGYgdmVydGV4IHZlcnRleCB2ZXJ0ZXhcbiAgICAgICAgICAgIGZhY2VfdmVydGV4ICAgICAgICAgICAgICA6IC9eZlxccysoLT9cXGQrKVxccysoLT9cXGQrKVxccysoLT9cXGQrKSg/OlxccysoLT9cXGQrKSk/LyxcbiAgICAgICAgICAgIC8vIGYgdmVydGV4L3V2IHZlcnRleC91diB2ZXJ0ZXgvdXZcbiAgICAgICAgICAgIGZhY2VfdmVydGV4X3V2ICAgICAgICAgICA6IC9eZlxccysoLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC8oLT9cXGQrKSg/OlxccysoLT9cXGQrKVxcLygtP1xcZCspKT8vLFxuICAgICAgICAgICAgLy8gZiB2ZXJ0ZXgvdXYvbm9ybWFsIHZlcnRleC91di9ub3JtYWwgdmVydGV4L3V2L25vcm1hbFxuICAgICAgICAgICAgZmFjZV92ZXJ0ZXhfdXZfbm9ybWFsICAgIDogL15mXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcLygtP1xcZCspXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxcLygtP1xcZCspKD86XFxzKygtP1xcZCspXFwvKC0/XFxkKylcXC8oLT9cXGQrKSk/LyxcbiAgICAgICAgICAgIC8vIGYgdmVydGV4Ly9ub3JtYWwgdmVydGV4Ly9ub3JtYWwgdmVydGV4Ly9ub3JtYWxcbiAgICAgICAgICAgIGZhY2VfdmVydGV4X25vcm1hbCAgICAgICA6IC9eZlxccysoLT9cXGQrKVxcL1xcLygtP1xcZCspXFxzKygtP1xcZCspXFwvXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKSg/OlxccysoLT9cXGQrKVxcL1xcLygtP1xcZCspKT8vLFxuICAgICAgICAgICAgLy8gbyBvYmplY3RfbmFtZSB8IGcgZ3JvdXBfbmFtZVxuICAgICAgICAgICAgb2JqZWN0X3BhdHRlcm4gICAgICAgICAgIDogL15bb2ddXFxzKiguKyk/LyxcbiAgICAgICAgICAgIC8vIHMgYm9vbGVhblxuICAgICAgICAgICAgc21vb3RoaW5nX3BhdHRlcm4gICAgICAgIDogL15zXFxzKyhcXGQrfG9ufG9mZikvLFxuICAgICAgICAgICAgLy8gbXRsbGliIGZpbGVfcmVmZXJlbmNlXG4gICAgICAgICAgICBtYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4gOiAvXm10bGxpYiAvLFxuICAgICAgICAgICAgLy8gdXNlbXRsIG1hdGVyaWFsX25hbWVcbiAgICAgICAgICAgIG1hdGVyaWFsX3VzZV9wYXR0ZXJuICAgICA6IC9edXNlbXRsIC9cbiAgICAgICAgfTtcbiAgICBcbiAgICB9O1xuICAgIFxuICAgIFRIUkVFLk9CSkxvYWRlci5wcm90b3R5cGUgPSB7XG4gICAgXG4gICAgICAgIGNvbnN0cnVjdG9yOiBUSFJFRS5PQkpMb2FkZXIsXG4gICAgXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgIFxuICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG4gICAgICAgICAgICBsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG4gICAgICAgICAgICBsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgb25Mb2FkKCBzY29wZS5wYXJzZSggdGV4dCApICk7XG4gICAgXG4gICAgICAgICAgICB9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG4gICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLnBhdGggPSB2YWx1ZTtcbiAgICBcbiAgICAgICAgfSxcbiAgICBcbiAgICAgICAgc2V0TWF0ZXJpYWxzOiBmdW5jdGlvbiAoIG1hdGVyaWFscyApIHtcbiAgICBcbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzID0gbWF0ZXJpYWxzO1xuICAgIFxuICAgICAgICB9LFxuICAgIFxuICAgICAgICBfY3JlYXRlUGFyc2VyU3RhdGUgOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0cyAgOiBbXSxcbiAgICAgICAgICAgICAgICBvYmplY3QgICA6IHt9LFxuICAgIFxuICAgICAgICAgICAgICAgIHZlcnRpY2VzIDogW10sXG4gICAgICAgICAgICAgICAgbm9ybWFscyAgOiBbXSxcbiAgICAgICAgICAgICAgICB1dnMgICAgICA6IFtdLFxuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsTGlicmFyaWVzIDogW10sXG4gICAgXG4gICAgICAgICAgICAgICAgc3RhcnRPYmplY3Q6IGZ1bmN0aW9uICggbmFtZSwgZnJvbURlY2xhcmF0aW9uICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBvYmplY3QgKGluaXRpYWwgZnJvbSByZXNldCkgaXMgbm90IGZyb20gYSBnL28gZGVjbGFyYXRpb24gaW4gdGhlIHBhcnNlZFxuICAgICAgICAgICAgICAgICAgICAvLyBmaWxlLiBXZSBuZWVkIHRvIHVzZSBpdCBmb3IgdGhlIGZpcnN0IHBhcnNlZCBnL28gdG8ga2VlcCB0aGluZ3MgaW4gc3luYy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9iamVjdCAmJiB0aGlzLm9iamVjdC5mcm9tRGVjbGFyYXRpb24gPT09IGZhbHNlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3QubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5mcm9tRGVjbGFyYXRpb24gPSAoIGZyb21EZWNsYXJhdGlvbiAhPT0gZmFsc2UgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNNYXRlcmlhbCA9ICggdGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCgpIDogdW5kZWZpbmVkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSA9PT0gJ2Z1bmN0aW9uJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSggdHJ1ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA6IG5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tRGVjbGFyYXRpb24gOiAoIGZyb21EZWNsYXJhdGlvbiAhPT0gZmFsc2UgKSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFscyAgOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dnMgICAgICA6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzbW9vdGggOiB0cnVlLFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNYXRlcmlhbCA6IGZ1bmN0aW9uKCBuYW1lLCBsaWJyYXJpZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gdGhpcy5fZmluYWxpemUoIGZhbHNlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV3IHVzZW10bCBkZWNsYXJhdGlvbiBvdmVyd3JpdGVzIGFuIGluaGVyaXRlZCBtYXRlcmlhbCwgZXhjZXB0IGlmIGZhY2VzIHdlcmUgZGVjbGFyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciB0aGUgbWF0ZXJpYWwsIHRoZW4gaXQgbXVzdCBiZSBwcmVzZXJ2ZWQgZm9yIHByb3BlciBNdWx0aU1hdGVyaWFsIGNvbnRpbnVhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHByZXZpb3VzICYmICggcHJldmlvdXMuaW5oZXJpdGVkIHx8IHByZXZpb3VzLmdyb3VwQ291bnQgPD0gMCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFscy5zcGxpY2UoIHByZXZpb3VzLmluZGV4LCAxICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggICAgICA6IHRoaXMubWF0ZXJpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAgICA6IG5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10bGxpYiAgICAgOiAoIEFycmF5LmlzQXJyYXkoIGxpYnJhcmllcyApICYmIGxpYnJhcmllcy5sZW5ndGggPiAwID8gbGlicmFyaWVzWyBsaWJyYXJpZXMubGVuZ3RoIC0gMSBdIDogJycgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoICAgICA6ICggcHJldmlvdXMgIT09IHVuZGVmaW5lZCA/IHByZXZpb3VzLnNtb290aCA6IHRoaXMuc21vb3RoICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwU3RhcnQgOiAoIHByZXZpb3VzICE9PSB1bmRlZmluZWQgPyBwcmV2aW91cy5ncm91cEVuZCA6IDAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbmQgICA6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cENvdW50IDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRlZCAgOiBmYWxzZSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgOiBmdW5jdGlvbiggaW5kZXggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xvbmVkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICAgICAgOiAoIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgPyBpbmRleCA6IHRoaXMuaW5kZXggKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICAgICAgIDogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10bGxpYiAgICAgOiB0aGlzLm10bGxpYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbW9vdGggICAgIDogdGhpcy5zbW9vdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBTdGFydCA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbmQgICA6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ291bnQgOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0ZWQgIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWQuY2xvbmUgPSB0aGlzLmNsb25lLmJpbmQoY2xvbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnB1c2goIG1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNYXRlcmlhbCA6IGZ1bmN0aW9uKCkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5tYXRlcmlhbHMubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxzWyB0aGlzLm1hdGVyaWFscy5sZW5ndGggLSAxIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZpbmFsaXplIDogZnVuY3Rpb24oIGVuZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdE11bHRpTWF0ZXJpYWwgPSB0aGlzLmN1cnJlbnRNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbGFzdE11bHRpTWF0ZXJpYWwgJiYgbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBFbmQgPT09IC0xICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCA9IHRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoIC8gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBDb3VudCA9IGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwRW5kIC0gbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE11bHRpTWF0ZXJpYWwuaW5oZXJpdGVkID0gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBvYmplY3RzIHRhaWwgbWF0ZXJpYWxzIGlmIG5vIGZhY2UgZGVjbGFyYXRpb25zIGZvbGxvd2VkIHRoZW0gYmVmb3JlIGEgbmV3IG8vZyBzdGFydGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZW5kICYmIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA+IDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBtaSA9IHRoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDE7IG1pID49IDA7IG1pLS0gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMubWF0ZXJpYWxzW21pXS5ncm91cENvdW50IDw9IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbHMuc3BsaWNlKCBtaSwgMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEd1YXJhbnRlZSBhdCBsZWFzdCBvbmUgZW1wdHkgbWF0ZXJpYWwsIHRoaXMgbWFrZXMgdGhlIGNyZWF0aW9uIGxhdGVyIG1vcmUgc3RyYWlnaHQgZm9yd2FyZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVuZCAmJiB0aGlzLm1hdGVyaWFscy5sZW5ndGggPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSAgIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbW9vdGggOiB0aGlzLnNtb290aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RNdWx0aU1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBJbmhlcml0IHByZXZpb3VzIG9iamVjdHMgbWF0ZXJpYWwuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNwZWMgdGVsbHMgdXMgdGhhdCBhIGRlY2xhcmVkIG1hdGVyaWFsIG11c3QgYmUgc2V0IHRvIGFsbCBvYmplY3RzIHVudGlsIGEgbmV3IG1hdGVyaWFsIGlzIGRlY2xhcmVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIHVzZW10bCBkZWNsYXJhdGlvbiBpcyBlbmNvdW50ZXJlZCB3aGlsZSB0aGlzIG5ldyBvYmplY3QgaXMgYmVpbmcgcGFyc2VkLCBpdCB3aWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLiBFeGNlcHRpb24gYmVpbmcgdGhhdCB0aGVyZSB3YXMgYWxyZWFkeSBmYWNlIGRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgICAgICAvLyB0byB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLCB0aGVuIGl0IHdpbGwgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggcHJldmlvdXNNYXRlcmlhbCAmJiBwcmV2aW91c01hdGVyaWFsLm5hbWUgJiYgdHlwZW9mIHByZXZpb3VzTWF0ZXJpYWwuY2xvbmUgPT09IFwiZnVuY3Rpb25cIiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNsYXJlZCA9IHByZXZpb3VzTWF0ZXJpYWwuY2xvbmUoIDAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmVkLmluaGVyaXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5tYXRlcmlhbHMucHVzaCggZGVjbGFyZWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdHMucHVzaCggdGhpcy5vYmplY3QgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGZpbmFsaXplIDogZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSA9PT0gJ2Z1bmN0aW9uJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSggdHJ1ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJzZVZlcnRleEluZGV4OiBmdW5jdGlvbiAoIHZhbHVlLCBsZW4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KCB2YWx1ZSwgMTAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggaW5kZXggPj0gMCA/IGluZGV4IC0gMSA6IGluZGV4ICsgbGVuIC8gMyApICogMztcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIHBhcnNlTm9ybWFsSW5kZXg6IGZ1bmN0aW9uICggdmFsdWUsIGxlbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoIHZhbHVlLCAxMCApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCBpbmRleCA+PSAwID8gaW5kZXggLSAxIDogaW5kZXggKyBsZW4gLyAzICkgKiAzO1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgcGFyc2VVVkluZGV4OiBmdW5jdGlvbiAoIHZhbHVlLCBsZW4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KCB2YWx1ZSwgMTAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggaW5kZXggPj0gMCA/IGluZGV4IC0gMSA6IGluZGV4ICsgbGVuIC8gMiApICogMjtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZFZlcnRleDogZnVuY3Rpb24gKCBhLCBiLCBjICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gdGhpcy52ZXJ0aWNlcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5LnZlcnRpY2VzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBiICsgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGIgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYiArIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBjICsgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGMgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYyArIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgYWRkVmVydGV4TGluZTogZnVuY3Rpb24gKCBhICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gdGhpcy52ZXJ0aWNlcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5LnZlcnRpY2VzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgYWRkTm9ybWFsIDogZnVuY3Rpb24gKCBhLCBiLCBjICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gdGhpcy5ub3JtYWxzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkubm9ybWFscztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYiArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBiICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGIgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYyArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBjICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGMgKyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZFVWOiBmdW5jdGlvbiAoIGEsIGIsIGMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnV2cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5LnV2cztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGIgKyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYiArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBjICsgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGMgKyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZFVWTGluZTogZnVuY3Rpb24gKCBhICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gdGhpcy51dnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS51dnM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDEgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgYWRkRmFjZTogZnVuY3Rpb24gKCBhLCBiLCBjLCBkLCB1YSwgdWIsIHVjLCB1ZCwgbmEsIG5iLCBuYywgbmQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB2TGVuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpYSA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleCggYSwgdkxlbiApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWIgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoIGIsIHZMZW4gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGljID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KCBjLCB2TGVuICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBkID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZlcnRleCggaWEsIGliLCBpYyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoIGQsIHZMZW4gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVmVydGV4KCBpYSwgaWIsIGlkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZlcnRleCggaWIsIGljLCBpZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggdWEgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dkxlbiA9IHRoaXMudXZzLmxlbmd0aDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlhID0gdGhpcy5wYXJzZVVWSW5kZXgoIHVhLCB1dkxlbiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWIgPSB0aGlzLnBhcnNlVVZJbmRleCggdWIsIHV2TGVuICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYyA9IHRoaXMucGFyc2VVVkluZGV4KCB1YywgdXZMZW4gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZCA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVVYoIGlhLCBpYiwgaWMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlVVZJbmRleCggdWQsIHV2TGVuICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRVViggaWEsIGliLCBpZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVVYoIGliLCBpYywgaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG5hICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3JtYWxzIGFyZSBtYW55IHRpbWVzIHRoZSBzYW1lLiBJZiBzbywgc2tpcCBmdW5jdGlvbiBjYWxsIGFuZCBwYXJzZUludC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuTGVuID0gdGhpcy5ub3JtYWxzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlhID0gdGhpcy5wYXJzZU5vcm1hbEluZGV4KCBuYSwgbkxlbiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWIgPSBuYSA9PT0gbmIgPyBpYSA6IHRoaXMucGFyc2VOb3JtYWxJbmRleCggbmIsIG5MZW4gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljID0gbmEgPT09IG5jID8gaWEgOiB0aGlzLnBhcnNlTm9ybWFsSW5kZXgoIG5jLCBuTGVuICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGQgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vcm1hbCggaWEsIGliLCBpYyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IHRoaXMucGFyc2VOb3JtYWxJbmRleCggbmQsIG5MZW4gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vcm1hbCggaWEsIGliLCBpZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKCBpYiwgaWMsIGlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZExpbmVHZW9tZXRyeTogZnVuY3Rpb24gKCB2ZXJ0aWNlcywgdXZzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5nZW9tZXRyeS50eXBlID0gJ0xpbmUnO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdkxlbiA9IHRoaXMudmVydGljZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXZMZW4gPSB0aGlzLnV2cy5sZW5ndGg7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciB2aSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IHZpIDwgbDsgdmkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZlcnRleExpbmUoIHRoaXMucGFyc2VWZXJ0ZXhJbmRleCggdmVydGljZXNbIHZpIF0sIHZMZW4gKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciB1dmkgPSAwLCBsID0gdXZzLmxlbmd0aDsgdXZpIDwgbDsgdXZpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRVVkxpbmUoIHRoaXMucGFyc2VVVkluZGV4KCB1dnNbIHV2aSBdLCB1dkxlbiApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgc3RhdGUuc3RhcnRPYmplY3QoICcnLCBmYWxzZSApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIFxuICAgICAgICB9LFxuICAgIFxuICAgICAgICBwYXJzZTogZnVuY3Rpb24gKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgY29uc29sZS50aW1lKCAnT0JKTG9hZGVyJyApO1xuICAgIFxuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fY3JlYXRlUGFyc2VyU3RhdGUoKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggdGV4dC5pbmRleE9mKCAnXFxyXFxuJyApICE9PSAtIDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBmYXN0ZXIgdGhhbiBTdHJpbmcuc3BsaXQgd2l0aCByZWdleCB0aGF0IHNwbGl0cyBvbiBib3RoXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSggL1xcclxcbi9nLCAnXFxuJyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCB0ZXh0LmluZGV4T2YoICdcXFxcXFxuJyApICE9PSAtIDEpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBqb2luIGxpbmVzIHNlcGFyYXRlZCBieSBhIGxpbmUgY29udGludWF0aW9uIGNoYXJhY3RlciAoXFwpXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSggL1xcXFxcXG4vZywgJycgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IHRleHQuc3BsaXQoICdcXG4nICk7XG4gICAgICAgICAgICB2YXIgbGluZSA9ICcnLCBsaW5lRmlyc3RDaGFyID0gJycsIGxpbmVTZWNvbmRDaGFyID0gJyc7XG4gICAgICAgICAgICB2YXIgbGluZUxlbmd0aCA9IDA7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgXG4gICAgICAgICAgICAvLyBGYXN0ZXIgdG8ganVzdCB0cmltIGxlZnQgc2lkZSBvZiB0aGUgbGluZS4gVXNlIGlmIGF2YWlsYWJsZS5cbiAgICAgICAgICAgIHZhciB0cmltTGVmdCA9ICggdHlwZW9mICcnLnRyaW1MZWZ0ID09PSAnZnVuY3Rpb24nICk7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGxpbmUgPSB0cmltTGVmdCA/IGxpbmUudHJpbUxlZnQoKSA6IGxpbmUudHJpbSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIGxpbmVMZW5ndGggPSBsaW5lLmxlbmd0aDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGxpbmVMZW5ndGggPT09IDAgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICBsaW5lRmlyc3RDaGFyID0gbGluZS5jaGFyQXQoIDAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBAdG9kbyBpbnZva2UgcGFzc2VkIGluIGhhbmRsZXIgaWYgYW55XG4gICAgICAgICAgICAgICAgaWYgKCBsaW5lRmlyc3RDaGFyID09PSAnIycgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGxpbmVGaXJzdENoYXIgPT09ICd2JyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbGluZVNlY29uZENoYXIgPSBsaW5lLmNoYXJBdCggMSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxpbmVTZWNvbmRDaGFyID09PSAnICcgJiYgKCByZXN1bHQgPSB0aGlzLnJlZ2V4cC52ZXJ0ZXhfcGF0dGVybi5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAxICAgICAgMiAgICAgIDNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFtcInYgMS4wIDIuMCAzLjBcIiwgXCIxLjBcIiwgXCIyLjBcIiwgXCIzLjBcIl1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnZlcnRpY2VzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggcmVzdWx0WyAxIF0gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KCByZXN1bHRbIDIgXSApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIHJlc3VsdFsgMyBdIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGxpbmVTZWNvbmRDaGFyID09PSAnbicgJiYgKCByZXN1bHQgPSB0aGlzLnJlZ2V4cC5ub3JtYWxfcGF0dGVybi5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgMSAgICAgIDIgICAgICAzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBbXCJ2biAxLjAgMi4wIDMuMFwiLCBcIjEuMFwiLCBcIjIuMFwiLCBcIjMuMFwiXVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubm9ybWFscy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIHJlc3VsdFsgMSBdICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggcmVzdWx0WyAyIF0gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KCByZXN1bHRbIDMgXSApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsaW5lU2Vjb25kQ2hhciA9PT0gJ3QnICYmICggcmVzdWx0ID0gdGhpcy5yZWdleHAudXZfcGF0dGVybi5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAxICAgICAgMlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1widnQgMC4xIDAuMlwiLCBcIjAuMVwiLCBcIjAuMlwiXVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudXZzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggcmVzdWx0WyAxIF0gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KCByZXN1bHRbIDIgXSApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIlVuZXhwZWN0ZWQgdmVydGV4L25vcm1hbC91diBsaW5lOiAnXCIgKyBsaW5lICArIFwiJ1wiICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsaW5lRmlyc3RDaGFyID09PSBcImZcIiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAoIHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4X3V2X25vcm1hbC5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGYgdmVydGV4L3V2L25vcm1hbCB2ZXJ0ZXgvdXYvbm9ybWFsIHZlcnRleC91di9ub3JtYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgICAgICAxICAgIDIgICAgMyAgICA0ICAgIDUgICAgNiAgICA3ICAgIDggICAgOSAgIDEwICAgICAgICAgMTEgICAgICAgICAxMlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1wiZiAxLzEvMSAyLzIvMiAzLzMvM1wiLCBcIjFcIiwgXCIxXCIsIFwiMVwiLCBcIjJcIiwgXCIyXCIsIFwiMlwiLCBcIjNcIiwgXCIzXCIsIFwiM1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYWRkRmFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbIDEgXSwgcmVzdWx0WyA0IF0sIHJlc3VsdFsgNyBdLCByZXN1bHRbIDEwIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyAyIF0sIHJlc3VsdFsgNSBdLCByZXN1bHRbIDggXSwgcmVzdWx0WyAxMSBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsgMyBdLCByZXN1bHRbIDYgXSwgcmVzdWx0WyA5IF0sIHJlc3VsdFsgMTIgXVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggKCByZXN1bHQgPSB0aGlzLnJlZ2V4cC5mYWNlX3ZlcnRleF91di5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGYgdmVydGV4L3V2IHZlcnRleC91diB2ZXJ0ZXgvdXZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAxICAgIDIgICAgMyAgICA0ICAgIDUgICAgNiAgIDcgICAgICAgICAgOFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1wiZiAxLzEgMi8yIDMvM1wiLCBcIjFcIiwgXCIxXCIsIFwiMlwiLCBcIjJcIiwgXCIzXCIsIFwiM1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyAxIF0sIHJlc3VsdFsgMyBdLCByZXN1bHRbIDUgXSwgcmVzdWx0WyA3IF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyAyIF0sIHJlc3VsdFsgNCBdLCByZXN1bHRbIDYgXSwgcmVzdWx0WyA4IF1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICggcmVzdWx0ID0gdGhpcy5yZWdleHAuZmFjZV92ZXJ0ZXhfbm9ybWFsLmV4ZWMoIGxpbmUgKSApICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZiB2ZXJ0ZXgvL25vcm1hbCB2ZXJ0ZXgvL25vcm1hbCB2ZXJ0ZXgvL25vcm1hbFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCAgICAgICAgICAgICAgICAgICAgIDEgICAgMiAgICAzICAgIDQgICAgNSAgICA2ICAgNyAgICAgICAgICA4XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBbXCJmIDEvLzEgMi8vMiAzLy8zXCIsIFwiMVwiLCBcIjFcIiwgXCIyXCIsIFwiMlwiLCBcIjNcIiwgXCIzXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYWRkRmFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbIDEgXSwgcmVzdWx0WyAzIF0sIHJlc3VsdFsgNSBdLCByZXN1bHRbIDcgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyAyIF0sIHJlc3VsdFsgNCBdLCByZXN1bHRbIDYgXSwgcmVzdWx0WyA4IF1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICggcmVzdWx0ID0gdGhpcy5yZWdleHAuZmFjZV92ZXJ0ZXguZXhlYyggbGluZSApICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmIHZlcnRleCB2ZXJ0ZXggdmVydGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgICAgICAgICAgMSAgICAyICAgIDMgICA0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBbXCJmIDEgMiAzXCIsIFwiMVwiLCBcIjJcIiwgXCIzXCIsIHVuZGVmaW5lZF1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyAxIF0sIHJlc3VsdFsgMiBdLCByZXN1bHRbIDMgXSwgcmVzdWx0WyA0IF1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiVW5leHBlY3RlZCBmYWNlIGxpbmU6ICdcIiArIGxpbmUgICsgXCInXCIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGxpbmVGaXJzdENoYXIgPT09IFwibFwiICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbGluZVBhcnRzID0gbGluZS5zdWJzdHJpbmcoIDEgKS50cmltKCkuc3BsaXQoIFwiIFwiICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5lVmVydGljZXMgPSBbXSwgbGluZVVWcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxpbmUuaW5kZXhPZiggXCIvXCIgKSA9PT0gLSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVZlcnRpY2VzID0gbGluZVBhcnRzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGxpID0gMCwgbGxlbiA9IGxpbmVQYXJ0cy5sZW5ndGg7IGxpIDwgbGxlbjsgbGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gbGluZVBhcnRzWyBsaSBdLnNwbGl0KCBcIi9cIiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFydHNbIDAgXSAhPT0gXCJcIiApIGxpbmVWZXJ0aWNlcy5wdXNoKCBwYXJ0c1sgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJ0c1sgMSBdICE9PSBcIlwiICkgbGluZVVWcy5wdXNoKCBwYXJ0c1sgMSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuYWRkTGluZUdlb21ldHJ5KCBsaW5lVmVydGljZXMsIGxpbmVVVnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAoIHJlc3VsdCA9IHRoaXMucmVnZXhwLm9iamVjdF9wYXR0ZXJuLmV4ZWMoIGxpbmUgKSApICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBvIG9iamVjdF9uYW1lXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGcgZ3JvdXBfbmFtZVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBXT1JLQVJPVU5EOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yODY5XG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBuYW1lID0gcmVzdWx0WyAwIF0uc3Vic3RyKCAxICkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9ICggXCIgXCIgKyByZXN1bHRbIDAgXS5zdWJzdHIoIDEgKS50cmltKCkgKS5zdWJzdHIoIDEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuc3RhcnRPYmplY3QoIG5hbWUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLnJlZ2V4cC5tYXRlcmlhbF91c2VfcGF0dGVybi50ZXN0KCBsaW5lICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGVyaWFsXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm9iamVjdC5zdGFydE1hdGVyaWFsKCBsaW5lLnN1YnN0cmluZyggNyApLnRyaW0oKSwgc3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLnJlZ2V4cC5tYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4udGVzdCggbGluZSApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBtdGwgZmlsZVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tYXRlcmlhbExpYnJhcmllcy5wdXNoKCBsaW5lLnN1YnN0cmluZyggNyApLnRyaW0oKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICggcmVzdWx0ID0gdGhpcy5yZWdleHAuc21vb3RoaW5nX3BhdHRlcm4uZXhlYyggbGluZSApICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHNtb290aCBzaGFkaW5nXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0b2RvIEhhbmRsZSBmaWxlcyB0aGF0IGhhdmUgdmFyeWluZyBzbW9vdGggdmFsdWVzIGZvciBhIHNldCBvZiBmYWNlcyBpbnNpZGUgb25lIGdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgZG9lcyBub3QgZGVmaW5lIGEgdXNlbXRsIGZvciBlYWNoIGZhY2Ugc2V0LlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBkZXRlY3RlZCBhbmQgYSBkdW1teSBtYXRlcmlhbCBjcmVhdGVkIChsYXRlciBNdWx0aU1hdGVyaWFsIGFuZCBnZW9tZXRyeSBncm91cHMpLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmVzIHNvbWUgY2FyZSB0byBub3QgY3JlYXRlIGV4dHJhIG1hdGVyaWFsIG9uIGVhY2ggc21vb3RoIHZhbHVlIGZvciBcIm5vcm1hbFwiIG9iaiBmaWxlcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlcmUgZXhwbGljaXQgdXNlbXRsIGRlZmluZXMgZ2VvbWV0cnkgZ3JvdXBzLlxuICAgICAgICAgICAgICAgICAgICAvLyBFeGFtcGxlIGFzc2V0OiBleGFtcGxlcy9tb2RlbHMvb2JqL2NlcmJlcnVzL0NlcmJlcnVzLm9ialxuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHRbIDEgXS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUub2JqZWN0LnNtb290aCA9ICggdmFsdWUgPT09ICcxJyB8fCB2YWx1ZSA9PT0gJ29uJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBzdGF0ZS5vYmplY3QuY3VycmVudE1hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5zbW9vdGggPSBzdGF0ZS5vYmplY3Quc21vb3RoO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIG51bGwgdGVybWluYXRlZCBmaWxlcyB3aXRob3V0IGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxpbmUgPT09ICdcXDAnICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggXCJVbmV4cGVjdGVkIGxpbmU6ICdcIiArIGxpbmUgICsgXCInXCIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBzdGF0ZS5maW5hbGl6ZSgpO1xuICAgIFxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgICAgICAgY29udGFpbmVyLm1hdGVyaWFsTGlicmFyaWVzID0gW10uY29uY2F0KCBzdGF0ZS5tYXRlcmlhbExpYnJhcmllcyApO1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gc3RhdGUub2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBzdGF0ZS5vYmplY3RzWyBpIF07XG4gICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbHMgPSBvYmplY3QubWF0ZXJpYWxzO1xuICAgICAgICAgICAgICAgIHZhciBpc0xpbmUgPSAoIGdlb21ldHJ5LnR5cGUgPT09ICdMaW5lJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIFNraXAgby9nIGxpbmUgZGVjbGFyYXRpb25zIHRoYXQgZGlkIG5vdCBmb2xsb3cgd2l0aCBhbnkgZmFjZXNcbiAgICAgICAgICAgICAgICBpZiAoIGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBidWZmZXJnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKSwgMyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCA+IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5Lm5vcm1hbHMgKSwgMyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBnZW9tZXRyeS51dnMubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBnZW9tZXRyeS51dnMgKSwgMiApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBtYXRlcmlhbHNcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZE1hdGVyaWFscyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBtaSA9IDAsIG1pTGVuID0gbWF0ZXJpYWxzLmxlbmd0aDsgbWkgPCBtaUxlbiA7IG1pKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2VNYXRlcmlhbCA9IG1hdGVyaWFsc1ttaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHVuZGVmaW5lZDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLm1hdGVyaWFscyAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbHMuY3JlYXRlKCBzb3VyY2VNYXRlcmlhbC5uYW1lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtdGwgZXRjLiBsb2FkZXJzIHByb2JhYmx5IGNhbid0IGNyZWF0ZSBsaW5lIG1hdGVyaWFscyBjb3JyZWN0bHksIGNvcHkgcHJvcGVydGllcyB0byBhIGxpbmUgbWF0ZXJpYWwuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGlzTGluZSAmJiBtYXRlcmlhbCAmJiAhICggbWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbExpbmUgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbExpbmUuY29weSggbWF0ZXJpYWwgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG1hdGVyaWFsTGluZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgbWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9ICggISBpc0xpbmUgPyBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSA6IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5uYW1lID0gc291cmNlTWF0ZXJpYWwubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5zaGFkaW5nID0gc291cmNlTWF0ZXJpYWwuc21vb3RoID8gVEhSRUUuU21vb3RoU2hhZGluZyA6IFRIUkVFLkZsYXRTaGFkaW5nO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkTWF0ZXJpYWxzLnB1c2gobWF0ZXJpYWwpO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgbWVzaFxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtZXNoO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggY3JlYXRlZE1hdGVyaWFscy5sZW5ndGggPiAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbWkgPSAwLCBtaUxlbiA9IG1hdGVyaWFscy5sZW5ndGg7IG1pIDwgbWlMZW4gOyBtaSsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZU1hdGVyaWFsID0gbWF0ZXJpYWxzW21pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEdyb3VwKCBzb3VyY2VNYXRlcmlhbC5ncm91cFN0YXJ0LCBzb3VyY2VNYXRlcmlhbC5ncm91cENvdW50LCBtaSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1lc2ggPSAoICEgaXNMaW5lID8gbmV3IFRIUkVFLk1lc2goIGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzICkgOiBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKCBidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFscyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWVzaCA9ICggISBpc0xpbmUgPyBuZXcgVEhSRUUuTWVzaCggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHNbIDAgXSApIDogbmV3IFRIUkVFLkxpbmVTZWdtZW50cyggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHNbIDAgXSApICk7XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIG1lc2gubmFtZSA9IG9iamVjdC5uYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGQoIG1lc2ggKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZCggJ09CSkxvYWRlcicgKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICB9OyAgICAiLCIvKipcbiAqIExvYWRzIGEgV2F2ZWZyb250IC5tdGwgZmlsZSBzcGVjaWZ5aW5nIG1hdGVyaWFsc1xuICpcbiAqIEBhdXRob3IgYW5nZWx4dWFuY2hhbmdcbiAqL1xuXG5USFJFRS5NVExMb2FkZXIgPSBmdW5jdGlvbiAoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn07XG5cblRIUkVFLk1UTExvYWRlci5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IFRIUkVFLk1UTExvYWRlcixcblxuXHQvKipcblx0ICogTG9hZHMgYW5kIHBhcnNlcyBhIE1UTCBhc3NldCBmcm9tIGEgVVJMLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gVVJMIHRvIHRoZSBNVEwgZmlsZS5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gW29uTG9hZF0gLSBDYWxsYmFjayBpbnZva2VkIHdpdGggdGhlIGxvYWRlZCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtvblByb2dyZXNzXSAtIENhbGxiYWNrIGZvciBkb3dubG9hZCBwcm9ncmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gW29uRXJyb3JdIC0gQ2FsbGJhY2sgZm9yIGRvd25sb2FkIGVycm9ycy5cblx0ICpcblx0ICogQHNlZSBzZXRQYXRoIHNldFRleHR1cmVQYXRoXG5cdCAqXG5cdCAqIEBub3RlIEluIG9yZGVyIGZvciByZWxhdGl2ZSB0ZXh0dXJlIHJlZmVyZW5jZXMgdG8gcmVzb2x2ZSBjb3JyZWN0bHlcblx0ICogeW91IG11c3QgY2FsbCBzZXRQYXRoIGFuZC9vciBzZXRUZXh0dXJlUGF0aCBleHBsaWNpdGx5IHByaW9yIHRvIGxvYWQuXG5cdCAqL1xuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggdGV4dCApICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fSxcblxuXHQvKipcblx0ICogU2V0IGJhc2UgcGF0aCBmb3IgcmVzb2x2aW5nIHJlZmVyZW5jZXMuXG5cdCAqIElmIHNldCB0aGlzIHBhdGggd2lsbCBiZSBwcmVwZW5kZWQgdG8gZWFjaCBsb2FkZWQgYW5kIGZvdW5kIHJlZmVyZW5jZS5cblx0ICpcblx0ICogQHNlZSBzZXRUZXh0dXJlUGF0aFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuXHQgKlxuXHQgKiBAZXhhbXBsZVxuXHQgKiAgICAgbXRsTG9hZGVyLnNldFBhdGgoICdhc3NldHMvb2JqLycgKTtcblx0ICogICAgIG10bExvYWRlci5sb2FkKCAnbXkubXRsJywgLi4uICk7XG5cdCAqL1xuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHBhdGggKSB7XG5cblx0XHR0aGlzLnBhdGggPSBwYXRoO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldCBiYXNlIHBhdGggZm9yIHJlc29sdmluZyB0ZXh0dXJlIHJlZmVyZW5jZXMuXG5cdCAqIElmIHNldCB0aGlzIHBhdGggd2lsbCBiZSBwcmVwZW5kZWQgZm91bmQgdGV4dHVyZSByZWZlcmVuY2UuXG5cdCAqIElmIG5vdCBzZXQgYW5kIHNldFBhdGggaXMsIGl0IHdpbGwgYmUgdXNlZCBhcyB0ZXh0dXJlIGJhc2UgcGF0aC5cblx0ICpcblx0ICogQHNlZSBzZXRQYXRoXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG5cdCAqXG5cdCAqIEBleGFtcGxlXG5cdCAqICAgICBtdGxMb2FkZXIuc2V0UGF0aCggJ2Fzc2V0cy9vYmovJyApO1xuXHQgKiAgICAgbXRsTG9hZGVyLnNldFRleHR1cmVQYXRoKCAnYXNzZXRzL3RleHR1cmVzLycgKTtcblx0ICogICAgIG10bExvYWRlci5sb2FkKCAnbXkubXRsJywgLi4uICk7XG5cdCAqL1xuXHRzZXRUZXh0dXJlUGF0aDogZnVuY3Rpb24gKCBwYXRoICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlUGF0aCA9IHBhdGg7XG5cblx0fSxcblxuXHRzZXRCYXNlVXJsOiBmdW5jdGlvbiAoIHBhdGggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NVExMb2FkZXI6IC5zZXRCYXNlVXJsKCkgaXMgZGVwcmVjYXRlZC4gVXNlIC5zZXRUZXh0dXJlUGF0aCggcGF0aCApIGZvciB0ZXh0dXJlIHBhdGggb3IgLnNldFBhdGgoIHBhdGggKSBmb3IgZ2VuZXJhbCBiYXNlIHBhdGggaW5zdGVhZC4nICk7XG5cblx0XHR0aGlzLnNldFRleHR1cmVQYXRoKCBwYXRoICk7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblxuXHR9LFxuXG5cdHNldE1hdGVyaWFsT3B0aW9uczogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubWF0ZXJpYWxPcHRpb25zID0gdmFsdWU7XG5cblx0fSxcblxuXHQvKipcblx0ICogUGFyc2VzIGEgTVRMIGZpbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IC0gQ29udGVudCBvZiBNVEwgZmlsZVxuXHQgKiBAcmV0dXJuIHtUSFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yfVxuXHQgKlxuXHQgKiBAc2VlIHNldFBhdGggc2V0VGV4dHVyZVBhdGhcblx0ICpcblx0ICogQG5vdGUgSW4gb3JkZXIgZm9yIHJlbGF0aXZlIHRleHR1cmUgcmVmZXJlbmNlcyB0byByZXNvbHZlIGNvcnJlY3RseVxuXHQgKiB5b3UgbXVzdCBjYWxsIHNldFBhdGggYW5kL29yIHNldFRleHR1cmVQYXRoIGV4cGxpY2l0bHkgcHJpb3IgdG8gcGFyc2UuXG5cdCAqL1xuXHRwYXJzZTogZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0dmFyIGxpbmVzID0gdGV4dC5zcGxpdCggJ1xcbicgKTtcblx0XHR2YXIgaW5mbyA9IHt9O1xuXHRcdHZhciBkZWxpbWl0ZXJfcGF0dGVybiA9IC9cXHMrLztcblx0XHR2YXIgbWF0ZXJpYWxzSW5mbyA9IHt9O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGluZSA9IGxpbmVzWyBpIF07XG5cdFx0XHRsaW5lID0gbGluZS50cmltKCk7XG5cblx0XHRcdGlmICggbGluZS5sZW5ndGggPT09IDAgfHwgbGluZS5jaGFyQXQoIDAgKSA9PT0gJyMnICkge1xuXG5cdFx0XHRcdC8vIEJsYW5rIGxpbmUgb3IgY29tbWVudCBpZ25vcmVcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHBvcyA9IGxpbmUuaW5kZXhPZiggJyAnICk7XG5cblx0XHRcdHZhciBrZXkgPSAoIHBvcyA+PSAwICkgPyBsaW5lLnN1YnN0cmluZyggMCwgcG9zICkgOiBsaW5lO1xuXHRcdFx0a2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdHZhciB2YWx1ZSA9ICggcG9zID49IDAgKSA/IGxpbmUuc3Vic3RyaW5nKCBwb3MgKyAxICkgOiAnJztcblx0XHRcdHZhbHVlID0gdmFsdWUudHJpbSgpO1xuXG5cdFx0XHRpZiAoIGtleSA9PT0gJ25ld210bCcgKSB7XG5cblx0XHRcdFx0Ly8gTmV3IG1hdGVyaWFsXG5cblx0XHRcdFx0aW5mbyA9IHsgbmFtZTogdmFsdWUgfTtcblx0XHRcdFx0bWF0ZXJpYWxzSW5mb1sgdmFsdWUgXSA9IGluZm87XG5cblx0XHRcdH0gZWxzZSBpZiAoIGluZm8gKSB7XG5cblx0XHRcdFx0aWYgKCBrZXkgPT09ICdrYScgfHwga2V5ID09PSAna2QnIHx8IGtleSA9PT0gJ2tzJyApIHtcblxuXHRcdFx0XHRcdHZhciBzcyA9IHZhbHVlLnNwbGl0KCBkZWxpbWl0ZXJfcGF0dGVybiwgMyApO1xuXHRcdFx0XHRcdGluZm9bIGtleSBdID0gWyBwYXJzZUZsb2F0KCBzc1sgMCBdICksIHBhcnNlRmxvYXQoIHNzWyAxIF0gKSwgcGFyc2VGbG9hdCggc3NbIDIgXSApIF07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGluZm9bIGtleSBdID0gdmFsdWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgbWF0ZXJpYWxDcmVhdG9yID0gbmV3IFRIUkVFLk1UTExvYWRlci5NYXRlcmlhbENyZWF0b3IoIHRoaXMudGV4dHVyZVBhdGggfHwgdGhpcy5wYXRoLCB0aGlzLm1hdGVyaWFsT3B0aW9ucyApO1xuXHRcdG1hdGVyaWFsQ3JlYXRvci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXHRcdG1hdGVyaWFsQ3JlYXRvci5zZXRNYW5hZ2VyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRtYXRlcmlhbENyZWF0b3Iuc2V0TWF0ZXJpYWxzKCBtYXRlcmlhbHNJbmZvICk7XG5cdFx0cmV0dXJuIG1hdGVyaWFsQ3JlYXRvcjtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IFRIUkVFLU1UTExvYWRlci5NYXRlcmlhbENyZWF0b3JcbiAqIEBwYXJhbSBiYXNlVXJsIC0gVXJsIHJlbGF0aXZlIHRvIHdoaWNoIHRleHR1cmVzIGFyZSBsb2FkZWRcbiAqIEBwYXJhbSBvcHRpb25zIC0gU2V0IG9mIG9wdGlvbnMgb24gaG93IHRvIGNvbnN0cnVjdCB0aGUgbWF0ZXJpYWxzXG4gKiAgICAgICAgICAgICAgICAgIHNpZGU6IFdoaWNoIHNpZGUgdG8gYXBwbHkgdGhlIG1hdGVyaWFsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIFRIUkVFLkZyb250U2lkZSAoZGVmYXVsdCksIFRIUkVFLkJhY2tTaWRlLCBUSFJFRS5Eb3VibGVTaWRlXG4gKiAgICAgICAgICAgICAgICAgIHdyYXA6IFdoYXQgdHlwZSBvZiB3cmFwcGluZyB0byBhcHBseSBmb3IgdGV4dHVyZXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuUmVwZWF0V3JhcHBpbmcgKGRlZmF1bHQpLCBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLCBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nXG4gKiAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVJHQjogUkdCcyBuZWVkIHRvIGJlIG5vcm1hbGl6ZWQgdG8gMC0xIGZyb20gMC0yNTVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBmYWxzZSwgYXNzdW1lZCB0byBiZSBhbHJlYWR5IG5vcm1hbGl6ZWRcbiAqICAgICAgICAgICAgICAgICAgaWdub3JlWmVyb1JHQnM6IElnbm9yZSB2YWx1ZXMgb2YgUkdCcyAoS2EsS2QsS3MpIHRoYXQgYXJlIGFsbCAwJ3NcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IGZhbHNlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5USFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yID0gZnVuY3Rpb24gKCBiYXNlVXJsLCBvcHRpb25zICkge1xuXG5cdHRoaXMuYmFzZVVybCA9IGJhc2VVcmwgfHwgJyc7XG5cdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdHRoaXMubWF0ZXJpYWxzSW5mbyA9IHt9O1xuXHR0aGlzLm1hdGVyaWFscyA9IHt9O1xuXHR0aGlzLm1hdGVyaWFsc0FycmF5ID0gW107XG5cdHRoaXMubmFtZUxvb2t1cCA9IHt9O1xuXG5cdHRoaXMuc2lkZSA9ICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5zaWRlICkgPyB0aGlzLm9wdGlvbnMuc2lkZSA6IFRIUkVFLkZyb250U2lkZTtcblx0dGhpcy53cmFwID0gKCB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLndyYXAgKSA/IHRoaXMub3B0aW9ucy53cmFwIDogVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG5cbn07XG5cblRIUkVFLk1UTExvYWRlci5NYXRlcmlhbENyZWF0b3IucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBUSFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yLFxuXG5cdGNyb3NzT3JpZ2luOiAnQW5vbnltb3VzJyxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblxuXHR9LFxuXG5cdHNldE1hbmFnZXI6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLm1hbmFnZXIgPSB2YWx1ZTtcblxuXHR9LFxuXG5cdHNldE1hdGVyaWFsczogZnVuY3Rpb24gKCBtYXRlcmlhbHNJbmZvICkge1xuXG5cdFx0dGhpcy5tYXRlcmlhbHNJbmZvID0gdGhpcy5jb252ZXJ0KCBtYXRlcmlhbHNJbmZvICk7XG5cdFx0dGhpcy5tYXRlcmlhbHMgPSB7fTtcblx0XHR0aGlzLm1hdGVyaWFsc0FycmF5ID0gW107XG5cdFx0dGhpcy5uYW1lTG9va3VwID0ge307XG5cblx0fSxcblxuXHRjb252ZXJ0OiBmdW5jdGlvbiAoIG1hdGVyaWFsc0luZm8gKSB7XG5cblx0XHRpZiAoICEgdGhpcy5vcHRpb25zICkgcmV0dXJuIG1hdGVyaWFsc0luZm87XG5cblx0XHR2YXIgY29udmVydGVkID0ge307XG5cblx0XHRmb3IgKCB2YXIgbW4gaW4gbWF0ZXJpYWxzSW5mbyApIHtcblxuXHRcdFx0Ly8gQ29udmVydCBtYXRlcmlhbHMgaW5mbyBpbnRvIG5vcm1hbGl6ZWQgZm9ybSBiYXNlZCBvbiBvcHRpb25zXG5cblx0XHRcdHZhciBtYXQgPSBtYXRlcmlhbHNJbmZvWyBtbiBdO1xuXG5cdFx0XHR2YXIgY292bWF0ID0ge307XG5cblx0XHRcdGNvbnZlcnRlZFsgbW4gXSA9IGNvdm1hdDtcblxuXHRcdFx0Zm9yICggdmFyIHByb3AgaW4gbWF0ICkge1xuXG5cdFx0XHRcdHZhciBzYXZlID0gdHJ1ZTtcblx0XHRcdFx0dmFyIHZhbHVlID0gbWF0WyBwcm9wIF07XG5cdFx0XHRcdHZhciBscHJvcCA9IHByb3AudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBscHJvcCApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ2tkJzpcblx0XHRcdFx0XHRjYXNlICdrYSc6XG5cdFx0XHRcdFx0Y2FzZSAna3MnOlxuXG5cdFx0XHRcdFx0XHQvLyBEaWZmdXNlIGNvbG9yIChjb2xvciB1bmRlciB3aGl0ZSBsaWdodCkgdXNpbmcgUkdCIHZhbHVlc1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubm9ybWFsaXplUkdCICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhbHVlID0gWyB2YWx1ZVsgMCBdIC8gMjU1LCB2YWx1ZVsgMSBdIC8gMjU1LCB2YWx1ZVsgMiBdIC8gMjU1IF07XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmlnbm9yZVplcm9SR0JzICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdmFsdWVbIDAgXSA9PT0gMCAmJiB2YWx1ZVsgMSBdID09PSAwICYmIHZhbHVlWyAyIF0gPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBpZ25vcmVcblxuXHRcdFx0XHRcdFx0XHRcdHNhdmUgPSBmYWxzZTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzYXZlICkge1xuXG5cdFx0XHRcdFx0Y292bWF0WyBscHJvcCBdID0gdmFsdWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udmVydGVkO1xuXG5cdH0sXG5cblx0cHJlbG9hZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Zm9yICggdmFyIG1uIGluIHRoaXMubWF0ZXJpYWxzSW5mbyApIHtcblxuXHRcdFx0dGhpcy5jcmVhdGUoIG1uICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRnZXRJbmRleDogZnVuY3Rpb24gKCBtYXRlcmlhbE5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5uYW1lTG9va3VwWyBtYXRlcmlhbE5hbWUgXTtcblxuXHR9LFxuXG5cdGdldEFzQXJyYXk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpbmRleCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgbW4gaW4gdGhpcy5tYXRlcmlhbHNJbmZvICkge1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsc0FycmF5WyBpbmRleCBdID0gdGhpcy5jcmVhdGUoIG1uICk7XG5cdFx0XHR0aGlzLm5hbWVMb29rdXBbIG1uIF0gPSBpbmRleDtcblx0XHRcdGluZGV4ICsrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubWF0ZXJpYWxzQXJyYXk7XG5cblx0fSxcblxuXHRjcmVhdGU6IGZ1bmN0aW9uICggbWF0ZXJpYWxOYW1lICkge1xuXG5cdFx0aWYgKCB0aGlzLm1hdGVyaWFsc1sgbWF0ZXJpYWxOYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5jcmVhdGVNYXRlcmlhbF8oIG1hdGVyaWFsTmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubWF0ZXJpYWxzWyBtYXRlcmlhbE5hbWUgXTtcblxuXHR9LFxuXG5cdGNyZWF0ZU1hdGVyaWFsXzogZnVuY3Rpb24gKCBtYXRlcmlhbE5hbWUgKSB7XG5cblx0XHQvLyBDcmVhdGUgbWF0ZXJpYWxcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cdFx0dmFyIG1hdCA9IHRoaXMubWF0ZXJpYWxzSW5mb1sgbWF0ZXJpYWxOYW1lIF07XG5cdFx0dmFyIHBhcmFtcyA9IHtcblxuXHRcdFx0bmFtZTogbWF0ZXJpYWxOYW1lLFxuXHRcdFx0c2lkZTogdGhpcy5zaWRlXG5cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gcmVzb2x2ZVVSTCggYmFzZVVybCwgdXJsICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHVybCA9PT0gJycgKVxuXHRcdFx0XHRyZXR1cm4gJyc7XG5cblx0XHRcdC8vIEFic29sdXRlIFVSTFxuXHRcdFx0aWYgKCAvXmh0dHBzPzpcXC9cXC8vaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG5cblx0XHRcdHJldHVybiBiYXNlVXJsICsgdXJsO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2V0TWFwRm9yVHlwZSggbWFwVHlwZSwgdmFsdWUgKSB7XG5cblx0XHRcdGlmICggcGFyYW1zWyBtYXBUeXBlIF0gKSByZXR1cm47IC8vIEtlZXAgdGhlIGZpcnN0IGVuY291bnRlcmVkIHRleHR1cmVcblxuXHRcdFx0dmFyIHRleFBhcmFtcyA9IHNjb3BlLmdldFRleHR1cmVQYXJhbXMoIHZhbHVlLCBwYXJhbXMgKTtcblx0XHRcdHZhciBtYXAgPSBzY29wZS5sb2FkVGV4dHVyZSggcmVzb2x2ZVVSTCggc2NvcGUuYmFzZVVybCwgdGV4UGFyYW1zLnVybCApICk7XG5cblx0XHRcdG1hcC5yZXBlYXQuY29weSggdGV4UGFyYW1zLnNjYWxlICk7XG5cdFx0XHRtYXAub2Zmc2V0LmNvcHkoIHRleFBhcmFtcy5vZmZzZXQgKTtcblxuXHRcdFx0bWFwLndyYXBTID0gc2NvcGUud3JhcDtcblx0XHRcdG1hcC53cmFwVCA9IHNjb3BlLndyYXA7XG5cblx0XHRcdHBhcmFtc1sgbWFwVHlwZSBdID0gbWFwO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIHByb3AgaW4gbWF0ICkge1xuXG5cdFx0XHR2YXIgdmFsdWUgPSBtYXRbIHByb3AgXTtcblx0XHRcdHZhciBuO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSAnJyApIGNvbnRpbnVlO1xuXG5cdFx0XHRzd2l0Y2ggKCBwcm9wLnRvTG93ZXJDYXNlKCkgKSB7XG5cblx0XHRcdFx0Ly8gTnMgaXMgbWF0ZXJpYWwgc3BlY3VsYXIgZXhwb25lbnRcblxuXHRcdFx0XHRjYXNlICdrZCc6XG5cblx0XHRcdFx0XHQvLyBEaWZmdXNlIGNvbG9yIChjb2xvciB1bmRlciB3aGl0ZSBsaWdodCkgdXNpbmcgUkdCIHZhbHVlc1xuXG5cdFx0XHRcdFx0cGFyYW1zLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAna3MnOlxuXG5cdFx0XHRcdFx0Ly8gU3BlY3VsYXIgY29sb3IgKGNvbG9yIHdoZW4gbGlnaHQgaXMgcmVmbGVjdGVkIGZyb20gc2hpbnkgc3VyZmFjZSkgdXNpbmcgUkdCIHZhbHVlc1xuXHRcdFx0XHRcdHBhcmFtcy5zcGVjdWxhciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ21hcF9rZCc6XG5cblx0XHRcdFx0XHQvLyBEaWZmdXNlIHRleHR1cmUgbWFwXG5cblx0XHRcdFx0XHRzZXRNYXBGb3JUeXBlKCBcIm1hcFwiLCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbWFwX2tzJzpcblxuXHRcdFx0XHRcdC8vIFNwZWN1bGFyIG1hcFxuXG5cdFx0XHRcdFx0c2V0TWFwRm9yVHlwZSggXCJzcGVjdWxhck1hcFwiLCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbm9ybSc6XG5cblx0XHRcdFx0XHRzZXRNYXBGb3JUeXBlKCBcIm5vcm1hbE1hcFwiLCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbWFwX2J1bXAnOlxuXHRcdFx0XHRjYXNlICdidW1wJzpcblxuXHRcdFx0XHRcdC8vIEJ1bXAgdGV4dHVyZSBtYXBcblxuXHRcdFx0XHRcdHNldE1hcEZvclR5cGUoIFwiYnVtcE1hcFwiLCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbnMnOlxuXG5cdFx0XHRcdFx0Ly8gVGhlIHNwZWN1bGFyIGV4cG9uZW50IChkZWZpbmVzIHRoZSBmb2N1cyBvZiB0aGUgc3BlY3VsYXIgaGlnaGxpZ2h0KVxuXHRcdFx0XHRcdC8vIEEgaGlnaCBleHBvbmVudCByZXN1bHRzIGluIGEgdGlnaHQsIGNvbmNlbnRyYXRlZCBoaWdobGlnaHQuIE5zIHZhbHVlcyBub3JtYWxseSByYW5nZSBmcm9tIDAgdG8gMTAwMC5cblxuXHRcdFx0XHRcdHBhcmFtcy5zaGluaW5lc3MgPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnZCc6XG5cdFx0XHRcdFx0biA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG5cblx0XHRcdFx0XHRpZiAoIG4gPCAxICkge1xuXG5cdFx0XHRcdFx0XHRwYXJhbXMub3BhY2l0eSA9IG47XG5cdFx0XHRcdFx0XHRwYXJhbXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndHInOlxuXHRcdFx0XHRcdG4gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmludmVydFRyUHJvcGVydHkgKSBuID0gMSAtIG47XG5cblx0XHRcdFx0XHRpZiAoIG4gPCAxICkge1xuXG5cdFx0XHRcdFx0XHRwYXJhbXMub3BhY2l0eSA9IG47XG5cdFx0XHRcdFx0XHRwYXJhbXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5tYXRlcmlhbHNbIG1hdGVyaWFsTmFtZSBdID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCBwYXJhbXMgKTtcblx0XHRyZXR1cm4gdGhpcy5tYXRlcmlhbHNbIG1hdGVyaWFsTmFtZSBdO1xuXG5cdH0sXG5cblx0Z2V0VGV4dHVyZVBhcmFtczogZnVuY3Rpb24gKCB2YWx1ZSwgbWF0UGFyYW1zICkge1xuXG5cdFx0dmFyIHRleFBhcmFtcyA9IHtcblxuXHRcdFx0c2NhbGU6IG5ldyBUSFJFRS5WZWN0b3IyKCAxLCAxICksXG5cdFx0XHRvZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IyKCAwLCAwIClcblxuXHRcdCB9O1xuXG5cdFx0dmFyIGl0ZW1zID0gdmFsdWUuc3BsaXQoIC9cXHMrLyApO1xuXHRcdHZhciBwb3M7XG5cblx0XHRwb3MgPSBpdGVtcy5pbmRleE9mKCAnLWJtJyApO1xuXG5cdFx0aWYgKCBwb3MgPj0gMCApIHtcblxuXHRcdFx0bWF0UGFyYW1zLmJ1bXBTY2FsZSA9IHBhcnNlRmxvYXQoIGl0ZW1zWyBwb3MgKyAxIF0gKTtcblx0XHRcdGl0ZW1zLnNwbGljZSggcG9zLCAyICk7XG5cblx0XHR9XG5cblx0XHRwb3MgPSBpdGVtcy5pbmRleE9mKCAnLXMnICk7XG5cblx0XHRpZiAoIHBvcyA+PSAwICkge1xuXG5cdFx0XHR0ZXhQYXJhbXMuc2NhbGUuc2V0KCBwYXJzZUZsb2F0KCBpdGVtc1sgcG9zICsgMSBdICksIHBhcnNlRmxvYXQoIGl0ZW1zWyBwb3MgKyAyIF0gKSApO1xuXHRcdFx0aXRlbXMuc3BsaWNlKCBwb3MsIDQgKTsgLy8gd2UgZXhwZWN0IDMgcGFyYW1ldGVycyBoZXJlIVxuXG5cdFx0fVxuXG5cdFx0cG9zID0gaXRlbXMuaW5kZXhPZiggJy1vJyApO1xuXG5cdFx0aWYgKCBwb3MgPj0gMCApIHtcblxuXHRcdFx0dGV4UGFyYW1zLm9mZnNldC5zZXQoIHBhcnNlRmxvYXQoIGl0ZW1zWyBwb3MgKyAxIF0gKSwgcGFyc2VGbG9hdCggaXRlbXNbIHBvcyArIDIgXSApICk7XG5cdFx0XHRpdGVtcy5zcGxpY2UoIHBvcywgNCApOyAvLyB3ZSBleHBlY3QgMyBwYXJhbWV0ZXJzIGhlcmUhXG5cblx0XHR9XG5cblx0XHR0ZXhQYXJhbXMudXJsID0gaXRlbXMuam9pbiggJyAnICkudHJpbSgpO1xuXHRcdHJldHVybiB0ZXhQYXJhbXM7XG5cblx0fSxcblxuXHRsb2FkVGV4dHVyZTogZnVuY3Rpb24gKCB1cmwsIG1hcHBpbmcsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciB0ZXh0dXJlO1xuXHRcdHZhciBsb2FkZXIgPSBUSFJFRS5Mb2FkZXIuSGFuZGxlcnMuZ2V0KCB1cmwgKTtcblx0XHR2YXIgbWFuYWdlciA9ICggdGhpcy5tYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IHRoaXMubWFuYWdlciA6IFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuXHRcdGlmICggbG9hZGVyID09PSBudWxsICkge1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlciggbWFuYWdlciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4gKSBsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHR0ZXh0dXJlID0gbG9hZGVyLmxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHRpZiAoIG1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn07XG4iLCIvKipcbiAqIEBhdXRob3IgUmljaCBUaWJiZXR0IC8gaHR0cHM6Ly9naXRodWIuY29tL3JpY2h0clxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgVG9ueSBQYXJpc2kgLyBodHRwOi8vd3d3LnRvbnlwYXJpc2kuY29tL1xuICogQGF1dGhvciBUYWthaGlybyAvIGh0dHBzOi8vZ2l0aHViLmNvbS90YWthaGlyb3hcbiAqIEBhdXRob3IgRG9uIE1jQ3VyZHkgLyBodHRwczovL3d3dy5kb25tY2N1cmR5LmNvbVxuICovXG5cblRIUkVFLkdMVEZMb2FkZXIgPSAoIGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgZnVuY3Rpb24gR0xURkxvYWRlciggbWFuYWdlciApIHtcbiAgICBcbiAgICAgICAgICAgIHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIEdMVEZMb2FkZXIucHJvdG90eXBlID0ge1xuICAgIFxuICAgICAgICAgICAgY29uc3RydWN0b3I6IEdMVEZMb2FkZXIsXG4gICAgXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogJ0Fub255bW91cycsXG4gICAgXG4gICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCA/IHRoaXMucGF0aCA6IFRIUkVFLkxvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG4gICAgXG4gICAgICAgICAgICAgICAgbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFyc2UoIGRhdGEsIHBhdGgsIG9uTG9hZCwgb25FcnJvciApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICggZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoIGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgc2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24gKCBkYXRhLCBwYXRoLCBvbkxvYWQsIG9uRXJyb3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hZ2ljID0gVEhSRUUuTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggbmV3IFVpbnQ4QXJyYXkoIGRhdGEsIDAsIDQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hZ2ljID09PSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEYgXSA9IG5ldyBHTFRGQmluYXJ5RXh0ZW5zaW9uKCBkYXRhICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvbkVycm9yICkgb25FcnJvciggZXJyb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEYgXS5jb250ZW50O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IFRIUkVFLkxvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBkYXRhICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoIGNvbnRlbnQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGpzb24uYXNzZXQgPT09IHVuZGVmaW5lZCB8fCBqc29uLmFzc2V0LnZlcnNpb25bIDAgXSA8IDIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggb25FcnJvciApIG9uRXJyb3IoIG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IFVuc3VwcG9ydGVkIGFzc2V0LiBnbFRGIHZlcnNpb25zID49Mi4wIGFyZSBzdXBwb3J0ZWQuIFVzZSBMZWdhY3lHTFRGTG9hZGVyIGluc3RlYWQuJyApICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBqc29uLmV4dGVuc2lvbnNVc2VkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGpzb24uZXh0ZW5zaW9uc1VzZWQuaW5kZXhPZiggRVhURU5TSU9OUy5LSFJfTElHSFRTICkgPj0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUUyBdID0gbmV3IEdMVEZMaWdodHNFeHRlbnNpb24oIGpzb24gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGpzb24uZXh0ZW5zaW9uc1VzZWQuaW5kZXhPZiggRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTICkgPj0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyBdID0gbmV3IEdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24oKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWUoICdHTFRGTG9hZGVyJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgR0xURlBhcnNlcigganNvbiwgZXh0ZW5zaW9ucywge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBwYXRoIHx8IHRoaXMucGF0aCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHRoaXMuY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZXI6IHRoaXMubWFuYWdlclxuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJzZXIucGFyc2UoIGZ1bmN0aW9uICggc2NlbmUsIHNjZW5lcywgY2FtZXJhcywgYW5pbWF0aW9ucywgYXNzZXQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZCggJ0dMVEZMb2FkZXInICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBnbFRGID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmU6IHNjZW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmVzOiBzY2VuZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lcmFzOiBjYW1lcmFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0OiBhc3NldFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBvbkxvYWQoIGdsVEYgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LCBvbkVycm9yICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qIEdMVEZSRUdJU1RSWSAqL1xuICAgIFxuICAgICAgICBmdW5jdGlvbiBHTFRGUmVnaXN0cnkoKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgb2JqZWN0cyA9IHt9O1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuXHR7XG4gICAgXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoIGtleSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdHNbIGtleSBdO1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAoIGtleSwgb2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBvYmplY3RzWyBrZXkgXSA9IG9iamVjdDtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RzWyBrZXkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIHJlbW92ZUFsbDogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBvYmplY3RzID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICAvKioqKioqKioqKiBFWFRFTlNJT05TICoqKioqKioqKioqL1xuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIFxuICAgICAgICB2YXIgRVhURU5TSU9OUyA9IHtcbiAgICAgICAgICAgIEtIUl9CSU5BUllfR0xURjogJ0tIUl9iaW5hcnlfZ2xURicsXG4gICAgICAgICAgICBLSFJfTElHSFRTOiAnS0hSX2xpZ2h0cycsXG4gICAgICAgICAgICBLSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTOiAnS0hSX21hdGVyaWFsc19wYnJTcGVjdWxhckdsb3NzaW5lc3MnXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaWdodHMgRXh0ZW5zaW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IFBFTkRJTkdcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEdMVEZMaWdodHNFeHRlbnNpb24oIGpzb24gKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9MSUdIVFM7XG4gICAgXG4gICAgICAgICAgICB0aGlzLmxpZ2h0cyA9IHt9O1xuICAgIFxuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbiA9ICgganNvbi5leHRlbnNpb25zICYmIGpzb24uZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTIF0gKSB8fCB7fTtcbiAgICAgICAgICAgIHZhciBsaWdodHMgPSBleHRlbnNpb24ubGlnaHRzIHx8IHt9O1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGxpZ2h0SWQgaW4gbGlnaHRzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBsaWdodCA9IGxpZ2h0c1sgbGlnaHRJZCBdO1xuICAgICAgICAgICAgICAgIHZhciBsaWdodE5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KCBsaWdodC5jb2xvciApO1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpcmVjdGlvbmFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZSA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KCBjb2xvciApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHROb2RlLnBvc2l0aW9uLnNldCggMCwgMCwgMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZSA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KCBjb2xvciApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nwb3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHROb2RlID0gbmV3IFRIUkVFLlNwb3RMaWdodCggY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5wb3NpdGlvbi5zZXQoIDAsIDAsIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdhbWJpZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZSA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoIGNvbG9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBsaWdodE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHQuY29uc3RhbnRBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHROb2RlLmludGVuc2l0eSA9IGxpZ2h0LmNvbnN0YW50QXR0ZW51YXRpb247XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaWdodC5saW5lYXJBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHROb2RlLmRpc3RhbmNlID0gMSAvIGxpZ2h0LmxpbmVhckF0dGVudWF0aW9uO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHQucXVhZHJhdGljQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5kZWNheSA9IGxpZ2h0LnF1YWRyYXRpY0F0dGVudWF0aW9uO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHQuZmFsbE9mZkFuZ2xlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodE5vZGUuYW5nbGUgPSBsaWdodC5mYWxsT2ZmQW5nbGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaWdodC5mYWxsT2ZmRXhwb25lbnQgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6OiBsaWdodC5mYWxsT2ZmRXhwb25lbnQgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5uYW1lID0gbGlnaHQubmFtZSB8fCAoICdsaWdodF8nICsgbGlnaHRJZCApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0c1sgbGlnaHRJZCBdID0gbGlnaHROb2RlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvKiBCSU5BUlkgRVhURU5TSU9OICovXG4gICAgXG4gICAgICAgIHZhciBCSU5BUllfRVhURU5TSU9OX0JVRkZFUl9OQU1FID0gJ2JpbmFyeV9nbFRGJztcbiAgICAgICAgdmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDID0gJ2dsVEYnO1xuICAgICAgICB2YXIgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIID0gMTI7XG4gICAgICAgIHZhciBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTID0geyBKU09OOiAweDRFNEY1MzRBLCBCSU46IDB4MDA0RTQ5NDIgfTtcbiAgICBcbiAgICAgICAgZnVuY3Rpb24gR0xURkJpbmFyeUV4dGVuc2lvbiggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuYm9keSA9IG51bGw7XG4gICAgXG4gICAgICAgICAgICB2YXIgaGVhZGVyVmlldyA9IG5ldyBEYXRhVmlldyggZGF0YSwgMCwgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIICk7XG4gICAgXG4gICAgICAgICAgICB0aGlzLmhlYWRlciA9IHtcbiAgICAgICAgICAgICAgICBtYWdpYzogVEhSRUUuTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggbmV3IFVpbnQ4QXJyYXkoIGRhdGEuc2xpY2UoIDAsIDQgKSApICksXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogaGVhZGVyVmlldy5nZXRVaW50MzIoIDQsIHRydWUgKSxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGhlYWRlclZpZXcuZ2V0VWludDMyKCA4LCB0cnVlIClcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICBpZiAoIHRoaXMuaGVhZGVyLm1hZ2ljICE9PSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBnbFRGLUJpbmFyeSBoZWFkZXIuJyApO1xuICAgIFxuICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5oZWFkZXIudmVyc2lvbiA8IDIuMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBMZWdhY3kgYmluYXJ5IGZpbGUgZGV0ZWN0ZWQuIFVzZSBMZWdhY3lHTFRGTG9hZGVyIGluc3RlYWQuJyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIGNodW5rVmlldyA9IG5ldyBEYXRhVmlldyggZGF0YSwgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIICk7XG4gICAgICAgICAgICB2YXIgY2h1bmtJbmRleCA9IDA7XG4gICAgXG4gICAgICAgICAgICB3aGlsZSAoIGNodW5rSW5kZXggPCBjaHVua1ZpZXcuYnl0ZUxlbmd0aCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2h1bmtMZW5ndGggPSBjaHVua1ZpZXcuZ2V0VWludDMyKCBjaHVua0luZGV4LCB0cnVlICk7XG4gICAgICAgICAgICAgICAgY2h1bmtJbmRleCArPSA0O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjaHVua1R5cGUgPSBjaHVua1ZpZXcuZ2V0VWludDMyKCBjaHVua0luZGV4LCB0cnVlICk7XG4gICAgICAgICAgICAgICAgY2h1bmtJbmRleCArPSA0O1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggY2h1bmtUeXBlID09PSBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTLkpTT04gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheSggZGF0YSwgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIICsgY2h1bmtJbmRleCwgY2h1bmtMZW5ndGggKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gVEhSRUUuTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggY29udGVudEFycmF5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY2h1bmtUeXBlID09PSBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTLkJJTiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ5dGVPZmZzZXQgPSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKyBjaHVua0luZGV4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvZHkgPSBkYXRhLnNsaWNlKCBieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgY2h1bmtMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gQ2xpZW50cyBtdXN0IGlnbm9yZSBjaHVua3Mgd2l0aCB1bmtub3duIHR5cGVzLlxuICAgIFxuICAgICAgICAgICAgICAgIGNodW5rSW5kZXggKz0gY2h1bmtMZW5ndGg7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIHRoaXMuY29udGVudCA9PT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBKU09OIGNvbnRlbnQgbm90IGZvdW5kLicgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY3VsYXItR2xvc3NpbmVzcyBFeHRlbnNpb25cbiAgICAgICAgICpcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX21hdGVyaWFsc19wYnJTcGVjdWxhckdsb3NzaW5lc3NcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24oKSB7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgIFxuICAgICAgICAgICAgICAgIG5hbWU6IEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyxcbiAgICBcbiAgICAgICAgICAgICAgICBzcGVjdWxhckdsb3NzaW5lc3NQYXJhbXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJyxcbiAgICAgICAgICAgICAgICAgICAgJ21hcCcsXG4gICAgICAgICAgICAgICAgICAgICdsaWdodE1hcCcsXG4gICAgICAgICAgICAgICAgICAgICdsaWdodE1hcEludGVuc2l0eScsXG4gICAgICAgICAgICAgICAgICAgICdhb01hcCcsXG4gICAgICAgICAgICAgICAgICAgICdhb01hcEludGVuc2l0eScsXG4gICAgICAgICAgICAgICAgICAgICdlbWlzc2l2ZScsXG4gICAgICAgICAgICAgICAgICAgICdlbWlzc2l2ZUludGVuc2l0eScsXG4gICAgICAgICAgICAgICAgICAgICdlbWlzc2l2ZU1hcCcsXG4gICAgICAgICAgICAgICAgICAgICdidW1wTWFwJyxcbiAgICAgICAgICAgICAgICAgICAgJ2J1bXBTY2FsZScsXG4gICAgICAgICAgICAgICAgICAgICdub3JtYWxNYXAnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxhY2VtZW50TWFwJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYWNlbWVudFNjYWxlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYWNlbWVudEJpYXMnLFxuICAgICAgICAgICAgICAgICAgICAnc3BlY3VsYXJNYXAnLFxuICAgICAgICAgICAgICAgICAgICAnc3BlY3VsYXInLFxuICAgICAgICAgICAgICAgICAgICAnZ2xvc3NpbmVzc01hcCcsXG4gICAgICAgICAgICAgICAgICAgICdnbG9zc2luZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FscGhhTWFwJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Vudk1hcCcsXG4gICAgICAgICAgICAgICAgICAgICdlbnZNYXBJbnRlbnNpdHknLFxuICAgICAgICAgICAgICAgICAgICAncmVmcmFjdGlvblJhdGlvJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgIFxuICAgICAgICAgICAgICAgIGdldE1hdGVyaWFsVHlwZTogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVEhSRUUuU2hhZGVyTWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBleHRlbmRQYXJhbXM6IGZ1bmN0aW9uICggcGFyYW1zLCBtYXRlcmlhbCwgcGFyc2VyICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcGJyU3BlY3VsYXJHbG9zc2luZXNzID0gbWF0ZXJpYWwuZXh0ZW5zaW9uc1sgdGhpcy5uYW1lIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGFkZXIgPSBUSFJFRS5TaGFkZXJMaWJbICdzdGFuZGFyZCcgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuaWZvcm1zID0gVEhSRUUuVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGVjdWxhck1hcFBhcnNGcmFnbWVudENodW5rID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgJyNpZmRlZiBVU0VfU1BFQ1VMQVJNQVAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcjZW5kaWYnXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbiggJ1xcbicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICcjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0dW5pZm9ybSBzYW1wbGVyMkQgZ2xvc3NpbmVzc01hcDsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyNlbmRpZidcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCAnXFxuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BlY3VsYXJNYXBGcmFnbWVudENodW5rID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZlYzMgc3BlY3VsYXJGYWN0b3IgPSBzcGVjdWxhcjsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyNpZmRlZiBVU0VfU1BFQ1VMQVJNQVAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdcdHRleGVsU3BlY3VsYXIgPSBzUkdCVG9MaW5lYXIoIHRleGVsU3BlY3VsYXIgKTsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0Ly8gcmVhZHMgY2hhbm5lbCBSR0IsIGNvbXBhdGlibGUgd2l0aCBhIGdsVEYgU3BlY3VsYXItR2xvc3NpbmVzcyAoUkdCQSkgdGV4dHVyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnXHRzcGVjdWxhckZhY3RvciAqPSB0ZXhlbFNwZWN1bGFyLnJnYjsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyNlbmRpZidcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCAnXFxuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2xvc3NpbmVzc01hcEZyYWdtZW50Q2h1bmsgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmxvYXQgZ2xvc3NpbmVzc0ZhY3RvciA9IGdsb3NzaW5lc3M7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0dmVjNCB0ZXhlbEdsb3NzaW5lc3MgPSB0ZXh0dXJlMkQoIGdsb3NzaW5lc3NNYXAsIHZVdiApOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnXHQvLyByZWFkcyBjaGFubmVsIEEsIGNvbXBhdGlibGUgd2l0aCBhIGdsVEYgU3BlY3VsYXItR2xvc3NpbmVzcyAoUkdCQSkgdGV4dHVyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnXHRnbG9zc2luZXNzRmFjdG9yICo9IHRleGVsR2xvc3NpbmVzcy5hOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnI2VuZGlmJ1xuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oICdcXG4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzID0gY2xhbXAoIDEuMCAtIGdsb3NzaW5lc3NGYWN0b3IsIDAuMDQsIDEuMCApOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IHNwZWN1bGFyRmFjdG9yLnJnYjsnLFxuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oICdcXG4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICcjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+JywgJycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICd1bmlmb3JtIGZsb2F0IHJvdWdobmVzczsnLCAndW5pZm9ybSB2ZWMzIHNwZWN1bGFyOycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICd1bmlmb3JtIGZsb2F0IG1ldGFsbmVzczsnLCAndW5pZm9ybSBmbG9hdCBnbG9zc2luZXNzOycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+Jywgc3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSggJyNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudD4nLCBnbG9zc2luZXNzTWFwUGFyc0ZyYWdtZW50Q2h1bmsgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX2ZyYWdtZW50PicsIHNwZWN1bGFyTWFwRnJhZ21lbnRDaHVuayApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSggJyNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+JywgZ2xvc3NpbmVzc01hcEZyYWdtZW50Q2h1bmsgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICcjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PicsIGxpZ2h0UGh5c2ljYWxGcmFnbWVudENodW5rICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB1bmlmb3Jtcy5yb3VnaG5lc3M7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB1bmlmb3Jtcy5tZXRhbG5lc3M7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB1bmlmb3Jtcy5yb3VnaG5lc3NNYXA7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB1bmlmb3Jtcy5tZXRhbG5lc3NNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLnNwZWN1bGFyID0geyB2YWx1ZTogbmV3IFRIUkVFLkNvbG9yKCkuc2V0SGV4KCAweDExMTExMSApIH07XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmdsb3NzaW5lc3MgPSB7IHZhbHVlOiAwLjUgfTtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuc3BlY3VsYXJNYXAgPSB7IHZhbHVlOiBudWxsIH07XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAgPSB7IHZhbHVlOiBudWxsIH07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy52ZXJ0ZXhTaGFkZXIgPSBzaGFkZXIudmVydGV4U2hhZGVyO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnVuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoIDEuMCwgMS4wLCAxLjAgKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLm9wYWNpdHkgPSAxLjA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBwZW5kaW5nID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggQXJyYXkuaXNBcnJheSggcGJyU3BlY3VsYXJHbG9zc2luZXNzLmRpZmZ1c2VGYWN0b3IgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlRmFjdG9yO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmNvbG9yLmZyb21BcnJheSggYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5vcGFjaXR5ID0gYXJyYXlbIDMgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggcGFyYW1zLCAnbWFwJywgcGJyU3BlY3VsYXJHbG9zc2luZXNzLmRpZmZ1c2VUZXh0dXJlLmluZGV4ICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZW1pc3NpdmUgPSBuZXcgVEhSRUUuQ29sb3IoIDAuMCwgMC4wLCAwLjAgKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmdsb3NzaW5lc3MgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZ2xvc3NpbmVzc0ZhY3RvciAhPT0gdW5kZWZpbmVkID8gcGJyU3BlY3VsYXJHbG9zc2luZXNzLmdsb3NzaW5lc3NGYWN0b3IgOiAxLjA7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5zcGVjdWxhciA9IG5ldyBUSFJFRS5Db2xvciggMS4wLCAxLjAsIDEuMCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckZhY3RvciApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnNwZWN1bGFyLmZyb21BcnJheSggcGJyU3BlY3VsYXJHbG9zc2luZXNzLnNwZWN1bGFyRmFjdG9yICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwZWNHbG9zc0luZGV4ID0gcGJyU3BlY3VsYXJHbG9zc2luZXNzLnNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmUuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBwYXJhbXMsICdnbG9zc2luZXNzTWFwJywgc3BlY0dsb3NzSW5kZXggKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggcGFyYW1zLCAnc3BlY3VsYXJNYXAnLCBzcGVjR2xvc3NJbmRleCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBjcmVhdGVNYXRlcmlhbDogZnVuY3Rpb24gKCBwYXJhbXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldHVwIG1hdGVyaWFsIHByb3BlcnRpZXMgYmFzZWQgb24gTWVzaFN0YW5kYXJkTWF0ZXJpYWwgZm9yIFNwZWN1bGFyLUdsb3NzaW5lc3NcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVzOiBwYXJhbXMuZGVmaW5lcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFNoYWRlcjogcGFyYW1zLnZlcnRleFNoYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiBwYXJhbXMuZnJhZ21lbnRTaGFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3JtczogcGFyYW1zLnVuaWZvcm1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9nOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogcGFyYW1zLm9wYWNpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogcGFyYW1zLnRyYW5zcGFyZW50XG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5jb2xvciA9IHBhcmFtcy5jb2xvcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwubWFwID0gcGFyYW1zLm1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5tYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmxpZ2h0TWFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmFvTWFwID0gcGFyYW1zLmFvTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLmFvTWFwO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5hb01hcEludGVuc2l0eSA9IDEuMDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZW1pc3NpdmUgPSBwYXJhbXMuZW1pc3NpdmU7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IHBhcmFtcy5lbWlzc2l2ZU1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5lbWlzc2l2ZU1hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuYnVtcE1hcCA9IHBhcmFtcy5idW1wTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLmJ1bXBNYXA7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmJ1bXBTY2FsZSA9IDE7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm5vcm1hbE1hcCA9IHBhcmFtcy5ub3JtYWxNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMubm9ybWFsTWFwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmFtcy5ub3JtYWxTY2FsZSApIG1hdGVyaWFsLm5vcm1hbFNjYWxlID0gcGFyYW1zLm5vcm1hbFNjYWxlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5zcGVjdWxhck1hcCA9IHBhcmFtcy5zcGVjdWxhck1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5zcGVjdWxhck1hcDtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXIgPSBwYXJhbXMuc3BlY3VsYXI7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmdsb3NzaW5lc3NNYXAgPSBwYXJhbXMuZ2xvc3NpbmVzc01hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5nbG9zc2luZXNzTWFwO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5nbG9zc2luZXNzID0gcGFyYW1zLmdsb3NzaW5lc3M7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmFscGhhTWFwID0gbnVsbDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZW52TWFwID0gcGFyYW1zLmVudk1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5lbnZNYXA7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA9IDEuMDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvID0gMC45ODtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIENsb25lcyBhIEdMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCBpbnN0YW5jZS4gVGhlIFNoYWRlck1hdGVyaWFsLmNvcHkoKSBtZXRob2QgY2FuXG4gICAgICAgICAgICAgICAgICogY29weSBvbmx5IHByb3BlcnRpZXMgaXQga25vd3MgYWJvdXQgb3IgaW5oZXJpdHMsIGFuZCBtaXNzZXMgbWFueSBwcm9wZXJ0aWVzIHRoYXQgd291bGRcbiAgICAgICAgICAgICAgICAgKiBub3JtYWxseSBiZSBkZWZpbmVkIGJ5IE1lc2hTdGFuZGFyZE1hdGVyaWFsLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogVGhpcyBtZXRob2QgYWxsb3dzIEdMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbHMgdG8gYmUgY2xvbmVkIGluIHRoZSBwcm9jZXNzIG9mXG4gICAgICAgICAgICAgICAgICogbG9hZGluZyBhIGdsVEYgbW9kZWwsIGJ1dCBjbG9uaW5nIGxhdGVyIChlLmcuIGJ5IHRoZSB1c2VyKSB3b3VsZCByZXF1aXJlIHRoZXNlIGNoYW5nZXNcbiAgICAgICAgICAgICAgICAgKiBBTkQgYWxzbyB1cGRhdGluZyBgLm9uQmVmb3JlUmVuZGVyYCBvbiB0aGUgcGFyZW50IG1lc2guXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gIHtUSFJFRS5TaGFkZXJNYXRlcmlhbH0gc291cmNlXG4gICAgICAgICAgICAgICAgICogQHJldHVybiB7VEhSRUUuU2hhZGVyTWF0ZXJpYWx9XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY2xvbmVNYXRlcmlhbDogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBzb3VyY2UuY2xvbmUoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMuc3BlY3VsYXJHbG9zc2luZXNzUGFyYW1zO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WyBwYXJhbXNbIGkgXSBdID0gc291cmNlWyBwYXJhbXNbIGkgXSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBIZXJlJ3MgYmFzZWQgb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCkgYW5kIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCkgaW4gV2ViR0xSZW5kZXJlci5cbiAgICAgICAgICAgICAgICByZWZyZXNoVW5pZm9ybXM6IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgIT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZpbmVzID0gbWF0ZXJpYWwuZGVmaW5lcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuZW1pc3NpdmUudmFsdWUuY29weSggbWF0ZXJpYWwuZW1pc3NpdmUgKS5tdWx0aXBseVNjYWxhciggbWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5zcGVjdWxhck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5saWdodE1hcC52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwO1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5saWdodE1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5hb01hcC52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwO1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5hb01hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gMS4gY29sb3IgbWFwXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuIHNwZWN1bGFyIG1hcFxuICAgICAgICAgICAgICAgICAgICAvLyAzLiBub3JtYWwgbWFwXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIGJ1bXAgbWFwXG4gICAgICAgICAgICAgICAgICAgIC8vIDUuIGFscGhhIG1hcFxuICAgICAgICAgICAgICAgICAgICAvLyA2LiBlbWlzc2l2ZSBtYXBcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV2U2NhbGVNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWwubWFwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYnVtcE1hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0ZXJpYWwuZ2xvc3NpbmVzc01hcCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5nbG9zc2luZXNzTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB1dlNjYWxlTWFwICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1dlNjYWxlTWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZTY2FsZU1hcCA9IHV2U2NhbGVNYXAudGV4dHVyZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwZWF0O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1dlNjYWxlTWFwLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vID4gcjg4LlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB1dlNjYWxlTWFwLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdXZTY2FsZU1hcC5yZXBlYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3RhdGlvbiA9IHV2U2NhbGVNYXAucm90YXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZW50ZXIgPSB1dlNjYWxlTWFwLmNlbnRlcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZTY2FsZU1hcC5tYXRyaXguc2V0VXZUcmFuc2Zvcm0oIG9mZnNldC54LCBvZmZzZXQueSwgcmVwZWF0LngsIHJlcGVhdC55LCByb3RhdGlvbiwgY2VudGVyLngsIGNlbnRlci55ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDw9IHI4Ny4gUmVtb3ZlIHdoZW4gcmVhc29uYWJsZS5cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB1dlNjYWxlTWFwLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXQgPSB1dlNjYWxlTWFwLnJlcGVhdDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5vZmZzZXRSZXBlYXQudmFsdWUuc2V0KCBvZmZzZXQueCwgb2Zmc2V0LnksIHJlcGVhdC54LCByZXBlYXQueSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuZW52TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5O1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gKCBtYXRlcmlhbC5lbnZNYXAgJiYgbWF0ZXJpYWwuZW52TWFwLmlzQ3ViZVRleHR1cmUgKSA/IC0gMSA6IDE7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLnJlZnJhY3Rpb25SYXRpby52YWx1ZSA9IG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuc3BlY3VsYXIudmFsdWUuY29weSggbWF0ZXJpYWwuc3BlY3VsYXIgKTtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuZ2xvc3NpbmVzcy52YWx1ZSA9IG1hdGVyaWFsLmdsb3NzaW5lc3M7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5nbG9zc2luZXNzTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWUgIT09IG51bGwgJiYgZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUCA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IFVTRV9ST1VHSE5FU1NNQVAgdG8gZW5hYmxlIHZVdlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lcy5VU0VfUk9VR0hORVNTTUFQID0gJyc7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwLnZhbHVlID09PSBudWxsICYmIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVAgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkZWZpbmVzLlVTRV9HTE9TU0lORVNTTUFQO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRlZmluZXMuVVNFX1JPVUdITkVTU01BUDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAgICAgLyoqKioqKioqKiogSU5URVJQT0xBVElPTiAqKioqKioqKi9cbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBcbiAgICAgICAgLy8gU3BsaW5lIEludGVycG9sYXRpb25cbiAgICAgICAgLy8gU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNhcHBlbmRpeC1jLXNwbGluZS1pbnRlcnBvbGF0aW9uXG4gICAgICAgIGZ1bmN0aW9uIEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuICAgIFxuICAgICAgICAgICAgVEhSRUUuSW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUSFJFRS5JbnRlcnBvbGFudC5wcm90b3R5cGUgKTtcbiAgICAgICAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQ7XG4gICAgXG4gICAgICAgIEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5pbnRlcnBvbGF0ZV8gPSBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXI7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXM7XG4gICAgICAgICAgICB2YXIgc3RyaWRlID0gdGhpcy52YWx1ZVNpemU7XG4gICAgXG4gICAgICAgICAgICB2YXIgc3RyaWRlMiA9IHN0cmlkZSAqIDI7XG4gICAgICAgICAgICB2YXIgc3RyaWRlMyA9IHN0cmlkZSAqIDM7XG4gICAgXG4gICAgICAgICAgICB2YXIgdGQgPSB0MSAtIHQwO1xuICAgIFxuICAgICAgICAgICAgdmFyIHAgPSAoIHQgLSB0MCApIC8gdGQ7XG4gICAgICAgICAgICB2YXIgcHAgPSBwICogcDtcbiAgICAgICAgICAgIHZhciBwcHAgPSBwcCAqIHA7XG4gICAgXG4gICAgICAgICAgICB2YXIgb2Zmc2V0MSA9IGkxICogc3RyaWRlMztcbiAgICAgICAgICAgIHZhciBvZmZzZXQwID0gb2Zmc2V0MSAtIHN0cmlkZTM7XG4gICAgXG4gICAgICAgICAgICB2YXIgczAgPSAyICogcHBwIC0gMyAqIHBwICsgMTtcbiAgICAgICAgICAgIHZhciBzMSA9IHBwcCAtIDIgKiBwcCArIHA7XG4gICAgICAgICAgICB2YXIgczIgPSAtIDIgKiBwcHAgKyAzICogcHA7XG4gICAgICAgICAgICB2YXIgczMgPSBwcHAgLSBwcDtcbiAgICBcbiAgICAgICAgICAgIC8vIExheW91dCBvZiBrZXlmcmFtZSBvdXRwdXQgdmFsdWVzIGZvciBDVUJJQ1NQTElORSBhbmltYXRpb25zOlxuICAgICAgICAgICAgLy8gICBbIGluVGFuZ2VudF8xLCBzcGxpbmVWZXJ0ZXhfMSwgb3V0VGFuZ2VudF8xLCBpblRhbmdlbnRfMiwgc3BsaW5lVmVydGV4XzIsIC4uLiBdXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcDAgPSB2YWx1ZXNbIG9mZnNldDAgKyBpICsgc3RyaWRlIF07ICAgICAgICAvLyBzcGxpbmVWZXJ0ZXhfa1xuICAgICAgICAgICAgICAgIHZhciBtMCA9IHZhbHVlc1sgb2Zmc2V0MCArIGkgKyBzdHJpZGUyIF0gKiB0ZDsgIC8vIG91dFRhbmdlbnRfayAqICh0X2srMSAtIHRfaylcbiAgICAgICAgICAgICAgICB2YXIgcDEgPSB2YWx1ZXNbIG9mZnNldDEgKyBpICsgc3RyaWRlIF07ICAgICAgICAvLyBzcGxpbmVWZXJ0ZXhfaysxXG4gICAgICAgICAgICAgICAgdmFyIG0xID0gdmFsdWVzWyBvZmZzZXQxICsgaSBdICogdGQ7ICAgICAgICAgICAgLy8gaW5UYW5nZW50X2srMSAqICh0X2srMSAtIHRfaylcbiAgICBcbiAgICAgICAgICAgICAgICByZXN1bHRbIGkgXSA9IHMwICogcDAgKyBzMSAqIG0wICsgczIgKiBwMSArIHMzICogbTE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICAvKioqKioqKioqKiBJTlRFUk5BTFMgKioqKioqKioqKioqL1xuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIFxuICAgICAgICAvKiBDT05TVEFOVFMgKi9cbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX0NPTlNUQU5UUyA9IHtcbiAgICAgICAgICAgIEZMT0FUOiA1MTI2LFxuICAgICAgICAgICAgLy9GTE9BVF9NQVQyOiAzNTY3NCxcbiAgICAgICAgICAgIEZMT0FUX01BVDM6IDM1Njc1LFxuICAgICAgICAgICAgRkxPQVRfTUFUNDogMzU2NzYsXG4gICAgICAgICAgICBGTE9BVF9WRUMyOiAzNTY2NCxcbiAgICAgICAgICAgIEZMT0FUX1ZFQzM6IDM1NjY1LFxuICAgICAgICAgICAgRkxPQVRfVkVDNDogMzU2NjYsXG4gICAgICAgICAgICBMSU5FQVI6IDk3MjksXG4gICAgICAgICAgICBSRVBFQVQ6IDEwNDk3LFxuICAgICAgICAgICAgU0FNUExFUl8yRDogMzU2NzgsXG4gICAgICAgICAgICBQT0lOVFM6IDAsXG4gICAgICAgICAgICBMSU5FUzogMSxcbiAgICAgICAgICAgIExJTkVfTE9PUDogMixcbiAgICAgICAgICAgIExJTkVfU1RSSVA6IDMsXG4gICAgICAgICAgICBUUklBTkdMRVM6IDQsXG4gICAgICAgICAgICBUUklBTkdMRV9TVFJJUDogNSxcbiAgICAgICAgICAgIFRSSUFOR0xFX0ZBTjogNixcbiAgICAgICAgICAgIFVOU0lHTkVEX0JZVEU6IDUxMjEsXG4gICAgICAgICAgICBVTlNJR05FRF9TSE9SVDogNTEyM1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfVFlQRSA9IHtcbiAgICAgICAgICAgIDUxMjY6IE51bWJlcixcbiAgICAgICAgICAgIC8vMzU2NzQ6IFRIUkVFLk1hdHJpeDIsXG4gICAgICAgICAgICAzNTY3NTogVEhSRUUuTWF0cml4MyxcbiAgICAgICAgICAgIDM1Njc2OiBUSFJFRS5NYXRyaXg0LFxuICAgICAgICAgICAgMzU2NjQ6IFRIUkVFLlZlY3RvcjIsXG4gICAgICAgICAgICAzNTY2NTogVEhSRUUuVmVjdG9yMyxcbiAgICAgICAgICAgIDM1NjY2OiBUSFJFRS5WZWN0b3I0LFxuICAgICAgICAgICAgMzU2Nzg6IFRIUkVFLlRleHR1cmVcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX0NPTVBPTkVOVF9UWVBFUyA9IHtcbiAgICAgICAgICAgIDUxMjA6IEludDhBcnJheSxcbiAgICAgICAgICAgIDUxMjE6IFVpbnQ4QXJyYXksXG4gICAgICAgICAgICA1MTIyOiBJbnQxNkFycmF5LFxuICAgICAgICAgICAgNTEyMzogVWludDE2QXJyYXksXG4gICAgICAgICAgICA1MTI1OiBVaW50MzJBcnJheSxcbiAgICAgICAgICAgIDUxMjY6IEZsb2F0MzJBcnJheVxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfRklMVEVSUyA9IHtcbiAgICAgICAgICAgIDk3Mjg6IFRIUkVFLk5lYXJlc3RGaWx0ZXIsXG4gICAgICAgICAgICA5NzI5OiBUSFJFRS5MaW5lYXJGaWx0ZXIsXG4gICAgICAgICAgICA5OTg0OiBUSFJFRS5OZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcixcbiAgICAgICAgICAgIDk5ODU6IFRIUkVFLkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIsXG4gICAgICAgICAgICA5OTg2OiBUSFJFRS5OZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyLFxuICAgICAgICAgICAgOTk4NzogVEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9XUkFQUElOR1MgPSB7XG4gICAgICAgICAgICAzMzA3MTogVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZyxcbiAgICAgICAgICAgIDMzNjQ4OiBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nLFxuICAgICAgICAgICAgMTA0OTc6IFRIUkVFLlJlcGVhdFdyYXBwaW5nXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9URVhUVVJFX0ZPUk1BVFMgPSB7XG4gICAgICAgICAgICA2NDA2OiBUSFJFRS5BbHBoYUZvcm1hdCxcbiAgICAgICAgICAgIDY0MDc6IFRIUkVFLlJHQkZvcm1hdCxcbiAgICAgICAgICAgIDY0MDg6IFRIUkVFLlJHQkFGb3JtYXQsXG4gICAgICAgICAgICA2NDA5OiBUSFJFRS5MdW1pbmFuY2VGb3JtYXQsXG4gICAgICAgICAgICA2NDEwOiBUSFJFRS5MdW1pbmFuY2VBbHBoYUZvcm1hdFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfVEVYVFVSRV9EQVRBVFlQRVMgPSB7XG4gICAgICAgICAgICA1MTIxOiBUSFJFRS5VbnNpZ25lZEJ5dGVUeXBlLFxuICAgICAgICAgICAgMzI4MTk6IFRIUkVFLlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSxcbiAgICAgICAgICAgIDMyODIwOiBUSFJFRS5VbnNpZ25lZFNob3J0NTU1MVR5cGUsXG4gICAgICAgICAgICAzMzYzNTogVEhSRUUuVW5zaWduZWRTaG9ydDU2NVR5cGVcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX1NJREVTID0ge1xuICAgICAgICAgICAgMTAyODogVEhSRUUuQmFja1NpZGUsIC8vIEN1bGxpbmcgZnJvbnRcbiAgICAgICAgICAgIDEwMjk6IFRIUkVFLkZyb250U2lkZSAvLyBDdWxsaW5nIGJhY2tcbiAgICAgICAgICAgIC8vMTAzMjogVEhSRUUuTm9TaWRlICAgLy8gQ3VsbGluZyBmcm9udCBhbmQgYmFjaywgd2hhdCB0byBkbz9cbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX0RFUFRIX0ZVTkNTID0ge1xuICAgICAgICAgICAgNTEyOiBUSFJFRS5OZXZlckRlcHRoLFxuICAgICAgICAgICAgNTEzOiBUSFJFRS5MZXNzRGVwdGgsXG4gICAgICAgICAgICA1MTQ6IFRIUkVFLkVxdWFsRGVwdGgsXG4gICAgICAgICAgICA1MTU6IFRIUkVFLkxlc3NFcXVhbERlcHRoLFxuICAgICAgICAgICAgNTE2OiBUSFJFRS5HcmVhdGVyRXF1YWxEZXB0aCxcbiAgICAgICAgICAgIDUxNzogVEhSRUUuTm90RXF1YWxEZXB0aCxcbiAgICAgICAgICAgIDUxODogVEhSRUUuR3JlYXRlckVxdWFsRGVwdGgsXG4gICAgICAgICAgICA1MTk6IFRIUkVFLkFsd2F5c0RlcHRoXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9CTEVORF9FUVVBVElPTlMgPSB7XG4gICAgICAgICAgICAzMjc3NDogVEhSRUUuQWRkRXF1YXRpb24sXG4gICAgICAgICAgICAzMjc3ODogVEhSRUUuU3VidHJhY3RFcXVhdGlvbixcbiAgICAgICAgICAgIDMyNzc5OiBUSFJFRS5SZXZlcnNlU3VidHJhY3RFcXVhdGlvblxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfQkxFTkRfRlVOQ1MgPSB7XG4gICAgICAgICAgICAwOiBUSFJFRS5aZXJvRmFjdG9yLFxuICAgICAgICAgICAgMTogVEhSRUUuT25lRmFjdG9yLFxuICAgICAgICAgICAgNzY4OiBUSFJFRS5TcmNDb2xvckZhY3RvcixcbiAgICAgICAgICAgIDc2OTogVEhSRUUuT25lTWludXNTcmNDb2xvckZhY3RvcixcbiAgICAgICAgICAgIDc3MDogVEhSRUUuU3JjQWxwaGFGYWN0b3IsXG4gICAgICAgICAgICA3NzE6IFRIUkVFLk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsXG4gICAgICAgICAgICA3NzI6IFRIUkVFLkRzdEFscGhhRmFjdG9yLFxuICAgICAgICAgICAgNzczOiBUSFJFRS5PbmVNaW51c0RzdEFscGhhRmFjdG9yLFxuICAgICAgICAgICAgNzc0OiBUSFJFRS5Ec3RDb2xvckZhY3RvcixcbiAgICAgICAgICAgIDc3NTogVEhSRUUuT25lTWludXNEc3RDb2xvckZhY3RvcixcbiAgICAgICAgICAgIDc3NjogVEhSRUUuU3JjQWxwaGFTYXR1cmF0ZUZhY3RvclxuICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZ3MgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgVGhyZWUuanMgeWV0XG4gICAgICAgICAgICAvLzMyNzY5OiBDT05TVEFOVF9DT0xPUixcbiAgICAgICAgICAgIC8vMzI3NzA6IE9ORV9NSU5VU19DT05TVEFOVF9DT0xPUixcbiAgICAgICAgICAgIC8vMzI3NzE6IENPTlNUQU5UX0FMUEhBLFxuICAgICAgICAgICAgLy8zMjc3MjogT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9UWVBFX1NJWkVTID0ge1xuICAgICAgICAgICAgJ1NDQUxBUic6IDEsXG4gICAgICAgICAgICAnVkVDMic6IDIsXG4gICAgICAgICAgICAnVkVDMyc6IDMsXG4gICAgICAgICAgICAnVkVDNCc6IDQsXG4gICAgICAgICAgICAnTUFUMic6IDQsXG4gICAgICAgICAgICAnTUFUMyc6IDksXG4gICAgICAgICAgICAnTUFUNCc6IDE2XG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBQQVRIX1BST1BFUlRJRVMgPSB7XG4gICAgICAgICAgICBzY2FsZTogJ3NjYWxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiAncG9zaXRpb24nLFxuICAgICAgICAgICAgcm90YXRpb246ICdxdWF0ZXJuaW9uJyxcbiAgICAgICAgICAgIHdlaWdodHM6ICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBJTlRFUlBPTEFUSU9OID0ge1xuICAgICAgICAgICAgQ1VCSUNTUExJTkU6IFRIUkVFLkludGVycG9sYXRlU21vb3RoLCAvLyBXZSB1c2UgY3VzdG9tIGludGVycG9sYXRpb24gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhdGlvbiBmb3IgQ1VCSUNTUExJTkUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtleWZyYW1lVHJhY2sub3B0aW1pemUoKSBjYW4ndCBoYW5kbGUgZ2xURiBDdWJpYyBTcGxpbmUgb3V0cHV0IHZhbHVlcyBsYXlvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzaW5nIFRIUkVFLkludGVycG9sYXRlU21vb3RoIGZvciBLZXlmcmFtZVRyYWNrIGluc3RhbnRpYXRpb24gdG8gcHJldmVudCBvcHRpbWl6YXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlZSBLZXlmcmFtZVRyYWNrLm9wdGltaXplKCkgZm9yIHRoZSBkZXRhaWwuXG4gICAgICAgICAgICBMSU5FQVI6IFRIUkVFLkludGVycG9sYXRlTGluZWFyLFxuICAgICAgICAgICAgU1RFUDogVEhSRUUuSW50ZXJwb2xhdGVEaXNjcmV0ZVxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgU1RBVEVTX0VOQUJMRVMgPSB7XG4gICAgICAgICAgICAyODg0OiAnQ1VMTF9GQUNFJyxcbiAgICAgICAgICAgIDI5Mjk6ICdERVBUSF9URVNUJyxcbiAgICAgICAgICAgIDMwNDI6ICdCTEVORCcsXG4gICAgICAgICAgICAzMDg5OiAnU0NJU1NPUl9URVNUJyxcbiAgICAgICAgICAgIDMyODIzOiAnUE9MWUdPTl9PRkZTRVRfRklMTCcsXG4gICAgICAgICAgICAzMjkyNjogJ1NBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRSdcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIEFMUEhBX01PREVTID0ge1xuICAgICAgICAgICAgT1BBUVVFOiAnT1BBUVVFJyxcbiAgICAgICAgICAgIE1BU0s6ICdNQVNLJyxcbiAgICAgICAgICAgIEJMRU5EOiAnQkxFTkQnXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qIFVUSUxJVFkgRlVOQ1RJT05TICovXG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwoIHVybCwgcGF0aCApIHtcbiAgICBcbiAgICAgICAgICAgIC8vIEludmFsaWQgVVJMXG4gICAgICAgICAgICBpZiAoIHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHVybCA9PT0gJycgKSByZXR1cm4gJyc7XG4gICAgXG4gICAgICAgICAgICAvLyBBYnNvbHV0ZSBVUkwgaHR0cDovLyxodHRwczovLywvL1xuICAgICAgICAgICAgaWYgKCAvXihodHRwcz86KT9cXC9cXC8vaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG4gICAgXG4gICAgICAgICAgICAvLyBEYXRhIFVSSVxuICAgICAgICAgICAgaWYgKCAvXmRhdGE6LiosLiokL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuICAgIFxuICAgICAgICAgICAgLy8gQmxvYiBVUkxcbiAgICAgICAgICAgIGlmICggL15ibG9iOi4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcbiAgICBcbiAgICAgICAgICAgIC8vIFJlbGF0aXZlIFVSTFxuICAgICAgICAgICAgcmV0dXJuIHBhdGggKyB1cmw7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjZGVmYXVsdC1tYXRlcmlhbFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdE1hdGVyaWFsKCkge1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCgge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAweEZGRkZGRixcbiAgICAgICAgICAgICAgICBlbWlzc2l2ZTogMHgwMDAwMDAsXG4gICAgICAgICAgICAgICAgbWV0YWxuZXNzOiAxLFxuICAgICAgICAgICAgICAgIHJvdWdobmVzczogMSxcbiAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGVwdGhUZXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkZyb250U2lkZVxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI21vcnBoLXRhcmdldHNcbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogSW1wbGVtZW50IHN1cHBvcnQgZm9yIG1vcnBoIHRhcmdldHMgb24gVEFOR0VOVCBhdHRyaWJ1dGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7VEhSRUUuTWVzaH0gbWVzaFxuICAgICAgICAgKiBAcGFyYW0ge0dMVEYuTWVzaH0gbWVzaERlZlxuICAgICAgICAgKiBAcGFyYW0ge0dMVEYuUHJpbWl0aXZlfSBwcmltaXRpdmVEZWZcbiAgICAgICAgICogQHBhcmFtIHtBcnJheTxUSFJFRS5CdWZmZXJBdHRyaWJ1dGU+fSBhY2Nlc3NvcnNcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGFkZE1vcnBoVGFyZ2V0cyggbWVzaCwgbWVzaERlZiwgcHJpbWl0aXZlRGVmLCBhY2Nlc3NvcnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSBtZXNoLmdlb21ldHJ5O1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gbWVzaC5tYXRlcmlhbDtcbiAgICBcbiAgICAgICAgICAgIHZhciB0YXJnZXRzID0gcHJpbWl0aXZlRGVmLnRhcmdldHM7XG4gICAgICAgICAgICB2YXIgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuICAgIFxuICAgICAgICAgICAgbW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uID0gW107XG4gICAgICAgICAgICBtb3JwaEF0dHJpYnV0ZXMubm9ybWFsID0gW107XG4gICAgXG4gICAgICAgICAgICBtYXRlcmlhbC5tb3JwaFRhcmdldHMgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IHRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbIGkgXTtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9ICdtb3JwaFRhcmdldCcgKyBpO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbkF0dHJpYnV0ZSwgbm9ybWFsQXR0cmlidXRlO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGFyZ2V0LlBPU0lUSU9OICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFRocmVlLmpzIG1vcnBoIGZvcm11bGEgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgKyB3ZWlnaHQwICogKCBtb3JwaFRhcmdldDAgLSBwb3NpdGlvbiApXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICArIHdlaWdodDEgKiAoIG1vcnBoVGFyZ2V0MSAtIHBvc2l0aW9uIClcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC4uLlxuICAgICAgICAgICAgICAgICAgICAvLyB3aGlsZSB0aGUgZ2xURiBvbmUgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgKyB3ZWlnaHQwICogbW9ycGhUYXJnZXQwXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICArIHdlaWdodDEgKiBtb3JwaFRhcmdldDFcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC4uLlxuICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIGFkZGluZyBwb3NpdGlvbiB0byBtb3JwaFRhcmdldC5cbiAgICAgICAgICAgICAgICAgICAgLy8gU28gbW9ycGhUYXJnZXQgdmFsdWUgd2lsbCBkZXBlbmQgb24gbWVzaCdzIHBvc2l0aW9uLCB0aGVuIGNsb25pbmcgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciB0aGUgY2FzZSBpZiBhdHRyaWJ1dGUgaXMgc2hhcmVkIGFtb25nIHR3byBvciBtb3JlIG1lc2hlcy5cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25BdHRyaWJ1dGUgPSBjbG9uZUJ1ZmZlckF0dHJpYnV0ZSggYWNjZXNzb3JzWyB0YXJnZXQuUE9TSVRJT04gXSApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDAsIGpsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGogPCBqbDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQXR0cmlidXRlLnNldFhZWihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQXR0cmlidXRlLmdldFgoIGogKSArIHBvc2l0aW9uLmdldFgoIGogKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkF0dHJpYnV0ZS5nZXRZKCBqICkgKyBwb3NpdGlvbi5nZXRZKCBqICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25BdHRyaWJ1dGUuZ2V0WiggaiApICsgcG9zaXRpb24uZ2V0WiggaiApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29weWluZyB0aGUgb3JpZ2luYWwgcG9zaXRpb24gbm90IHRvIGFmZmVjdCB0aGUgZmluYWwgcG9zaXRpb24uXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSB0aGUgZm9ybXVsYSBhYm92ZS5cbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25BdHRyaWJ1dGUgPSBjbG9uZUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbiApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHBvc2l0aW9uQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQXR0cmlidXRlLm5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICBtb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24ucHVzaCggcG9zaXRpb25BdHRyaWJ1dGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0YXJnZXQuTk9STUFMICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm1vcnBoTm9ybWFscyA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlZSB0YXJnZXQuUE9TSVRJT04ncyBjb21tZW50XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbEF0dHJpYnV0ZSA9IGNsb25lQnVmZmVyQXR0cmlidXRlKCBhY2Nlc3NvcnNbIHRhcmdldC5OT1JNQUwgXSApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMCwgamwgPSBub3JtYWxBdHRyaWJ1dGUuY291bnQ7IGogPCBqbDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxBdHRyaWJ1dGUuZ2V0WCggaiApICsgbm9ybWFsLmdldFgoIGogKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxBdHRyaWJ1dGUuZ2V0WSggaiApICsgbm9ybWFsLmdldFkoIGogKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxBdHRyaWJ1dGUuZ2V0WiggaiApICsgbm9ybWFsLmdldFooIGogKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbEF0dHJpYnV0ZSA9IGNsb25lQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG5vcm1hbEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgIG1vcnBoQXR0cmlidXRlcy5ub3JtYWwucHVzaCggbm9ybWFsQXR0cmlidXRlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgbWVzaC51cGRhdGVNb3JwaFRhcmdldHMoKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggbWVzaERlZi53ZWlnaHRzICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IG1lc2hEZWYud2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWVzaC5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSA9IG1lc2hEZWYud2VpZ2h0c1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBpc1ByaW1pdGl2ZUVxdWFsKCBhLCBiICkge1xuICAgIFxuICAgICAgICAgICAgaWYgKCBhLmluZGljZXMgIT09IGIuaW5kaWNlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgYXR0cmliQSA9IGEuYXR0cmlidXRlcyB8fCB7fTtcbiAgICAgICAgICAgIHZhciBhdHRyaWJCID0gYi5hdHRyaWJ1dGVzIHx8IHt9O1xuICAgICAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoIGF0dHJpYkEgKTtcbiAgICAgICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKCBhdHRyaWJCICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBrZXlzQS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c0FbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHJpYkFbIGtleSBdICE9PSBhdHRyaWJCWyBrZXkgXSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGdldENhY2hlZEdlb21ldHJ5KCBjYWNoZSwgbmV3UHJpbWl0aXZlICkge1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IGNhY2hlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjYWNoZWQgPSBjYWNoZVsgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggaXNQcmltaXRpdmVFcXVhbCggY2FjaGVkLnByaW1pdGl2ZSwgbmV3UHJpbWl0aXZlICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWQuZ2VvbWV0cnk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gY2xvbmVCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcbiAgICBcbiAgICAgICAgICAgIGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gYXR0cmlidXRlLmNvdW50O1xuICAgICAgICAgICAgICAgIHZhciBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXkuc2xpY2UoIDAsIGNvdW50ICogaXRlbVNpemUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb3VudDsgKysgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbIGkgXSA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggaXRlbVNpemUgPj0gMiApIGFycmF5WyBpICsgMSBdID0gYXR0cmlidXRlLmdldFkoIGkgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtU2l6ZSA+PSAzICkgYXJyYXlbIGkgKyAyIF0gPSBhdHRyaWJ1dGUuZ2V0WiggaSApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW1TaXplID49IDQgKSBhcnJheVsgaSArIDMgXSA9IGF0dHJpYnV0ZS5nZXRXKCBpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlLmNsb25lKCk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLyogR0xURiBQQVJTRVIgKi9cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gR0xURlBhcnNlcigganNvbiwgZXh0ZW5zaW9ucywgb3B0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIHRoaXMuanNvbiA9IGpzb24gfHwge307XG4gICAgICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zIHx8IHt9O1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBcbiAgICAgICAgICAgIC8vIGxvYWRlciBvYmplY3QgY2FjaGVcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgR0xURlJlZ2lzdHJ5KCk7XG4gICAgXG4gICAgICAgICAgICAvLyBCdWZmZXJHZW9tZXRyeSBjYWNoaW5nXG4gICAgICAgICAgICB0aGlzLnByaW1pdGl2ZUNhY2hlID0gW107XG4gICAgXG4gICAgICAgICAgICB0aGlzLnRleHR1cmVMb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlciggdGhpcy5vcHRpb25zLm1hbmFnZXIgKTtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZUxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5vcHRpb25zLmNyb3NzT3JpZ2luICk7XG4gICAgXG4gICAgICAgICAgICB0aGlzLmZpbGVMb2FkZXIgPSBuZXcgVEhSRUUuRmlsZUxvYWRlciggdGhpcy5vcHRpb25zLm1hbmFnZXIgKTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICggb25Mb2FkLCBvbkVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgXG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgbG9hZGVyIGNhY2hlXG4gICAgICAgICAgICB0aGlzLmNhY2hlLnJlbW92ZUFsbCgpO1xuICAgIFxuICAgICAgICAgICAgLy8gTWFyayB0aGUgc3BlY2lhbCBub2Rlcy9tZXNoZXMgaW4ganNvbiBmb3IgZWZmaWNpZW50IHBhcnNlXG4gICAgICAgICAgICB0aGlzLm1hcmtEZWZzKCk7XG4gICAgXG4gICAgICAgICAgICAvLyBGaXJlIHRoZSBjYWxsYmFjayBvbiBjb21wbGV0ZVxuICAgICAgICAgICAgdGhpcy5nZXRNdWx0aURlcGVuZGVuY2llcyggW1xuICAgIFxuICAgICAgICAgICAgICAgICdzY2VuZScsXG4gICAgICAgICAgICAgICAgJ2FuaW1hdGlvbicsXG4gICAgICAgICAgICAgICAgJ2NhbWVyYSdcbiAgICBcbiAgICAgICAgICAgIF0gKS50aGVuKCBmdW5jdGlvbiAoIGRlcGVuZGVuY2llcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2NlbmVzID0gZGVwZW5kZW5jaWVzLnNjZW5lcyB8fCBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc2NlbmUgPSBzY2VuZXNbIGpzb24uc2NlbmUgfHwgMCBdO1xuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25zID0gZGVwZW5kZW5jaWVzLmFuaW1hdGlvbnMgfHwgW107XG4gICAgICAgICAgICAgICAgdmFyIGFzc2V0ID0ganNvbi5hc3NldDtcbiAgICAgICAgICAgICAgICB2YXIgY2FtZXJhcyA9IGRlcGVuZGVuY2llcy5jYW1lcmFzIHx8IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIG9uTG9hZCggc2NlbmUsIHNjZW5lcywgY2FtZXJhcywgYW5pbWF0aW9ucywgYXNzZXQgKTtcbiAgICBcbiAgICAgICAgICAgIH0gKS5jYXRjaCggb25FcnJvciApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogTWFya3MgdGhlIHNwZWNpYWwgbm9kZXMvbWVzaGVzIGluIGpzb24gZm9yIGVmZmljaWVudCBwYXJzZS5cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLm1hcmtEZWZzID0gZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG5vZGVEZWZzID0gdGhpcy5qc29uLm5vZGVzIHx8IFtdO1xuICAgICAgICAgICAgdmFyIHNraW5EZWZzID0gdGhpcy5qc29uLnNraW5zIHx8IFtdO1xuICAgICAgICAgICAgdmFyIG1lc2hEZWZzID0gdGhpcy5qc29uLm1lc2hlcyB8fCBbXTtcbiAgICBcbiAgICAgICAgICAgIHZhciBtZXNoUmVmZXJlbmNlcyA9IHt9O1xuICAgICAgICAgICAgdmFyIG1lc2hVc2VzID0ge307XG4gICAgXG4gICAgICAgICAgICAvLyBOb3RoaW5nIGluIHRoZSBub2RlIGRlZmluaXRpb24gaW5kaWNhdGVzIHdoZXRoZXIgaXQgaXMgYSBCb25lIG9yIGFuXG4gICAgICAgICAgICAvLyBPYmplY3QzRC4gVXNlIHRoZSBza2lucycgam9pbnQgcmVmZXJlbmNlcyB0byBtYXJrIGJvbmVzLlxuICAgICAgICAgICAgZm9yICggdmFyIHNraW5JbmRleCA9IDAsIHNraW5MZW5ndGggPSBza2luRGVmcy5sZW5ndGg7IHNraW5JbmRleCA8IHNraW5MZW5ndGg7IHNraW5JbmRleCArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgam9pbnRzID0gc2tpbkRlZnNbIHNraW5JbmRleCBdLmpvaW50cztcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gam9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBub2RlRGVmc1sgam9pbnRzWyBpIF0gXS5pc0JvbmUgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIE1lc2hlcyBjYW4gKGFuZCBzaG91bGQpIGJlIHJldXNlZCBieSBtdWx0aXBsZSBub2RlcyBpbiBhIGdsVEYgYXNzZXQuIFRvXG4gICAgICAgICAgICAvLyBhdm9pZCBoYXZpbmcgbW9yZSB0aGFuIG9uZSBUSFJFRS5NZXNoIHdpdGggdGhlIHNhbWUgbmFtZSwgY291bnRcbiAgICAgICAgICAgIC8vIHJlZmVyZW5jZXMgYW5kIHJlbmFtZSBpbnN0YW5jZXMgYmVsb3cuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gRXhhbXBsZTogQ2VzaXVtTWlsa1RydWNrIHNhbXBsZSBtb2RlbCByZXVzZXMgXCJXaGVlbFwiIG1lc2hlcy5cbiAgICAgICAgICAgIGZvciAoIHZhciBub2RlSW5kZXggPSAwLCBub2RlTGVuZ3RoID0gbm9kZURlZnMubGVuZ3RoOyBub2RlSW5kZXggPCBub2RlTGVuZ3RoOyBub2RlSW5kZXggKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVEZWYgPSBub2RlRGVmc1sgbm9kZUluZGV4IF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLm1lc2ggIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNoUmVmZXJlbmNlc1sgbm9kZURlZi5tZXNoIF0gPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSA9IG1lc2hVc2VzWyBub2RlRGVmLm1lc2ggXSA9IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWVzaFJlZmVyZW5jZXNbIG5vZGVEZWYubWVzaCBdICsrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RoaW5nIGluIHRoZSBtZXNoIGRlZmluaXRpb24gaW5kaWNhdGVzIHdoZXRoZXIgaXQgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBTa2lubmVkTWVzaCBvciBNZXNoLiBVc2UgdGhlIG5vZGUncyBtZXNoIHJlZmVyZW5jZVxuICAgICAgICAgICAgICAgICAgICAvLyB0byBtYXJrIFNraW5uZWRNZXNoIGlmIG5vZGUgaGFzIHNraW4uXG4gICAgICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5za2luICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoRGVmc1sgbm9kZURlZi5tZXNoIF0uaXNTa2lubmVkTWVzaCA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB0aGlzLmpzb24ubWVzaFJlZmVyZW5jZXMgPSBtZXNoUmVmZXJlbmNlcztcbiAgICAgICAgICAgIHRoaXMuanNvbi5tZXNoVXNlcyA9IG1lc2hVc2VzO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxdWVzdHMgdGhlIHNwZWNpZmllZCBkZXBlbmRlbmN5IGFzeW5jaHJvbm91c2x5LCB3aXRoIGNhY2hpbmcuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5nZXREZXBlbmRlbmN5ID0gZnVuY3Rpb24gKCB0eXBlLCBpbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBjYWNoZUtleSA9IHR5cGUgKyAnOicgKyBpbmRleDtcbiAgICAgICAgICAgIHZhciBkZXBlbmRlbmN5ID0gdGhpcy5jYWNoZS5nZXQoIGNhY2hlS2V5ICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoICEgZGVwZW5kZW5jeSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZm5OYW1lID0gJ2xvYWQnICsgdHlwZS5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSggMSApO1xuICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kgPSB0aGlzWyBmbk5hbWUgXSggaW5kZXggKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlLmFkZCggY2FjaGVLZXksIGRlcGVuZGVuY3kgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBkZXBlbmRlbmN5O1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxdWVzdHMgYWxsIGRlcGVuZGVuY2llcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgYXN5bmNocm9ub3VzbHksIHdpdGggY2FjaGluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheTxPYmplY3Q+Pn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmdldERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uICggdHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSB0aGlzLmNhY2hlLmdldCggdHlwZSApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCAhIGRlcGVuZGVuY2llcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgZGVmcyA9IHRoaXMuanNvblsgdHlwZSArICggdHlwZSA9PT0gJ21lc2gnID8gJ2VzJyA6ICdzJyApIF0gfHwgW107XG4gICAgXG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gUHJvbWlzZS5hbGwoIGRlZnMubWFwKCBmdW5jdGlvbiAoIGRlZiwgaW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggdHlwZSwgaW5kZXggKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlLmFkZCggdHlwZSwgZGVwZW5kZW5jaWVzICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxdWVzdHMgYWxsIG11bHRpcGxlIGRlcGVuZGVuY2llcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGVzIGFzeW5jaHJvbm91c2x5LCB3aXRoIGNhY2hpbmcuXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gdHlwZXNcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q8QXJyYXk8T2JqZWN0Pj4+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUuZ2V0TXVsdGlEZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiAoIHR5cGVzICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTtcbiAgICAgICAgICAgIHZhciBwZW5kaW5ncyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IHR5cGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZXNbIGkgXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldERlcGVuZGVuY2llcyggdHlwZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudGhlbiggZnVuY3Rpb24gKCBrZXksIHZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzWyBrZXkgXSA9IHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgIH0uYmluZCggdGhpcywgdHlwZSArICggdHlwZSA9PT0gJ21lc2gnID8gJ2VzJyA6ICdzJyApICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBwZW5kaW5ncy5wdXNoKCB2YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5ncyApLnRoZW4oIGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYnVmZmVycy1hbmQtYnVmZmVyLXZpZXdzXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJJbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRCdWZmZXIgPSBmdW5jdGlvbiAoIGJ1ZmZlckluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGJ1ZmZlckRlZiA9IHRoaXMuanNvbi5idWZmZXJzWyBidWZmZXJJbmRleCBdO1xuICAgICAgICAgICAgdmFyIGxvYWRlciA9IHRoaXMuZmlsZUxvYWRlcjtcbiAgICBcbiAgICAgICAgICAgIGlmICggYnVmZmVyRGVmLnR5cGUgJiYgYnVmZmVyRGVmLnR5cGUgIT09ICdhcnJheWJ1ZmZlcicgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogJyArIGJ1ZmZlckRlZi50eXBlICsgJyBidWZmZXIgdHlwZSBpcyBub3Qgc3VwcG9ydGVkLicgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIElmIHByZXNlbnQsIEdMQiBjb250YWluZXIgaXMgcmVxdWlyZWQgdG8gYmUgdGhlIGZpcnN0IGJ1ZmZlci5cbiAgICAgICAgICAgIGlmICggYnVmZmVyRGVmLnVyaSA9PT0gdW5kZWZpbmVkICYmIGJ1ZmZlckluZGV4ID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHRoaXMuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEYgXS5ib2R5ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbG9hZGVyLmxvYWQoIHJlc29sdmVVUkwoIGJ1ZmZlckRlZi51cmksIG9wdGlvbnMucGF0aCApLCByZXNvbHZlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBGYWlsZWQgdG8gbG9hZCBidWZmZXIgXCInICsgYnVmZmVyRGVmLnVyaSArICdcIi4nICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2J1ZmZlcnMtYW5kLWJ1ZmZlci12aWV3c1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYnVmZmVyVmlld0luZGV4XG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZEJ1ZmZlclZpZXcgPSBmdW5jdGlvbiAoIGJ1ZmZlclZpZXdJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBidWZmZXJWaWV3RGVmID0gdGhpcy5qc29uLmJ1ZmZlclZpZXdzWyBidWZmZXJWaWV3SW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXInLCBidWZmZXJWaWV3RGVmLmJ1ZmZlciApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBieXRlTGVuZ3RoID0gYnVmZmVyVmlld0RlZi5ieXRlTGVuZ3RoIHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVPZmZzZXQgPSBidWZmZXJWaWV3RGVmLmJ5dGVPZmZzZXQgfHwgMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCBieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgYnl0ZUxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNhY2Nlc3NvcnNcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGFjY2Vzc29ySW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5CdWZmZXJBdHRyaWJ1dGV8VEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZEFjY2Vzc29yID0gZnVuY3Rpb24gKCBhY2Nlc3NvckluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHBhcnNlciA9IHRoaXM7XG4gICAgICAgICAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcbiAgICBcbiAgICAgICAgICAgIHZhciBhY2Nlc3NvckRlZiA9IHRoaXMuanNvbi5hY2Nlc3NvcnNbIGFjY2Vzc29ySW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgIHZhciBwZW5kaW5nQnVmZmVyVmlld3MgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIGlmICggYWNjZXNzb3JEZWYuYnVmZmVyVmlldyAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuYnVmZmVyVmlldyApICk7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgIHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCBudWxsICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIGFjY2Vzc29yRGVmLnNwYXJzZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuYnVmZmVyVmlldyApICk7XG4gICAgICAgICAgICAgICAgcGVuZGluZ0J1ZmZlclZpZXdzLnB1c2goIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlclZpZXcnLCBhY2Nlc3NvckRlZi5zcGFyc2UudmFsdWVzLmJ1ZmZlclZpZXcgKSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nQnVmZmVyVmlld3MgKS50aGVuKCBmdW5jdGlvbiAoIGJ1ZmZlclZpZXdzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBidWZmZXJWaWV3ID0gYnVmZmVyVmlld3NbIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVNpemUgPSBXRUJHTF9UWVBFX1NJWkVTWyBhY2Nlc3NvckRlZi50eXBlIF07XG4gICAgICAgICAgICAgICAgdmFyIFR5cGVkQXJyYXkgPSBXRUJHTF9DT01QT05FTlRfVFlQRVNbIGFjY2Vzc29yRGVmLmNvbXBvbmVudFR5cGUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBGb3IgVkVDMzogaXRlbVNpemUgaXMgMywgZWxlbWVudEJ5dGVzIGlzIDQsIGl0ZW1CeXRlcyBpcyAxMi5cbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudEJ5dGVzID0gVHlwZWRBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbUJ5dGVzID0gZWxlbWVudEJ5dGVzICogaXRlbVNpemU7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVPZmZzZXQgPSBhY2Nlc3NvckRlZi5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVTdHJpZGUgPSBqc29uLmJ1ZmZlclZpZXdzWyBhY2Nlc3NvckRlZi5idWZmZXJWaWV3IF0uYnl0ZVN0cmlkZTtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplZCA9IGFjY2Vzc29yRGVmLm5vcm1hbGl6ZWQgPT09IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIGFycmF5LCBidWZmZXJBdHRyaWJ1dGU7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gVGhlIGJ1ZmZlciBpcyBub3QgaW50ZXJsZWF2ZWQgaWYgdGhlIHN0cmlkZSBpcyB0aGUgaXRlbSBzaXplIGluIGJ5dGVzLlxuICAgICAgICAgICAgICAgIGlmICggYnl0ZVN0cmlkZSAmJiBieXRlU3RyaWRlICE9PSBpdGVtQnl0ZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpYkNhY2hlS2V5ID0gJ0ludGVybGVhdmVkQnVmZmVyOicgKyBhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICsgJzonICsgYWNjZXNzb3JEZWYuY29tcG9uZW50VHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGliID0gcGFyc2VyLmNhY2hlLmdldCggaWJDYWNoZUtleSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgaWIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGZ1bGwgYnVmZmVyIGlmIGl0J3MgaW50ZXJsZWF2ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheSA9IG5ldyBUeXBlZEFycmF5KCBidWZmZXJWaWV3ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnRlZ2VyIHBhcmFtZXRlcnMgdG8gSUIvSUJBIGFyZSBpbiBhcnJheSBlbGVtZW50cywgbm90IGJ5dGVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWIgPSBuZXcgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXIoIGFycmF5LCBieXRlU3RyaWRlIC8gZWxlbWVudEJ5dGVzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZXIuY2FjaGUuYWRkKCBpYkNhY2hlS2V5LCBpYiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaWIsIGl0ZW1TaXplLCBieXRlT2Zmc2V0IC8gZWxlbWVudEJ5dGVzLCBub3JtYWxpemVkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBidWZmZXJWaWV3ID09PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgPSBuZXcgVHlwZWRBcnJheSggYWNjZXNzb3JEZWYuY291bnQgKiBpdGVtU2l6ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlldywgYnl0ZU9mZnNldCwgYWNjZXNzb3JEZWYuY291bnQgKiBpdGVtU2l6ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI3NwYXJzZS1hY2Nlc3NvcnNcbiAgICAgICAgICAgICAgICBpZiAoIGFjY2Vzc29yRGVmLnNwYXJzZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVNpemVJbmRpY2VzID0gV0VCR0xfVFlQRV9TSVpFUy5TQ0FMQVI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBUeXBlZEFycmF5SW5kaWNlcyA9IFdFQkdMX0NPTVBPTkVOVF9UWVBFU1sgYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuY29tcG9uZW50VHlwZSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgYnl0ZU9mZnNldEluZGljZXMgPSBhY2Nlc3NvckRlZi5zcGFyc2UuaW5kaWNlcy5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBieXRlT2Zmc2V0VmFsdWVzID0gYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFyc2VJbmRpY2VzID0gbmV3IFR5cGVkQXJyYXlJbmRpY2VzKCBidWZmZXJWaWV3c1sgMSBdLCBieXRlT2Zmc2V0SW5kaWNlcywgYWNjZXNzb3JEZWYuc3BhcnNlLmNvdW50ICogaXRlbVNpemVJbmRpY2VzICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFyc2VWYWx1ZXMgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlld3NbIDIgXSwgYnl0ZU9mZnNldFZhbHVlcywgYWNjZXNzb3JEZWYuc3BhcnNlLmNvdW50ICogaXRlbVNpemUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBidWZmZXJWaWV3ICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbCBBcnJheUJ1ZmZlciwgaWYgdGhlIGJ1ZmZlclZpZXcgd2Fzbid0IGluaXRpYWxpemVkIHdpdGggemVyb2VzLlxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyQXR0cmlidXRlLnNldEFycmF5KCBidWZmZXJBdHRyaWJ1dGUuYXJyYXkuc2xpY2UoKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBzcGFyc2VJbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3BhcnNlSW5kaWNlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyQXR0cmlidXRlLnNldFgoIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW1TaXplID49IDIgKSBidWZmZXJBdHRyaWJ1dGUuc2V0WSggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW1TaXplID49IDMgKSBidWZmZXJBdHRyaWJ1dGUuc2V0WiggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplICsgMiBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW1TaXplID49IDQgKSBidWZmZXJBdHRyaWJ1dGUuc2V0VyggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplICsgMyBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW1TaXplID49IDUgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBpdGVtU2l6ZSBpbiBzcGFyc2UgQnVmZmVyQXR0cmlidXRlLicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyQXR0cmlidXRlO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI3RleHR1cmVzXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0dXJlSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5UZXh0dXJlPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlSW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgdGV4dHVyZUxvYWRlciA9IHRoaXMudGV4dHVyZUxvYWRlcjtcbiAgICBcbiAgICAgICAgICAgIHZhciBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7XG4gICAgXG4gICAgICAgICAgICB2YXIgdGV4dHVyZURlZiA9IGpzb24udGV4dHVyZXNbIHRleHR1cmVJbmRleCBdO1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGpzb24uaW1hZ2VzWyB0ZXh0dXJlRGVmLnNvdXJjZSBdO1xuICAgICAgICAgICAgdmFyIHNvdXJjZVVSSSA9IHNvdXJjZS51cmk7XG4gICAgICAgICAgICB2YXIgaXNPYmplY3RVUkwgPSBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgIGlmICggc291cmNlLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBMb2FkIGJpbmFyeSBpbWFnZSBkYXRhIGZyb20gYnVmZmVyVmlldywgaWYgcHJvdmlkZWQuXG4gICAgXG4gICAgICAgICAgICAgICAgc291cmNlVVJJID0gcGFyc2VyLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3Jywgc291cmNlLmJ1ZmZlclZpZXcgKS50aGVuKCBmdW5jdGlvbiAoIGJ1ZmZlclZpZXcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlzT2JqZWN0VVJMID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYiggWyBidWZmZXJWaWV3IF0sIHsgdHlwZTogc291cmNlLm1pbWVUeXBlIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVVJJID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggYmxvYiApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlVVJJO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHNvdXJjZVVSSSApLnRoZW4oIGZ1bmN0aW9uICggc291cmNlVVJJICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIExvYWQgVGV4dHVyZSByZXNvdXJjZS5cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbG9hZGVyID0gVEhSRUUuTG9hZGVyLkhhbmRsZXJzLmdldCggc291cmNlVVJJICkgfHwgdGV4dHVyZUxvYWRlcjtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBsb2FkZXIubG9hZCggcmVzb2x2ZVVSTCggc291cmNlVVJJLCBvcHRpb25zLnBhdGggKSwgcmVzb2x2ZSwgdW5kZWZpbmVkLCByZWplY3QgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9ICkudGhlbiggZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIHJlc291cmNlcyBhbmQgY29uZmlndXJlIFRleHR1cmUuXG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBpc09iamVjdFVSTCA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCggc291cmNlVVJJICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHRleHR1cmUuZmxpcFkgPSBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHRleHR1cmVEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5uYW1lID0gdGV4dHVyZURlZi5uYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgIHRleHR1cmUuZm9ybWF0ID0gdGV4dHVyZURlZi5mb3JtYXQgIT09IHVuZGVmaW5lZCA/IFdFQkdMX1RFWFRVUkVfRk9STUFUU1sgdGV4dHVyZURlZi5mb3JtYXQgXSA6IFRIUkVFLlJHQkFGb3JtYXQ7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0ZXh0dXJlRGVmLmludGVybmFsRm9ybWF0ICE9PSB1bmRlZmluZWQgJiYgdGV4dHVyZS5mb3JtYXQgIT09IFdFQkdMX1RFWFRVUkVfRk9STUFUU1sgdGV4dHVyZURlZi5pbnRlcm5hbEZvcm1hdCBdICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBUaHJlZS5qcyBkb2VzIG5vdCBzdXBwb3J0IHRleHR1cmUgaW50ZXJuYWxGb3JtYXQgd2hpY2ggaXMgZGlmZmVyZW50IGZyb20gdGV4dHVyZSBmb3JtYXQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ludGVybmFsRm9ybWF0IHdpbGwgYmUgZm9yY2VkIHRvIGJlIHRoZSBzYW1lIHZhbHVlIGFzIGZvcm1hdC4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHRleHR1cmUudHlwZSA9IHRleHR1cmVEZWYudHlwZSAhPT0gdW5kZWZpbmVkID8gV0VCR0xfVEVYVFVSRV9EQVRBVFlQRVNbIHRleHR1cmVEZWYudHlwZSBdIDogVEhSRUUuVW5zaWduZWRCeXRlVHlwZTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2FtcGxlcnMgPSBqc29uLnNhbXBsZXJzIHx8IHt9O1xuICAgICAgICAgICAgICAgIHZhciBzYW1wbGVyID0gc2FtcGxlcnNbIHRleHR1cmVEZWYuc2FtcGxlciBdIHx8IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIHRleHR1cmUubWFnRmlsdGVyID0gV0VCR0xfRklMVEVSU1sgc2FtcGxlci5tYWdGaWx0ZXIgXSB8fCBUSFJFRS5MaW5lYXJGaWx0ZXI7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5taW5GaWx0ZXIgPSBXRUJHTF9GSUxURVJTWyBzYW1wbGVyLm1pbkZpbHRlciBdIHx8IFRIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlcjtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLndyYXBTID0gV0VCR0xfV1JBUFBJTkdTWyBzYW1wbGVyLndyYXBTIF0gfHwgVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS53cmFwVCA9IFdFQkdMX1dSQVBQSU5HU1sgc2FtcGxlci53cmFwVCBdIHx8IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQXN5bmNocm9ub3VzbHkgYXNzaWducyBhIHRleHR1cmUgdG8gdGhlIGdpdmVuIG1hdGVyaWFsIHBhcmFtZXRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXRlcmlhbFBhcmFtc1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZU5hbWVcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHRleHR1cmVJbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUuYXNzaWduVGV4dHVyZSA9IGZ1bmN0aW9uICggbWF0ZXJpYWxQYXJhbXMsIHRleHR1cmVOYW1lLCB0ZXh0dXJlSW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREZXBlbmRlbmN5KCAndGV4dHVyZScsIHRleHR1cmVJbmRleCApLnRoZW4oIGZ1bmN0aW9uICggdGV4dHVyZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtc1sgdGV4dHVyZU5hbWUgXSA9IHRleHR1cmU7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI21hdGVyaWFsc1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF0ZXJpYWxJbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLk1hdGVyaWFsPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRNYXRlcmlhbCA9IGZ1bmN0aW9uICggbWF0ZXJpYWxJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbERlZiA9IHRoaXMuanNvbi5tYXRlcmlhbHNbIG1hdGVyaWFsSW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbFR5cGU7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxQYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbEV4dGVuc2lvbnMgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zIHx8IHt9O1xuICAgIFxuICAgICAgICAgICAgdmFyIHBlbmRpbmcgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIGlmICggbWF0ZXJpYWxFeHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2dFeHRlbnNpb24gPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFR5cGUgPSBzZ0V4dGVuc2lvbi5nZXRNYXRlcmlhbFR5cGUoIG1hdGVyaWFsRGVmICk7XG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKCBzZ0V4dGVuc2lvbi5leHRlbmRQYXJhbXMoIG1hdGVyaWFsUGFyYW1zLCBtYXRlcmlhbERlZiwgcGFyc2VyICkgKTtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsRGVmLnBick1ldGFsbGljUm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gU3BlY2lmaWNhdGlvbjpcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjbWV0YWxsaWMtcm91Z2huZXNzLW1hdGVyaWFsXG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxUeXBlID0gVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1ldGFsbGljUm91Z2huZXNzID0gbWF0ZXJpYWxEZWYucGJyTWV0YWxsaWNSb3VnaG5lc3M7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoIDEuMCwgMS4wLCAxLjAgKTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gMS4wO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggQXJyYXkuaXNBcnJheSggbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuY29sb3IuZnJvbUFycmF5KCBhcnJheSApO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gYXJyYXlbIDMgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnbWFwJywgbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZS5pbmRleCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLm1ldGFsbmVzcyA9IG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciA6IDEuMDtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5yb3VnaG5lc3MgPSBtZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgIT09IHVuZGVmaW5lZCA/IG1ldGFsbGljUm91Z2huZXNzLnJvdWdobmVzc0ZhY3RvciA6IDEuMDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZUluZGV4ID0gbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ21ldGFsbmVzc01hcCcsIHRleHR1cmVJbmRleCApICk7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAncm91Z2huZXNzTWFwJywgdGV4dHVyZUluZGV4ICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsVHlwZSA9IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBtYXRlcmlhbERlZi5kb3VibGVTaWRlZCA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5zaWRlID0gVEhSRUUuRG91YmxlU2lkZTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBhbHBoYU1vZGUgPSBtYXRlcmlhbERlZi5hbHBoYU1vZGUgfHwgQUxQSEFfTU9ERVMuT1BBUVVFO1xuICAgIFxuICAgICAgICAgICAgaWYgKCBhbHBoYU1vZGUgPT09IEFMUEhBX01PREVTLkJMRU5EICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGFscGhhTW9kZSA9PT0gQUxQSEFfTU9ERVMuTUFTSyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuYWxwaGFUZXN0ID0gbWF0ZXJpYWxEZWYuYWxwaGFDdXRvZmYgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsRGVmLmFscGhhQ3V0b2ZmIDogMC41O1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnbm9ybWFsTWFwJywgbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZS5pbmRleCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMubm9ybWFsU2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yMiggMSwgMSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZS5zY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5ub3JtYWxTY2FsZS5zZXQoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUsIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ2FvTWFwJywgbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5pbmRleCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbERlZi5vY2NsdXNpb25UZXh0dXJlLnN0cmVuZ3RoICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmFvTWFwSW50ZW5zaXR5ID0gbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5zdHJlbmd0aDtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFsRGVmLmVtaXNzaXZlRmFjdG9yICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbFR5cGUgPT09IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggbWF0ZXJpYWxEZWYuZW1pc3NpdmVGYWN0b3IgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5lbWlzc2l2ZSA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggbWF0ZXJpYWxEZWYuZW1pc3NpdmVGYWN0b3IgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFsRGVmLmVtaXNzaXZlVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxUeXBlID09PSBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdtYXAnLCBtYXRlcmlhbERlZi5lbWlzc2l2ZVRleHR1cmUuaW5kZXggKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnZW1pc3NpdmVNYXAnLCBtYXRlcmlhbERlZi5lbWlzc2l2ZVRleHR1cmUuaW5kZXggKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApLnRoZW4oIGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbFR5cGUgPT09IFRIUkVFLlNoYWRlck1hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyBdLmNyZWF0ZU1hdGVyaWFsKCBtYXRlcmlhbFBhcmFtcyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IG1hdGVyaWFsVHlwZSggbWF0ZXJpYWxQYXJhbXMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbERlZi5uYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5uYW1lID0gbWF0ZXJpYWxEZWYubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBOb3JtYWwgbWFwIHRleHR1cmVzIHVzZSBPcGVuR0wgY29udmVudGlvbnM6XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI21hdGVyaWFsbm9ybWFsdGV4dHVyZVxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm5vcm1hbFNjYWxlLnggPSAtIG1hdGVyaWFsLm5vcm1hbFNjYWxlLng7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGVtaXNzaXZlVGV4dHVyZSBhbmQgYmFzZUNvbG9yVGV4dHVyZSB1c2Ugc1JHQiBlbmNvZGluZy5cbiAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsLm1hcCApIG1hdGVyaWFsLm1hcC5lbmNvZGluZyA9IFRIUkVFLnNSR0JFbmNvZGluZztcbiAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkgbWF0ZXJpYWwuZW1pc3NpdmVNYXAuZW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbERlZi5leHRyYXMgKSBtYXRlcmlhbC51c2VyRGF0YSA9IG1hdGVyaWFsRGVmLmV4dHJhcztcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2dlb21ldHJ5XG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gcHJpbWl0aXZlc1xuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PFRIUkVFLkJ1ZmZlckdlb21ldHJ5Pj59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkR2VvbWV0cmllcyA9IGZ1bmN0aW9uICggcHJpbWl0aXZlcyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IHRoaXMucHJpbWl0aXZlQ2FjaGU7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREZXBlbmRlbmNpZXMoICdhY2Nlc3NvcicgKS50aGVuKCBmdW5jdGlvbiAoIGFjY2Vzc29ycyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cmllcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBwcmltaXRpdmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJpbWl0aXZlID0gcHJpbWl0aXZlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIHRoaXMgZ2VvbWV0cnlcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlZCA9IGdldENhY2hlZEdlb21ldHJ5KCBjYWNoZSwgcHJpbWl0aXZlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2FjaGVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBjYWNoZWQgZ2VvbWV0cnkgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyaWVzLnB1c2goIGNhY2hlZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBnZW9tZXRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHByaW1pdGl2ZS5hdHRyaWJ1dGVzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGF0dHJpYnV0ZUlkIGluIGF0dHJpYnV0ZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZUVudHJ5ID0gYXR0cmlidXRlc1sgYXR0cmlidXRlSWQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyQXR0cmlidXRlID0gYWNjZXNzb3JzWyBhdHRyaWJ1dGVFbnRyeSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGF0dHJpYnV0ZUlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQT1NJVElPTic6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIGJ1ZmZlckF0dHJpYnV0ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ05PUk1BTCc6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBidWZmZXJBdHRyaWJ1dGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdURVhDT09SRF8wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVEVYQ09PUkQwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVEVYQ09PUkQnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAndXYnLCBidWZmZXJBdHRyaWJ1dGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdURVhDT09SRF8xJzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3V2MicsIGJ1ZmZlckF0dHJpYnV0ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NPTE9SXzAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDT0xPUjAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDT0xPUic6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIGJ1ZmZlckF0dHJpYnV0ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1dFSUdIVFNfMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1dFSUdIVCc6IC8vIFdFSUdIVCBzZW1hbnRpYyBkZXByZWNhdGVkLlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnc2tpbldlaWdodCcsIGJ1ZmZlckF0dHJpYnV0ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0pPSU5UU18wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSk9JTlQnOiAvLyBKT0lOVCBzZW1hbnRpYyBkZXByZWNhdGVkLlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnc2tpbkluZGV4JywgYnVmZmVyQXR0cmlidXRlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHByaW1pdGl2ZS5pbmRpY2VzICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuc2V0SW5kZXgoIGFjY2Vzc29yc1sgcHJpbWl0aXZlLmluZGljZXMgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FjaGUgdGhpcyBnZW9tZXRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUucHVzaCgge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZTogcHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBnZW9tZXRyeVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKCBnZW9tZXRyeSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZW9tZXRyaWVzO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtZXNoZXNcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1lc2hJbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLkdyb3VwfFRIUkVFLk1lc2h8VEhSRUUuU2tpbm5lZE1lc2g+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZE1lc2ggPSBmdW5jdGlvbiAoIG1lc2hJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcbiAgICAgICAgICAgIHZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuICAgIFxuICAgICAgICAgICAgdmFyIG1lc2hEZWYgPSB0aGlzLmpzb24ubWVzaGVzWyBtZXNoSW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE11bHRpRGVwZW5kZW5jaWVzKCBbXG4gICAgXG4gICAgICAgICAgICAgICAgJ2FjY2Vzc29yJyxcbiAgICAgICAgICAgICAgICAnbWF0ZXJpYWwnXG4gICAgXG4gICAgICAgICAgICBdICkudGhlbiggZnVuY3Rpb24gKCBkZXBlbmRlbmNpZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwID0gbmV3IFRIUkVFLkdyb3VwKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHByaW1pdGl2ZXMgPSBtZXNoRGVmLnByaW1pdGl2ZXM7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmxvYWRHZW9tZXRyaWVzKCBwcmltaXRpdmVzICkudGhlbiggZnVuY3Rpb24gKCBnZW9tZXRyaWVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gcHJpbWl0aXZlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmltaXRpdmUgPSBwcmltaXRpdmVzWyBpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBwcmltaXRpdmUubWF0ZXJpYWwgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY3JlYXRlRGVmYXVsdE1hdGVyaWFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRlcGVuZGVuY2llcy5tYXRlcmlhbHNbIHByaW1pdGl2ZS5tYXRlcmlhbCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbC5hb01hcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2MiA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ1RIUkVFLkdMVEZMb2FkZXI6IER1cGxpY2F0aW5nIFVWcyB0byBzdXBwb3J0IGFvTWFwLicgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICd1djInLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2LmFycmF5LCAyICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBtYXRlcmlhbCB3aWxsIGJlIG1vZGlmaWVkIGxhdGVyIG9uLCBjbG9uZSBpdCBub3cuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlVmVydGV4Q29sb3JzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZUZsYXRTaGFkaW5nID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VTa2lubmluZyA9IG1lc2hEZWYuaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VNb3JwaFRhcmdldHMgPSBwcmltaXRpdmUudGFyZ2V0cyAhPT0gdW5kZWZpbmVkO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1c2VWZXJ0ZXhDb2xvcnMgfHwgdXNlRmxhdFNoYWRpbmcgfHwgdXNlU2tpbm5pbmcgfHwgdXNlTW9ycGhUYXJnZXRzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGVjR2xvc3NFeHRlbnNpb24gPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBzcGVjR2xvc3NFeHRlbnNpb24uY2xvbmVNYXRlcmlhbCggbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG1hdGVyaWFsLmNsb25lKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1c2VWZXJ0ZXhDb2xvcnMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwudmVydGV4Q29sb3JzID0gVEhSRUUuVmVydGV4Q29sb3JzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdXNlRmxhdFNoYWRpbmcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc2g7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVTIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9TVFJJUCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfRkFOIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLm1vZGUgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHVzZVNraW5uaW5nICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLlNraW5uZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc2tpbm5pbmcgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9TVFJJUCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5kcmF3TW9kZSA9IFRIUkVFLlRyaWFuZ2xlU3RyaXBEcmF3TW9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX0ZBTiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5kcmF3TW9kZSA9IFRIUkVFLlRyaWFuZ2xlRmFuRHJhd01vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FUyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuTElORV9TVFJJUCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuTElORV9MT09QICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZUtleSA9ICdMaW5lQmFzaWNNYXRlcmlhbDonICsgbWF0ZXJpYWwudXVpZDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluZU1hdGVyaWFsID0gc2NvcGUuY2FjaGUuZ2V0KCBjYWNoZUtleSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBsaW5lTWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVNYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCBsaW5lTWF0ZXJpYWwsIG1hdGVyaWFsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVNYXRlcmlhbC5jb2xvci5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTWF0ZXJpYWwubGlnaHRzID0gZmFsc2U7ICAvLyBMaW5lQmFzaWNNYXRlcmlhbCBkb2Vzbid0IHN1cHBvcnQgbGlnaHRzIHlldFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5jYWNoZS5hZGQoIGNhY2hlS2V5LCBsaW5lTWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBsaW5lTWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVTICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLkxpbmVTZWdtZW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FX1NUUklQICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLkxpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2ggPSBuZXcgVEhSRUUuTGluZUxvb3AoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuUE9JTlRTICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZUtleSA9ICdQb2ludHNNYXRlcmlhbDonICsgbWF0ZXJpYWwudXVpZDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzTWF0ZXJpYWwgPSBzY29wZS5jYWNoZS5nZXQoIGNhY2hlS2V5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIHBvaW50c01hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNNYXRlcmlhbCA9IG5ldyBUSFJFRS5Qb2ludHNNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCBwb2ludHNNYXRlcmlhbCwgbWF0ZXJpYWwgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzTWF0ZXJpYWwuY29sb3IuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzTWF0ZXJpYWwubWFwID0gbWF0ZXJpYWwubWFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNNYXRlcmlhbC5saWdodHMgPSBmYWxzZTsgIC8vIFBvaW50c01hdGVyaWFsIGRvZXNuJ3Qgc3VwcG9ydCBsaWdodHMgeWV0XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmNhY2hlLmFkZCggY2FjaGVLZXksIHBvaW50c01hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gcG9pbnRzTWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaCA9IG5ldyBUSFJFRS5Qb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBQcmltaXRpdmUgbW9kZSB1bnN1cHBvcnRlZDogJyArIHByaW1pdGl2ZS5tb2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLm5hbWUgPSBtZXNoRGVmLm5hbWUgfHwgKCAnbWVzaF8nICsgbWVzaEluZGV4ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHVzZU1vcnBoVGFyZ2V0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRNb3JwaFRhcmdldHMoIG1lc2gsIG1lc2hEZWYsIHByaW1pdGl2ZSwgZGVwZW5kZW5jaWVzLmFjY2Vzc29ycyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNoRGVmLmV4dHJhcyAhPT0gdW5kZWZpbmVkICkgbWVzaC51c2VyRGF0YSA9IG1lc2hEZWYuZXh0cmFzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmltaXRpdmUuZXh0cmFzICE9PSB1bmRlZmluZWQgKSBtZXNoLmdlb21ldHJ5LnVzZXJEYXRhID0gcHJpbWl0aXZlLmV4dHJhcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBTcGVjdWxhci1HbG9zc2luZXNzLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoLm9uQmVmb3JlUmVuZGVyID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0ucmVmcmVzaFVuaWZvcm1zO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmltaXRpdmVzLmxlbmd0aCA+IDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5uYW1lICs9ICdfJyArIGk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYWRkKCBtZXNoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXNoO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjY2FtZXJhc1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gY2FtZXJhSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5DYW1lcmE+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZENhbWVyYSA9IGZ1bmN0aW9uICggY2FtZXJhSW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgY2FtZXJhO1xuICAgICAgICAgICAgdmFyIGNhbWVyYURlZiA9IHRoaXMuanNvbi5jYW1lcmFzWyBjYW1lcmFJbmRleCBdO1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGNhbWVyYURlZlsgY2FtZXJhRGVmLnR5cGUgXTtcbiAgICBcbiAgICAgICAgICAgIGlmICggISBwYXJhbXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogTWlzc2luZyBjYW1lcmEgcGFyYW1ldGVycy4nICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBjYW1lcmFEZWYudHlwZSA9PT0gJ3BlcnNwZWN0aXZlJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXNwZWN0UmF0aW8gPSBwYXJhbXMuYXNwZWN0UmF0aW8gfHwgMTtcbiAgICAgICAgICAgICAgICB2YXIgeGZvdiA9IHBhcmFtcy55Zm92ICogYXNwZWN0UmF0aW87XG4gICAgXG4gICAgICAgICAgICAgICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCBUSFJFRS5NYXRoLnJhZFRvRGVnKCB4Zm92ICksIGFzcGVjdFJhdGlvLCBwYXJhbXMuem5lYXIgfHwgMSwgcGFyYW1zLnpmYXIgfHwgMmU2ICk7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBjYW1lcmFEZWYudHlwZSA9PT0gJ29ydGhvZ3JhcGhpYycgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY2FtZXJhID0gbmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSggcGFyYW1zLnhtYWcgLyAtIDIsIHBhcmFtcy54bWFnIC8gMiwgcGFyYW1zLnltYWcgLyAyLCBwYXJhbXMueW1hZyAvIC0gMiwgcGFyYW1zLnpuZWFyLCBwYXJhbXMuemZhciApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBjYW1lcmFEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgY2FtZXJhLm5hbWUgPSBjYW1lcmFEZWYubmFtZTtcbiAgICAgICAgICAgIGlmICggY2FtZXJhRGVmLmV4dHJhcyApIGNhbWVyYS51c2VyRGF0YSA9IGNhbWVyYURlZi5leHRyYXM7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBjYW1lcmEgKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNza2luc1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2tpbkluZGV4XG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRTa2luID0gZnVuY3Rpb24gKCBza2luSW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgc2tpbkRlZiA9IHRoaXMuanNvbi5za2luc1sgc2tpbkluZGV4IF07XG4gICAgXG4gICAgICAgICAgICB2YXIgc2tpbkVudHJ5ID0geyBqb2ludHM6IHNraW5EZWYuam9pbnRzIH07XG4gICAgXG4gICAgICAgICAgICBpZiAoIHNraW5EZWYuaW52ZXJzZUJpbmRNYXRyaWNlcyA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoIHNraW5FbnRyeSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2FjY2Vzc29yJywgc2tpbkRlZi5pbnZlcnNlQmluZE1hdHJpY2VzICkudGhlbiggZnVuY3Rpb24gKCBhY2Nlc3NvciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcyA9IGFjY2Vzc29yO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBza2luRW50cnk7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjYW5pbWF0aW9uc1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5pbWF0aW9uSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5BbmltYXRpb25DbGlwPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRBbmltYXRpb24gPSBmdW5jdGlvbiAoIGFuaW1hdGlvbkluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uRGVmID0gdGhpcy5qc29uLmFuaW1hdGlvbnNbIGFuaW1hdGlvbkluZGV4IF07XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNdWx0aURlcGVuZGVuY2llcyggW1xuICAgIFxuICAgICAgICAgICAgICAgICdhY2Nlc3NvcicsXG4gICAgICAgICAgICAgICAgJ25vZGUnXG4gICAgXG4gICAgICAgICAgICBdICkudGhlbiggZnVuY3Rpb24gKCBkZXBlbmRlbmNpZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHRyYWNrcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBhbmltYXRpb25EZWYuY2hhbm5lbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFubmVsID0gYW5pbWF0aW9uRGVmLmNoYW5uZWxzWyBpIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzYW1wbGVyID0gYW5pbWF0aW9uRGVmLnNhbXBsZXJzWyBjaGFubmVsLnNhbXBsZXIgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzYW1wbGVyICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGNoYW5uZWwudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSB0YXJnZXQubm9kZSAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0Lm5vZGUgOiB0YXJnZXQuaWQ7IC8vIE5PVEU6IHRhcmdldC5pZCBpcyBkZXByZWNhdGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCA/IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzWyBzYW1wbGVyLmlucHV0IF0gOiBzYW1wbGVyLmlucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dHB1dCA9IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgPyBhbmltYXRpb25EZWYucGFyYW1ldGVyc1sgc2FtcGxlci5vdXRwdXQgXSA6IHNhbXBsZXIub3V0cHV0O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0QWNjZXNzb3IgPSBkZXBlbmRlbmNpZXMuYWNjZXNzb3JzWyBpbnB1dCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dHB1dEFjY2Vzc29yID0gZGVwZW5kZW5jaWVzLmFjY2Vzc29yc1sgb3V0cHV0IF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRlcGVuZGVuY2llcy5ub2Rlc1sgbmFtZSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudXBkYXRlTWF0cml4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgVHlwZWRLZXlmcmFtZVRyYWNrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIFBBVEhfUFJPUEVSVElFU1sgdGFyZ2V0LnBhdGggXSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMud2VpZ2h0czpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFR5cGVkS2V5ZnJhbWVUcmFjayA9IFRIUkVFLk51bWJlcktleWZyYW1lVHJhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMucm90YXRpb246XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlZEtleWZyYW1lVHJhY2sgPSBUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBBVEhfUFJPUEVSVElFUy5wb3NpdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMuc2NhbGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlZEtleWZyYW1lVHJhY2sgPSBUSFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXROYW1lID0gbm9kZS5uYW1lID8gbm9kZS5uYW1lIDogbm9kZS51dWlkO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcnBvbGF0aW9uID0gc2FtcGxlci5pbnRlcnBvbGF0aW9uICE9PSB1bmRlZmluZWQgPyBJTlRFUlBPTEFUSU9OWyBzYW1wbGVyLmludGVycG9sYXRpb24gXSA6IFRIUkVFLkludGVycG9sYXRlTGluZWFyO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXROYW1lcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggUEFUSF9QUk9QRVJUSUVTWyB0YXJnZXQucGF0aCBdID09PSBQQVRIX1BST1BFUlRJRVMud2VpZ2h0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9kZSBzaG91bGQgYmUgVEhSRUUuR3JvdXAgaGVyZSBidXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUEFUSF9QUk9QRVJUSUVTLndlaWdodHMobW9ycGhUYXJnZXRJbmZsdWVuY2VzKSBzaG91bGQgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHByb3BlcnR5IG9mIGEgbWVzaCBvYmplY3QgdW5kZXIgbm9kZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU28gZmluZGluZyB0YXJnZXRzIGhlcmUuXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvYmplY3QuaXNNZXNoID09PSB0cnVlICYmIG9iamVjdC5tYXRlcmlhbC5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZXMucHVzaCggb2JqZWN0Lm5hbWUgPyBvYmplY3QubmFtZSA6IG9iamVjdC51dWlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lcy5wdXNoKCB0YXJnZXROYW1lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtleWZyYW1lVHJhY2sub3B0aW1pemUoKSB3aWxsIG1vZGlmeSBnaXZlbiAndGltZXMnIGFuZCAndmFsdWVzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1ZmZlcnMgYmVmb3JlIGNyZWF0aW5nIGEgdHJ1bmNhdGVkIGNvcHkgdG8ga2VlcC4gQmVjYXVzZSBidWZmZXJzIG1heVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlIHJldXNlZCBieSBvdGhlciB0cmFja3MsIG1ha2UgY29waWVzIGhlcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwLCBqbCA9IHRhcmdldE5hbWVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhY2sgPSBuZXcgVHlwZWRLZXlmcmFtZVRyYWNrKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZXNbIGogXSArICcuJyArIFBBVEhfUFJPUEVSVElFU1sgdGFyZ2V0LnBhdGggXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRIUkVFLkFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIGlucHV0QWNjZXNzb3IuYXJyYXksIDAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRIUkVFLkFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIG91dHB1dEFjY2Vzc29yLmFycmF5LCAwICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhlcmUgaXMgdGhlIHRyaWNrIHRvIGVuYWJsZSBjdXN0b20gaW50ZXJwb2xhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3ZlcnJpZGVzIC5jcmVhdGVJbnRlcnBvbGFudCBpbiBhIGZhY3RvcnkgbWV0aG9kIHdoaWNoIGNyZWF0ZXMgY3VzdG9tIGludGVycG9sYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2FtcGxlci5pbnRlcnBvbGF0aW9uID09PSAnQ1VCSUNTUExJTkUnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suY3JlYXRlSW50ZXJwb2xhbnQgPSBmdW5jdGlvbiAoIHJlc3VsdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBIENVQklDU1BMSU5FIGtleWZyYW1lIGluIGdsVEYgaGFzIHRocmVlIG91dHB1dCB2YWx1ZXMgZm9yIGVhY2ggaW5wdXQgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVwcmVzZW50aW5nIGluVGFuZ2VudCwgc3BsaW5lVmVydGV4LCBhbmQgb3V0VGFuZ2VudC4gQXMgYSByZXN1bHQsIHRyYWNrLmdldFZhbHVlU2l6ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXVzdCBiZSBkaXZpZGVkIGJ5IHRocmVlIHRvIGdldCB0aGUgaW50ZXJwb2xhbnQncyBzYW1wbGVTaXplIGFyZ3VtZW50LlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpIC8gMywgcmVzdWx0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrcy5wdXNoKCB0cmFjayApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGFuaW1hdGlvbkRlZi5uYW1lICE9PSB1bmRlZmluZWQgPyBhbmltYXRpb25EZWYubmFtZSA6ICdhbmltYXRpb25fJyArIGFuaW1hdGlvbkluZGV4O1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuQW5pbWF0aW9uQ2xpcCggbmFtZSwgdW5kZWZpbmVkLCB0cmFja3MgKTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNub2Rlcy1hbmQtaGllcmFyY2h5XG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5PYmplY3QzRD59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkTm9kZSA9IGZ1bmN0aW9uICggbm9kZUluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICBcbiAgICAgICAgICAgIHZhciBtZXNoUmVmZXJlbmNlcyA9IHRoaXMuanNvbi5tZXNoUmVmZXJlbmNlcztcbiAgICAgICAgICAgIHZhciBtZXNoVXNlcyA9IHRoaXMuanNvbi5tZXNoVXNlcztcbiAgICBcbiAgICAgICAgICAgIHZhciBub2RlRGVmID0gdGhpcy5qc29uLm5vZGVzWyBub2RlSW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE11bHRpRGVwZW5kZW5jaWVzKCBbXG4gICAgXG4gICAgICAgICAgICAgICAgJ21lc2gnLFxuICAgICAgICAgICAgICAgICdza2luJyxcbiAgICAgICAgICAgICAgICAnY2FtZXJhJ1xuICAgIFxuICAgICAgICAgICAgXSApLnRoZW4oIGZ1bmN0aW9uICggZGVwZW5kZW5jaWVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub2RlO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5pc0JvbmUgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBuZXcgVEhSRUUuQm9uZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5vZGVEZWYubWVzaCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzaCA9IGRlcGVuZGVuY2llcy5tZXNoZXNbIG5vZGVEZWYubWVzaCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbWVzaC5jbG9uZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgU3BlY3VsYXItR2xvc3NpbmVzc1xuICAgICAgICAgICAgICAgICAgICBpZiAoIG1lc2guaXNHcm91cCA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBtZXNoLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG1lc2guY2hpbGRyZW5bIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm1hdGVyaWFsICYmIGNoaWxkLm1hdGVyaWFsLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsID09PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuWyBpIF0ub25CZWZvcmVSZW5kZXIgPSBjaGlsZC5vbkJlZm9yZVJlbmRlcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1lc2gubWF0ZXJpYWwgJiYgbWVzaC5tYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLm9uQmVmb3JlUmVuZGVyID0gbWVzaC5vbkJlZm9yZVJlbmRlcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSA+IDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgKz0gJ19pbnN0YW5jZV8nICsgbWVzaFVzZXNbIG5vZGVEZWYubWVzaCBdICsrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbm9kZURlZi5jYW1lcmEgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGRlcGVuZGVuY2llcy5jYW1lcmFzWyBub2RlRGVmLmNhbWVyYSBdO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5vZGVEZWYuZXh0ZW5zaW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICYmIG5vZGVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAmJiBub2RlRGVmLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUUyBdLmxpZ2h0ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaWdodHMgPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFMgXS5saWdodHM7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBsaWdodHNbIG5vZGVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTIF0ubGlnaHQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5uYW1lICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFRIUkVFLlByb3BlcnR5QmluZGluZy5zYW5pdGl6ZU5vZGVOYW1lKCBub2RlRGVmLm5hbWUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLmV4dHJhcyApIG5vZGUudXNlckRhdGEgPSBub2RlRGVmLmV4dHJhcztcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG5vZGVEZWYubWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuICAgICAgICAgICAgICAgICAgICBtYXRyaXguZnJvbUFycmF5KCBub2RlRGVmLm1hdHJpeCApO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGx5TWF0cml4KCBtYXRyaXggKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG5vZGVEZWYudHJhbnNsYXRpb24gIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucG9zaXRpb24uZnJvbUFycmF5KCBub2RlRGVmLnRyYW5zbGF0aW9uICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnF1YXRlcm5pb24uZnJvbUFycmF5KCBub2RlRGVmLnJvdGF0aW9uICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLnNjYWxlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNjYWxlLmZyb21BcnJheSggbm9kZURlZi5zY2FsZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI3NjZW5lc1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NlbmVJbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLlNjZW5lPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRTY2VuZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgIC8vIHNjZW5lIG5vZGUgaGllcmFjaHkgYnVpbGRlclxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGROb2RlSGllcmFjaHkoIG5vZGVJZCwgcGFyZW50T2JqZWN0LCBqc29uLCBhbGxOb2Rlcywgc2tpbnMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBhbGxOb2Rlc1sgbm9kZUlkIF07XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVEZWYgPSBqc29uLm5vZGVzWyBub2RlSWQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBza2VsZXRvbiBoZXJlIGFzIHdlbGxcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG5vZGVEZWYuc2tpbiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzaGVzID0gbm9kZS5pc0dyb3VwID09PSB0cnVlID8gbm9kZS5jaGlsZHJlbiA6IFsgbm9kZSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gbWVzaGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc2ggPSBtZXNoZXNbIGkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBza2luRW50cnkgPSBza2luc1sgbm9kZURlZi5za2luIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lSW52ZXJzZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMCwgamwgPSBza2luRW50cnkuam9pbnRzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2ludElkID0gc2tpbkVudHJ5LmpvaW50c1sgaiBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2ludE5vZGUgPSBhbGxOb2Rlc1sgam9pbnRJZCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggam9pbnROb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib25lcy5wdXNoKCBqb2ludE5vZGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdC5mcm9tQXJyYXkoIHNraW5FbnRyeS5pbnZlcnNlQmluZE1hdHJpY2VzLmFycmF5LCBqICogMTYgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib25lSW52ZXJzZXMucHVzaCggbWF0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogSm9pbnQgXCIlc1wiIGNvdWxkIG5vdCBiZSBmb3VuZC4nLCBqb2ludElkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5iaW5kKCBuZXcgVEhSRUUuU2tlbGV0b24oIGJvbmVzLCBib25lSW52ZXJzZXMgKSwgbWVzaC5tYXRyaXhXb3JsZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIG5vZGUgaGllcmFjaHlcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3QuYWRkKCBub2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLmNoaWxkcmVuICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlRGVmLmNoaWxkcmVuO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlblsgaSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGROb2RlSGllcmFjaHkoIGNoaWxkLCBub2RlLCBqc29uLCBhbGxOb2Rlcywgc2tpbnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBsb2FkU2NlbmUoIHNjZW5lSW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgICAgICAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgICAgICAgICAgICAgdmFyIHNjZW5lRGVmID0gdGhpcy5qc29uLnNjZW5lc1sgc2NlbmVJbmRleCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE11bHRpRGVwZW5kZW5jaWVzKCBbXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICdub2RlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NraW4nXG4gICAgXG4gICAgICAgICAgICAgICAgXSApLnRoZW4oIGZ1bmN0aW9uICggZGVwZW5kZW5jaWVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzY2VuZURlZi5uYW1lICE9PSB1bmRlZmluZWQgKSBzY2VuZS5uYW1lID0gc2NlbmVEZWYubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzY2VuZURlZi5leHRyYXMgKSBzY2VuZS51c2VyRGF0YSA9IHNjZW5lRGVmLmV4dHJhcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZHMgPSBzY2VuZURlZi5ub2RlcyB8fCBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IG5vZGVJZHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZE5vZGVIaWVyYWNoeSggbm9kZUlkc1sgaSBdLCBzY2VuZSwganNvbiwgZGVwZW5kZW5jaWVzLm5vZGVzLCBkZXBlbmRlbmNpZXMuc2tpbnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBBbWJpZW50IGxpZ2h0aW5nLCBpZiBwcmVzZW50LCBpcyBhbHdheXMgYXR0YWNoZWQgdG8gdGhlIHNjZW5lIHJvb3QuXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2NlbmVEZWYuZXh0ZW5zaW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBzY2VuZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFMgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBzY2VuZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFMgXS5saWdodCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZ2h0cyA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUUyBdLmxpZ2h0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lLmFkZCggbGlnaHRzWyBzY2VuZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFMgXS5saWdodCBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjZW5lO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgIH0oKTtcbiAgICBcbiAgICAgICAgcmV0dXJuIEdMVEZMb2FkZXI7XG4gICAgXG4gICAgfSApKCk7IiwiLyoqXG4gKiBAYXV0aG9yIEt5bGUtTGFyc29uIGh0dHBzOi8vZ2l0aHViLmNvbS9LeWxlLUxhcnNvblxuICogQGF1dGhvciBUYWthaGlybyBodHRwczovL2dpdGh1Yi5jb20vdGFrYWhpcm94XG4gKiBAYXV0aG9yIExld3kgQmx1ZSBodHRwczovL2dpdGh1Yi5jb20vbG9vZWVlXG4gKlxuICogTG9hZGVyIGxvYWRzIEZCWCBmaWxlIGFuZCBnZW5lcmF0ZXMgR3JvdXAgcmVwcmVzZW50aW5nIEZCWCBzY2VuZS5cbiAqIFJlcXVpcmVzIEZCWCBmaWxlIHRvIGJlID49IDcuMCBhbmQgaW4gQVNDSUkgb3IgdG8gYmUgYW55IHZlcnNpb24gaW4gQmluYXJ5IGZvcm1hdC5cbiAqXG4gKiBTdXBwb3J0czpcbiAqIFx0TWVzaCBHZW5lcmF0aW9uIChQb3NpdGlvbmFsIERhdGEpXG4gKiBcdE5vcm1hbCBEYXRhIChQZXIgVmVydGV4IERyYXdpbmcgSW5zdGFuY2UpXG4gKlx0VVYgRGF0YSAoUGVyIFZlcnRleCBEcmF3aW5nIEluc3RhbmNlKVxuICpcdFNraW5uaW5nXG4gKlx0QW5pbWF0aW9uXG4gKiBcdC0gU2VwYXJhdGVkIEFuaW1hdGlvbnMgYmFzZWQgb24gc3RhY2tzLlxuICogXHQtIFNrZWxldGFsICYgTm9uLVNrZWxldGFsIEFuaW1hdGlvbnNcbiAqXHROVVJCUyAoT3BlbiwgQ2xvc2VkIGFuZCBQZXJpb2RpYyBmb3JtcylcbiAqXG4gKiBOZWVkcyBTdXBwb3J0OlxuICpcdEV1bGVyIHJvdGF0aW9uIG9yZGVyXG4gKlxuICpcbiAqIEZCWCBmb3JtYXQgcmVmZXJlbmNlczpcbiAqIFx0aHR0cHM6Ly93aWtpLmJsZW5kZXIub3JnL2luZGV4LnBocC9Vc2VyOk1vbnQyOS9Gb3VuZGF0aW9uL0ZCWF9GaWxlX1N0cnVjdHVyZVxuICpcbiAqIFx0QmluYXJ5IGZvcm1hdCBzcGVjaWZpY2F0aW9uOlxuICpcdFx0aHR0cHM6Ly9jb2RlLmJsZW5kZXIub3JnLzIwMTMvMDgvZmJ4LWJpbmFyeS1maWxlLWZvcm1hdC1zcGVjaWZpY2F0aW9uL1xuICpcdFx0aHR0cHM6Ly93aWtpLnJvZ2lrZW4ub3JnL3NwZWNpZmljYXRpb25zL2ZpbGUtZm9ybWF0L2ZieC8gKG1vcmUgZGV0YWlsIGJ1dCBKYXBhbmVzZSlcbiAqL1xuXG4oIGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgVEhSRUUuRkJYTG9hZGVyID0gZnVuY3Rpb24gKCBtYW5hZ2VyICkge1xuICAgIFxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIE9iamVjdC5hc3NpZ24oIFRIUkVFLkZCWExvYWRlci5wcm90b3R5cGUsIHtcbiAgICBcbiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZURpcmVjdG9yeSA9IFRIUkVFLkxvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuICAgICAgICAgICAgICAgIGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcbiAgICAgICAgICAgICAgICBsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY2VuZSA9IHNlbGYucGFyc2UoIGJ1ZmZlciwgcmVzb3VyY2VEaXJlY3RvcnkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTG9hZCggc2NlbmUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlcnJvciApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoIEZCWEJ1ZmZlciwgcmVzb3VyY2VEaXJlY3RvcnkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIEZCWFRyZWU7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBpc0ZieEZvcm1hdEJpbmFyeSggRkJYQnVmZmVyICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIEZCWFRyZWUgPSBuZXcgQmluYXJ5UGFyc2VyKCkucGFyc2UoIEZCWEJ1ZmZlciApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBGQlhUZXh0ID0gY29udmVydEFycmF5QnVmZmVyVG9TdHJpbmcoIEZCWEJ1ZmZlciApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgaXNGYnhGb3JtYXRBU0NJSSggRkJYVGV4dCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuRkJYTG9hZGVyOiBVbmtub3duIGZvcm1hdC4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBnZXRGYnhWZXJzaW9uKCBGQlhUZXh0ICkgPCA3MDAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuRkJYTG9hZGVyOiBGQlggdmVyc2lvbiBub3Qgc3VwcG9ydGVkLCBGaWxlVmVyc2lvbjogJyArIGdldEZieFZlcnNpb24oIEZCWFRleHQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIEZCWFRyZWUgPSBuZXcgVGV4dFBhcnNlcigpLnBhcnNlKCBGQlhUZXh0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCBGQlhUcmVlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25zID0gcGFyc2VDb25uZWN0aW9ucyggRkJYVHJlZSApO1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZXMgPSBwYXJzZUltYWdlcyggRkJYVHJlZSApO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0dXJlcyA9IHBhcnNlVGV4dHVyZXMoIEZCWFRyZWUsIG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKS5zZXRQYXRoKCByZXNvdXJjZURpcmVjdG9yeSApLCBpbWFnZXMsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFscyA9IHBhcnNlTWF0ZXJpYWxzKCBGQlhUcmVlLCB0ZXh0dXJlcywgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICB2YXIgc2tlbGV0b25zID0gcGFyc2VEZWZvcm1lcnMoIEZCWFRyZWUsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5TWFwID0gcGFyc2VHZW9tZXRyaWVzKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgc2tlbGV0b25zICk7XG4gICAgICAgICAgICAgICAgdmFyIHNjZW5lR3JhcGggPSBwYXJzZVNjZW5lKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgc2tlbGV0b25zLCBnZW9tZXRyeU1hcCwgbWF0ZXJpYWxzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjZW5lR3JhcGg7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgLy8gUGFyc2VzIEZCWFRyZWUuQ29ubmVjdGlvbnMgd2hpY2ggaG9sZHMgcGFyZW50LWNoaWxkIGNvbm5lY3Rpb25zIGJldHdlZW4gb2JqZWN0cyAoZS5nLiBtYXRlcmlhbCAtPiB0ZXh0dXJlLCBtb2RlbC0+Z2VvbWV0cnkgKVxuICAgICAgICAvLyBhbmQgZGV0YWlscyB0aGUgY29ubmVjdGlvbiB0eXBlXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlQ29ubmVjdGlvbnMoIEZCWFRyZWUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbk1hcCA9IG5ldyBNYXAoKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ0Nvbm5lY3Rpb25zJyBpbiBGQlhUcmVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciByYXdDb25uZWN0aW9ucyA9IEZCWFRyZWUuQ29ubmVjdGlvbnMuY29ubmVjdGlvbnM7XG4gICAgXG4gICAgICAgICAgICAgICAgcmF3Q29ubmVjdGlvbnMuZm9yRWFjaCggZnVuY3Rpb24gKCByYXdDb25uZWN0aW9uICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbUlEID0gcmF3Q29ubmVjdGlvblsgMCBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9JRCA9IHJhd0Nvbm5lY3Rpb25bIDEgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0aW9uc2hpcCA9IHJhd0Nvbm5lY3Rpb25bIDIgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGNvbm5lY3Rpb25NYXAuaGFzKCBmcm9tSUQgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25NYXAuc2V0KCBmcm9tSUQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50UmVsYXRpb25zaGlwID0geyBJRDogdG9JRCwgcmVsYXRpb25zaGlwOiByZWxhdGlvbnNoaXAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbk1hcC5nZXQoIGZyb21JRCApLnBhcmVudHMucHVzaCggcGFyZW50UmVsYXRpb25zaGlwICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBjb25uZWN0aW9uTWFwLmhhcyggdG9JRCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbk1hcC5zZXQoIHRvSUQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRSZWxhdGlvbnNoaXAgPSB7IElEOiBmcm9tSUQsIHJlbGF0aW9uc2hpcDogcmVsYXRpb25zaGlwIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25NYXAuZ2V0KCB0b0lEICkuY2hpbGRyZW4ucHVzaCggY2hpbGRSZWxhdGlvbnNoaXAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbk1hcDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBGQlhUcmVlLk9iamVjdHMuVmlkZW8gZm9yIGVtYmVkZGVkIGltYWdlIGRhdGFcbiAgICAgICAgLy8gVGhlc2UgaW1hZ2VzIGFyZSBjb25uZWN0ZWQgdG8gdGV4dHVyZXMgaW4gRkJYVHJlZS5PYmplY3RzLlRleHR1cmVzXG4gICAgICAgIC8vIHZpYSBGQlhUcmVlLkNvbm5lY3Rpb25zLlxuICAgICAgICBmdW5jdGlvbiBwYXJzZUltYWdlcyggRkJYVHJlZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBpbWFnZXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBibG9icyA9IHt9O1xuICAgIFxuICAgICAgICAgICAgaWYgKCAnVmlkZW8nIGluIEZCWFRyZWUuT2JqZWN0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmlkZW9Ob2RlcyA9IEZCWFRyZWUuT2JqZWN0cy5WaWRlbztcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIHZpZGVvTm9kZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWRlb05vZGUgPSB2aWRlb05vZGVzWyBub2RlSUQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gcGFyc2VJbnQoIG5vZGVJRCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpbWFnZXNbIGlkIF0gPSB2aWRlb05vZGUuRmlsZW5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHJhdyBpbWFnZSBkYXRhIGlzIGluIHZpZGVvTm9kZS5Db250ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmICggJ0NvbnRlbnQnIGluIHZpZGVvTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1ZmZlckNvbnRlbnQgPSAoIHZpZGVvTm9kZS5Db250ZW50IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgKSAmJiAoIHZpZGVvTm9kZS5Db250ZW50LmJ5dGVMZW5ndGggPiAwICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZTY0Q29udGVudCA9ICggdHlwZW9mIHZpZGVvTm9kZS5Db250ZW50ID09PSAnc3RyaW5nJyApICYmICggdmlkZW9Ob2RlLkNvbnRlbnQgIT09ICcnICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGFycmF5QnVmZmVyQ29udGVudCB8fCBiYXNlNjRDb250ZW50ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHBhcnNlSW1hZ2UoIHZpZGVvTm9kZXNbIG5vZGVJRCBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvYnNbIHZpZGVvTm9kZS5GaWxlbmFtZSBdID0gaW1hZ2U7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaWQgaW4gaW1hZ2VzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9IGltYWdlc1sgaWQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGJsb2JzWyBmaWxlbmFtZSBdICE9PSB1bmRlZmluZWQgKSBpbWFnZXNbIGlkIF0gPSBibG9ic1sgZmlsZW5hbWUgXTtcbiAgICAgICAgICAgICAgICBlbHNlIGltYWdlc1sgaWQgXSA9IGltYWdlc1sgaWQgXS5zcGxpdCggJ1xcXFwnICkucG9wKCk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gaW1hZ2VzO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIFBhcnNlIGVtYmVkZGVkIGltYWdlIGRhdGEgaW4gRkJYVHJlZS5WaWRlby5Db250ZW50XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlSW1hZ2UoIHZpZGVvTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gdmlkZW9Ob2RlLkNvbnRlbnQ7XG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSB2aWRlb05vZGUuUmVsYXRpdmVGaWxlbmFtZSB8fCB2aWRlb05vZGUuRmlsZW5hbWU7XG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gZmlsZU5hbWUuc2xpY2UoIGZpbGVOYW1lLmxhc3RJbmRleE9mKCAnLicgKSArIDEgKS50b0xvd2VyQ2FzZSgpO1xuICAgIFxuICAgICAgICAgICAgdmFyIHR5cGU7XG4gICAgXG4gICAgICAgICAgICBzd2l0Y2ggKCBleHRlbnNpb24gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY2FzZSAnYm1wJzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbWFnZS9ibXAnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICBjYXNlICdqcGcnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2pwZWcnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2ltYWdlL2pwZWcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICBjYXNlICdwbmcnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2ltYWdlL3BuZyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIGNhc2UgJ3RpZic6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaW1hZ2UvdGlmZic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ0ZCWExvYWRlcjogSW1hZ2UgdHlwZSBcIicgKyBleHRlbnNpb24gKyAnXCIgaXMgbm90IHN1cHBvcnRlZC4nICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggdHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnICkgeyAvLyBBU0NJSSBmb3JtYXRcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RhdGE6JyArIHR5cGUgKyAnO2Jhc2U2NCwnICsgY29udGVudDtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIEJpbmFyeSBGb3JtYXRcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBuZXcgVWludDhBcnJheSggY29udGVudCApO1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCggbmV3IEJsb2IoIFsgYXJyYXkgXSwgeyB0eXBlOiB0eXBlIH0gKSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIFBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5UZXh0dXJlXG4gICAgICAgIC8vIFRoZXNlIGNvbnRhaW4gZGV0YWlscyBzdWNoIGFzIFVWIHNjYWxpbmcsIGNyb3BwaW5nLCByb3RhdGlvbiBldGMgYW5kIGFyZSBjb25uZWN0ZWRcbiAgICAgICAgLy8gdG8gaW1hZ2VzIGluIEZCWFRyZWUuT2JqZWN0cy5WaWRlb1xuICAgICAgICBmdW5jdGlvbiBwYXJzZVRleHR1cmVzKCBGQlhUcmVlLCBsb2FkZXIsIGltYWdlcywgY29ubmVjdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgdGV4dHVyZU1hcCA9IG5ldyBNYXAoKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ1RleHR1cmUnIGluIEZCWFRyZWUuT2JqZWN0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZU5vZGVzID0gRkJYVHJlZS5PYmplY3RzLlRleHR1cmU7XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIG5vZGVJRCBpbiB0ZXh0dXJlTm9kZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0dXJlID0gcGFyc2VUZXh0dXJlKCB0ZXh0dXJlTm9kZXNbIG5vZGVJRCBdLCBsb2FkZXIsIGltYWdlcywgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZU1hcC5zZXQoIHBhcnNlSW50KCBub2RlSUQgKSwgdGV4dHVyZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlTWFwO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIFBhcnNlIGluZGl2aWR1YWwgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuVGV4dHVyZVxuICAgICAgICBmdW5jdGlvbiBwYXJzZVRleHR1cmUoIHRleHR1cmVOb2RlLCBsb2FkZXIsIGltYWdlcywgY29ubmVjdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgdGV4dHVyZSA9IGxvYWRUZXh0dXJlKCB0ZXh0dXJlTm9kZSwgbG9hZGVyLCBpbWFnZXMsIGNvbm5lY3Rpb25zICk7XG4gICAgXG4gICAgICAgICAgICB0ZXh0dXJlLklEID0gdGV4dHVyZU5vZGUuaWQ7XG4gICAgXG4gICAgICAgICAgICB0ZXh0dXJlLm5hbWUgPSB0ZXh0dXJlTm9kZS5hdHRyTmFtZTtcbiAgICBcbiAgICAgICAgICAgIHZhciB3cmFwTW9kZVUgPSB0ZXh0dXJlTm9kZS5XcmFwTW9kZVU7XG4gICAgICAgICAgICB2YXIgd3JhcE1vZGVWID0gdGV4dHVyZU5vZGUuV3JhcE1vZGVWO1xuICAgIFxuICAgICAgICAgICAgdmFyIHZhbHVlVSA9IHdyYXBNb2RlVSAhPT0gdW5kZWZpbmVkID8gd3JhcE1vZGVVLnZhbHVlIDogMDtcbiAgICAgICAgICAgIHZhciB2YWx1ZVYgPSB3cmFwTW9kZVYgIT09IHVuZGVmaW5lZCA/IHdyYXBNb2RlVi52YWx1ZSA6IDA7XG4gICAgXG4gICAgICAgICAgICAvLyBodHRwOi8vZG93bmxvYWQuYXV0b2Rlc2suY29tL3VzL2ZieC9TREtkb2NzL0ZCWF9TREtfSGVscC9maWxlcy9mYnhzZGtyZWYvY2xhc3Nfa19mYnhfdGV4dHVyZS5odG1sIzg4OTY0MGU2M2UyZTY4MTI1OWVhODEwNjFiODUxNDNhXG4gICAgICAgICAgICAvLyAwOiByZXBlYXQoZGVmYXVsdCksIDE6IGNsYW1wXG4gICAgXG4gICAgICAgICAgICB0ZXh0dXJlLndyYXBTID0gdmFsdWVVID09PSAwID8gVEhSRUUuUmVwZWF0V3JhcHBpbmcgOiBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nO1xuICAgICAgICAgICAgdGV4dHVyZS53cmFwVCA9IHZhbHVlViA9PT0gMCA/IFRIUkVFLlJlcGVhdFdyYXBwaW5nIDogVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZztcbiAgICBcbiAgICAgICAgICAgIGlmICggJ1NjYWxpbmcnIGluIHRleHR1cmVOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB0ZXh0dXJlTm9kZS5TY2FsaW5nLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgIHRleHR1cmUucmVwZWF0LnggPSB2YWx1ZXNbIDAgXTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLnJlcGVhdC55ID0gdmFsdWVzWyAxIF07XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBsb2FkIGEgdGV4dHVyZSBzcGVjaWZpZWQgYXMgYSBibG9iIG9yIGRhdGEgVVJJLCBvciB2aWEgYW4gZXh0ZXJuYWwgVVJMIHVzaW5nIFRIUkVFLlRleHR1cmVMb2FkZXJcbiAgICAgICAgZnVuY3Rpb24gbG9hZFRleHR1cmUoIHRleHR1cmVOb2RlLCBsb2FkZXIsIGltYWdlcywgY29ubmVjdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgZmlsZU5hbWU7XG4gICAgXG4gICAgICAgICAgICB2YXIgY3VycmVudFBhdGggPSBsb2FkZXIucGF0aDtcbiAgICBcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGNvbm5lY3Rpb25zLmdldCggdGV4dHVyZU5vZGUuaWQgKS5jaGlsZHJlbjtcbiAgICBcbiAgICAgICAgICAgIGlmICggY2hpbGRyZW4gIT09IHVuZGVmaW5lZCAmJiBjaGlsZHJlbi5sZW5ndGggPiAwICYmIGltYWdlc1sgY2hpbGRyZW5bIDAgXS5JRCBdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBpbWFnZXNbIGNoaWxkcmVuWyAwIF0uSUQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGZpbGVOYW1lLmluZGV4T2YoICdibG9iOicgKSA9PT0gMCB8fCBmaWxlTmFtZS5pbmRleE9mKCAnZGF0YTonICkgPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxvYWRlci5zZXRQYXRoKCB1bmRlZmluZWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCBmaWxlTmFtZSApO1xuICAgIFxuICAgICAgICAgICAgbG9hZGVyLnNldFBhdGgoIGN1cnJlbnRQYXRoICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuTWF0ZXJpYWxcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VNYXRlcmlhbHMoIEZCWFRyZWUsIHRleHR1cmVNYXAsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1hdGVyaWFsTWFwID0gbmV3IE1hcCgpO1xuICAgIFxuICAgICAgICAgICAgaWYgKCAnTWF0ZXJpYWwnIGluIEZCWFRyZWUuT2JqZWN0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxOb2RlcyA9IEZCWFRyZWUuT2JqZWN0cy5NYXRlcmlhbDtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIG1hdGVyaWFsTm9kZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHBhcnNlTWF0ZXJpYWwoIEZCWFRyZWUsIG1hdGVyaWFsTm9kZXNbIG5vZGVJRCBdLCB0ZXh0dXJlTWFwLCBjb25uZWN0aW9ucyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsICE9PSBudWxsICkgbWF0ZXJpYWxNYXAuc2V0KCBwYXJzZUludCggbm9kZUlEICksIG1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsTWFwO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIFBhcnNlIHNpbmdsZSBub2RlIGluIEZCWFRyZWUuT2JqZWN0cy5NYXRlcmlhbFxuICAgICAgICAvLyBNYXRlcmlhbHMgYXJlIGNvbm5lY3RlZCB0byB0ZXh0dXJlIG1hcHMgaW4gRkJYVHJlZS5PYmplY3RzLlRleHR1cmVzXG4gICAgICAgIC8vIEZCWCBmb3JtYXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgTGFtYmVydCBhbmQgUGhvbmcgc2hhZGluZyBtb2RlbHNcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VNYXRlcmlhbCggRkJYVHJlZSwgbWF0ZXJpYWxOb2RlLCB0ZXh0dXJlTWFwLCBjb25uZWN0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBJRCA9IG1hdGVyaWFsTm9kZS5pZDtcbiAgICAgICAgICAgIHZhciBuYW1lID0gbWF0ZXJpYWxOb2RlLmF0dHJOYW1lO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBtYXRlcmlhbE5vZGUuU2hhZGluZ01vZGVsO1xuICAgIFxuICAgICAgICAgICAgLy9DYXNlIHdoZXJlIEZCWCB3cmFwcyBzaGFkaW5nIG1vZGVsIGluIHByb3BlcnR5IG9iamVjdC5cbiAgICAgICAgICAgIGlmICggdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHR5cGUgPSB0eXBlLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gSWdub3JlIHVudXNlZCBtYXRlcmlhbHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbnkgY29ubmVjdGlvbnMuXG4gICAgICAgICAgICBpZiAoICEgY29ubmVjdGlvbnMuaGFzKCBJRCApICkgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHBhcnNlUGFyYW1ldGVycyggRkJYVHJlZSwgbWF0ZXJpYWxOb2RlLCB0ZXh0dXJlTWFwLCBJRCwgY29ubmVjdGlvbnMgKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbDtcbiAgICBcbiAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUudG9Mb3dlckNhc2UoKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBjYXNlICdwaG9uZyc6XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xhbWJlcnQnOlxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogdW5rbm93biBtYXRlcmlhbCB0eXBlIFwiJXNcIi4gRGVmYXVsdGluZyB0byBNZXNoUGhvbmdNYXRlcmlhbC4nLCB0eXBlICk7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCB7IGNvbG9yOiAweDMzMDBmZiB9ICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgbWF0ZXJpYWwuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG4gICAgICAgICAgICBtYXRlcmlhbC5uYW1lID0gbmFtZTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBGQlggbWF0ZXJpYWwgYW5kIHJldHVybiBwYXJhbWV0ZXJzIHN1aXRhYmxlIGZvciBhIHRocmVlLmpzIG1hdGVyaWFsXG4gICAgICAgIC8vIEFsc28gcGFyc2UgdGhlIHRleHR1cmUgbWFwIGFuZCByZXR1cm4gYW55IHRleHR1cmVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWF0ZXJpYWxcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VQYXJhbWV0ZXJzKCBGQlhUcmVlLCBwcm9wZXJ0aWVzLCB0ZXh0dXJlTWFwLCBJRCwgY29ubmVjdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHt9O1xuICAgIFxuICAgICAgICAgICAgaWYgKCBwcm9wZXJ0aWVzLkJ1bXBGYWN0b3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5idW1wU2NhbGUgPSBwcm9wZXJ0aWVzLkJ1bXBGYWN0b3IudmFsdWU7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHByb3BlcnRpZXMuRGlmZnVzZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KCBwcm9wZXJ0aWVzLkRpZmZ1c2UudmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcHJvcGVydGllcy5EaXNwbGFjZW1lbnRGYWN0b3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5kaXNwbGFjZW1lbnRTY2FsZSA9IHByb3BlcnRpZXMuRGlzcGxhY2VtZW50RmFjdG9yLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBwcm9wZXJ0aWVzLlJlZmxlY3Rpb25GYWN0b3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5yZWZsZWN0aXZpdHkgPSBwcm9wZXJ0aWVzLlJlZmxlY3Rpb25GYWN0b3IudmFsdWU7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHByb3BlcnRpZXMuU3BlY3VsYXIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5zcGVjdWxhciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggcHJvcGVydGllcy5TcGVjdWxhci52YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBwcm9wZXJ0aWVzLlNoaW5pbmVzcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnNoaW5pbmVzcyA9IHByb3BlcnRpZXMuU2hpbmluZXNzLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBwcm9wZXJ0aWVzLkVtaXNzaXZlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZW1pc3NpdmUgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIHByb3BlcnRpZXMuRW1pc3NpdmUudmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcHJvcGVydGllcy5FbWlzc2l2ZUZhY3RvciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmVtaXNzaXZlSW50ZW5zaXR5ID0gcGFyc2VGbG9hdCggcHJvcGVydGllcy5FbWlzc2l2ZUZhY3Rvci52YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBwcm9wZXJ0aWVzLk9wYWNpdHkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5vcGFjaXR5ID0gcGFyc2VGbG9hdCggcHJvcGVydGllcy5PcGFjaXR5LnZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHBhcmFtZXRlcnMub3BhY2l0eSA8IDEuMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGNvbm5lY3Rpb25zLmdldCggSUQgKS5jaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gY2hpbGQucmVsYXRpb25zaGlwO1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0J1bXAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycy5idW1wTWFwID0gdGV4dHVyZU1hcC5nZXQoIGNoaWxkLklEICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRGlmZnVzZUNvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMubWFwID0gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgY2hpbGQuSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRGlzcGxhY2VtZW50Q29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgPSBnZXRUZXh0dXJlKCBGQlhUcmVlLCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCwgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdFbWlzc2l2ZUNvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPSBnZXRUZXh0dXJlKCBGQlhUcmVlLCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCwgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOb3JtYWxNYXAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycy5ub3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBGQlhUcmVlLCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCwgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdSZWZsZWN0aW9uQ29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycy5lbnZNYXAgPSBnZXRUZXh0dXJlKCBGQlhUcmVlLCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCwgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZW52TWFwLm1hcHBpbmcgPSBUSFJFRS5FcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTcGVjdWxhckNvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPSBnZXRUZXh0dXJlKCBGQlhUcmVlLCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCwgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdUcmFuc3BhcmVudENvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuYWxwaGFNYXAgPSBnZXRUZXh0dXJlKCBGQlhUcmVlLCB0ZXh0dXJlTWFwLCBjaGlsZC5JRCwgY29ubmVjdGlvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FtYmllbnRDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NoaW5pbmVzc0V4cG9uZW50JzogLy8gQUtBIGdsb3NzaW5lc3MgbWFwXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NwZWN1bGFyRmFjdG9yJzogLy8gQUtBIHNwZWN1bGFyTGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVmVjdG9yRGlzcGxhY2VtZW50Q29sb3InOiAvLyBOT1RFOiBTZWVtcyB0byBiZSBhIGNvcHkgb2YgRGlzcGxhY2VtZW50Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogJXMgbWFwIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhyZWUuanMsIHNraXBwaW5nIHRleHR1cmUuJywgdHlwZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnM7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gZ2V0IGEgdGV4dHVyZSBmcm9tIHRoZSB0ZXh0dXJlTWFwIGZvciB1c2UgYnkgYSBtYXRlcmlhbC5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgaWQsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgLy8gaWYgdGhlIHRleHR1cmUgaXMgYSBsYXllcmVkIHRleHR1cmUsIGp1c3QgdXNlIHRoZSBmaXJzdCBsYXllciBhbmQgaXNzdWUgYSB3YXJuaW5nXG4gICAgICAgICAgICBpZiAoICdMYXllcmVkVGV4dHVyZScgaW4gRkJYVHJlZS5PYmplY3RzICYmIGlkIGluIEZCWFRyZWUuT2JqZWN0cy5MYXllcmVkVGV4dHVyZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IGxheWVyZWQgdGV4dHVyZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhyZWUuanMuIERpc2NhcmRpbmcgYWxsIGJ1dCBmaXJzdCBsYXllci4nICk7XG4gICAgICAgICAgICAgICAgaWQgPSBjb25uZWN0aW9ucy5nZXQoIGlkICkuY2hpbGRyZW5bIDAgXS5JRDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlTWFwLmdldCggaWQgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuRGVmb3JtZXJcbiAgICAgICAgLy8gRGVmb3JtZXIgbm9kZSBjYW4gY29udGFpbiBza2lubmluZyBvciBWZXJ0ZXggQ2FjaGUgYW5pbWF0aW9uIGRhdGEsIGhvd2V2ZXIgb25seSBza2lubmluZyBpcyBzdXBwb3J0ZWQgaGVyZVxuICAgICAgICAvLyBHZW5lcmF0ZXMgbWFwIG9mIFNrZWxldG9uLWxpa2Ugb2JqZWN0cyBmb3IgdXNlIGxhdGVyIHdoZW4gZ2VuZXJhdGluZyBhbmQgYmluZGluZyBza2VsZXRvbnMuXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlRGVmb3JtZXJzKCBGQlhUcmVlLCBjb25uZWN0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBza2VsZXRvbnMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ0RlZm9ybWVyJyBpbiBGQlhUcmVlLk9iamVjdHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIERlZm9ybWVyTm9kZXMgPSBGQlhUcmVlLk9iamVjdHMuRGVmb3JtZXI7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIG5vZGVJRCBpbiBEZWZvcm1lck5vZGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmb3JtZXJOb2RlID0gRGVmb3JtZXJOb2Rlc1sgbm9kZUlEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggZGVmb3JtZXJOb2RlLmF0dHJUeXBlID09PSAnU2tpbicgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRpb25zaGlwcyA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIG5vZGVJRCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tlbGV0b24gPSBwYXJzZVNrZWxldG9uKCByZWxhdGlvbnNoaXBzLCBEZWZvcm1lck5vZGVzICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2VsZXRvbi5JRCA9IG5vZGVJRDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmVsYXRpb25zaGlwcy5wYXJlbnRzLmxlbmd0aCA+IDEgKSBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IHNrZWxldG9uIGF0dGFjaGVkIHRvIG1vcmUgdGhhbiBvbmUgZ2VvbWV0cnkgaXMgbm90IHN1cHBvcnRlZC4nICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2VsZXRvbi5nZW9tZXRyeUlEID0gcmVsYXRpb25zaGlwcy5wYXJlbnRzWyAwIF0uSUQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBza2VsZXRvbnNbIG5vZGVJRCBdID0gc2tlbGV0b247XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gc2tlbGV0b25zO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIFBhcnNlIHNpbmdsZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuRGVmb3JtZXJcbiAgICAgICAgLy8gVGhlIHRvcCBsZXZlbCBkZWZvcm1lciBub2RlcyBoYXZlIHR5cGUgJ1NraW4nIGFuZCBzdWJEZWZvcm1lciBub2RlcyBoYXZlIHR5cGUgJ0NsdXN0ZXInXG4gICAgICAgIC8vIEVhY2ggc2tpbiBub2RlIHJlcHJlc2VudHMgYSBza2VsZXRvbiBhbmQgZWFjaCBjbHVzdGVyIG5vZGUgcmVwcmVzZW50cyBhIGJvbmVcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VTa2VsZXRvbiggY29ubmVjdGlvbnMsIGRlZm9ybWVyTm9kZXMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcmF3Qm9uZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIGNvbm5lY3Rpb25zLmNoaWxkcmVuLmZvckVhY2goIGZ1bmN0aW9uICggY2hpbGQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHN1YkRlZm9ybWVyTm9kZSA9IGRlZm9ybWVyTm9kZXNbIGNoaWxkLklEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBzdWJEZWZvcm1lck5vZGUuYXR0clR5cGUgIT09ICdDbHVzdGVyJyApIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmF3Qm9uZSA9IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgSUQ6IGNoaWxkLklELFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0czogW10sXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogbmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkoIHN1YkRlZm9ybWVyTm9kZS5UcmFuc2Zvcm0uYSApLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1MaW5rOiBuZXcgVEhSRUUuTWF0cml4NCgpLmZyb21BcnJheSggc3ViRGVmb3JtZXJOb2RlLlRyYW5zZm9ybUxpbmsuYSApLFxuICAgICAgICAgICAgICAgICAgICBsaW5rTW9kZTogc3ViRGVmb3JtZXJOb2RlLk1vZGUsXG4gICAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoICdJbmRleGVzJyBpbiBzdWJEZWZvcm1lck5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJhd0JvbmUuaW5kaWNlcyA9IHN1YkRlZm9ybWVyTm9kZS5JbmRleGVzLmE7XG4gICAgICAgICAgICAgICAgICAgIHJhd0JvbmUud2VpZ2h0cyA9IHN1YkRlZm9ybWVyTm9kZS5XZWlnaHRzLmE7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJhd0JvbmVzLnB1c2goIHJhd0JvbmUgKTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmF3Qm9uZXM6IHJhd0JvbmVzLFxuICAgICAgICAgICAgICAgIGJvbmVzOiBbXVxuICAgIFxuICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnlcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VHZW9tZXRyaWVzKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgc2tlbGV0b25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGdlb21ldHJ5TWFwID0gbmV3IE1hcCgpO1xuICAgIFxuICAgICAgICAgICAgaWYgKCAnR2VvbWV0cnknIGluIEZCWFRyZWUuT2JqZWN0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cnlOb2RlcyA9IEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeTtcbiAgICBcbiAgICBcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIGdlb21ldHJ5Tm9kZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGlvbnNoaXBzID0gY29ubmVjdGlvbnMuZ2V0KCBwYXJzZUludCggbm9kZUlEICkgKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlbyA9IHBhcnNlR2VvbWV0cnkoIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5Tm9kZXNbIG5vZGVJRCBdLCBza2VsZXRvbnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnlNYXAuc2V0KCBwYXJzZUludCggbm9kZUlEICksIGdlbyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBnZW9tZXRyeU1hcDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBzaW5nbGUgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnlcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VHZW9tZXRyeSggRkJYVHJlZSwgcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlOb2RlLCBza2VsZXRvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICBzd2l0Y2ggKCBnZW9tZXRyeU5vZGUuYXR0clR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY2FzZSAnTWVzaCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZU1lc2hHZW9tZXRyeSggRkJYVHJlZSwgcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlOb2RlLCBza2VsZXRvbnMgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgY2FzZSAnTnVyYnNDdXJ2ZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZU51cmJzR2VvbWV0cnkoIGdlb21ldHJ5Tm9kZSApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICAvLyBQYXJzZSBzaW5nbGUgbm9kZSBtZXNoIGdlb21ldHJ5IGluIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeVxuICAgICAgICBmdW5jdGlvbiBwYXJzZU1lc2hHZW9tZXRyeSggRkJYVHJlZSwgcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlOb2RlLCBza2VsZXRvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgbW9kZWxOb2RlcyA9IHJlbGF0aW9uc2hpcHMucGFyZW50cy5tYXAoIGZ1bmN0aW9uICggcGFyZW50ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBGQlhUcmVlLk9iamVjdHMuTW9kZWxbIHBhcmVudC5JRCBdO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgLy8gZG9uJ3QgY3JlYXRlIGdlb21ldHJ5IGlmIGl0IGlzIG5vdCBhc3NvY2lhdGVkIHdpdGggYW55IG1vZGVsc1xuICAgICAgICAgICAgaWYgKCBtb2RlbE5vZGVzLmxlbmd0aCA9PT0gMCApIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgIHZhciBza2VsZXRvbiA9IHJlbGF0aW9uc2hpcHMuY2hpbGRyZW4ucmVkdWNlKCBmdW5jdGlvbiAoIHNrZWxldG9uLCBjaGlsZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHNrZWxldG9uc1sgY2hpbGQuSUQgXSAhPT0gdW5kZWZpbmVkICkgc2tlbGV0b24gPSBza2VsZXRvbnNbIGNoaWxkLklEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNrZWxldG9uO1xuICAgIFxuICAgICAgICAgICAgfSwgbnVsbCApO1xuICAgIFxuICAgICAgICAgICAgdmFyIHByZVRyYW5zZm9ybSA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4gICAgXG4gICAgICAgICAgICAvLyBUT0RPOiBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2VvbWV0cnksIEFORCB0aGUgbW9kZWxzIGhhdmVcbiAgICAgICAgICAgIC8vIGRpZmZlcmVudCBnZW9tZXRyaWMgdHJhbnNmb3JtcywgdGhlbiB0aGlzIHdpbGwgY2F1c2UgcHJvYmxlbXNcbiAgICAgICAgICAgIC8vIGlmICggbW9kZWxOb2Rlcy5sZW5ndGggPiAxICkgeyB9XG4gICAgXG4gICAgICAgICAgICAvLyBGb3Igbm93IGp1c3QgYXNzdW1lIG9uZSBtb2RlbCBhbmQgZ2V0IHRoZSBwcmVSb3RhdGlvbnMgZnJvbSB0aGF0XG4gICAgICAgICAgICB2YXIgbW9kZWxOb2RlID0gbW9kZWxOb2Rlc1sgMCBdO1xuICAgIFxuICAgICAgICAgICAgaWYgKCAnR2VvbWV0cmljUm90YXRpb24nIGluIG1vZGVsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBtb2RlbE5vZGUuR2VvbWV0cmljUm90YXRpb24udmFsdWUubWFwKCBUSFJFRS5NYXRoLmRlZ1RvUmFkICk7XG4gICAgICAgICAgICAgICAgYXJyYXlbIDMgXSA9ICdaWVgnO1xuICAgIFxuICAgICAgICAgICAgICAgIHByZVRyYW5zZm9ybS5tYWtlUm90YXRpb25Gcm9tRXVsZXIoIG5ldyBUSFJFRS5FdWxlcigpLmZyb21BcnJheSggYXJyYXkgKSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCAnR2VvbWV0cmljVHJhbnNsYXRpb24nIGluIG1vZGVsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwcmVUcmFuc2Zvcm0uc2V0UG9zaXRpb24oIG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KCBtb2RlbE5vZGUuR2VvbWV0cmljVHJhbnNsYXRpb24udmFsdWUgKSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGdlbkdlb21ldHJ5KCBGQlhUcmVlLCByZWxhdGlvbnNoaXBzLCBnZW9tZXRyeU5vZGUsIHNrZWxldG9uLCBwcmVUcmFuc2Zvcm0gKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBHZW5lcmF0ZSBhIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGZyb20gYSBub2RlIGluIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeVxuICAgICAgICBmdW5jdGlvbiBnZW5HZW9tZXRyeSggRkJYVHJlZSwgcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlOb2RlLCBza2VsZXRvbiwgcHJlVHJhbnNmb3JtICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHZlcnRleFBvc2l0aW9ucyA9IGdlb21ldHJ5Tm9kZS5WZXJ0aWNlcy5hO1xuICAgICAgICAgICAgdmFyIHZlcnRleEluZGljZXMgPSBnZW9tZXRyeU5vZGUuUG9seWdvblZlcnRleEluZGV4LmE7XG4gICAgXG4gICAgICAgICAgICAvLyBjcmVhdGUgYXJyYXlzIHRvIGhvbGQgdGhlIGZpbmFsIGRhdGEgdXNlZCB0byBidWlsZCB0aGUgYnVmZmVyZ2VvbWV0cnlcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHZhciBub3JtYWxCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHZhciBjb2xvcnNCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHZhciB1dnNCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbEluZGV4QnVmZmVyID0gW107XG4gICAgICAgICAgICB2YXIgdmVydGV4V2VpZ2h0c0J1ZmZlciA9IFtdO1xuICAgICAgICAgICAgdmFyIHdlaWdodHNJbmRpY2VzQnVmZmVyID0gW107XG4gICAgXG4gICAgICAgICAgICBpZiAoIGdlb21ldHJ5Tm9kZS5MYXllckVsZW1lbnRDb2xvciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JJbmZvID0gZ2V0Q29sb3JzKCBnZW9tZXRyeU5vZGUuTGF5ZXJFbGVtZW50Q29sb3JbIDAgXSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBnZW9tZXRyeU5vZGUuTGF5ZXJFbGVtZW50TWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsSW5mbyA9IGdldE1hdGVyaWFscyggZ2VvbWV0cnlOb2RlLkxheWVyRWxlbWVudE1hdGVyaWFsWyAwIF0gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggZ2VvbWV0cnlOb2RlLkxheWVyRWxlbWVudE5vcm1hbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsSW5mbyA9IGdldE5vcm1hbHMoIGdlb21ldHJ5Tm9kZS5MYXllckVsZW1lbnROb3JtYWxbIDAgXSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBnZW9tZXRyeU5vZGUuTGF5ZXJFbGVtZW50VVYgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHV2SW5mbyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoIGdlb21ldHJ5Tm9kZS5MYXllckVsZW1lbnRVVlsgaSBdICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1dkluZm8ucHVzaCggZ2V0VVZzKCBnZW9tZXRyeU5vZGUuTGF5ZXJFbGVtZW50VVZbIGkgXSApICk7XG4gICAgICAgICAgICAgICAgICAgIGkgKys7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIHdlaWdodFRhYmxlID0ge307XG4gICAgXG4gICAgICAgICAgICBpZiAoIHNrZWxldG9uICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHNrZWxldG9uLnJhd0JvbmVzLmZvckVhY2goIGZ1bmN0aW9uICggcmF3Qm9uZSwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCBvdmVyIHRoZSBib25lJ3MgdmVydGV4IGluZGljZXMgYW5kIHdlaWdodHNcbiAgICAgICAgICAgICAgICAgICAgcmF3Qm9uZS5pbmRpY2VzLmZvckVhY2goIGZ1bmN0aW9uICggaW5kZXgsIGogKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHdlaWdodFRhYmxlWyBpbmRleCBdID09PSB1bmRlZmluZWQgKSB3ZWlnaHRUYWJsZVsgaW5kZXggXSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0VGFibGVbIGluZGV4IF0ucHVzaCgge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogcmF3Qm9uZS53ZWlnaHRzWyBqIF0sXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgcG9seWdvbkluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBmYWNlTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHZhciBkaXNwbGF5ZWRXZWlnaHRzV2FybmluZyA9IGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgLy8gdGhlc2Ugd2lsbCBob2xkIGRhdGEgZm9yIGEgc2luZ2xlIGZhY2VcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhQb3NpdGlvbkluZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmYWNlTm9ybWFscyA9IFtdO1xuICAgICAgICAgICAgdmFyIGZhY2VDb2xvcnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmYWNlVVZzID0gW107XG4gICAgICAgICAgICB2YXIgZmFjZVdlaWdodHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmYWNlV2VpZ2h0SW5kaWNlcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgdmVydGV4SW5kaWNlcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHZlcnRleEluZGV4LCBwb2x5Z29uVmVydGV4SW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGVuZE9mRmFjZSA9IGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIEZhY2UgaW5kZXggYW5kIHZlcnRleCBpbmRleCBhcnJheXMgYXJlIGNvbWJpbmVkIGluIGEgc2luZ2xlIGFycmF5XG4gICAgICAgICAgICAgICAgLy8gQSBjdWJlIHdpdGggcXVhZCBmYWNlcyBsb29rcyBsaWtlIHRoaXM6XG4gICAgICAgICAgICAgICAgLy8gUG9seWdvblZlcnRleEluZGV4OiAqMjQge1xuICAgICAgICAgICAgICAgIC8vICBhOiAwLCAxLCAzLCAtMywgMiwgMywgNSwgLTUsIDQsIDUsIDcsIC03LCA2LCA3LCAxLCAtMSwgMSwgNywgNSwgLTQsIDYsIDAsIDIsIC01XG4gICAgICAgICAgICAgICAgLy8gIH1cbiAgICAgICAgICAgICAgICAvLyBOZWdhdGl2ZSBudW1iZXJzIG1hcmsgdGhlIGVuZCBvZiBhIGZhY2UgLSBmaXJzdCBmYWNlIGhlcmUgaXMgMCwgMSwgMywgLTNcbiAgICAgICAgICAgICAgICAvLyB0byBmaW5kIGluZGV4IG9mIGxhc3QgdmVydGV4IG11bHRpcGx5IGJ5IC0xIGFuZCBzdWJ0cmFjdCAxOiAtMyAqIC0gMSAtIDEgPSAyXG4gICAgICAgICAgICAgICAgaWYgKCB2ZXJ0ZXhJbmRleCA8IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleEluZGV4ID0gdmVydGV4SW5kZXggXiAtIDE7IC8vIGVxdWl2YWxlbnQgdG8gKCB4ICogLTEgKSAtIDFcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4SW5kaWNlc1sgcG9seWdvblZlcnRleEluZGV4IF0gPSB2ZXJ0ZXhJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgZW5kT2ZGYWNlID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodEluZGljZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0cyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIHZlcnRleFBvc2l0aW9uSW5kZXhlcy5wdXNoKCB2ZXJ0ZXhJbmRleCAqIDMsIHZlcnRleEluZGV4ICogMyArIDEsIHZlcnRleEluZGV4ICogMyArIDIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGNvbG9ySW5mbyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIGNvbG9ySW5mbyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3JzLnB1c2goIGRhdGFbIDAgXSwgZGF0YVsgMSBdLCBkYXRhWyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBza2VsZXRvbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB3ZWlnaHRUYWJsZVsgdmVydGV4SW5kZXggXSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0VGFibGVbIHZlcnRleEluZGV4IF0uZm9yRWFjaCggZnVuY3Rpb24gKCB3dCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzLnB1c2goIHd0LndlaWdodCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodEluZGljZXMucHVzaCggd3QuaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHdlaWdodHMubGVuZ3RoID4gNCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBkaXNwbGF5ZWRXZWlnaHRzV2FybmluZyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IFZlcnRleCBoYXMgbW9yZSB0aGFuIDQgc2tpbm5pbmcgd2VpZ2h0cyBhc3NpZ25lZCB0byB2ZXJ0ZXguIERlbGV0aW5nIGFkZGl0aW9uYWwgd2VpZ2h0cy4nICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkV2VpZ2h0c1dhcm5pbmcgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdJbmRleCA9IFsgMCwgMCwgMCwgMCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFdlaWdodCA9IFsgMCwgMCwgMCwgMCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0cy5mb3JFYWNoKCBmdW5jdGlvbiAoIHdlaWdodCwgd2VpZ2h0SW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRXZWlnaHQgPSB3ZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHdlaWdodEluZGljZXNbIHdlaWdodEluZGV4IF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgV2VpZ2h0LmZvckVhY2goIGZ1bmN0aW9uICggY29tcGFyZWRXZWlnaHQsIGNvbXBhcmVkV2VpZ2h0SW5kZXgsIGNvbXBhcmVkV2VpZ2h0QXJyYXkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VycmVudFdlaWdodCA+IGNvbXBhcmVkV2VpZ2h0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZWRXZWlnaHRBcnJheVsgY29tcGFyZWRXZWlnaHRJbmRleCBdID0gY3VycmVudFdlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXZWlnaHQgPSBjb21wYXJlZFdlaWdodDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSB3SW5kZXhbIGNvbXBhcmVkV2VpZ2h0SW5kZXggXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdJbmRleFsgY29tcGFyZWRXZWlnaHRJbmRleCBdID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4ID0gdG1wO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0SW5kaWNlcyA9IHdJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHMgPSBXZWlnaHQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHdlaWdodCBhcnJheSBpcyBzaG9ydGVyIHRoYW4gNCBwYWQgd2l0aCAwc1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIHdlaWdodHMubGVuZ3RoIDwgNCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHMucHVzaCggMCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0SW5kaWNlcy5wdXNoKCAwICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgNDsgKysgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VXZWlnaHRzLnB1c2goIHdlaWdodHNbIGkgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZVdlaWdodEluZGljZXMucHVzaCggd2VpZ2h0SW5kaWNlc1sgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub3JtYWxJbmZvICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGdldERhdGEoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgbm9ybWFsSW5mbyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmYWNlTm9ybWFscy5wdXNoKCBkYXRhWyAwIF0sIGRhdGFbIDEgXSwgZGF0YVsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxJbmZvICYmIG1hdGVyaWFsSW5mby5tYXBwaW5nVHlwZSAhPT0gJ0FsbFNhbWUnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxJbmRleCA9IGdldERhdGEoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgbWF0ZXJpYWxJbmZvIClbIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB1dkluZm8gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHV2SW5mby5mb3JFYWNoKCBmdW5jdGlvbiAoIHV2LCBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIHV2ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZhY2VVVnNbIGkgXSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VVVnNbIGkgXSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZVVWc1sgaSBdLnB1c2goIGRhdGFbIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZVVWc1sgaSBdLnB1c2goIGRhdGFbIDEgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGZhY2VMZW5ndGggKys7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSByZWFjaGVkIHRoZSBlbmQgb2YgYSBmYWNlIC0gaXQgbWF5IGhhdmUgNCBzaWRlcyB0aG91Z2hcbiAgICAgICAgICAgICAgICAvLyBpbiB3aGljaCBjYXNlIHRoZSBkYXRhIGlzIHNwbGl0IHRvIHJlcHJlc2VudCB0d28gMyBzaWRlZCBmYWNlc1xuICAgICAgICAgICAgICAgIGlmICggZW5kT2ZGYWNlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDI7IGkgPCBmYWNlTGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyAwIF0gXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyAxIF0gXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyAyIF0gXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyAoIGkgLSAxICkgKiAzIF0gXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyAoIGkgLSAxICkgKiAzICsgMSBdIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXhQb3NpdGlvbnNbIHZlcnRleFBvc2l0aW9uSW5kZXhlc1sgKCBpIC0gMSApICogMyArIDIgXSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhCdWZmZXIucHVzaCggdmVydGV4UG9zaXRpb25zWyB2ZXJ0ZXhQb3NpdGlvbkluZGV4ZXNbIGkgKiAzIF0gXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyBpICogMyArIDEgXSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhCdWZmZXIucHVzaCggdmVydGV4UG9zaXRpb25zWyB2ZXJ0ZXhQb3NpdGlvbkluZGV4ZXNbIGkgKiAzICsgMiBdIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2tlbGV0b24gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgMiBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgMyBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgKCBpIC0gMSApICogNCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgKCBpIC0gMSApICogNCArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbICggaSAtIDEgKSAqIDQgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhXZWlnaHRzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRzWyAoIGkgLSAxICkgKiA0ICsgMyBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgaSAqIDQgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbIGkgKiA0ICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgaSAqIDQgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhXZWlnaHRzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRzWyBpICogNCArIDMgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHNJbmRpY2VzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHNJbmRpY2VzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyAzIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgKCBpIC0gMSApICogNCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbICggaSAtIDEgKSAqIDQgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgKCBpIC0gMSApICogNCArIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHNJbmRpY2VzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyAoIGkgLSAxICkgKiA0ICsgMyBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbIGkgKiA0IF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgaSAqIDQgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgaSAqIDQgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgaSAqIDQgKyAzIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY29sb3JJbmZvICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc0J1ZmZlci5wdXNoKCBmYWNlQ29sb3JzWyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNCdWZmZXIucHVzaCggZmFjZUNvbG9yc1sgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzQnVmZmVyLnB1c2goIGZhY2VDb2xvcnNbIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc0J1ZmZlci5wdXNoKCBmYWNlQ29sb3JzWyAoIGkgLSAxICkgKiAzIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNCdWZmZXIucHVzaCggZmFjZUNvbG9yc1sgKCBpIC0gMSApICogMyArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc0J1ZmZlci5wdXNoKCBmYWNlQ29sb3JzWyAoIGkgLSAxICkgKiAzICsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzQnVmZmVyLnB1c2goIGZhY2VDb2xvcnNbIGkgKiAzIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNCdWZmZXIucHVzaCggZmFjZUNvbG9yc1sgaSAqIDMgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNCdWZmZXIucHVzaCggZmFjZUNvbG9yc1sgaSAqIDMgKyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxJbmZvICYmIG1hdGVyaWFsSW5mby5tYXBwaW5nVHlwZSAhPT0gJ0FsbFNhbWUnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsSW5kZXhCdWZmZXIucHVzaCggbWF0ZXJpYWxJbmRleCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsSW5kZXhCdWZmZXIucHVzaCggbWF0ZXJpYWxJbmRleCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsSW5kZXhCdWZmZXIucHVzaCggbWF0ZXJpYWxJbmRleCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub3JtYWxJbmZvICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2goIGZhY2VOb3JtYWxzWyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxCdWZmZXIucHVzaCggZmFjZU5vcm1hbHNbIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgKCBpIC0gMSApICogMyBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2goIGZhY2VOb3JtYWxzWyAoIGkgLSAxICkgKiAzICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2goIGZhY2VOb3JtYWxzWyAoIGkgLSAxICkgKiAzICsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2goIGZhY2VOb3JtYWxzWyBpICogMyBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2goIGZhY2VOb3JtYWxzWyBpICogMyArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgaSAqIDMgKyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdXZJbmZvICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2SW5mby5mb3JFYWNoKCBmdW5jdGlvbiAoIHV2LCBqICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHV2c0J1ZmZlclsgaiBdID09PSB1bmRlZmluZWQgKSB1dnNCdWZmZXJbIGogXSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dnNCdWZmZXJbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dnNCdWZmZXJbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bIDEgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dnNCdWZmZXJbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bICggaSAtIDEgKSAqIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dnNCdWZmZXJbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bICggaSAtIDEgKSAqIDIgKyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZzQnVmZmVyWyBqIF0ucHVzaCggZmFjZVVWc1sgaiBdWyBpICogMiBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2c0J1ZmZlclsgaiBdLnB1c2goIGZhY2VVVnNbIGogXVsgaSAqIDIgKyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcG9seWdvbkluZGV4ICsrO1xuICAgICAgICAgICAgICAgICAgICBmYWNlTGVuZ3RoID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgYXJyYXlzIGZvciB0aGUgbmV4dCBmYWNlXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleFBvc2l0aW9uSW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmYWNlTm9ybWFscyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZhY2VVVnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZmFjZVdlaWdodHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZmFjZVdlaWdodEluZGljZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB2YXIgZ2VvID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgICAgICAgICBnZW8ubmFtZSA9IGdlb21ldHJ5Tm9kZS5uYW1lO1xuICAgIFxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uQXR0cmlidXRlID0gbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlciwgMyApO1xuICAgIFxuICAgICAgICAgICAgcHJlVHJhbnNmb3JtLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlICk7XG4gICAgXG4gICAgICAgICAgICBnZW8uYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBwb3NpdGlvbkF0dHJpYnV0ZSApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCBjb2xvcnNCdWZmZXIubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBnZW8uYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzQnVmZmVyLCAzICkgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggc2tlbGV0b24gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgZ2VvLmFkZEF0dHJpYnV0ZSggJ3NraW5JbmRleCcsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB3ZWlnaHRzSW5kaWNlc0J1ZmZlciwgNCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZ2VvLmFkZEF0dHJpYnV0ZSggJ3NraW5XZWlnaHQnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4V2VpZ2h0c0J1ZmZlciwgNCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gdXNlZCBsYXRlciB0byBiaW5kIHRoZSBza2VsZXRvbiB0byB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgICBnZW8uRkJYX0RlZm9ybWVyID0gc2tlbGV0b247XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIG5vcm1hbEJ1ZmZlci5sZW5ndGggPiAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQnVmZmVyLCAzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBwcmVUcmFuc2Zvcm0gKTtcbiAgICAgICAgICAgICAgICBub3JtYWxNYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZ2VvLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5vcm1hbEF0dHJpYnV0ZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdXZzQnVmZmVyLmZvckVhY2goIGZ1bmN0aW9uICggdXZCdWZmZXIsIGkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gc3Vic2VxdWVudCB1diBidWZmZXJzIGFyZSBjYWxsZWQgJ3V2MScsICd1djInLCAuLi5cbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9ICd1dicgKyAoIGkgKyAxICkudG9TdHJpbmcoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyB0aGUgZmlyc3QgdXYgYnVmZmVyIGlzIGp1c3QgY2FsbGVkICd1didcbiAgICAgICAgICAgICAgICBpZiAoIGkgPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSAndXYnO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBnZW8uYWRkQXR0cmlidXRlKCBuYW1lLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzQnVmZmVyWyBpIF0sIDIgKSApO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCBtYXRlcmlhbEluZm8gJiYgbWF0ZXJpYWxJbmZvLm1hcHBpbmdUeXBlICE9PSAnQWxsU2FtZScgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbWF0ZXJpYWwgaW5kaWNlcyBvZiBlYWNoIHZlcnRleCBpbnRvIHJlbmRlcmluZyBncm91cHMgb24gdGhlIGdlb21ldHJ5LlxuICAgICAgICAgICAgICAgIHZhciBwcmV2TWF0ZXJpYWxJbmRleCA9IG1hdGVyaWFsSW5kZXhCdWZmZXJbIDAgXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxJbmRleEJ1ZmZlci5mb3JFYWNoKCBmdW5jdGlvbiAoIGN1cnJlbnRJbmRleCwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50SW5kZXggIT09IHByZXZNYXRlcmlhbEluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvLmFkZEdyb3VwKCBzdGFydEluZGV4LCBpIC0gc3RhcnRJbmRleCwgcHJldk1hdGVyaWFsSW5kZXggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZNYXRlcmlhbEluZGV4ID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleCA9IGk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gdGhlIGxvb3AgYWJvdmUgZG9lc24ndCBhZGQgdGhlIGxhc3QgZ3JvdXAsIGRvIHRoYXQgaGVyZS5cbiAgICAgICAgICAgICAgICBpZiAoIGdlby5ncm91cHMubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RHcm91cCA9IGdlby5ncm91cHNbIGdlby5ncm91cHMubGVuZ3RoIC0gMSBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gbGFzdEdyb3VwLnN0YXJ0ICsgbGFzdEdyb3VwLmNvdW50O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxhc3RJbmRleCAhPT0gbWF0ZXJpYWxJbmRleEJ1ZmZlci5sZW5ndGggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW8uYWRkR3JvdXAoIGxhc3RJbmRleCwgbWF0ZXJpYWxJbmRleEJ1ZmZlci5sZW5ndGggLSBsYXN0SW5kZXgsIHByZXZNYXRlcmlhbEluZGV4ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gY2FzZSB3aGVyZSB0aGVyZSBhcmUgbXVsdGlwbGUgbWF0ZXJpYWxzIGJ1dCB0aGUgd2hvbGUgZ2VvbWV0cnkgaXMgb25seVxuICAgICAgICAgICAgICAgIC8vIHVzaW5nIG9uZSBvZiB0aGVtXG4gICAgICAgICAgICAgICAgaWYgKCBnZW8uZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZ2VvLmFkZEdyb3VwKCAwLCBtYXRlcmlhbEluZGV4QnVmZmVyLmxlbmd0aCwgbWF0ZXJpYWxJbmRleEJ1ZmZlclsgMCBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGdlbztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICAvLyBQYXJzZSBub3JtYWwgZnJvbSBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnkuTGF5ZXJFbGVtZW50Tm9ybWFsIGlmIGl0IGV4aXN0c1xuICAgICAgICBmdW5jdGlvbiBnZXROb3JtYWxzKCBOb3JtYWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1hcHBpbmdUeXBlID0gTm9ybWFsTm9kZS5NYXBwaW5nSW5mb3JtYXRpb25UeXBlO1xuICAgICAgICAgICAgdmFyIHJlZmVyZW5jZVR5cGUgPSBOb3JtYWxOb2RlLlJlZmVyZW5jZUluZm9ybWF0aW9uVHlwZTtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBOb3JtYWxOb2RlLk5vcm1hbHMuYTtcbiAgICAgICAgICAgIHZhciBpbmRleEJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgaWYgKCByZWZlcmVuY2VUeXBlID09PSAnSW5kZXhUb0RpcmVjdCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCAnTm9ybWFsSW5kZXgnIGluIE5vcm1hbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGluZGV4QnVmZmVyID0gTm9ybWFsTm9kZS5Ob3JtYWxJbmRleC5hO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICdOb3JtYWxzSW5kZXgnIGluIE5vcm1hbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGluZGV4QnVmZmVyID0gTm9ybWFsTm9kZS5Ob3JtYWxzSW5kZXguYTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGFTaXplOiAzLFxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgICAgICAgIGluZGljZXM6IGluZGV4QnVmZmVyLFxuICAgICAgICAgICAgICAgIG1hcHBpbmdUeXBlOiBtYXBwaW5nVHlwZSxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VUeXBlOiByZWZlcmVuY2VUeXBlXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIFBhcnNlIFVWcyBmcm9tIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeS5MYXllckVsZW1lbnRVViBpZiBpdCBleGlzdHNcbiAgICAgICAgZnVuY3Rpb24gZ2V0VVZzKCBVVk5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgbWFwcGluZ1R5cGUgPSBVVk5vZGUuTWFwcGluZ0luZm9ybWF0aW9uVHlwZTtcbiAgICAgICAgICAgIHZhciByZWZlcmVuY2VUeXBlID0gVVZOb2RlLlJlZmVyZW5jZUluZm9ybWF0aW9uVHlwZTtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBVVk5vZGUuVVYuYTtcbiAgICAgICAgICAgIHZhciBpbmRleEJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgaWYgKCByZWZlcmVuY2VUeXBlID09PSAnSW5kZXhUb0RpcmVjdCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaW5kZXhCdWZmZXIgPSBVVk5vZGUuVVZJbmRleC5hO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhU2l6ZTogMixcbiAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICBpbmRpY2VzOiBpbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICBtYXBwaW5nVHlwZTogbWFwcGluZ1R5cGUsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlVHlwZTogcmVmZXJlbmNlVHlwZVxuICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBWZXJ0ZXggQ29sb3JzIGZyb20gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5LkxheWVyRWxlbWVudENvbG9yIGlmIGl0IGV4aXN0c1xuICAgICAgICBmdW5jdGlvbiBnZXRDb2xvcnMoIENvbG9yTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBtYXBwaW5nVHlwZSA9IENvbG9yTm9kZS5NYXBwaW5nSW5mb3JtYXRpb25UeXBlO1xuICAgICAgICAgICAgdmFyIHJlZmVyZW5jZVR5cGUgPSBDb2xvck5vZGUuUmVmZXJlbmNlSW5mb3JtYXRpb25UeXBlO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IENvbG9yTm9kZS5Db2xvcnMuYTtcbiAgICAgICAgICAgIHZhciBpbmRleEJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgaWYgKCByZWZlcmVuY2VUeXBlID09PSAnSW5kZXhUb0RpcmVjdCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaW5kZXhCdWZmZXIgPSBDb2xvck5vZGUuQ29sb3JJbmRleC5hO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhU2l6ZTogNCxcbiAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICBpbmRpY2VzOiBpbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICBtYXBwaW5nVHlwZTogbWFwcGluZ1R5cGUsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlVHlwZTogcmVmZXJlbmNlVHlwZVxuICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBtYXBwaW5nIGFuZCBtYXRlcmlhbCBkYXRhIGluIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeS5MYXllckVsZW1lbnRNYXRlcmlhbCBpZiBpdCBleGlzdHNcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWF0ZXJpYWxzKCBNYXRlcmlhbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgbWFwcGluZ1R5cGUgPSBNYXRlcmlhbE5vZGUuTWFwcGluZ0luZm9ybWF0aW9uVHlwZTtcbiAgICAgICAgICAgIHZhciByZWZlcmVuY2VUeXBlID0gTWF0ZXJpYWxOb2RlLlJlZmVyZW5jZUluZm9ybWF0aW9uVHlwZTtcbiAgICBcbiAgICAgICAgICAgIGlmICggbWFwcGluZ1R5cGUgPT09ICdOb01hcHBpbmdJbmZvcm1hdGlvbicgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNpemU6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogWyAwIF0sXG4gICAgICAgICAgICAgICAgICAgIGluZGljZXM6IFsgMCBdLFxuICAgICAgICAgICAgICAgICAgICBtYXBwaW5nVHlwZTogJ0FsbFNhbWUnLFxuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VUeXBlOiByZWZlcmVuY2VUeXBlXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbEluZGV4QnVmZmVyID0gTWF0ZXJpYWxOb2RlLk1hdGVyaWFscy5hO1xuICAgIFxuICAgICAgICAgICAgLy8gU2luY2UgbWF0ZXJpYWxzIGFyZSBzdG9yZWQgYXMgaW5kaWNlcywgdGhlcmUncyBhIGJpdCBvZiBhIG1pc21hdGNoIGJldHdlZW4gRkJYIGFuZCB3aGF0XG4gICAgICAgICAgICAvLyB3ZSBleHBlY3QuU28gd2UgY3JlYXRlIGFuIGludGVybWVkaWF0ZSBidWZmZXIgdGhhdCBwb2ludHMgdG8gdGhlIGluZGV4IGluIHRoZSBidWZmZXIsXG4gICAgICAgICAgICAvLyBmb3IgY29uZm9ybWluZyB3aXRoIHRoZSBvdGhlciBmdW5jdGlvbnMgd2UndmUgd3JpdHRlbiBmb3Igb3RoZXIgZGF0YS5cbiAgICAgICAgICAgIHZhciBtYXRlcmlhbEluZGljZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IG1hdGVyaWFsSW5kZXhCdWZmZXIubGVuZ3RoOyArKyBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsSW5kaWNlcy5wdXNoKCBpICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGFTaXplOiAxLFxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogbWF0ZXJpYWxJbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICBpbmRpY2VzOiBtYXRlcmlhbEluZGljZXMsXG4gICAgICAgICAgICAgICAgbWFwcGluZ1R5cGU6IG1hcHBpbmdUeXBlLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZVR5cGU6IHJlZmVyZW5jZVR5cGVcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gRnVuY3Rpb25zIHVzZSB0aGUgaW5mb09iamVjdCBhbmQgZ2l2ZW4gaW5kaWNlcyB0byByZXR1cm4gdmFsdWUgYXJyYXkgb2YgZ2VvbWV0cnkuXG4gICAgICAgIC8vIFBhcmFtZXRlcnM6XG4gICAgICAgIC8vIFx0LSBwb2x5Z29uVmVydGV4SW5kZXggLSBJbmRleCBvZiB2ZXJ0ZXggaW4gZHJhdyBvcmRlciAod2hpY2ggaW5kZXggb2YgdGhlIGluZGV4IGJ1ZmZlciByZWZlcnMgdG8gdGhpcyB2ZXJ0ZXgpLlxuICAgICAgICAvLyBcdC0gcG9seWdvbkluZGV4IC0gSW5kZXggb2YgcG9seWdvbiBpbiBnZW9tZXRyeS5cbiAgICAgICAgLy8gXHQtIHZlcnRleEluZGV4IC0gSW5kZXggb2YgdmVydGV4IGluc2lkZSB2ZXJ0ZXggYnVmZmVyICh1c2VkIGJlY2F1c2Ugc29tZSBkYXRhIHJlZmVycyB0byBvbGQgaW5kZXggYnVmZmVyIHRoYXQgd2UgZG9uJ3QgdXNlIGFueW1vcmUpLlxuICAgICAgICAvLyBcdC0gaW5mb09iamVjdDogY2FuIGJlIG1hdGVyaWFsSW5mbywgbm9ybWFsSW5mbywgVVZJbmZvIG9yIGNvbG9ySW5mb1xuICAgICAgICAvLyBJbmRleCB0eXBlOlxuICAgICAgICAvL1x0LSBEaXJlY3Q6IGluZGV4IGlzIHNhbWUgYXMgcG9seWdvblZlcnRleEluZGV4XG4gICAgICAgIC8vXHQtIEluZGV4VG9EaXJlY3Q6IGluZm9PYmplY3QgaGFzIGl0J3Mgb3duIHNldCBvZiBpbmRpY2VzXG4gICAgICAgIHZhciBkYXRhQXJyYXkgPSBbXTtcbiAgICBcbiAgICAgICAgdmFyIEdldERhdGEgPSB7XG4gICAgXG4gICAgICAgICAgICBCeVBvbHlnb25WZXJ0ZXg6IHtcbiAgICBcbiAgICAgICAgICAgICAgICBEaXJlY3Q6IGZ1bmN0aW9uICggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBpbmZvT2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbSA9ICggcG9seWdvblZlcnRleEluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZSApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSAoIHBvbHlnb25WZXJ0ZXhJbmRleCAqIGluZm9PYmplY3QuZGF0YVNpemUgKSArIGluZm9PYmplY3QuZGF0YVNpemU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzbGljZSggZGF0YUFycmF5LCBpbmZvT2JqZWN0LmJ1ZmZlciwgZnJvbSwgdG8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIEluZGV4VG9EaXJlY3Q6IGZ1bmN0aW9uICggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBpbmZvT2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBpbmZvT2JqZWN0LmluZGljZXNbIHBvbHlnb25WZXJ0ZXhJbmRleCBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbSA9ICggaW5kZXggKiBpbmZvT2JqZWN0LmRhdGFTaXplICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9ICggaW5kZXggKiBpbmZvT2JqZWN0LmRhdGFTaXplICkgKyBpbmZvT2JqZWN0LmRhdGFTaXplO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UoIGRhdGFBcnJheSwgaW5mb09iamVjdC5idWZmZXIsIGZyb20sIHRvICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIEJ5UG9seWdvbjoge1xuICAgIFxuICAgICAgICAgICAgICAgIERpcmVjdDogZnVuY3Rpb24gKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIGluZm9PYmplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tID0gcG9seWdvbkluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gcG9seWdvbkluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZSArIGluZm9PYmplY3QuZGF0YVNpemU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzbGljZSggZGF0YUFycmF5LCBpbmZvT2JqZWN0LmJ1ZmZlciwgZnJvbSwgdG8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIEluZGV4VG9EaXJlY3Q6IGZ1bmN0aW9uICggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBpbmZvT2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBpbmZvT2JqZWN0LmluZGljZXNbIHBvbHlnb25JbmRleCBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IGluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gaW5kZXggKiBpbmZvT2JqZWN0LmRhdGFTaXplICsgaW5mb09iamVjdC5kYXRhU2l6ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlKCBkYXRhQXJyYXksIGluZm9PYmplY3QuYnVmZmVyLCBmcm9tLCB0byApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBCeVZlcnRpY2U6IHtcbiAgICBcbiAgICAgICAgICAgICAgICBEaXJlY3Q6IGZ1bmN0aW9uICggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBpbmZvT2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbSA9ICggdmVydGV4SW5kZXggKiBpbmZvT2JqZWN0LmRhdGFTaXplICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9ICggdmVydGV4SW5kZXggKiBpbmZvT2JqZWN0LmRhdGFTaXplICkgKyBpbmZvT2JqZWN0LmRhdGFTaXplO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UoIGRhdGFBcnJheSwgaW5mb09iamVjdC5idWZmZXIsIGZyb20sIHRvICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIEFsbFNhbWU6IHtcbiAgICBcbiAgICAgICAgICAgICAgICBJbmRleFRvRGlyZWN0OiBmdW5jdGlvbiAoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgaW5mb09iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSBpbmZvT2JqZWN0LmluZGljZXNbIDAgXSAqIGluZm9PYmplY3QuZGF0YVNpemU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IGluZm9PYmplY3QuaW5kaWNlc1sgMCBdICogaW5mb09iamVjdC5kYXRhU2l6ZSArIGluZm9PYmplY3QuZGF0YVNpemU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzbGljZSggZGF0YUFycmF5LCBpbmZvT2JqZWN0LmJ1ZmZlciwgZnJvbSwgdG8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGdldERhdGEoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgaW5mb09iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBHZXREYXRhWyBpbmZvT2JqZWN0Lm1hcHBpbmdUeXBlIF1bIGluZm9PYmplY3QucmVmZXJlbmNlVHlwZSBdKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIGluZm9PYmplY3QgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBHZW5lcmF0ZSBhIE51cmJHZW9tZXRyeSBmcm9tIGEgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnlcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VOdXJic0dlb21ldHJ5KCBnZW9tZXRyeU5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICBpZiAoIFRIUkVFLk5VUkJTQ3VydmUgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCAnVEhSRUUuRkJYTG9hZGVyOiBUaGUgbG9hZGVyIHJlbGllcyBvbiBUSFJFRS5OVVJCU0N1cnZlIGZvciBhbnkgbnVyYnMgcHJlc2VudCBpbiB0aGUgbW9kZWwuIE51cmJzIHdpbGwgc2hvdyB1cCBhcyBlbXB0eSBnZW9tZXRyeS4nICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIG9yZGVyID0gcGFyc2VJbnQoIGdlb21ldHJ5Tm9kZS5PcmRlciApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCBpc05hTiggb3JkZXIgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCAnVEhSRUUuRkJYTG9hZGVyOiBJbnZhbGlkIE9yZGVyICVzIGdpdmVuIGZvciBnZW9tZXRyeSBJRDogJXMnLCBnZW9tZXRyeU5vZGUuT3JkZXIsIGdlb21ldHJ5Tm9kZS5pZCApO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBkZWdyZWUgPSBvcmRlciAtIDE7XG4gICAgXG4gICAgICAgICAgICB2YXIga25vdHMgPSBnZW9tZXRyeU5vZGUuS25vdFZlY3Rvci5hO1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xQb2ludHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBwb2ludHNWYWx1ZXMgPSBnZW9tZXRyeU5vZGUuUG9pbnRzLmE7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHNWYWx1ZXMubGVuZ3RoOyBpIDwgbDsgaSArPSA0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludHMucHVzaCggbmV3IFRIUkVFLlZlY3RvcjQoKS5mcm9tQXJyYXkoIHBvaW50c1ZhbHVlcywgaSApICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgc3RhcnRLbm90LCBlbmRLbm90O1xuICAgIFxuICAgICAgICAgICAgaWYgKCBnZW9tZXRyeU5vZGUuRm9ybSA9PT0gJ0Nsb3NlZCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY29udHJvbFBvaW50cy5wdXNoKCBjb250cm9sUG9pbnRzWyAwIF0gKTtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGdlb21ldHJ5Tm9kZS5Gb3JtID09PSAnUGVyaW9kaWMnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHN0YXJ0S25vdCA9IGRlZ3JlZTtcbiAgICAgICAgICAgICAgICBlbmRLbm90ID0ga25vdHMubGVuZ3RoIC0gMSAtIHN0YXJ0S25vdDtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBkZWdyZWU7ICsrIGkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludHMucHVzaCggY29udHJvbFBvaW50c1sgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIGN1cnZlID0gbmV3IFRIUkVFLk5VUkJTQ3VydmUoIGRlZ3JlZSwga25vdHMsIGNvbnRyb2xQb2ludHMsIHN0YXJ0S25vdCwgZW5kS25vdCApO1xuICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gY3VydmUuZ2V0UG9pbnRzKCBjb250cm9sUG9pbnRzLmxlbmd0aCAqIDcgKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KCB2ZXJ0aWNlcy5sZW5ndGggKiAzICk7XG4gICAgXG4gICAgICAgICAgICB2ZXJ0aWNlcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHZlcnRleCwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2ZXJ0ZXgudG9BcnJheSggcG9zaXRpb25zLCBpICogMyApO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgICAgICAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gZ2VvbWV0cnk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBtYWluIFRIUkVFLkdyb3VwKCkgdG8gYmUgcmV0dXJuZWQgYnkgdGhlIGxvYWRlclxuICAgICAgICBmdW5jdGlvbiBwYXJzZVNjZW5lKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgc2tlbGV0b25zLCBnZW9tZXRyeU1hcCwgbWF0ZXJpYWxNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgc2NlbmVHcmFwaCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgIFxuICAgICAgICAgICAgdmFyIG1vZGVsTWFwID0gcGFyc2VNb2RlbHMoIEZCWFRyZWUsIHNrZWxldG9ucywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFsTWFwLCBjb25uZWN0aW9ucyApO1xuICAgIFxuICAgICAgICAgICAgdmFyIG1vZGVsTm9kZXMgPSBGQlhUcmVlLk9iamVjdHMuTW9kZWw7XG4gICAgXG4gICAgICAgICAgICBtb2RlbE1hcC5mb3JFYWNoKCBmdW5jdGlvbiAoIG1vZGVsICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtb2RlbE5vZGUgPSBtb2RlbE5vZGVzWyBtb2RlbC5JRCBdO1xuICAgICAgICAgICAgICAgIHNldExvb2tBdFByb3BlcnRpZXMoIEZCWFRyZWUsIG1vZGVsLCBtb2RlbE5vZGUsIGNvbm5lY3Rpb25zLCBzY2VuZUdyYXBoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudENvbm5lY3Rpb25zID0gY29ubmVjdGlvbnMuZ2V0KCBtb2RlbC5JRCApLnBhcmVudHM7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyZW50Q29ubmVjdGlvbnMuZm9yRWFjaCggZnVuY3Rpb24gKCBjb25uZWN0aW9uICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbW9kZWxNYXAuZ2V0KCBjb25uZWN0aW9uLklEICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggcGFyZW50ICE9PSB1bmRlZmluZWQgKSBwYXJlbnQuYWRkKCBtb2RlbCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG1vZGVsLnBhcmVudCA9PT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc2NlbmVHcmFwaC5hZGQoIG1vZGVsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgYmluZFNrZWxldG9uKCBGQlhUcmVlLCBza2VsZXRvbnMsIGdlb21ldHJ5TWFwLCBtb2RlbE1hcCwgY29ubmVjdGlvbnMgKTtcbiAgICBcbiAgICAgICAgICAgIGFkZEFuaW1hdGlvbnMoIEZCWFRyZWUsIGNvbm5lY3Rpb25zLCBzY2VuZUdyYXBoICk7XG4gICAgXG4gICAgICAgICAgICBjcmVhdGVBbWJpZW50TGlnaHQoIEZCWFRyZWUsIHNjZW5lR3JhcGggKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBzY2VuZUdyYXBoO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIHBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5Nb2RlbFxuICAgICAgICBmdW5jdGlvbiBwYXJzZU1vZGVscyggRkJYVHJlZSwgc2tlbGV0b25zLCBnZW9tZXRyeU1hcCwgbWF0ZXJpYWxNYXAsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1vZGVsTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdmFyIG1vZGVsTm9kZXMgPSBGQlhUcmVlLk9iamVjdHMuTW9kZWw7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIG1vZGVsTm9kZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gcGFyc2VJbnQoIG5vZGVJRCApO1xuICAgICAgICAgICAgICAgIHZhciBub2RlID0gbW9kZWxOb2Rlc1sgbm9kZUlEIF07XG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0aW9uc2hpcHMgPSBjb25uZWN0aW9ucy5nZXQoIGlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gYnVpbGRTa2VsZXRvbiggcmVsYXRpb25zaGlwcywgc2tlbGV0b25zLCBpZCwgbm9kZS5hdHRyTmFtZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggISBtb2RlbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggbm9kZS5hdHRyVHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NhbWVyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBjcmVhdGVDYW1lcmEoIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IGNyZWF0ZUxpZ2h0KCBGQlhUcmVlLCByZWxhdGlvbnNoaXBzICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdNZXNoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IGNyZWF0ZU1lc2goIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5TWFwLCBtYXRlcmlhbE1hcCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTnVyYnNDdXJ2ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBjcmVhdGVDdXJ2ZSggcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlNYXAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xpbWJOb2RlJzogLy8gdXN1YWxseSBhc3NvY2lhdGVkIHdpdGggYSBCb25lLCBob3dldmVyIGlmIGEgQm9uZSB3YXMgbm90IGNyZWF0ZWQgd2UnbGwgbWFrZSBhIEdyb3VwIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ051bGwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLm5hbWUgPSBUSFJFRS5Qcm9wZXJ0eUJpbmRpbmcuc2FuaXRpemVOb2RlTmFtZSggbm9kZS5hdHRyTmFtZSApO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5JRCA9IGlkO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBzZXRNb2RlbFRyYW5zZm9ybXMoIEZCWFRyZWUsIG1vZGVsLCBub2RlICk7XG4gICAgICAgICAgICAgICAgbW9kZWxNYXAuc2V0KCBpZCwgbW9kZWwgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBtb2RlbE1hcDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBidWlsZFNrZWxldG9uKCByZWxhdGlvbnNoaXBzLCBza2VsZXRvbnMsIGlkLCBuYW1lICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGJvbmUgPSBudWxsO1xuICAgIFxuICAgICAgICAgICAgcmVsYXRpb25zaGlwcy5wYXJlbnRzLmZvckVhY2goIGZ1bmN0aW9uICggcGFyZW50ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBJRCBpbiBza2VsZXRvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBza2VsZXRvbiA9IHNrZWxldG9uc1sgSUQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc2tlbGV0b24ucmF3Qm9uZXMuZm9yRWFjaCggZnVuY3Rpb24gKCByYXdCb25lLCBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByYXdCb25lLklEID09PSBwYXJlbnQuSUQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YkJvbmUgPSBib25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmUgPSBuZXcgVEhSRUUuQm9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmUubWF0cml4V29ybGQuY29weSggcmF3Qm9uZS50cmFuc2Zvcm1MaW5rICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG5hbWUgYW5kIGlkIGhlcmUgLSBvdGhlcndpc2UgaW4gY2FzZXMgd2hlcmUgXCJzdWJCb25lXCIgaXMgY3JlYXRlZCBpdCB3aWxsIG5vdCBoYXZlIGEgbmFtZSAvIGlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZS5uYW1lID0gVEhSRUUuUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUoIG5hbWUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib25lLklEID0gaWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tlbGV0b24uYm9uZXNbIGkgXSA9IGJvbmU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gY2FzZXMgd2hlcmUgYSBib25lIGlzIHNoYXJlZCBiZXR3ZWVuIG11bHRpcGxlIG1lc2hlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGR1cGxpY2F0ZSB0aGUgYm9uZSBoZXJlIGFuZCBhbmQgaXQgYXMgYSBjaGlsZCBvZiB0aGUgZmlyc3QgYm9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3ViQm9uZSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZS5hZGQoIHN1YkJvbmUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gYm9uZTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBjcmVhdGUgYSBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSBvciBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmFcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ2FtZXJhKCBGQlhUcmVlLCByZWxhdGlvbnNoaXBzICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1vZGVsO1xuICAgICAgICAgICAgdmFyIGNhbWVyYUF0dHJpYnV0ZTtcbiAgICBcbiAgICAgICAgICAgIHJlbGF0aW9uc2hpcHMuY2hpbGRyZW4uZm9yRWFjaCggZnVuY3Rpb24gKCBjaGlsZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IEZCWFRyZWUuT2JqZWN0cy5Ob2RlQXR0cmlidXRlWyBjaGlsZC5JRCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggYXR0ciAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFBdHRyaWJ1dGUgPSBhdHRyO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggY2FtZXJhQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSAwO1xuICAgICAgICAgICAgICAgIGlmICggY2FtZXJhQXR0cmlidXRlLkNhbWVyYVByb2plY3Rpb25UeXBlICE9PSB1bmRlZmluZWQgJiYgY2FtZXJhQXR0cmlidXRlLkNhbWVyYVByb2plY3Rpb25UeXBlLnZhbHVlID09PSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gMTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5lYXJDbGlwcGluZ1BsYW5lID0gMTtcbiAgICAgICAgICAgICAgICBpZiAoIGNhbWVyYUF0dHJpYnV0ZS5OZWFyUGxhbmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbmVhckNsaXBwaW5nUGxhbmUgPSBjYW1lcmFBdHRyaWJ1dGUuTmVhclBsYW5lLnZhbHVlIC8gMTAwMDtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGZhckNsaXBwaW5nUGxhbmUgPSAxMDAwO1xuICAgICAgICAgICAgICAgIGlmICggY2FtZXJhQXR0cmlidXRlLkZhclBsYW5lICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZhckNsaXBwaW5nUGxhbmUgPSBjYW1lcmFBdHRyaWJ1dGUuRmFyUGxhbmUudmFsdWUgLyAxMDAwO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggY2FtZXJhQXR0cmlidXRlLkFzcGVjdFdpZHRoICE9PSB1bmRlZmluZWQgJiYgY2FtZXJhQXR0cmlidXRlLkFzcGVjdEhlaWdodCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGNhbWVyYUF0dHJpYnV0ZS5Bc3BlY3RXaWR0aC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gY2FtZXJhQXR0cmlidXRlLkFzcGVjdEhlaWdodC52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBmb3YgPSA0NTtcbiAgICAgICAgICAgICAgICBpZiAoIGNhbWVyYUF0dHJpYnV0ZS5GaWVsZE9mVmlldyAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3YgPSBjYW1lcmFBdHRyaWJ1dGUuRmllbGRPZlZpZXcudmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBmb2NhbExlbmd0aCA9IGNhbWVyYUF0dHJpYnV0ZS5Gb2NhbExlbmd0aCA/IGNhbWVyYUF0dHJpYnV0ZS5Gb2NhbExlbmd0aC52YWx1ZSA6IG51bGw7XG4gICAgXG4gICAgICAgICAgICAgICAgc3dpdGNoICggdHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiAvLyBQZXJzcGVjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyQ2xpcHBpbmdQbGFuZSwgZmFyQ2xpcHBpbmdQbGFuZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmb2NhbExlbmd0aCAhPT0gbnVsbCApIG1vZGVsLnNldEZvY2FsTGVuZ3RoKCBmb2NhbExlbmd0aCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogLy8gT3J0aG9ncmFwaGljXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoIC0gd2lkdGggLyAyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIsIC0gaGVpZ2h0IC8gMiwgbmVhckNsaXBwaW5nUGxhbmUsIGZhckNsaXBwaW5nUGxhbmUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiBVbmtub3duIGNhbWVyYSB0eXBlICcgKyB0eXBlICsgJy4nICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIENyZWF0ZSBhIFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQsIFRIUkVFLlBvaW50TGlnaHQgb3IgVEhSRUUuU3BvdExpZ2h0XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUxpZ2h0KCBGQlhUcmVlLCByZWxhdGlvbnNoaXBzICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1vZGVsO1xuICAgICAgICAgICAgdmFyIGxpZ2h0QXR0cmlidXRlO1xuICAgIFxuICAgICAgICAgICAgcmVsYXRpb25zaGlwcy5jaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhdHRyID0gRkJYVHJlZS5PYmplY3RzLk5vZGVBdHRyaWJ1dGVbIGNoaWxkLklEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBhdHRyICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0QXR0cmlidXRlID0gYXR0cjtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIGxpZ2h0QXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHR5cGU7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gTGlnaHRUeXBlIGNhbiBiZSB1bmRlZmluZWQgZm9yIFBvaW50IGxpZ2h0c1xuICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuTGlnaHRUeXBlID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBsaWdodEF0dHJpYnV0ZS5MaWdodFR5cGUudmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IDB4ZmZmZmZmO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuQ29sb3IgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIGxpZ2h0QXR0cmlidXRlLkNvbG9yLnZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBpbnRlbnNpdHkgPSAoIGxpZ2h0QXR0cmlidXRlLkludGVuc2l0eSA9PT0gdW5kZWZpbmVkICkgPyAxIDogbGlnaHRBdHRyaWJ1dGUuSW50ZW5zaXR5LnZhbHVlIC8gMTAwO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGxpZ2h0IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgaWYgKCBsaWdodEF0dHJpYnV0ZS5DYXN0TGlnaHRPbk9iamVjdCAhPT0gdW5kZWZpbmVkICYmIGxpZ2h0QXR0cmlidXRlLkNhc3RMaWdodE9uT2JqZWN0LnZhbHVlID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpbnRlbnNpdHkgPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuRmFyQXR0ZW51YXRpb25FbmQgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaWdodEF0dHJpYnV0ZS5FbmFibGVGYXJBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICYmIGxpZ2h0QXR0cmlidXRlLkVuYWJsZUZhckF0dGVudWF0aW9uLnZhbHVlID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBsaWdodEF0dHJpYnV0ZS5GYXJBdHRlbnVhdGlvbkVuZC52YWx1ZSAvIDEwMDA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogY291bGQgdGhpcyBiZSBjYWxjdWxhdGVkIGxpbmVhcmx5IGZyb20gRmFyQXR0ZW51YXRpb25TdGFydCB0byBGYXJBdHRlbnVhdGlvbkVuZD9cbiAgICAgICAgICAgICAgICB2YXIgZGVjYXkgPSAxO1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogLy8gUG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlLCBkZWNheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogLy8gRGlyZWN0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IC8vIFNwb3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmdsZSA9IE1hdGguUEkgLyAzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBsaWdodEF0dHJpYnV0ZS5Jbm5lckFuZ2xlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5nbGUgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKCBsaWdodEF0dHJpYnV0ZS5Jbm5lckFuZ2xlLnZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVudW1icmEgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBsaWdodEF0dHJpYnV0ZS5PdXRlckFuZ2xlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBub3QgY29ycmVjdCAtIEZCWCBjYWxjdWxhdGVzIG91dGVyIGFuZCBpbm5lciBhbmdsZSBpbiBkZWdyZWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCBPdXRlckFuZ2xlID4gSW5uZXJBbmdsZSAmJiBPdXRlckFuZ2xlIDw9IE1hdGguUElcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGlsZSB0aHJlZS5qcyB1c2VzIGEgcGVudW1icmEgYmV0d2VlbiAoMCwgMSkgdG8gYXR0ZW51YXRlIHRoZSBpbm5lciBhbmdsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbnVtYnJhID0gVEhSRUUuTWF0aC5kZWdUb1JhZCggbGlnaHRBdHRyaWJ1dGUuT3V0ZXJBbmdsZS52YWx1ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbnVtYnJhID0gTWF0aC5tYXgoIHBlbnVtYnJhLCAxICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5TcG90TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlLCBhbmdsZSwgcGVudW1icmEsIGRlY2F5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogVW5rbm93biBsaWdodCB0eXBlICcgKyBsaWdodEF0dHJpYnV0ZS5MaWdodFR5cGUudmFsdWUgKyAnLCBkZWZhdWx0aW5nIHRvIGEgVEhSRUUuUG9pbnRMaWdodC4nICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBsaWdodEF0dHJpYnV0ZS5DYXN0U2hhZG93cyAhPT0gdW5kZWZpbmVkICYmIGxpZ2h0QXR0cmlidXRlLkNhc3RTaGFkb3dzLnZhbHVlID09PSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlTWVzaCggRkJYVHJlZSwgcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFsTWFwICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1vZGVsO1xuICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxzID0gW107XG4gICAgXG4gICAgICAgICAgICAvLyBnZXQgZ2VvbWV0cnkgYW5kIG1hdGVyaWFscyhzKSBmcm9tIGNvbm5lY3Rpb25zXG4gICAgICAgICAgICByZWxhdGlvbnNoaXBzLmNoaWxkcmVuLmZvckVhY2goIGZ1bmN0aW9uICggY2hpbGQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBnZW9tZXRyeU1hcC5oYXMoIGNoaWxkLklEICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gZ2VvbWV0cnlNYXAuZ2V0KCBjaGlsZC5JRCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsTWFwLmhhcyggY2hpbGQuSUQgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzLnB1c2goIG1hdGVyaWFsTWFwLmdldCggY2hpbGQuSUQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggbWF0ZXJpYWxzLmxlbmd0aCA+IDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBtYXRlcmlhbHM7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG1hdGVyaWFsc1sgMCBdO1xuICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCggeyBjb2xvcjogMHhjY2NjY2MgfSApO1xuICAgICAgICAgICAgICAgIG1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCAnY29sb3InIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxzLmZvckVhY2goIGZ1bmN0aW9uICggbWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IFRIUkVFLlZlcnRleENvbG9ycztcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIGdlb21ldHJ5LkZCWF9EZWZvcm1lciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbHMuZm9yRWFjaCggZnVuY3Rpb24gKCBtYXRlcmlhbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc2tpbm5pbmcgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5Ta2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgIG1vZGVsID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnZlKCByZWxhdGlvbnNoaXBzLCBnZW9tZXRyeU1hcCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IHJlbGF0aW9uc2hpcHMuY2hpbGRyZW4ucmVkdWNlKCBmdW5jdGlvbiAoIGdlbywgY2hpbGQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBnZW9tZXRyeU1hcC5oYXMoIGNoaWxkLklEICkgKSBnZW8gPSBnZW9tZXRyeU1hcC5nZXQoIGNoaWxkLklEICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdlbztcbiAgICBcbiAgICAgICAgICAgIH0sIG51bGwgKTtcbiAgICBcbiAgICAgICAgICAgIC8vIEZCWCBkb2VzIG5vdCBsaXN0IG1hdGVyaWFscyBmb3IgTnVyYnMgbGluZXMsIHNvIHdlJ2xsIGp1c3QgcHV0IG91ciBvd24gaW4gaGVyZS5cbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHgzMzAwZmYsIGxpbmV3aWR0aDogMSB9ICk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLkxpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIFBhcnNlIGFtYmllbnQgY29sb3IgaW4gRkJYVHJlZS5HbG9iYWxTZXR0aW5ncyAtIGlmIGl0J3Mgbm90IHNldCB0byBibGFjayAoZGVmYXVsdCksIGNyZWF0ZSBhbiBhbWJpZW50IGxpZ2h0XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUFtYmllbnRMaWdodCggRkJYVHJlZSwgc2NlbmVHcmFwaCApIHtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ0dsb2JhbFNldHRpbmdzJyBpbiBGQlhUcmVlICYmICdBbWJpZW50Q29sb3InIGluIEZCWFRyZWUuR2xvYmFsU2V0dGluZ3MgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFtYmllbnRDb2xvciA9IEZCWFRyZWUuR2xvYmFsU2V0dGluZ3MuQW1iaWVudENvbG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciByID0gYW1iaWVudENvbG9yWyAwIF07XG4gICAgICAgICAgICAgICAgdmFyIGcgPSBhbWJpZW50Q29sb3JbIDEgXTtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGFtYmllbnRDb2xvclsgMiBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggciAhPT0gMCB8fCBnICE9PSAwIHx8IGIgIT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IG5ldyBUSFJFRS5Db2xvciggciwgZywgYiApO1xuICAgICAgICAgICAgICAgICAgICBzY2VuZUdyYXBoLmFkZCggbmV3IFRIUkVFLkFtYmllbnRMaWdodCggY29sb3IsIDEgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBzZXRMb29rQXRQcm9wZXJ0aWVzKCBGQlhUcmVlLCBtb2RlbCwgbW9kZWxOb2RlLCBjb25uZWN0aW9ucywgc2NlbmVHcmFwaCApIHtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ0xvb2tBdFByb3BlcnR5JyBpbiBtb2RlbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gY29ubmVjdGlvbnMuZ2V0KCBtb2RlbC5JRCApLmNoaWxkcmVuO1xuICAgIFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goIGZ1bmN0aW9uICggY2hpbGQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQucmVsYXRpb25zaGlwID09PSAnTG9va0F0UHJvcGVydHknICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvb2tBdFRhcmdldCA9IEZCWFRyZWUuT2JqZWN0cy5Nb2RlbFsgY2hpbGQuSUQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJ0xjbF9UcmFuc2xhdGlvbicgaW4gbG9va0F0VGFyZ2V0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBsb29rQXRUYXJnZXQuTGNsX1RyYW5zbGF0aW9uLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpcmVjdGlvbmFsTGlnaHQsIFNwb3RMaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbW9kZWwudGFyZ2V0ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnRhcmdldC5wb3NpdGlvbi5mcm9tQXJyYXkoIHBvcyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2VuZUdyYXBoLmFkZCggbW9kZWwudGFyZ2V0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gQ2FtZXJhcyBhbmQgb3RoZXIgT2JqZWN0M0RzXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmxvb2tBdCggbmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvcyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIHBhcnNlIHRoZSBtb2RlbCBub2RlIGZvciB0cmFuc2Zvcm0gZGV0YWlscyBhbmQgYXBwbHkgdGhlbSB0byB0aGUgbW9kZWxcbiAgICAgICAgZnVuY3Rpb24gc2V0TW9kZWxUcmFuc2Zvcm1zKCBGQlhUcmVlLCBtb2RlbCwgbW9kZWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgLy8gaHR0cDovL2hlbHAuYXV0b2Rlc2suY29tL3ZpZXcvRkJYLzIwMTcvRU5VLz9ndWlkPV9fY3BwX3JlZl9jbGFzc19mYnhfZXVsZXJfaHRtbFxuICAgICAgICAgICAgaWYgKCAnUm90YXRpb25PcmRlcicgaW4gbW9kZWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBlbnVtcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1hZWicsIC8vIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgJ1haWScsXG4gICAgICAgICAgICAgICAgICAgICdZWlgnLFxuICAgICAgICAgICAgICAgICAgICAnWlhZJyxcbiAgICAgICAgICAgICAgICAgICAgJ1lYWicsXG4gICAgICAgICAgICAgICAgICAgICdaWVgnLFxuICAgICAgICAgICAgICAgICAgICAnU3BoZXJpY1hZWicsXG4gICAgICAgICAgICAgICAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludCggbW9kZWxOb2RlLlJvdGF0aW9uT3JkZXIudmFsdWUsIDEwICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA+IDAgJiYgdmFsdWUgPCA2ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBtb2RlbC5yb3RhdGlvbi5vcmRlciA9IGVudW1zWyB2YWx1ZSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBFdWxlciBvcmRlciBvdGhlciB0aGFuIFhZWiBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZCwgc28ganVzdCBkaXNwbGF5IGEgd2FybmluZyBmb3Igbm93XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogdW5zdXBwb3J0ZWQgRXVsZXIgT3JkZXI6ICVzLiBDdXJyZW50bHkgb25seSBYWVogb3JkZXIgaXMgc3VwcG9ydGVkLiBBbmltYXRpb25zIGFuZCByb3RhdGlvbnMgbWF5IGJlIGluY29ycmVjdC4nLCBlbnVtc1sgdmFsdWUgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHZhbHVlID09PSA2ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IHVuc3VwcG9ydGVkIEV1bGVyIE9yZGVyOiBTcGhlcmljYWwgWFlaLiBBbmltYXRpb25zIGFuZCByb3RhdGlvbnMgbWF5IGJlIGluY29ycmVjdC4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCAnTGNsX1RyYW5zbGF0aW9uJyBpbiBtb2RlbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbW9kZWwucG9zaXRpb24uZnJvbUFycmF5KCBtb2RlbE5vZGUuTGNsX1RyYW5zbGF0aW9uLnZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoICdMY2xfUm90YXRpb24nIGluIG1vZGVsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcm90YXRpb24gPSBtb2RlbE5vZGUuTGNsX1JvdGF0aW9uLnZhbHVlLm1hcCggVEhSRUUuTWF0aC5kZWdUb1JhZCApO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uLnB1c2goICdaWVgnICk7XG4gICAgICAgICAgICAgICAgbW9kZWwucm90YXRpb24uZnJvbUFycmF5KCByb3RhdGlvbiApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCAnTGNsX1NjYWxpbmcnIGluIG1vZGVsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtb2RlbC5zY2FsZS5mcm9tQXJyYXkoIG1vZGVsTm9kZS5MY2xfU2NhbGluZy52YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCAnUHJlUm90YXRpb24nIGluIG1vZGVsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBtb2RlbE5vZGUuUHJlUm90YXRpb24udmFsdWUubWFwKCBUSFJFRS5NYXRoLmRlZ1RvUmFkICk7XG4gICAgICAgICAgICAgICAgYXJyYXlbIDMgXSA9ICdaWVgnO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcmVSb3RhdGlvbnMgPSBuZXcgVEhSRUUuRXVsZXIoKS5mcm9tQXJyYXkoIGFycmF5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcHJlUm90YXRpb25zID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIoIHByZVJvdGF0aW9ucyApO1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Um90YXRpb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21FdWxlciggbW9kZWwucm90YXRpb24gKTtcbiAgICAgICAgICAgICAgICBwcmVSb3RhdGlvbnMubXVsdGlwbHkoIGN1cnJlbnRSb3RhdGlvbiApO1xuICAgICAgICAgICAgICAgIG1vZGVsLnJvdGF0aW9uLnNldEZyb21RdWF0ZXJuaW9uKCBwcmVSb3RhdGlvbnMsICdaWVgnICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gYmluZFNrZWxldG9uKCBGQlhUcmVlLCBza2VsZXRvbnMsIGdlb21ldHJ5TWFwLCBtb2RlbE1hcCwgY29ubmVjdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgYmluZE1hdHJpY2VzID0gcGFyc2VQb3NlTm9kZXMoIEZCWFRyZWUgKTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBJRCBpbiBza2VsZXRvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNrZWxldG9uID0gc2tlbGV0b25zWyBJRCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRzID0gY29ubmVjdGlvbnMuZ2V0KCBwYXJzZUludCggc2tlbGV0b24uSUQgKSApLnBhcmVudHM7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyZW50cy5mb3JFYWNoKCBmdW5jdGlvbiAoIHBhcmVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBnZW9tZXRyeU1hcC5oYXMoIHBhcmVudC5JRCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlb0lEID0gcGFyZW50LklEO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlb1JlbGF0aW9uc2hpcHMgPSBjb25uZWN0aW9ucy5nZXQoIGdlb0lEICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9SZWxhdGlvbnNoaXBzLnBhcmVudHMuZm9yRWFjaCggZnVuY3Rpb24gKCBnZW9Db25uUGFyZW50ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbW9kZWxNYXAuaGFzKCBnZW9Db25uUGFyZW50LklEICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IG1vZGVsTWFwLmdldCggZ2VvQ29ublBhcmVudC5JRCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5iaW5kKCBuZXcgVEhSRUUuU2tlbGV0b24oIHNrZWxldG9uLmJvbmVzICksIGJpbmRNYXRyaWNlc1sgZ2VvQ29ublBhcmVudC5JRCBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlUG9zZU5vZGVzKCBGQlhUcmVlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGJpbmRNYXRyaWNlcyA9IHt9O1xuICAgIFxuICAgICAgICAgICAgaWYgKCAnUG9zZScgaW4gRkJYVHJlZS5PYmplY3RzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBCaW5kUG9zZU5vZGUgPSBGQlhUcmVlLk9iamVjdHMuUG9zZTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIEJpbmRQb3NlTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBCaW5kUG9zZU5vZGVbIG5vZGVJRCBdLmF0dHJUeXBlID09PSAnQmluZFBvc2UnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2VOb2RlcyA9IEJpbmRQb3NlTm9kZVsgbm9kZUlEIF0uUG9zZU5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoIHBvc2VOb2RlcyApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2VOb2Rlcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHBvc2VOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kTWF0cmljZXNbIHBvc2VOb2RlLk5vZGUgXSA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KCBwb3NlTm9kZS5NYXRyaXguYSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZE1hdHJpY2VzWyBwb3NlTm9kZXMuTm9kZSBdID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkoIHBvc2VOb2Rlcy5NYXRyaXguYSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGJpbmRNYXRyaWNlcztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwYXJzZUFuaW1hdGlvbnMoIEZCWFRyZWUsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgLy8gc2luY2UgdGhlIGFjdHVhbCB0cmFuc2Zvcm1hdGlvbiBkYXRhIGlzIHN0b3JlZCBpbiBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uQ3VydmUsXG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIHVuZGVmaW5lZCB3ZSBjYW4gc2FmZWx5IGFzc3VtZSB0aGVyZSBhcmUgbm8gYW5pbWF0aW9uc1xuICAgICAgICAgICAgaWYgKCBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uQ3VydmUgPT09IHVuZGVmaW5lZCApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgXG4gICAgICAgICAgICB2YXIgY3VydmVOb2Rlc01hcCA9IHBhcnNlQW5pbWF0aW9uQ3VydmVOb2RlcyggRkJYVHJlZSApO1xuICAgIFxuICAgICAgICAgICAgcGFyc2VBbmltYXRpb25DdXJ2ZXMoIEZCWFRyZWUsIGNvbm5lY3Rpb25zLCBjdXJ2ZU5vZGVzTWFwICk7XG4gICAgXG4gICAgICAgICAgICB2YXIgbGF5ZXJzTWFwID0gcGFyc2VBbmltYXRpb25MYXllcnMoIEZCWFRyZWUsIGNvbm5lY3Rpb25zLCBjdXJ2ZU5vZGVzTWFwICk7XG4gICAgICAgICAgICB2YXIgcmF3Q2xpcHMgPSBwYXJzZUFuaW1TdGFja3MoIEZCWFRyZWUsIGNvbm5lY3Rpb25zLCBsYXllcnNNYXAgKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiByYXdDbGlwcztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uQ3VydmVOb2RlXG4gICAgICAgIC8vIGVhY2ggQW5pbWF0aW9uQ3VydmVOb2RlIGhvbGRzIGRhdGEgZm9yIGFuIGFuaW1hdGlvbiB0cmFuc2Zvcm0gZm9yIGEgbW9kZWwgKGUuZy4gbGVmdCBhcm0gcm90YXRpb24gKVxuICAgICAgICAvLyBhbmQgaXMgcmVmZXJlbmNlZCBieSBhbiBBbmltYXRpb25MYXllclxuICAgICAgICBmdW5jdGlvbiBwYXJzZUFuaW1hdGlvbkN1cnZlTm9kZXMoIEZCWFRyZWUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcmF3Q3VydmVOb2RlcyA9IEZCWFRyZWUuT2JqZWN0cy5BbmltYXRpb25DdXJ2ZU5vZGU7XG4gICAgXG4gICAgICAgICAgICB2YXIgY3VydmVOb2Rlc01hcCA9IG5ldyBNYXAoKTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBub2RlSUQgaW4gcmF3Q3VydmVOb2RlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmF3Q3VydmVOb2RlID0gcmF3Q3VydmVOb2Rlc1sgbm9kZUlEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCByYXdDdXJ2ZU5vZGUuYXR0ck5hbWUubWF0Y2goIC9TfFJ8VC8gKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnZlTm9kZSA9IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiByYXdDdXJ2ZU5vZGUuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiByYXdDdXJ2ZU5vZGUuYXR0ck5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZXM6IHt9LFxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjdXJ2ZU5vZGVzTWFwLnNldCggY3VydmVOb2RlLmlkLCBjdXJ2ZU5vZGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gY3VydmVOb2Rlc01hcDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uQ3VydmUgYW5kIGNvbm5lY3QgdGhlbSB1cCB0b1xuICAgICAgICAvLyBwcmV2aW91c2x5IHBhcnNlZCBBbmltYXRpb25DdXJ2ZU5vZGVzLiBFYWNoIEFuaW1hdGlvbkN1cnZlIGhvbGRzIGRhdGEgZm9yIGEgc2luZ2xlIGFuaW1hdGVkXG4gICAgICAgIC8vIGF4aXMgKCBlLmcuIHRpbWVzIGFuZCB2YWx1ZXMgb2YgeCByb3RhdGlvbilcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRpb25DdXJ2ZXMoIEZCWFRyZWUsIGNvbm5lY3Rpb25zLCBjdXJ2ZU5vZGVzTWFwICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHJhd0N1cnZlcyA9IEZCWFRyZWUuT2JqZWN0cy5BbmltYXRpb25DdXJ2ZTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBub2RlSUQgaW4gcmF3Q3VydmVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25DdXJ2ZSA9IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJhd0N1cnZlc1sgbm9kZUlEIF0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzOiByYXdDdXJ2ZXNbIG5vZGVJRCBdLktleVRpbWUuYS5tYXAoIGNvbnZlcnRGQlhUaW1lVG9TZWNvbmRzICksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogcmF3Q3VydmVzWyBub2RlSUQgXS5LZXlWYWx1ZUZsb2F0LmEsXG4gICAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmVsYXRpb25zaGlwcyA9IGNvbm5lY3Rpb25zLmdldCggYW5pbWF0aW9uQ3VydmUuaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHJlbGF0aW9uc2hpcHMgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbkN1cnZlSUQgPSByZWxhdGlvbnNoaXBzLnBhcmVudHNbIDAgXS5JRDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbkN1cnZlUmVsYXRpb25zaGlwID0gcmVsYXRpb25zaGlwcy5wYXJlbnRzWyAwIF0ucmVsYXRpb25zaGlwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXhpcyA9ICcnO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGFuaW1hdGlvbkN1cnZlUmVsYXRpb25zaGlwLm1hdGNoKCAvWC8gKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXMgPSAneCc7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGFuaW1hdGlvbkN1cnZlUmVsYXRpb25zaGlwLm1hdGNoKCAvWS8gKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXMgPSAneSc7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGFuaW1hdGlvbkN1cnZlUmVsYXRpb25zaGlwLm1hdGNoKCAvWi8gKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXMgPSAneic7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBjdXJ2ZU5vZGVzTWFwLmdldCggYW5pbWF0aW9uQ3VydmVJRCApLmN1cnZlc1sgYXhpcyBdID0gYW5pbWF0aW9uQ3VydmU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIHBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5BbmltYXRpb25MYXllci4gRWFjaCBsYXllcnMgaG9sZHMgcmVmZXJlbmNlc1xuICAgICAgICAvLyB0byB2YXJpb3VzIEFuaW1hdGlvbkN1cnZlTm9kZXMgYW5kIGlzIHJlZmVyZW5jZWQgYnkgYW4gQW5pbWF0aW9uU3RhY2sgbm9kZVxuICAgICAgICAvLyBub3RlOiB0aGVvcmV0aWNhbGx5IGEgc3RhY2sgY2FuIG11bHRpcGxlIGxheWVycywgaG93ZXZlciBpbiBwcmFjdGljZSB0aGVyZSBhbHdheXMgc2VlbXMgdG8gYmUgb25lIHBlciBzdGFja1xuICAgICAgICBmdW5jdGlvbiBwYXJzZUFuaW1hdGlvbkxheWVycyggRkJYVHJlZSwgY29ubmVjdGlvbnMsIGN1cnZlTm9kZXNNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcmF3TGF5ZXJzID0gRkJYVHJlZS5PYmplY3RzLkFuaW1hdGlvbkxheWVyO1xuICAgIFxuICAgICAgICAgICAgdmFyIGxheWVyc01hcCA9IG5ldyBNYXAoKTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBub2RlSUQgaW4gcmF3TGF5ZXJzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBsYXllckN1cnZlTm9kZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIG5vZGVJRCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBjb25uZWN0aW9uICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbCB0aGUgYW5pbWF0aW9uQ3VydmVOb2RlcyB1c2VkIGluIHRoZSBsYXllclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBjb25uZWN0aW9uLmNoaWxkcmVuO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkLCBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJ2ZU5vZGVzTWFwLmhhcyggY2hpbGQuSUQgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VydmVOb2RlID0gY3VydmVOb2Rlc01hcC5nZXQoIGNoaWxkLklEICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdGhhdCB0aGUgY3VydmVzIGFyZSBkZWZpbmVkIGZvciBhdCBsZWFzdCBvbmUgYXhpcywgb3RoZXJ3aXNlIGlnbm9yZSB0aGUgY3VydmVOb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJ2ZU5vZGUuY3VydmVzLnggIT09IHVuZGVmaW5lZCB8fCBjdXJ2ZU5vZGUuY3VydmVzLnkgIT09IHVuZGVmaW5lZCB8fCBjdXJ2ZU5vZGUuY3VydmVzLnogIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBsYXllckN1cnZlTm9kZXNbIGkgXSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGVsSUQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9ucy5nZXQoIGNoaWxkLklEICkucGFyZW50cy5mb3JFYWNoKCBmdW5jdGlvbiAoIHBhcmVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmVudC5yZWxhdGlvbnNoaXAgIT09IHVuZGVmaW5lZCApIG1vZGVsSUQgPSBwYXJlbnQuSUQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3TW9kZWwgPSBGQlhUcmVlLk9iamVjdHMuTW9kZWxbIG1vZGVsSUQudG9TdHJpbmcoKSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxOYW1lOiBUSFJFRS5Qcm9wZXJ0eUJpbmRpbmcuc2FuaXRpemVOb2RlTmFtZSggcmF3TW9kZWwuYXR0ck5hbWUgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUG9zaXRpb246IFsgMCwgMCwgMCBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxSb3RhdGlvbjogWyAwLCAwLCAwIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFNjYWxlOiBbIDEsIDEsIDEgXSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICdMY2xfVHJhbnNsYXRpb24nIGluIHJhd01vZGVsICkgbm9kZS5pbml0aWFsUG9zaXRpb24gPSByYXdNb2RlbC5MY2xfVHJhbnNsYXRpb24udmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICdMY2xfUm90YXRpb24nIGluIHJhd01vZGVsICkgbm9kZS5pbml0aWFsUm90YXRpb24gPSByYXdNb2RlbC5MY2xfUm90YXRpb24udmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICdMY2xfU2NhbGluZycgaW4gcmF3TW9kZWwgKSBub2RlLmluaXRpYWxTY2FsZSA9IHJhd01vZGVsLkxjbF9TY2FsaW5nLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGFuaW1hdGVkIG1vZGVsIGlzIHByZSByb3RhdGVkLCB3ZSdsbCBoYXZlIHRvIGFwcGx5IHRoZSBwcmUgcm90YXRpb25zIHRvIGV2ZXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmltYXRpb24gdmFsdWUgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAnUHJlUm90YXRpb24nIGluIHJhd01vZGVsICkgbm9kZS5wcmVSb3RhdGlvbnMgPSByYXdNb2RlbC5QcmVSb3RhdGlvbi52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyQ3VydmVOb2Rlc1sgaSBdID0gbm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllckN1cnZlTm9kZXNbIGkgXVsgY3VydmVOb2RlLmF0dHIgXSA9IGN1cnZlTm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzTWFwLnNldCggcGFyc2VJbnQoIG5vZGVJRCApLCBsYXllckN1cnZlTm9kZXMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gbGF5ZXJzTWFwO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIHBhcnNlIG5vZGVzIGluIEZCWFRyZWUuT2JqZWN0cy5BbmltYXRpb25TdGFjay4gVGhlc2UgYXJlIHRoZSB0b3AgbGV2ZWwgbm9kZSBpbiB0aGUgYW5pbWF0aW9uXG4gICAgICAgIC8vIGhpZXJhcmNoeS4gRWFjaCBTdGFjayBub2RlIHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBUSFJFRS5BbmltYXRpb25DbGlwXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlQW5pbVN0YWNrcyggRkJYVHJlZSwgY29ubmVjdGlvbnMsIGxheWVyc01hcCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciByYXdTdGFja3MgPSBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uU3RhY2s7XG4gICAgXG4gICAgICAgICAgICAvLyBjb25uZWN0IHRoZSBzdGFja3MgKGNsaXBzKSB1cCB0byB0aGUgbGF5ZXJzXG4gICAgICAgICAgICB2YXIgcmF3Q2xpcHMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBub2RlSUQgaW4gcmF3U3RhY2tzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIG5vZGVJRCApICkuY2hpbGRyZW47XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBjaGlsZHJlbi5sZW5ndGggPiAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBzZWVtcyBsaWtlIHN0YWNrcyB3aWxsIGFsd2F5cyBiZSBhc3NvY2lhdGVkIHdpdGggYSBzaW5nbGUgbGF5ZXIuIEJ1dCBqdXN0IGluIGNhc2UgdGhlcmUgYXJlIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBsYXllcnMgcGVyIHN0YWNrLCB3ZSdsbCBkaXNwbGF5IGEgd2FybmluZ1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IEVuY291bnRlcmVkIGFuIGFuaW1hdGlvbiBzdGFjayB3aXRoIG11bHRpcGxlIGxheWVycywgdGhpcyBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZC4gSWdub3Jpbmcgc3Vic2VxdWVudCBsYXllcnMuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSBsYXllcnNNYXAuZ2V0KCBjaGlsZHJlblsgMCBdLklEICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmF3Q2xpcHNbIG5vZGVJRCBdID0ge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiByYXdTdGFja3NbIG5vZGVJRCBdLmF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsYXllcjogbGF5ZXIsXG4gICAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiByYXdDbGlwcztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyB0YWtlIHJhdyBhbmltYXRpb24gZGF0YSBmcm9tIHBhcnNlQW5pbWF0aW9ucyBhbmQgY29ubmVjdCBpdCB1cCB0byB0aGUgbG9hZGVkIG1vZGVsc1xuICAgICAgICBmdW5jdGlvbiBhZGRBbmltYXRpb25zKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgc2NlbmVHcmFwaCApIHtcbiAgICBcbiAgICAgICAgICAgIHNjZW5lR3JhcGguYW5pbWF0aW9ucyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgdmFyIHJhd0NsaXBzID0gcGFyc2VBbmltYXRpb25zKCBGQlhUcmVlLCBjb25uZWN0aW9ucyApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCByYXdDbGlwcyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuICAgIFxuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGtleSBpbiByYXdDbGlwcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmF3Q2xpcCA9IHJhd0NsaXBzWyBrZXkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2xpcCA9IGFkZENsaXAoIHJhd0NsaXAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBzY2VuZUdyYXBoLmFuaW1hdGlvbnMucHVzaCggY2xpcCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGFkZENsaXAoIHJhd0NsaXAgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgdHJhY2tzID0gW107XG4gICAgXG4gICAgICAgICAgICByYXdDbGlwLmxheWVyLmZvckVhY2goIGZ1bmN0aW9uICggcmF3VHJhY2tzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHRyYWNrcyA9IHRyYWNrcy5jb25jYXQoIGdlbmVyYXRlVHJhY2tzKCByYXdUcmFja3MgKSApO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5BbmltYXRpb25DbGlwKCByYXdDbGlwLm5hbWUsIC0gMSwgdHJhY2tzICk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVUcmFja3MoIHJhd1RyYWNrcyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciB0cmFja3MgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIGlmICggcmF3VHJhY2tzLlQgIT09IHVuZGVmaW5lZCAmJiBPYmplY3Qua2V5cyggcmF3VHJhY2tzLlQuY3VydmVzICkubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25UcmFjayA9IGdlbmVyYXRlVmVjdG9yVHJhY2soIHJhd1RyYWNrcy5tb2RlbE5hbWUsIHJhd1RyYWNrcy5ULmN1cnZlcywgcmF3VHJhY2tzLmluaXRpYWxQb3NpdGlvbiwgJ3Bvc2l0aW9uJyApO1xuICAgICAgICAgICAgICAgIGlmICggcG9zaXRpb25UcmFjayAhPT0gdW5kZWZpbmVkICkgdHJhY2tzLnB1c2goIHBvc2l0aW9uVHJhY2sgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggcmF3VHJhY2tzLlIgIT09IHVuZGVmaW5lZCAmJiBPYmplY3Qua2V5cyggcmF3VHJhY2tzLlIuY3VydmVzICkubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcm90YXRpb25UcmFjayA9IGdlbmVyYXRlUm90YXRpb25UcmFjayggcmF3VHJhY2tzLm1vZGVsTmFtZSwgcmF3VHJhY2tzLlIuY3VydmVzLCByYXdUcmFja3MuaW5pdGlhbFJvdGF0aW9uLCByYXdUcmFja3MucHJlUm90YXRpb25zICk7XG4gICAgICAgICAgICAgICAgaWYgKCByb3RhdGlvblRyYWNrICE9PSB1bmRlZmluZWQgKSB0cmFja3MucHVzaCggcm90YXRpb25UcmFjayApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCByYXdUcmFja3MuUyAhPT0gdW5kZWZpbmVkICYmIE9iamVjdC5rZXlzKCByYXdUcmFja3MuUy5jdXJ2ZXMgKS5sZW5ndGggPiAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzY2FsZVRyYWNrID0gZ2VuZXJhdGVWZWN0b3JUcmFjayggcmF3VHJhY2tzLm1vZGVsTmFtZSwgcmF3VHJhY2tzLlMuY3VydmVzLCByYXdUcmFja3MuaW5pdGlhbFNjYWxlLCAnc2NhbGUnICk7XG4gICAgICAgICAgICAgICAgaWYgKCBzY2FsZVRyYWNrICE9PSB1bmRlZmluZWQgKSB0cmFja3MucHVzaCggc2NhbGVUcmFjayApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRyYWNrcztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVZlY3RvclRyYWNrKCBtb2RlbE5hbWUsIGN1cnZlcywgaW5pdGlhbFZhbHVlLCB0eXBlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHRpbWVzID0gZ2V0VGltZXNGb3JBbGxBeGVzKCBjdXJ2ZXMgKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBnZXRLZXlmcmFtZVRyYWNrVmFsdWVzKCB0aW1lcywgY3VydmVzLCBpbml0aWFsVmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjayggbW9kZWxOYW1lICsgJy4nICsgdHlwZSwgdGltZXMsIHZhbHVlcyApO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUm90YXRpb25UcmFjayggbW9kZWxOYW1lLCBjdXJ2ZXMsIGluaXRpYWxWYWx1ZSwgcHJlUm90YXRpb25zICkge1xuICAgIFxuICAgICAgICAgICAgaWYgKCBjdXJ2ZXMueCAhPT0gdW5kZWZpbmVkICkgY3VydmVzLngudmFsdWVzID0gY3VydmVzLngudmFsdWVzLm1hcCggVEhSRUUuTWF0aC5kZWdUb1JhZCApO1xuICAgICAgICAgICAgaWYgKCBjdXJ2ZXMueSAhPT0gdW5kZWZpbmVkICkgY3VydmVzLnkudmFsdWVzID0gY3VydmVzLnkudmFsdWVzLm1hcCggVEhSRUUuTWF0aC5kZWdUb1JhZCApO1xuICAgICAgICAgICAgaWYgKCBjdXJ2ZXMueiAhPT0gdW5kZWZpbmVkICkgY3VydmVzLnoudmFsdWVzID0gY3VydmVzLnoudmFsdWVzLm1hcCggVEhSRUUuTWF0aC5kZWdUb1JhZCApO1xuICAgIFxuICAgICAgICAgICAgdmFyIHRpbWVzID0gZ2V0VGltZXNGb3JBbGxBeGVzKCBjdXJ2ZXMgKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBnZXRLZXlmcmFtZVRyYWNrVmFsdWVzKCB0aW1lcywgY3VydmVzLCBpbml0aWFsVmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggcHJlUm90YXRpb25zICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcHJlUm90YXRpb25zID0gcHJlUm90YXRpb25zLm1hcCggVEhSRUUuTWF0aC5kZWdUb1JhZCApO1xuICAgICAgICAgICAgICAgIHByZVJvdGF0aW9ucy5wdXNoKCAnWllYJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHByZVJvdGF0aW9ucyA9IG5ldyBUSFJFRS5FdWxlcigpLmZyb21BcnJheSggcHJlUm90YXRpb25zICk7XG4gICAgICAgICAgICAgICAgcHJlUm90YXRpb25zID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIoIHByZVJvdGF0aW9ucyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgICAgICAgICAgdmFyIGV1bGVyID0gbmV3IFRIUkVFLkV1bGVyKCk7XG4gICAgXG4gICAgICAgICAgICB2YXIgcXVhdGVybmlvblZhbHVlcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGV1bGVyLnNldCggdmFsdWVzWyBpIF0sIHZhbHVlc1sgaSArIDEgXSwgdmFsdWVzWyBpICsgMiBdLCAnWllYJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggcHJlUm90YXRpb25zICE9PSB1bmRlZmluZWQgKXF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIHByZVJvdGF0aW9ucyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHF1YXRlcm5pb24udG9BcnJheSggcXVhdGVybmlvblZhbHVlcywgKCBpIC8gMyApICogNCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayggbW9kZWxOYW1lICsgJy5xdWF0ZXJuaW9uJywgdGltZXMsIHF1YXRlcm5pb25WYWx1ZXMgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBnZXRLZXlmcmFtZVRyYWNrVmFsdWVzKCB0aW1lcywgY3VydmVzLCBpbml0aWFsVmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcHJldlZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIFxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgdmFyIHhJbmRleCA9IC0gMTtcbiAgICAgICAgICAgIHZhciB5SW5kZXggPSAtIDE7XG4gICAgICAgICAgICB2YXIgekluZGV4ID0gLSAxO1xuICAgIFxuICAgICAgICAgICAgdGltZXMuZm9yRWFjaCggZnVuY3Rpb24gKCB0aW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggY3VydmVzLnggKSB4SW5kZXggPSBjdXJ2ZXMueC50aW1lcy5pbmRleE9mKCB0aW1lICk7XG4gICAgICAgICAgICAgICAgaWYgKCBjdXJ2ZXMueSApIHlJbmRleCA9IGN1cnZlcy55LnRpbWVzLmluZGV4T2YoIHRpbWUgKTtcbiAgICAgICAgICAgICAgICBpZiAoIGN1cnZlcy56ICkgekluZGV4ID0gY3VydmVzLnoudGltZXMuaW5kZXhPZiggdGltZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFuIHggdmFsdWUgZGVmaW5lZCBmb3IgdGhpcyBmcmFtZSwgdXNlIHRoYXRcbiAgICAgICAgICAgICAgICBpZiAoIHhJbmRleCAhPT0gLSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgeFZhbHVlID0gY3VydmVzLngudmFsdWVzWyB4SW5kZXggXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goIHhWYWx1ZSApO1xuICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWVbIDAgXSA9IHhWYWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgdXNlIHRoZSB4IHZhbHVlIGZyb20gdGhlIHByZXZpb3VzIGZyYW1lXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCBwcmV2VmFsdWVbIDAgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHlJbmRleCAhPT0gLSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgeVZhbHVlID0gY3VydmVzLnkudmFsdWVzWyB5SW5kZXggXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goIHlWYWx1ZSApO1xuICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWVbIDEgXSA9IHlWYWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCggcHJldlZhbHVlWyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB6SW5kZXggIT09IC0gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpWYWx1ZSA9IGN1cnZlcy56LnZhbHVlc1sgekluZGV4IF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCB6VmFsdWUgKTtcbiAgICAgICAgICAgICAgICAgICAgcHJldlZhbHVlWyAyIF0gPSB6VmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goIHByZXZWYWx1ZVsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBGb3IgYWxsIGFuaW1hdGVkIG9iamVjdHMsIHRpbWVzIGFyZSBkZWZpbmVkIHNlcGFyYXRlbHkgZm9yIGVhY2ggYXhpc1xuICAgICAgICAvLyBIZXJlIHdlJ2xsIGNvbWJpbmUgdGhlIHRpbWVzIGludG8gb25lIHNvcnRlZCBhcnJheSB3aXRob3V0IGR1cGxpY2F0ZXNcbiAgICAgICAgZnVuY3Rpb24gZ2V0VGltZXNGb3JBbGxBeGVzKCBjdXJ2ZXMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgdGltZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIC8vIGZpcnN0IGpvaW4gdG9nZXRoZXIgdGhlIHRpbWVzIGZvciBlYWNoIGF4aXMsIGlmIGRlZmluZWRcbiAgICAgICAgICAgIGlmICggY3VydmVzLnggIT09IHVuZGVmaW5lZCApIHRpbWVzID0gdGltZXMuY29uY2F0KCBjdXJ2ZXMueC50aW1lcyApO1xuICAgICAgICAgICAgaWYgKCBjdXJ2ZXMueSAhPT0gdW5kZWZpbmVkICkgdGltZXMgPSB0aW1lcy5jb25jYXQoIGN1cnZlcy55LnRpbWVzICk7XG4gICAgICAgICAgICBpZiAoIGN1cnZlcy56ICE9PSB1bmRlZmluZWQgKSB0aW1lcyA9IHRpbWVzLmNvbmNhdCggY3VydmVzLnoudGltZXMgKTtcbiAgICBcbiAgICAgICAgICAgIC8vIHRoZW4gc29ydCB0aGVtIGFuZCByZW1vdmUgZHVwbGljYXRlc1xuICAgICAgICAgICAgdGltZXMgPSB0aW1lcy5zb3J0KCBmdW5jdGlvbiAoIGEsIGIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIFxuICAgICAgICAgICAgfSApLmZpbHRlciggZnVuY3Rpb24gKCBlbGVtLCBpbmRleCwgYXJyYXkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2YoIGVsZW0gKSA9PSBpbmRleDtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aW1lcztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBwYXJzZSBhbiBGQlggZmlsZSBpbiBBU0NJSSBmb3JtYXRcbiAgICAgICAgZnVuY3Rpb24gVGV4dFBhcnNlcigpIHt9XG4gICAgXG4gICAgICAgIE9iamVjdC5hc3NpZ24oIFRleHRQYXJzZXIucHJvdG90eXBlLCB7XG4gICAgXG4gICAgICAgICAgICBnZXRQcmV2Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGVTdGFja1sgdGhpcy5jdXJyZW50SW5kZW50IC0gMiBdO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEN1cnJlbnROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZVN0YWNrWyB0aGlzLmN1cnJlbnRJbmRlbnQgLSAxIF07XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0Q3VycmVudFByb3A6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50UHJvcDtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBwdXNoU3RhY2s6IGZ1bmN0aW9uICggbm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFjay5wdXNoKCBub2RlICk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5kZW50ICs9IDE7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgcG9wU3RhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRlbnQgLT0gMTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBzZXRDdXJyZW50UHJvcDogZnVuY3Rpb24gKCB2YWwsIG5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UHJvcCA9IHZhbDtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQcm9wTmFtZSA9IG5hbWU7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICggdGV4dCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsTm9kZXMgPSBuZXcgRkJYVHJlZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UHJvcCA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFByb3BOYW1lID0gJyc7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzcGxpdCA9IHRleHQuc3BsaXQoICdcXG4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgc3BsaXQuZm9yRWFjaCggZnVuY3Rpb24gKCBsaW5lLCBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hDb21tZW50ID0gbGluZS5tYXRjaCggL15bXFxzXFx0XSo7LyApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hFbXB0eSA9IGxpbmUubWF0Y2goIC9eW1xcc1xcdF0qJC8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRjaENvbW1lbnQgfHwgbWF0Y2hFbXB0eSApIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoQmVnaW5uaW5nID0gbGluZS5tYXRjaCggJ15cXFxcdHsnICsgc2VsZi5jdXJyZW50SW5kZW50ICsgJ30oXFxcXHcrKTooLiopeycsICcnICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaFByb3BlcnR5ID0gbGluZS5tYXRjaCggJ15cXFxcdHsnICsgKCBzZWxmLmN1cnJlbnRJbmRlbnQgKSArICd9KFxcXFx3Kyk6W1xcXFxzXFxcXHRcXFxcclxcXFxuXSguKiknICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaEVuZCA9IGxpbmUubWF0Y2goICdeXFxcXHR7JyArICggc2VsZi5jdXJyZW50SW5kZW50IC0gMSApICsgJ319JyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGNoQmVnaW5uaW5nICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJzZU5vZGVCZWdpbiggbGluZSwgbWF0Y2hCZWdpbm5pbmcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0Y2hQcm9wZXJ0eSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGFyc2VOb2RlUHJvcGVydHkoIGxpbmUsIG1hdGNoUHJvcGVydHksIHNwbGl0WyArKyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0Y2hFbmQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBvcFN0YWNrKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGxpbmUubWF0Y2goIC9eW15cXHNcXHR9XS8gKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxhcmdlIGFycmF5cyBhcmUgc3BsaXQgb3ZlciBtdWx0aXBsZSBsaW5lcyB0ZXJtaW5hdGVkIHdpdGggYSAnLCcgY2hhcmFjdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGVuY291bnRlcmVkIHRoZSBsaW5lIG5lZWRzIHRvIGJlIGpvaW5lZCB0byB0aGUgcHJldmlvdXMgbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJzZU5vZGVQcm9wZXJ0eUNvbnRpbnVlZCggbGluZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbE5vZGVzO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBhcnNlTm9kZUJlZ2luOiBmdW5jdGlvbiAoIGxpbmUsIHByb3BlcnR5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub2RlTmFtZSA9IHByb3BlcnR5WyAxIF0udHJpbSgpLnJlcGxhY2UoIC9eXCIvLCAnJyApLnJlcGxhY2UoIC9cIiQvLCAnJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub2RlQXR0cnMgPSBwcm9wZXJ0eVsgMiBdLnNwbGl0KCAnLCcgKS5tYXAoIGZ1bmN0aW9uICggYXR0ciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dHIudHJpbSgpLnJlcGxhY2UoIC9eXCIvLCAnJyApLnJlcGxhY2UoIC9cIiQvLCAnJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHsgbmFtZTogbm9kZU5hbWUgfTtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLnBhcnNlTm9kZUF0dHIoIG5vZGVBdHRycyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0Q3VycmVudE5vZGUoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBhIHRvcCBub2RlXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmN1cnJlbnRJbmRlbnQgPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsTm9kZXMuYWRkKCBub2RlTmFtZSwgbm9kZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGEgc3Vibm9kZVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3Vibm9kZSBhbHJlYWR5IGV4aXN0cywgYXBwZW5kIGl0XG4gICAgICAgICAgICAgICAgICAgIGlmICggbm9kZU5hbWUgaW4gY3VycmVudE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBQb3NlIG5lZWRzIFBvc2VOb2RlcyBhcyBhbiBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlTmFtZSA9PT0gJ1Bvc2VOb2RlJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5Qb3NlTm9kZS5wdXNoKCBub2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXS5pZCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlWyBub2RlTmFtZSBdID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGVbIG5vZGVOYW1lIF1bIGN1cnJlbnROb2RlWyBub2RlTmFtZSBdLmlkIF0gPSBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggYXR0cnMuaWQgIT09ICcnICkgY3VycmVudE5vZGVbIG5vZGVOYW1lIF1bIGF0dHJzLmlkIF0gPSBub2RlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXR0cnMuaWQgPT09ICdudW1iZXInICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGVbIG5vZGVOYW1lIF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlWyBub2RlTmFtZSBdWyBhdHRycy5pZCBdID0gbm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbm9kZU5hbWUgIT09ICdQcm9wZXJ0aWVzNzAnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlTmFtZSA9PT0gJ1Bvc2VOb2RlJyApXHRjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXSA9IFsgbm9kZSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXSA9IG5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgYXR0cnMuaWQgPT09ICdudW1iZXInICkgbm9kZS5pZCA9IGF0dHJzLmlkO1xuICAgICAgICAgICAgICAgIGlmICggYXR0cnMubmFtZSAhPT0gJycgKSBub2RlLmF0dHJOYW1lID0gYXR0cnMubmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHJzLnR5cGUgIT09ICcnICkgbm9kZS5hdHRyVHlwZSA9IGF0dHJzLnR5cGU7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoU3RhY2soIG5vZGUgKTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBwYXJzZU5vZGVBdHRyOiBmdW5jdGlvbiAoIGF0dHJzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBpZCA9IGF0dHJzWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBhdHRyc1sgMCBdICE9PSAnJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBwYXJzZUludCggYXR0cnNbIDAgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGlzTmFOKCBpZCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBhdHRyc1sgMCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gJycsIHR5cGUgPSAnJztcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHJzLmxlbmd0aCA+IDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBhdHRyc1sgMSBdLnJlcGxhY2UoIC9eKFxcdyspOjovLCAnJyApO1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gYXR0cnNbIDIgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgaWQ6IGlkLCBuYW1lOiBuYW1lLCB0eXBlOiB0eXBlIH07XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgcGFyc2VOb2RlUHJvcGVydHk6IGZ1bmN0aW9uICggbGluZSwgcHJvcGVydHksIGNvbnRlbnRMaW5lICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHByb3BlcnR5WyAxIF0ucmVwbGFjZSggL15cIi8sICcnICkucmVwbGFjZSggL1wiJC8sICcnICkudHJpbSgpO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wZXJ0eVsgMiBdLnJlcGxhY2UoIC9eXCIvLCAnJyApLnJlcGxhY2UoIC9cIiQvLCAnJyApLnRyaW0oKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBmb3Igc3BlY2lhbCBjYXNlOiBiYXNlNjQgaW1hZ2UgZGF0YSBmb2xsb3dzIFwiQ29udGVudDogLFwiIGxpbmVcbiAgICAgICAgICAgICAgICAvL1x0Q29udGVudDogLFxuICAgICAgICAgICAgICAgIC8vXHQgXCIvOWovNFJEYVJYaHBaZ0FBVFUwQS4uLlwiXG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wTmFtZSA9PT0gJ0NvbnRlbnQnICYmIHByb3BWYWx1ZSA9PT0gJywnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBjb250ZW50TGluZS5yZXBsYWNlKCAvXCIvZywgJycgKS5yZXBsYWNlKCAvLCQvLCAnJyApLnRyaW0oKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gdGhpcy5nZXRDdXJyZW50Tm9kZSgpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnROYW1lID0gY3VycmVudE5vZGUubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHBhcmVudE5hbWUgPT09ICdQcm9wZXJ0aWVzNzAnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlTm9kZVNwZWNpYWxQcm9wZXJ0eSggbGluZSwgcHJvcE5hbWUsIHByb3BWYWx1ZSApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIENvbm5lY3Rpb25zXG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wTmFtZSA9PT0gJ0MnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY29ublByb3BzID0gcHJvcFZhbHVlLnNwbGl0KCAnLCcgKS5zbGljZSggMSApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IHBhcnNlSW50KCBjb25uUHJvcHNbIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSBwYXJzZUludCggY29ublByb3BzWyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3QgPSBwcm9wVmFsdWUuc3BsaXQoICcsJyApLnNsaWNlKCAzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSByZXN0Lm1hcCggZnVuY3Rpb24gKCBlbGVtICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udHJpbSgpLnJlcGxhY2UoIC9eXCIvLCAnJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHByb3BOYW1lID0gJ2Nvbm5lY3Rpb25zJztcbiAgICAgICAgICAgICAgICAgICAgcHJvcFZhbHVlID0gWyBmcm9tLCB0byBdO1xuICAgICAgICAgICAgICAgICAgICBhcHBlbmQoIHByb3BWYWx1ZSwgcmVzdCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnROb2RlWyBwcm9wTmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZVsgcHJvcE5hbWUgXSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIE5vZGVcbiAgICAgICAgICAgICAgICBpZiAoIHByb3BOYW1lID09PSAnTm9kZScgKSBjdXJyZW50Tm9kZS5pZCA9IHByb3BWYWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjb25uZWN0aW9uc1xuICAgICAgICAgICAgICAgIGlmICggcHJvcE5hbWUgaW4gY3VycmVudE5vZGUgJiYgQXJyYXkuaXNBcnJheSggY3VycmVudE5vZGVbIHByb3BOYW1lIF0gKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGVbIHByb3BOYW1lIF0ucHVzaCggcHJvcFZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwcm9wTmFtZSAhPT0gJ2EnICkgY3VycmVudE5vZGVbIHByb3BOYW1lIF0gPSBwcm9wVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY3VycmVudE5vZGUuYSA9IHByb3BWYWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50UHJvcCggY3VycmVudE5vZGUsIHByb3BOYW1lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gY29udmVydCBzdHJpbmcgdG8gYXJyYXksIHVubGVzcyBpdCBlbmRzIGluICcsJyBpbiB3aGljaCBjYXNlIG1vcmUgd2lsbCBiZSBhZGRlZCB0byBpdFxuICAgICAgICAgICAgICAgIGlmICggcHJvcE5hbWUgPT09ICdhJyAmJiBwcm9wVmFsdWUuc2xpY2UoIC0gMSApICE9PSAnLCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLmEgPSBwYXJzZU51bWJlckFycmF5KCBwcm9wVmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgcGFyc2VOb2RlUHJvcGVydHlDb250aW51ZWQ6IGZ1bmN0aW9uICggbGluZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5vZGUgPSB0aGlzLmdldEN1cnJlbnROb2RlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUuYSArPSBsaW5lO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBsaW5lIGRvZXNuJ3QgZW5kIGluICcsJyB3ZSBoYXZlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICAgICAgICAvLyBzbyBjb252ZXJ0IHRoZSBzdHJpbmcgdG8gYW4gYXJyYXlcbiAgICAgICAgICAgICAgICBpZiAoIGxpbmUuc2xpY2UoIC0gMSApICE9PSAnLCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLmEgPSBwYXJzZU51bWJlckFycmF5KCBjdXJyZW50Tm9kZS5hICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIC8vIHBhcnNlIFwiUHJvcGVydHk3MFwiXG4gICAgICAgICAgICBwYXJzZU5vZGVTcGVjaWFsUHJvcGVydHk6IGZ1bmN0aW9uICggbGluZSwgcHJvcE5hbWUsIHByb3BWYWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBzcGxpdCB0aGlzXG4gICAgICAgICAgICAgICAgLy8gUDogXCJMY2wgU2NhbGluZ1wiLCBcIkxjbCBTY2FsaW5nXCIsIFwiXCIsIFwiQVwiLDEsMSwxXG4gICAgICAgICAgICAgICAgLy8gaW50byBhcnJheSBsaWtlIGJlbG93XG4gICAgICAgICAgICAgICAgLy8gW1wiTGNsIFNjYWxpbmdcIiwgXCJMY2wgU2NhbGluZ1wiLCBcIlwiLCBcIkFcIiwgXCIxLDEsMVwiIF1cbiAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSBwcm9wVmFsdWUuc3BsaXQoICdcIiwnICkubWFwKCBmdW5jdGlvbiAoIHByb3AgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wLnRyaW0oKS5yZXBsYWNlKCAvXlxcXCIvLCAnJyApLnJlcGxhY2UoIC9cXHMvLCAnXycgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGlubmVyUHJvcE5hbWUgPSBwcm9wc1sgMCBdO1xuICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BUeXBlMSA9IHByb3BzWyAxIF07XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyUHJvcFR5cGUyID0gcHJvcHNbIDIgXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJQcm9wRmxhZyA9IHByb3BzWyAzIF07XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyUHJvcFZhbHVlID0gcHJvcHNbIDQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjYXN0IHZhbHVlcyB3aGVyZSBuZWVkZWQsIG90aGVyd2lzZSBsZWF2ZSBhcyBzdHJpbmdzXG4gICAgICAgICAgICAgICAgc3dpdGNoICggaW5uZXJQcm9wVHlwZTEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VudW0nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdib29sJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVUxvbmdMb25nJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTnVtYmVyJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRmllbGRPZlZpZXcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJQcm9wVmFsdWUgPSBwYXJzZUZsb2F0KCBpbm5lclByb3BWYWx1ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29sb3JSR0InOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdWZWN0b3IzRCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xjbF9UcmFuc2xhdGlvbic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xjbF9Sb3RhdGlvbic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xjbF9TY2FsaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyUHJvcFZhbHVlID0gcGFyc2VOdW1iZXJBcnJheSggaW5uZXJQcm9wVmFsdWUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBDQVVUSU9OOiB0aGVzZSBwcm9wcyBtdXN0IGFwcGVuZCB0byBwYXJlbnQncyBwYXJlbnRcbiAgICAgICAgICAgICAgICB0aGlzLmdldFByZXZOb2RlKClbIGlubmVyUHJvcE5hbWUgXSA9IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBpbm5lclByb3BUeXBlMSxcbiAgICAgICAgICAgICAgICAgICAgJ3R5cGUyJzogaW5uZXJQcm9wVHlwZTIsXG4gICAgICAgICAgICAgICAgICAgICdmbGFnJzogaW5uZXJQcm9wRmxhZyxcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogaW5uZXJQcm9wVmFsdWVcbiAgICBcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFByb3AoIHRoaXMuZ2V0UHJldk5vZGUoKSwgaW5uZXJQcm9wTmFtZSApO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAvLyBQYXJzZSBhbiBGQlggZmlsZSBpbiBCaW5hcnkgZm9ybWF0XG4gICAgICAgIGZ1bmN0aW9uIEJpbmFyeVBhcnNlcigpIHt9XG4gICAgXG4gICAgICAgIE9iamVjdC5hc3NpZ24oIEJpbmFyeVBhcnNlci5wcm90b3R5cGUsIHtcbiAgICBcbiAgICAgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEJpbmFyeVJlYWRlciggYnVmZmVyICk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnNraXAoIDIzICk7IC8vIHNraXAgbWFnaWMgMjMgYnl0ZXNcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHJlYWRlci5nZXRVaW50MzIoKTtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ1RIUkVFLkZCWExvYWRlcjogRkJYIGJpbmFyeSB2ZXJzaW9uOiAnICsgdmVyc2lvbiApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhbGxOb2RlcyA9IG5ldyBGQlhUcmVlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgd2hpbGUgKCAhIHRoaXMuZW5kT2ZDb250ZW50KCByZWFkZXIgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlTm9kZSggcmVhZGVyLCB2ZXJzaW9uICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbm9kZSAhPT0gbnVsbCApIGFsbE5vZGVzLmFkZCggbm9kZS5uYW1lLCBub2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhbGxOb2RlcztcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAvLyBDaGVjayBpZiByZWFkZXIgaGFzIHJlYWNoZWQgdGhlIGVuZCBvZiBjb250ZW50LlxuICAgICAgICAgICAgZW5kT2ZDb250ZW50OiBmdW5jdGlvbiAoIHJlYWRlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBmb290ZXIgc2l6ZTogMTYwYnl0ZXMgKyAxNi1ieXRlIGFsaWdubWVudCBwYWRkaW5nXG4gICAgICAgICAgICAgICAgLy8gLSAxNmJ5dGVzOiBtYWdpY1xuICAgICAgICAgICAgICAgIC8vIC0gcGFkZGluZyB0aWwgMTYtYnl0ZSBhbGlnbm1lbnQgKGF0IGxlYXN0IDFieXRlPylcbiAgICAgICAgICAgICAgICAvL1x0KHNlZW1zIGxpa2Ugc29tZSBleHBvcnRlcnMgZW1iZWQgZml4ZWQgMTUgb3IgMTZieXRlcz8pXG4gICAgICAgICAgICAgICAgLy8gLSA0Ynl0ZXM6IG1hZ2ljXG4gICAgICAgICAgICAgICAgLy8gLSA0Ynl0ZXM6IHZlcnNpb25cbiAgICAgICAgICAgICAgICAvLyAtIDEyMGJ5dGVzOiB6ZXJvXG4gICAgICAgICAgICAgICAgLy8gLSAxNmJ5dGVzOiBtYWdpY1xuICAgICAgICAgICAgICAgIGlmICggcmVhZGVyLnNpemUoKSAlIDE2ID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCAoIHJlYWRlci5nZXRPZmZzZXQoKSArIDE2MCArIDE2ICkgJiB+IDB4ZiApID49IHJlYWRlci5zaXplKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRPZmZzZXQoKSArIDE2MCArIDE2ID49IHJlYWRlci5zaXplKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHBhcnNlIG5vZGVzIHVudGlsIHRoZSBlbmQgb2YgdGhlIGZpbGUgaXMgcmVhY2hlZFxuICAgICAgICAgICAgcGFyc2VOb2RlOiBmdW5jdGlvbiAoIHJlYWRlciwgdmVyc2lvbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIFRoZSBmaXJzdCB0aHJlZSBkYXRhIHNpemVzIGRlcGVuZHMgb24gdmVyc2lvbi5cbiAgICAgICAgICAgICAgICB2YXIgZW5kT2Zmc2V0ID0gKCB2ZXJzaW9uID49IDc1MDAgKSA/IHJlYWRlci5nZXRVaW50NjQoKSA6IHJlYWRlci5nZXRVaW50MzIoKTtcbiAgICAgICAgICAgICAgICB2YXIgbnVtUHJvcGVydGllcyA9ICggdmVyc2lvbiA+PSA3NTAwICkgPyByZWFkZXIuZ2V0VWludDY0KCkgOiByZWFkZXIuZ2V0VWludDMyKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gbm90ZTogZG8gbm90IHJlbW92ZSB0aGlzIGV2ZW4gaWYgeW91IGdldCBhIGxpbnRlciB3YXJuaW5nIGFzIGl0IG1vdmVzIHRoZSBidWZmZXIgZm9yd2FyZFxuICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eUxpc3RMZW4gPSAoIHZlcnNpb24gPj0gNzUwMCApID8gcmVhZGVyLmdldFVpbnQ2NCgpIDogcmVhZGVyLmdldFVpbnQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBuYW1lTGVuID0gcmVhZGVyLmdldFVpbnQ4KCk7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSByZWFkZXIuZ2V0U3RyaW5nKCBuYW1lTGVuICk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gUmVnYXJkcyB0aGlzIG5vZGUgYXMgTlVMTC1yZWNvcmQgaWYgZW5kT2Zmc2V0IGlzIHplcm9cbiAgICAgICAgICAgICAgICBpZiAoIGVuZE9mZnNldCA9PT0gMCApIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eUxpc3QgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBudW1Qcm9wZXJ0aWVzOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eUxpc3QucHVzaCggdGhpcy5wYXJzZVByb3BlcnR5KCByZWFkZXIgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBSZWdhcmRzIHRoZSBmaXJzdCB0aHJlZSBlbGVtZW50cyBpbiBwcm9wZXJ0eUxpc3QgYXMgaWQsIGF0dHJOYW1lLCBhbmQgYXR0clR5cGVcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBwcm9wZXJ0eUxpc3QubGVuZ3RoID4gMCA/IHByb3BlcnR5TGlzdFsgMCBdIDogJyc7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJOYW1lID0gcHJvcGVydHlMaXN0Lmxlbmd0aCA+IDEgPyBwcm9wZXJ0eUxpc3RbIDEgXSA6ICcnO1xuICAgICAgICAgICAgICAgIHZhciBhdHRyVHlwZSA9IHByb3BlcnR5TGlzdC5sZW5ndGggPiAyID8gcHJvcGVydHlMaXN0WyAyIF0gOiAnJztcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIG5vZGUgcmVwcmVzZW50cyBqdXN0IGEgc2luZ2xlIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgLy8gbGlrZSAobmFtZSwgMCkgc2V0IG9yIChuYW1lMiwgWzAsIDEsIDJdKSBzZXQgb2Yge25hbWU6IDAsIG5hbWUyOiBbMCwgMSwgMl19XG4gICAgICAgICAgICAgICAgbm9kZS5zaW5nbGVQcm9wZXJ0eSA9ICggbnVtUHJvcGVydGllcyA9PT0gMSAmJiByZWFkZXIuZ2V0T2Zmc2V0KCkgPT09IGVuZE9mZnNldCApID8gdHJ1ZSA6IGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgICAgIHdoaWxlICggZW5kT2Zmc2V0ID4gcmVhZGVyLmdldE9mZnNldCgpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3ViTm9kZSA9IHRoaXMucGFyc2VOb2RlKCByZWFkZXIsIHZlcnNpb24gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzdWJOb2RlICE9PSBudWxsICkgdGhpcy5wYXJzZVN1Yk5vZGUoIG5hbWUsIG5vZGUsIHN1Yk5vZGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbm9kZS5wcm9wZXJ0eUxpc3QgPSBwcm9wZXJ0eUxpc3Q7IC8vIHJhdyBwcm9wZXJ0eSBsaXN0IHVzZWQgYnkgcGFyZW50XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgaWQgPT09ICdudW1iZXInICkgbm9kZS5pZCA9IGlkO1xuICAgICAgICAgICAgICAgIGlmICggYXR0ck5hbWUgIT09ICcnICkgbm9kZS5hdHRyTmFtZSA9IGF0dHJOYW1lO1xuICAgICAgICAgICAgICAgIGlmICggYXR0clR5cGUgIT09ICcnICkgbm9kZS5hdHRyVHlwZSA9IGF0dHJUeXBlO1xuICAgICAgICAgICAgICAgIGlmICggbmFtZSAhPT0gJycgKSBub2RlLm5hbWUgPSBuYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBhcnNlU3ViTm9kZTogZnVuY3Rpb24gKCBuYW1lLCBub2RlLCBzdWJOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZTogY2hpbGQgbm9kZSBpcyBzaW5nbGUgcHJvcGVydHlcbiAgICAgICAgICAgICAgICBpZiAoIHN1Yk5vZGUuc2luZ2xlUHJvcGVydHkgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHN1Yk5vZGUucHJvcGVydHlMaXN0WyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbIHN1Yk5vZGUubmFtZSBdID0gc3ViTm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk5vZGUuYSA9IHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsgc3ViTm9kZS5uYW1lIF0gPSB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5hbWUgPT09ICdDb25uZWN0aW9ucycgJiYgc3ViTm9kZS5uYW1lID09PSAnQycgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzdWJOb2RlLnByb3BlcnR5TGlzdC5mb3JFYWNoKCBmdW5jdGlvbiAoIHByb3BlcnR5LCBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyc3QgQ29ubmVjdGlvbiBpcyBGQlggdHlwZSAoT08sIE9QLCBldGMuKS4gV2UnbGwgZGlzY2FyZCB0aGVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpICE9PSAwICkgYXJyYXkucHVzaCggcHJvcGVydHkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG5vZGUuY29ubmVjdGlvbnMgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuY29ubmVjdGlvbnMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBub2RlLmNvbm5lY3Rpb25zLnB1c2goIGFycmF5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc3ViTm9kZS5uYW1lID09PSAnUHJvcGVydGllczcwJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyggc3ViTm9kZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBrZXlzLmZvckVhY2goIGZ1bmN0aW9uICgga2V5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsga2V5IF0gPSBzdWJOb2RlWyBrZXkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5hbWUgPT09ICdQcm9wZXJ0aWVzNzAnICYmIHN1Yk5vZGUubmFtZSA9PT0gJ1AnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJQcm9wTmFtZSA9IHN1Yk5vZGUucHJvcGVydHlMaXN0WyAwIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BUeXBlMSA9IHN1Yk5vZGUucHJvcGVydHlMaXN0WyAxIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BUeXBlMiA9IHN1Yk5vZGUucHJvcGVydHlMaXN0WyAyIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BGbGFnID0gc3ViTm9kZS5wcm9wZXJ0eUxpc3RbIDMgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyUHJvcFZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGlubmVyUHJvcE5hbWUuaW5kZXhPZiggJ0xjbCAnICkgPT09IDAgKSBpbm5lclByb3BOYW1lID0gaW5uZXJQcm9wTmFtZS5yZXBsYWNlKCAnTGNsICcsICdMY2xfJyApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGlubmVyUHJvcFR5cGUxLmluZGV4T2YoICdMY2wgJyApID09PSAwICkgaW5uZXJQcm9wVHlwZTEgPSBpbm5lclByb3BUeXBlMS5yZXBsYWNlKCAnTGNsICcsICdMY2xfJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGlubmVyUHJvcFR5cGUxID09PSAnQ29sb3InIHx8IGlubmVyUHJvcFR5cGUxID09PSAnQ29sb3JSR0InIHx8IGlubmVyUHJvcFR5cGUxID09PSAnVmVjdG9yJyB8fCBpbm5lclByb3BUeXBlMSA9PT0gJ1ZlY3RvcjNEJyB8fCBpbm5lclByb3BUeXBlMS5pbmRleE9mKCAnTGNsXycgKSA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyUHJvcFZhbHVlID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk5vZGUucHJvcGVydHlMaXN0WyA0IF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTm9kZS5wcm9wZXJ0eUxpc3RbIDUgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJOb2RlLnByb3BlcnR5TGlzdFsgNiBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJQcm9wVmFsdWUgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgNCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBiZSBjb3BpZWQgdG8gcGFyZW50LCBzZWUgYWJvdmVcbiAgICAgICAgICAgICAgICAgICAgbm9kZVsgaW5uZXJQcm9wTmFtZSBdID0ge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBpbm5lclByb3BUeXBlMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlMic6IGlubmVyUHJvcFR5cGUyLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZsYWcnOiBpbm5lclByb3BGbGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogaW5uZXJQcm9wVmFsdWVcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBub2RlWyBzdWJOb2RlLm5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBzdWJOb2RlLmlkID09PSAnbnVtYmVyJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbIHN1Yk5vZGUubmFtZSBdID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWyBzdWJOb2RlLm5hbWUgXVsgc3ViTm9kZS5pZCBdID0gc3ViTm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbIHN1Yk5vZGUubmFtZSBdID0gc3ViTm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggc3ViTm9kZS5uYW1lID09PSAnUG9zZU5vZGUnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkoIG5vZGVbIHN1Yk5vZGUubmFtZSBdICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsgc3ViTm9kZS5uYW1lIF0gPSBbIG5vZGVbIHN1Yk5vZGUubmFtZSBdIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWyBzdWJOb2RlLm5hbWUgXS5wdXNoKCBzdWJOb2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5vZGVbIHN1Yk5vZGUubmFtZSBdWyBzdWJOb2RlLmlkIF0gPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbIHN1Yk5vZGUubmFtZSBdWyBzdWJOb2RlLmlkIF0gPSBzdWJOb2RlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBhcnNlUHJvcGVydHk6IGZ1bmN0aW9uICggcmVhZGVyICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gcmVhZGVyLmdldFN0cmluZyggMSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRCb29sZWFuKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRGbG9hdDY0KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRGbG9hdDMyKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0knOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRJbnQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0SW50NjQoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUic6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcmVhZGVyLmdldFVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRBcnJheUJ1ZmZlciggbGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJlYWRlci5nZXRVaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0U3RyaW5nKCBsZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLmdldEludDE2KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbCc6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXlMZW5ndGggPSByZWFkZXIuZ2V0VWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5jb2RpbmcgPSByZWFkZXIuZ2V0VWludDMyKCk7IC8vIDA6IG5vbi1jb21wcmVzc2VkLCAxOiBjb21wcmVzc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcHJlc3NlZExlbmd0aCA9IHJlYWRlci5nZXRVaW50MzIoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZW5jb2RpbmcgPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRCb29sZWFuQXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRGbG9hdDY0QXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRGbG9hdDMyQXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2knOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRJbnQzMkFycmF5KCBhcnJheUxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0SW50NjRBcnJheSggYXJyYXlMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHdpbmRvdy5abGliID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvciggJ1RIUkVFLkZCWExvYWRlcjogRXh0ZXJuYWwgbGlicmFyeSBJbmZsYXRlLm1pbi5qcyByZXF1aXJlZCwgb2J0YWluIG9yIGltcG9ydCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbWF5YS96bGliLmpzJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZmxhdGUgPSBuZXcgWmxpYi5JbmZsYXRlKCBuZXcgVWludDhBcnJheSggcmVhZGVyLmdldEFycmF5QnVmZmVyKCBjb21wcmVzc2VkTGVuZ3RoICkgKSApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZGVyMiA9IG5ldyBCaW5hcnlSZWFkZXIoIGluZmxhdGUuZGVjb21wcmVzcygpLmJ1ZmZlciApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlcjIuZ2V0Qm9vbGVhbkFycmF5KCBhcnJheUxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyMi5nZXRGbG9hdDY0QXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIyLmdldEZsb2F0MzJBcnJheSggYXJyYXlMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlcjIuZ2V0SW50MzJBcnJheSggYXJyYXlMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlcjIuZ2V0SW50NjRBcnJheSggYXJyYXlMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkZCWExvYWRlcjogVW5rbm93biBwcm9wZXJ0eSB0eXBlICcgKyB0eXBlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9ICk7XG4gICAgXG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIEJpbmFyeVJlYWRlciggYnVmZmVyLCBsaXR0bGVFbmRpYW4gKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLmR2ID0gbmV3IERhdGFWaWV3KCBidWZmZXIgKTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHRoaXMubGl0dGxlRW5kaWFuID0gKCBsaXR0bGVFbmRpYW4gIT09IHVuZGVmaW5lZCApID8gbGl0dGxlRW5kaWFuIDogdHJ1ZTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBPYmplY3QuYXNzaWduKCBCaW5hcnlSZWFkZXIucHJvdG90eXBlLCB7XG4gICAgXG4gICAgICAgICAgICBnZXRPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQ7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgc2l6ZTogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmR2LmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHNraXA6IGZ1bmN0aW9uICggbGVuZ3RoICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAvLyBzZWVtcyBsaWtlIHRydWUvZmFsc2UgcmVwcmVzZW50YXRpb24gZGVwZW5kcyBvbiBleHBvcnRlci5cbiAgICAgICAgICAgIC8vIHRydWU6IDEgb3IgJ1knKD0weDU5KSwgZmFsc2U6IDAgb3IgJ1QnKD0weDU0KVxuICAgICAgICAgICAgLy8gdGhlbiBzZWVzIExTQi5cbiAgICAgICAgICAgIGdldEJvb2xlYW46IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gKCB0aGlzLmdldFVpbnQ4KCkgJiAxICkgPT09IDE7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0Qm9vbGVhbkFycmF5OiBmdW5jdGlvbiAoIHNpemUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaXplOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBhLnB1c2goIHRoaXMuZ2V0Qm9vbGVhbigpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldFVpbnQ4OiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5kdi5nZXRVaW50OCggdGhpcy5vZmZzZXQgKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRJbnQxNjogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZHYuZ2V0SW50MTYoIHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiApO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEludDMyOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5kdi5nZXRJbnQzMiggdGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuICk7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0SW50MzJBcnJheTogZnVuY3Rpb24gKCBzaXplICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKCB0aGlzLmdldEludDMyKCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0VWludDMyOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5kdi5nZXRVaW50MzIoIHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiApO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIC8vIEphdmFTY3JpcHQgZG9lc24ndCBzdXBwb3J0IDY0LWJpdCBpbnRlZ2VyIHNvIGNhbGN1bGF0ZSB0aGlzIGhlcmVcbiAgICAgICAgICAgIC8vIDEgPDwgMzIgd2lsbCByZXR1cm4gMSBzbyB1c2luZyBtdWx0aXBseSBvcGVyYXRpb24gaW5zdGVhZCBoZXJlLlxuICAgICAgICAgICAgLy8gVGhlcmUncyBhIHBvc3NpYmlsaXR5IHRoYXQgdGhpcyBtZXRob2QgcmV0dXJucyB3cm9uZyB2YWx1ZSBpZiB0aGUgdmFsdWVcbiAgICAgICAgICAgIC8vIGlzIG91dCBvZiB0aGUgcmFuZ2UgYmV0d2VlbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiBhbmQgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIuXG4gICAgICAgICAgICAvLyBUT0RPOiBzYWZlbHkgaGFuZGxlIDY0LWJpdCBpbnRlZ2VyXG4gICAgICAgICAgICBnZXRJbnQ2NDogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBsb3csIGhpZ2g7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmxpdHRsZUVuZGlhbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbG93ID0gdGhpcy5nZXRVaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgaGlnaCA9IHRoaXMuZ2V0VWludDMyKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaGlnaCA9IHRoaXMuZ2V0VWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGxvdyA9IHRoaXMuZ2V0VWludDMyKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmICggaGlnaCAmIDB4ODAwMDAwMDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSB+IGhpZ2ggJiAweEZGRkZGRkZGO1xuICAgICAgICAgICAgICAgICAgICBsb3cgPSB+IGxvdyAmIDB4RkZGRkZGRkY7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbG93ID09PSAweEZGRkZGRkZGICkgaGlnaCA9ICggaGlnaCArIDEgKSAmIDB4RkZGRkZGRkY7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxvdyA9ICggbG93ICsgMSApICYgMHhGRkZGRkZGRjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0gKCBoaWdoICogMHgxMDAwMDAwMDAgKyBsb3cgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhpZ2ggKiAweDEwMDAwMDAwMCArIGxvdztcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRJbnQ2NEFycmF5OiBmdW5jdGlvbiAoIHNpemUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaXplOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBhLnB1c2goIHRoaXMuZ2V0SW50NjQoKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAvLyBOb3RlOiBzZWUgZ2V0SW50NjQoKSBjb21tZW50XG4gICAgICAgICAgICBnZXRVaW50NjQ6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbG93LCBoaWdoO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5saXR0bGVFbmRpYW4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxvdyA9IHRoaXMuZ2V0VWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSB0aGlzLmdldFVpbnQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSB0aGlzLmdldFVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBsb3cgPSB0aGlzLmdldFVpbnQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gaGlnaCAqIDB4MTAwMDAwMDAwICsgbG93O1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmR2LmdldEZsb2F0MzIoIHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiApO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEZsb2F0MzJBcnJheTogZnVuY3Rpb24gKCBzaXplICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKCB0aGlzLmdldEZsb2F0MzIoKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5kdi5nZXRGbG9hdDY0KCB0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4gKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRGbG9hdDY0QXJyYXk6IGZ1bmN0aW9uICggc2l6ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNpemU7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGEucHVzaCggdGhpcy5nZXRGbG9hdDY0KCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0QXJyYXlCdWZmZXI6IGZ1bmN0aW9uICggc2l6ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmR2LmJ1ZmZlci5zbGljZSggdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgc2l6ZSApO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IHNpemU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldFN0cmluZzogZnVuY3Rpb24gKCBzaXplICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhID0gbmV3IFVpbnQ4QXJyYXkoIHNpemUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaXplOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBhWyBpIF0gPSB0aGlzLmdldFVpbnQ4KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBudWxsQnl0ZSA9IGEuaW5kZXhPZiggMCApO1xuICAgICAgICAgICAgICAgIGlmICggbnVsbEJ5dGUgPj0gMCApIGEgPSBhLnNsaWNlKCAwLCBudWxsQnl0ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBUSFJFRS5Mb2FkZXJVdGlscy5kZWNvZGVUZXh0KCBhICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgLy8gRkJYVHJlZSBob2xkcyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBGQlggZGF0YSwgcmV0dXJuZWQgYnkgdGhlIFRleHRQYXJzZXIgKCBGQlggQVNDSUkgZm9ybWF0KVxuICAgICAgICAvLyBhbmQgQmluYXJ5UGFyc2VyKCBGQlggQmluYXJ5IGZvcm1hdClcbiAgICAgICAgZnVuY3Rpb24gRkJYVHJlZSgpIHt9XG4gICAgXG4gICAgICAgIE9iamVjdC5hc3NpZ24oIEZCWFRyZWUucHJvdG90eXBlLCB7XG4gICAgXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uICgga2V5LCB2YWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpc1sga2V5IF0gPSB2YWw7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGlzRmJ4Rm9ybWF0QmluYXJ5KCBidWZmZXIgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgQ09SUkVDVCA9ICdLYXlkYXJhIEZCWCBCaW5hcnkgIFxcMCc7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGggPj0gQ09SUkVDVC5sZW5ndGggJiYgQ09SUkVDVCA9PT0gY29udmVydEFycmF5QnVmZmVyVG9TdHJpbmcoIGJ1ZmZlciwgMCwgQ09SUkVDVC5sZW5ndGggKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBpc0ZieEZvcm1hdEFTQ0lJKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIENPUlJFQ1QgPSBbICdLJywgJ2EnLCAneScsICdkJywgJ2EnLCAncicsICdhJywgJ1xcXFwnLCAnRicsICdCJywgJ1gnLCAnXFxcXCcsICdCJywgJ2knLCAnbicsICdhJywgJ3InLCAneScsICdcXFxcJywgJ1xcXFwnIF07XG4gICAgXG4gICAgICAgICAgICB2YXIgY3Vyc29yID0gMDtcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlYWQoIG9mZnNldCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGV4dFsgb2Zmc2V0IC0gMSBdO1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKCBjdXJzb3IgKyBvZmZzZXQgKTtcbiAgICAgICAgICAgICAgICBjdXJzb3IgKys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IENPUlJFQ1QubGVuZ3RoOyArKyBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBudW0gPSByZWFkKCAxICk7XG4gICAgICAgICAgICAgICAgaWYgKCBudW0gPT09IENPUlJFQ1RbIGkgXSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGdldEZieFZlcnNpb24oIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgdmVyc2lvblJlZ0V4cCA9IC9GQlhWZXJzaW9uOiAoXFxkKykvO1xuICAgICAgICAgICAgdmFyIG1hdGNoID0gdGV4dC5tYXRjaCggdmVyc2lvblJlZ0V4cCApO1xuICAgICAgICAgICAgaWYgKCBtYXRjaCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHBhcnNlSW50KCBtYXRjaFsgMSBdICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5GQlhMb2FkZXI6IENhbm5vdCBmaW5kIHRoZSB2ZXJzaW9uIG51bWJlciBmb3IgdGhlIGZpbGUgZ2l2ZW4uJyApO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIENvbnZlcnRzIEZCWCB0aWNrcyBpbnRvIHJlYWwgdGltZSBzZWNvbmRzLlxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0RkJYVGltZVRvU2Vjb25kcyggdGltZSApIHtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aW1lIC8gNDYxODYxNTgwMDA7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgLy8gUGFyc2VzIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIG51bWJlcnMgYW5kIHJldHVybnMgdGhlbSBhbiBhcnJheS5cbiAgICAgICAgLy8gVXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBUZXh0UGFyc2VyXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlTnVtYmVyQXJyYXkoIHZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGFycmF5ID0gdmFsdWUuc3BsaXQoICcsJyApLm1hcCggZnVuY3Rpb24gKCB2YWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoIHZhbCApO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRBcnJheUJ1ZmZlclRvU3RyaW5nKCBidWZmZXIsIGZyb20sIHRvICkge1xuICAgIFxuICAgICAgICAgICAgaWYgKCBmcm9tID09PSB1bmRlZmluZWQgKSBmcm9tID0gMDtcbiAgICAgICAgICAgIGlmICggdG8gPT09IHVuZGVmaW5lZCApIHRvID0gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gVEhSRUUuTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggbmV3IFVpbnQ4QXJyYXkoIGJ1ZmZlciwgZnJvbSwgdG8gKSApO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGFwcGVuZCggYSwgYiApIHtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaiA9IGEubGVuZ3RoLCBsID0gYi5sZW5ndGg7IGkgPCBsOyBpICsrLCBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGFbIGogXSA9IGJbIGkgXTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBzbGljZSggYSwgYiwgZnJvbSwgdG8gKSB7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IGZyb20sIGogPSAwOyBpIDwgdG87IGkgKyssIGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgYVsgaiBdID0gYlsgaSBdO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICB9ICkoKTsiLCIvKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cblRIUkVFLkNvbGxhZGFMb2FkZXIgPSBmdW5jdGlvbiAoIG1hbmFnZXIgKSB7XG4gICAgXG4gICAgICAgIHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuICAgIFxuICAgIH07XG4gICAgXG4gICAgVEhSRUUuQ29sbGFkYUxvYWRlci5wcm90b3R5cGUgPSB7XG4gICAgXG4gICAgICAgIGNvbnN0cnVjdG9yOiBUSFJFRS5Db2xsYWRhTG9hZGVyLFxuICAgIFxuICAgICAgICBjcm9zc09yaWdpbjogJ0Fub255bW91cycsXG4gICAgXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgIFxuICAgICAgICAgICAgdmFyIHBhdGggPSBzY29wZS5wYXRoID09PSB1bmRlZmluZWQgPyBUSFJFRS5Mb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiBzY29wZS5wYXRoO1xuICAgIFxuICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG4gICAgICAgICAgICBsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgb25Mb2FkKCBzY29wZS5wYXJzZSggdGV4dCwgcGF0aCApICk7XG4gICAgXG4gICAgICAgICAgICB9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG4gICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLnBhdGggPSB2YWx1ZTtcbiAgICBcbiAgICAgICAgfSxcbiAgICBcbiAgICAgICAgb3B0aW9uczoge1xuICAgIFxuICAgICAgICAgICAgc2V0IGNvbnZlcnRVcEF4aXMoIHZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IG9wdGlvbnMuY29udmVydFVwQXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVwIGF4aXMgaXMgY29udmVydGVkIGF1dG9tYXRpY2FsbHkuJyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9LFxuICAgIFxuICAgICAgICBzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgIHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcbiAgICBcbiAgICAgICAgfSxcbiAgICBcbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICggdGV4dCwgcGF0aCApIHtcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdOYW1lKCB4bWwsIG5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gTm9uIHJlY3Vyc2l2ZSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSAuLi5cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlcyA9IHhtbC5jaGlsZE5vZGVzO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVOYW1lID09PSBuYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkucHVzaCggY2hpbGQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVN0cmluZ3MoIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0ZXh0Lmxlbmd0aCA9PT0gMCApIHJldHVybiBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSB0ZXh0LnRyaW0oKS5zcGxpdCggL1xccysvICk7XG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KCBwYXJ0cy5sZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBhcnJheVsgaSBdID0gcGFydHNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VGbG9hdHMoIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0ZXh0Lmxlbmd0aCA9PT0gMCApIHJldHVybiBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSB0ZXh0LnRyaW0oKS5zcGxpdCggL1xccysvICk7XG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KCBwYXJ0cy5sZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBhcnJheVsgaSBdID0gcGFyc2VGbG9hdCggcGFydHNbIGkgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUludHMoIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0ZXh0Lmxlbmd0aCA9PT0gMCApIHJldHVybiBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSB0ZXh0LnRyaW0oKS5zcGxpdCggL1xccysvICk7XG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KCBwYXJ0cy5sZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBhcnJheVsgaSBdID0gcGFyc2VJbnQoIHBhcnRzWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VJZCggdGV4dCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoIDEgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlSWQoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0aHJlZV9kZWZhdWx0XycgKyAoIGNvdW50ICsrICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBpc0VtcHR5KCBvYmplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCBvYmplY3QgKS5sZW5ndGggPT09IDA7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBhc3NldFxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VBc3NldCggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQ6IHBhcnNlQXNzZXRVbml0KCBnZXRFbGVtZW50c0J5VGFnTmFtZSggeG1sLCAndW5pdCcgKVsgMCBdICksXG4gICAgICAgICAgICAgICAgICAgIHVwQXhpczogcGFyc2VBc3NldFVwQXhpcyggZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHhtbCwgJ3VwX2F4aXMnIClbIDAgXSApXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQXNzZXRVbml0KCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHhtbCAhPT0gdW5kZWZpbmVkID8gcGFyc2VGbG9hdCggeG1sLmdldEF0dHJpYnV0ZSggJ21ldGVyJyApICkgOiAxO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VBc3NldFVwQXhpcyggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB4bWwgIT09IHVuZGVmaW5lZCA/IHhtbC50ZXh0Q29udGVudCA6ICdZX1VQJztcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGxpYnJhcnlcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlTGlicmFyeSggeG1sLCBsaWJyYXJ5TmFtZSwgbm9kZU5hbWUsIHBhcnNlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbGlicmFyeSA9IGdldEVsZW1lbnRzQnlUYWdOYW1lKCB4bWwsIGxpYnJhcnlOYW1lIClbIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGxpYnJhcnkgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZ2V0RWxlbWVudHNCeVRhZ05hbWUoIGxpYnJhcnksIG5vZGVOYW1lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlciggZWxlbWVudHNbIGkgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRMaWJyYXJ5KCBkYXRhLCBidWlsZGVyICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBuYW1lIGluIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBkYXRhWyBuYW1lIF07XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5idWlsZCA9IGJ1aWxkZXIoIGRhdGFbIG5hbWUgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGdldFxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QnVpbGQoIGRhdGEsIGJ1aWxkZXIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhLmJ1aWxkICE9PSB1bmRlZmluZWQgKSByZXR1cm4gZGF0YS5idWlsZDtcbiAgICBcbiAgICAgICAgICAgICAgICBkYXRhLmJ1aWxkID0gYnVpbGRlciggZGF0YSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gYW5pbWF0aW9uXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUFuaW1hdGlvbiggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlcnM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsczoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoICdpZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNvdXJjZXNbIGlkIF0gPSBwYXJzZVNvdXJjZSggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NhbXBsZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY2hpbGQuZ2V0QXR0cmlidXRlKCAnaWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zYW1wbGVyc1sgaWQgXSA9IHBhcnNlQW5pbWF0aW9uU2FtcGxlciggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYW5uZWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY2hpbGQuZ2V0QXR0cmlidXRlKCAndGFyZ2V0JyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY2hhbm5lbHNbIGlkIF0gPSBwYXJzZUFuaW1hdGlvbkNoYW5uZWwoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBjaGlsZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkuYW5pbWF0aW9uc1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRpb25TYW1wbGVyKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0czoge30sXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHBhcnNlSWQoIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NvdXJjZScgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW1hbnRpYyA9IGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NlbWFudGljJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaW5wdXRzWyBzZW1hbnRpYyBdID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUFuaW1hdGlvbkNoYW5uZWwoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB4bWwuZ2V0QXR0cmlidXRlKCAndGFyZ2V0JyApO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHBhcnNpbmcgU0lEIEFkZHJlc3NpbmcgU3ludGF4XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gdGFyZ2V0LnNwbGl0KCAnLycgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHZhciBzaWQgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIHNlbGVjdGlvbiBzeW50YXhcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXlTeW50YXggPSAoIHNpZC5pbmRleE9mKCAnKCcgKSAhPT0gLSAxICk7XG4gICAgICAgICAgICAgICAgdmFyIG1lbWJlclN5bnRheCA9ICggc2lkLmluZGV4T2YoICcuJyApICE9PSAtIDEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG1lbWJlclN5bnRheCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gIG1lbWJlciBzZWxlY3Rpb24gYWNjZXNzXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzID0gc2lkLnNwbGl0KCAnLicgKTtcbiAgICAgICAgICAgICAgICAgICAgc2lkID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tZW1iZXIgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGFycmF5U3ludGF4ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhcnJheS1hY2Nlc3Mgc3ludGF4LiBjYW4gYmUgdXNlZCB0byBleHByZXNzIGZpZWxkcyBpbiBvbmUtZGltZW5zaW9uYWwgdmVjdG9ycyBvciB0d28tZGltZW5zaW9uYWwgbWF0cmljZXMuXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRpY2VzID0gc2lkLnNwbGl0KCAnKCcgKTtcbiAgICAgICAgICAgICAgICAgICAgc2lkID0gaW5kaWNlcy5zaGlmdCgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGljZXNbIGkgXSA9IHBhcnNlSW50KCBpbmRpY2VzWyBpIF0ucmVwbGFjZSggL1xcKS8sICcnICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmluZGljZXMgPSBpbmRpY2VzO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBkYXRhLmlkID0gaWQ7XG4gICAgICAgICAgICAgICAgZGF0YS5zaWQgPSBzaWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgZGF0YS5hcnJheVN5bnRheCA9IGFycmF5U3ludGF4O1xuICAgICAgICAgICAgICAgIGRhdGEubWVtYmVyU3ludGF4ID0gbWVtYmVyU3ludGF4O1xuICAgIFxuICAgICAgICAgICAgICAgIGRhdGEuc2FtcGxlciA9IHBhcnNlSWQoIHhtbC5nZXRBdHRyaWJ1dGUoICdzb3VyY2UnICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkQW5pbWF0aW9uKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0cmFja3MgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbHMgPSBkYXRhLmNoYW5uZWxzO1xuICAgICAgICAgICAgICAgIHZhciBzYW1wbGVycyA9IGRhdGEuc2FtcGxlcnM7XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZXMgPSBkYXRhLnNvdXJjZXM7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIHRhcmdldCBpbiBjaGFubmVscyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGFubmVscy5oYXNPd25Qcm9wZXJ0eSggdGFyZ2V0ICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbCA9IGNoYW5uZWxzWyB0YXJnZXQgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzYW1wbGVyID0gc2FtcGxlcnNbIGNoYW5uZWwuc2FtcGxlciBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0SWQgPSBzYW1wbGVyLmlucHV0cy5JTlBVVDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXRJZCA9IHNhbXBsZXIuaW5wdXRzLk9VVFBVVDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dFNvdXJjZSA9IHNvdXJjZXNbIGlucHV0SWQgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXRTb3VyY2UgPSBzb3VyY2VzWyBvdXRwdXRJZCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IGJ1aWxkQW5pbWF0aW9uQ2hhbm5lbCggY2hhbm5lbCwgaW5wdXRTb3VyY2UsIG91dHB1dFNvdXJjZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlS2V5ZnJhbWVUcmFja3MoIGFuaW1hdGlvbiwgdHJhY2tzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrcztcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFuaW1hdGlvbiggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1aWxkKCBsaWJyYXJ5LmFuaW1hdGlvbnNbIGlkIF0sIGJ1aWxkQW5pbWF0aW9uICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEFuaW1hdGlvbkNoYW5uZWwoIGNoYW5uZWwsIGlucHV0U291cmNlLCBvdXRwdXRTb3VyY2UgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBsaWJyYXJ5Lm5vZGVzWyBjaGFubmVsLmlkIF07XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdDNEID0gZ2V0Tm9kZSggbm9kZS5pZCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBub2RlLnRyYW5zZm9ybXNbIGNoYW5uZWwuc2lkIF07XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRNYXRyaXggPSBub2RlLm1hdHJpeC5jbG9uZSgpLnRyYW5zcG9zZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0aW1lLCBzdHJpZGU7XG4gICAgICAgICAgICAgICAgdmFyIGksIGlsLCBqLCBqbDtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb2xsYWRhIHNwZWMgYWxsb3dzIHRoZSBhbmltYXRpb24gb2YgZGF0YSBpbiB2YXJpb3VzIHdheXMuXG4gICAgICAgICAgICAgICAgLy8gZGVwZW5kaW5nIG9uIHRoZSB0cmFuc2Zvcm0gdHlwZSAobWF0cml4LCB0cmFuc2xhdGUsIHJvdGF0ZSwgc2NhbGUpLCB3ZSBleGVjdXRlIGRpZmZlcmVudCBsb2dpY1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIHRyYW5zZm9ybSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwLCBpbCA9IGlucHV0U291cmNlLmFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBpbnB1dFNvdXJjZS5hcnJheVsgaSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlkZSA9IGkgKiBvdXRwdXRTb3VyY2Uuc3RyaWRlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGF0YVsgdGltZSBdID09PSB1bmRlZmluZWQgKSBkYXRhWyB0aW1lIF0gPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNoYW5uZWwuYXJyYXlTeW50YXggPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG91dHB1dFNvdXJjZS5hcnJheVsgc3RyaWRlIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGNoYW5uZWwuaW5kaWNlc1sgMCBdICsgNCAqIGNoYW5uZWwuaW5kaWNlc1sgMSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyB0aW1lIF1bIGluZGV4IF0gPSB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBqID0gMCwgamwgPSBvdXRwdXRTb3VyY2Uuc3RyaWRlOyBqIDwgamw7IGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyB0aW1lIF1bIGogXSA9IG91dHB1dFNvdXJjZS5hcnJheVsgc3RyaWRlICsgaiBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zbGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBBbmltYXRpb24gdHJhbnNmb3JtIHR5cGUgXCIlc1wiIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJywgdHJhbnNmb3JtICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IEFuaW1hdGlvbiB0cmFuc2Zvcm0gdHlwZSBcIiVzXCIgbm90IHlldCBpbXBsZW1lbnRlZC4nLCB0cmFuc2Zvcm0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBBbmltYXRpb24gdHJhbnNmb3JtIHR5cGUgXCIlc1wiIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJywgdHJhbnNmb3JtICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGtleWZyYW1lcyA9IHByZXBhcmVBbmltYXRpb25EYXRhKCBkYXRhLCBkZWZhdWx0TWF0cml4ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogb2JqZWN0M0QudXVpZCxcbiAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWVzOiBrZXlmcmFtZXNcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhbmltYXRpb247XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVwYXJlQW5pbWF0aW9uRGF0YSggZGF0YSwgZGVmYXVsdE1hdHJpeCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIga2V5ZnJhbWVzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gdHJhbnNmZXIgZGF0YSBpbnRvIGEgc29ydGFibGUgYXJyYXlcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgdGltZSBpbiBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZXMucHVzaCggeyB0aW1lOiBwYXJzZUZsb2F0KCB0aW1lICksIHZhbHVlOiBkYXRhWyB0aW1lIF0gfSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUga2V5ZnJhbWVzIGFyZSBzb3J0ZWQgYnkgdGltZVxuICAgIFxuICAgICAgICAgICAgICAgIGtleWZyYW1lcy5zb3J0KCBhc2NlbmRpbmcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBub3cgd2UgY2xlYW4gdXAgYWxsIGFuaW1hdGlvbiBkYXRhLCBzbyB3ZSBjYW4gdXNlIHRoZW0gZm9yIGtleWZyYW1lIHRyYWNrc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1BbmltYXRpb25EYXRhKCBrZXlmcmFtZXMsIGksIGRlZmF1bHRNYXRyaXguZWxlbWVudHNbIGkgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5ZnJhbWVzO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGFycmF5IHNvcnQgZnVuY3Rpb25cbiAgICBcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhc2NlbmRpbmcoIGEsIGIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgICAgIHZhciBzY2FsZSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgICAgICB2YXIgcXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVLZXlmcmFtZVRyYWNrcyggYW5pbWF0aW9uLCB0cmFja3MgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGtleWZyYW1lcyA9IGFuaW1hdGlvbi5rZXlmcmFtZXM7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBhbmltYXRpb24ubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdGltZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25EYXRhID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHF1YXRlcm5pb25EYXRhID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlRGF0YSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGtleWZyYW1lcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZnJhbWUgPSBrZXlmcmFtZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBrZXlmcmFtZS50aW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBrZXlmcmFtZS52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4LmZyb21BcnJheSggdmFsdWUgKS50cmFuc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4LmRlY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzLnB1c2goIHRpbWUgKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25EYXRhLnB1c2goIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKTtcbiAgICAgICAgICAgICAgICAgICAgcXVhdGVybmlvbkRhdGEucHVzaCggcXVhdGVybmlvbi54LCBxdWF0ZXJuaW9uLnksIHF1YXRlcm5pb24ueiwgcXVhdGVybmlvbi53ICk7XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlRGF0YS5wdXNoKCBzY2FsZS54LCBzY2FsZS55LCBzY2FsZS56ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggcG9zaXRpb25EYXRhLmxlbmd0aCA+IDAgKSB0cmFja3MucHVzaCggbmV3IFRIUkVFLlZlY3RvcktleWZyYW1lVHJhY2soIG5hbWUgKyAnLnBvc2l0aW9uJywgdGltZXMsIHBvc2l0aW9uRGF0YSApICk7XG4gICAgICAgICAgICAgICAgaWYgKCBxdWF0ZXJuaW9uRGF0YS5sZW5ndGggPiAwICkgdHJhY2tzLnB1c2goIG5ldyBUSFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayggbmFtZSArICcucXVhdGVybmlvbicsIHRpbWVzLCBxdWF0ZXJuaW9uRGF0YSApICk7XG4gICAgICAgICAgICAgICAgaWYgKCBzY2FsZURhdGEubGVuZ3RoID4gMCApIHRyYWNrcy5wdXNoKCBuZXcgVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjayggbmFtZSArICcuc2NhbGUnLCB0aW1lcywgc2NhbGVEYXRhICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tzO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtQW5pbWF0aW9uRGF0YSgga2V5ZnJhbWVzLCBwcm9wZXJ0eSwgZGVmYXVsdFZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBrZXlmcmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZW1wdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBpLCBsO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGNoZWNrLCBpZiB2YWx1ZXMgb2YgYSBwcm9wZXJ0eSBhcmUgbWlzc2luZyBpbiBvdXIga2V5ZnJhbWVzXG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggaSA9IDAsIGwgPSBrZXlmcmFtZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWUgPSBrZXlmcmFtZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBrZXlmcmFtZS52YWx1ZVsgcHJvcGVydHkgXSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWUudmFsdWVbIHByb3BlcnR5IF0gPSBudWxsOyAvLyBtYXJrIGFzIG1pc3NpbmdcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5ID0gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBlbXB0eSA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gdmFsdWVzIGF0IGFsbCwgc28gd2Ugc2V0IGEgZGVmYXVsdCB2YWx1ZVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCBpID0gMCwgbCA9IGtleWZyYW1lcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWUgPSBrZXlmcmFtZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWZyYW1lLnZhbHVlWyBwcm9wZXJ0eSBdID0gZGVmYXVsdFZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlsbGluZyBnYXBzXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZU1pc3NpbmdLZXlmcmFtZXMoIGtleWZyYW1lcywgcHJvcGVydHkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVNaXNzaW5nS2V5ZnJhbWVzKCBrZXlmcmFtZXMsIHByb3BlcnR5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcmV2LCBuZXh0O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGtleWZyYW1lcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZnJhbWUgPSBrZXlmcmFtZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBrZXlmcmFtZS52YWx1ZVsgcHJvcGVydHkgXSA9PT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBnZXRQcmV2KCBrZXlmcmFtZXMsIGksIHByb3BlcnR5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gZ2V0TmV4dCgga2V5ZnJhbWVzLCBpLCBwcm9wZXJ0eSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmV2ID09PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWZyYW1lLnZhbHVlWyBwcm9wZXJ0eSBdID0gbmV4dC52YWx1ZVsgcHJvcGVydHkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbmV4dCA9PT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZS52YWx1ZVsgcHJvcGVydHkgXSA9IHByZXYudmFsdWVbIHByb3BlcnR5IF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZSgga2V5ZnJhbWUsIHByZXYsIG5leHQsIHByb3BlcnR5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcmV2KCBrZXlmcmFtZXMsIGksIHByb3BlcnR5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHdoaWxlICggaSA+PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZnJhbWUgPSBrZXlmcmFtZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBrZXlmcmFtZS52YWx1ZVsgcHJvcGVydHkgXSAhPT0gbnVsbCApIHJldHVybiBrZXlmcmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaSAtLTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXh0KCBrZXlmcmFtZXMsIGksIHByb3BlcnR5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHdoaWxlICggaSA8IGtleWZyYW1lcy5sZW5ndGggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlmcmFtZSA9IGtleWZyYW1lc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGtleWZyYW1lLnZhbHVlWyBwcm9wZXJ0eSBdICE9PSBudWxsICkgcmV0dXJuIGtleWZyYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpICsrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGludGVycG9sYXRlKCBrZXksIHByZXYsIG5leHQsIHByb3BlcnR5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggKCBuZXh0LnRpbWUgLSBwcmV2LnRpbWUgKSA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAga2V5LnZhbHVlWyBwcm9wZXJ0eSBdID0gcHJldi52YWx1ZVsgcHJvcGVydHkgXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBrZXkudmFsdWVbIHByb3BlcnR5IF0gPSAoICgga2V5LnRpbWUgLSBwcmV2LnRpbWUgKSAqICggbmV4dC52YWx1ZVsgcHJvcGVydHkgXSAtIHByZXYudmFsdWVbIHByb3BlcnR5IF0gKSAvICggbmV4dC50aW1lIC0gcHJldi50aW1lICkgKSArIHByZXYudmFsdWVbIHByb3BlcnR5IF07XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBhbmltYXRpb24gY2xpcHNcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQW5pbWF0aW9uQ2xpcCggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgfHwgJ2RlZmF1bHQnLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogcGFyc2VGbG9hdCggeG1sLmdldEF0dHJpYnV0ZSggJ3N0YXJ0JyApIHx8IDAgKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBwYXJzZUZsb2F0KCB4bWwuZ2V0QXR0cmlidXRlKCAnZW5kJyApIHx8IDAgKSxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnN0YW5jZV9hbmltYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYW5pbWF0aW9ucy5wdXNoKCBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICd1cmwnICkgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkuY2xpcHNbIHhtbC5nZXRBdHRyaWJ1dGUoICdpZCcgKSBdID0gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkQW5pbWF0aW9uQ2xpcCggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2tzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gKCBkYXRhLmVuZCAtIGRhdGEuc3RhcnQgKSB8fCAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBkYXRhLmFuaW1hdGlvbnM7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IGFuaW1hdGlvbnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25UcmFja3MgPSBnZXRBbmltYXRpb24oIGFuaW1hdGlvbnNbIGkgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDAsIGpsID0gYW5pbWF0aW9uVHJhY2tzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tzLnB1c2goIGFuaW1hdGlvblRyYWNrc1sgaiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5BbmltYXRpb25DbGlwKCBuYW1lLCBkdXJhdGlvbiwgdHJhY2tzICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRBbmltYXRpb25DbGlwKCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkuY2xpcHNbIGlkIF0sIGJ1aWxkQW5pbWF0aW9uQ2xpcCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gY29udHJvbGxlclxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VDb250cm9sbGVyKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2tpbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgZXhhY3RseSBvbmUgc2tpbiBwZXIgY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaWQgPSBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzb3VyY2UnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNraW4gPSBwYXJzZVNraW4oIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3JwaCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCA9IHBhcnNlSWQoIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NvdXJjZScgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IE1vcnBoIHRhcmdldCBhbmltYXRpb24gbm90IHN1cHBvcnRlZCB5ZXQuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkuY29udHJvbGxlcnNbIHhtbC5nZXRBdHRyaWJ1dGUoICdpZCcgKSBdID0gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlU2tpbiggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JpbmRfc2hhcGVfbWF0cml4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJpbmRTaGFwZU1hdHJpeCA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc291cmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoICdpZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNvdXJjZXNbIGlkIF0gPSBwYXJzZVNvdXJjZSggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2pvaW50cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2ludHMgPSBwYXJzZUpvaW50cyggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcnRleF93ZWlnaHRzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnZlcnRleFdlaWdodHMgPSBwYXJzZVZlcnRleFdlaWdodHMoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUpvaW50cyggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dHM6IHt9XG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW1hbnRpYyA9IGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NlbWFudGljJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHBhcnNlSWQoIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NvdXJjZScgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaW5wdXRzWyBzZW1hbnRpYyBdID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVZlcnRleFdlaWdodHMoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRzOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VtYW50aWMgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzZW1hbnRpYycgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzb3VyY2UnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gcGFyc2VJbnQoIGNoaWxkLmdldEF0dHJpYnV0ZSggJ29mZnNldCcgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaW5wdXRzWyBzZW1hbnRpYyBdID0geyBpZDogaWQsIG9mZnNldDogb2Zmc2V0IH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2Y291bnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudmNvdW50ID0gcGFyc2VJbnRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS52ID0gcGFyc2VJbnRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRDb250cm9sbGVyKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBidWlsZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGRhdGEuaWRcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGxpYnJhcnkuZ2VvbWV0cmllc1sgYnVpbGQuaWQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEuc2tpbiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBidWlsZC5za2luID0gYnVpbGRTa2luKCBkYXRhLnNraW4gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgZW5oYW5jZSB0aGUgJ3NvdXJjZXMnIHByb3BlcnR5IG9mIHRoZSBjb3JyZXNwb25kaW5nIGdlb21ldHJ5IHdpdGggb3VyIHNraW4gZGF0YVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5zb3VyY2VzLnNraW5JbmRpY2VzID0gYnVpbGQuc2tpbi5pbmRpY2VzO1xuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5zb3VyY2VzLnNraW5XZWlnaHRzID0gYnVpbGQuc2tpbi53ZWlnaHRzO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGQ7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZFNraW4oIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIEJPTkVfTElNSVQgPSA0O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBidWlsZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgam9pbnRzOiBbXSwgLy8gdGhpcyBtdXN0IGJlIGFuIGFycmF5IHRvIHByZXNlcnZlIHRoZSBqb2ludCBvcmRlclxuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpZGU6IEJPTkVfTElNSVRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXk6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWRlOiBCT05FX0xJTUlUXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VzID0gZGF0YS5zb3VyY2VzO1xuICAgICAgICAgICAgICAgIHZhciB2ZXJ0ZXhXZWlnaHRzID0gZGF0YS52ZXJ0ZXhXZWlnaHRzO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB2Y291bnQgPSB2ZXJ0ZXhXZWlnaHRzLnZjb3VudDtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IHZlcnRleFdlaWdodHMudjtcbiAgICAgICAgICAgICAgICB2YXIgam9pbnRPZmZzZXQgPSB2ZXJ0ZXhXZWlnaHRzLmlucHV0cy5KT0lOVC5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodE9mZnNldCA9IHZlcnRleFdlaWdodHMuaW5wdXRzLldFSUdIVC5vZmZzZXQ7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGpvaW50U291cmNlID0gZGF0YS5zb3VyY2VzWyBkYXRhLmpvaW50cy5pbnB1dHMuSk9JTlQgXTtcbiAgICAgICAgICAgICAgICB2YXIgaW52ZXJzZVNvdXJjZSA9IGRhdGEuc291cmNlc1sgZGF0YS5qb2ludHMuaW5wdXRzLklOVl9CSU5EX01BVFJJWCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB3ZWlnaHRzID0gc291cmNlc1sgdmVydGV4V2VpZ2h0cy5pbnB1dHMuV0VJR0hULmlkIF0uYXJyYXk7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmlkZSA9IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGksIGosIGw7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gcHJvY2NlcyBza2luIGRhdGEgZm9yIGVhY2ggdmVydGV4XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggaSA9IDAsIGwgPSB2Y291bnQubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW50Q291bnQgPSB2Y291bnRbIGkgXTsgLy8gdGhpcyBpcyB0aGUgYW1vdW50IG9mIGpvaW50cyB0aGF0IGFmZmVjdCBhIHNpbmdsZSB2ZXJ0ZXhcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRleFNraW5EYXRhID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIGogPSAwOyBqIDwgam9pbnRDb3VudDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBza2luSW5kZXggPSB2WyBzdHJpZGUgKyBqb2ludE9mZnNldCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdlaWdodElkID0gdlsgc3RyaWRlICsgd2VpZ2h0T2Zmc2V0IF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbldlaWdodCA9IHdlaWdodHNbIHdlaWdodElkIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhTa2luRGF0YS5wdXNoKCB7IGluZGV4OiBza2luSW5kZXgsIHdlaWdodDogc2tpbldlaWdodCB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpZGUgKz0gMjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBzb3J0IHRoZSBqb2ludHMgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiB0aGUgd2VpZ2h0cy5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBlbnN1cmVzLCB3ZSBvbmx5IHByb2NjZWQgdGhlIG1vc3QgaW1wb3J0YW50IGpvaW50cyBvZiB0aGUgdmVydGV4XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleFNraW5EYXRhLnNvcnQoIGRlc2NlbmRpbmcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbm93IHdlIHByb3ZpZGUgZm9yIGVhY2ggdmVydGV4IGEgc2V0IG9mIGZvdXIgaW5kZXggYW5kIHdlaWdodCB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBvcmRlciBvZiB0aGUgc2tpbiBkYXRhIG1hdGNoZXMgdGhlIG9yZGVyIG9mIHZlcnRpY2VzXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIGogPSAwOyBqIDwgQk9ORV9MSU1JVDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gdmVydGV4U2tpbkRhdGFbIGogXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkLmluZGljZXMuYXJyYXkucHVzaCggZC5pbmRleCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkLndlaWdodHMuYXJyYXkucHVzaCggZC53ZWlnaHQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGQuaW5kaWNlcy5hcnJheS5wdXNoKCAwICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGQud2VpZ2h0cy5hcnJheS5wdXNoKCAwICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gc2V0dXAgYmluZCBtYXRyaXhcbiAgICBcbiAgICAgICAgICAgICAgICBidWlsZC5iaW5kTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkoIGRhdGEuYmluZFNoYXBlTWF0cml4ICkudHJhbnNwb3NlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gcHJvY2VzcyBib25lcyBhbmQgaW52ZXJzZSBiaW5kIG1hdHJpeCBkYXRhXG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggaSA9IDAsIGwgPSBqb2ludFNvdXJjZS5hcnJheS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGpvaW50U291cmNlLmFycmF5WyBpIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lSW52ZXJzZSA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KCBpbnZlcnNlU291cmNlLmFycmF5LCBpICogaW52ZXJzZVNvdXJjZS5zdHJpZGUgKS50cmFuc3Bvc2UoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnVpbGQuam9pbnRzLnB1c2goIHsgbmFtZTogbmFtZSwgYm9uZUludmVyc2U6IGJvbmVJbnZlcnNlIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGFycmF5IHNvcnQgZnVuY3Rpb25cbiAgICBcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZXNjZW5kaW5nKCBhLCBiICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi53ZWlnaHQgLSBhLndlaWdodDtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRDb250cm9sbGVyKCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkuY29udHJvbGxlcnNbIGlkIF0sIGJ1aWxkQ29udHJvbGxlciApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gaW1hZ2VcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlSW1hZ2UoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdF9mcm9tOiBnZXRFbGVtZW50c0J5VGFnTmFtZSggeG1sLCAnaW5pdF9mcm9tJyApWyAwIF0udGV4dENvbnRlbnRcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkuaW1hZ2VzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEltYWdlKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZGF0YS5idWlsZCAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIGRhdGEuYnVpbGQ7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuaW5pdF9mcm9tO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SW1hZ2UoIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggbGlicmFyeS5pbWFnZXNbIGlkIF0sIGJ1aWxkSW1hZ2UgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGVmZmVjdFxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VFZmZlY3QoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9maWxlX0NPTU1PTic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9maWxlID0gcGFyc2VFZmZlY3RQcm9maWxlQ09NTU9OKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkuZWZmZWN0c1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VFZmZlY3RQcm9maWxlQ09NTU9OKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cmZhY2VzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlcnM6IHt9XG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmV3cGFyYW0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRWZmZWN0TmV3cGFyYW0oIGNoaWxkLCBkYXRhICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZWNobmlxdWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGVjaG5pcXVlID0gcGFyc2VFZmZlY3RUZWNobmlxdWUoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdleHRyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5leHRyYSA9IHBhcnNlRWZmZWN0RXh0cmEoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdE5ld3BhcmFtKCB4bWwsIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNpZCA9IHhtbC5nZXRBdHRyaWJ1dGUoICdzaWQnICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N1cmZhY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3VyZmFjZXNbIHNpZCBdID0gcGFyc2VFZmZlY3RTdXJmYWNlKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2FtcGxlcjJEJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNhbXBsZXJzWyBzaWQgXSA9IHBhcnNlRWZmZWN0U2FtcGxlciggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0U3VyZmFjZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luaXRfZnJvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbml0X2Zyb20gPSBjaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0U2FtcGxlciggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zb3VyY2UgPSBjaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0VGVjaG5pcXVlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29uc3RhbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGFtYmVydCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdibGlubic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwaG9uZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50eXBlID0gY2hpbGQubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wYXJhbWV0ZXJzID0gcGFyc2VFZmZlY3RQYXJhbWV0ZXJzKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VFZmZlY3RQYXJhbWV0ZXJzKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW1pc3Npb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGlmZnVzZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGVjdWxhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzaGluaW5lc3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJhbnNwYXJlbmN5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyBjaGlsZC5ub2RlTmFtZSBdID0gcGFyc2VFZmZlY3RQYXJhbWV0ZXIoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc3BhcmVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVsgY2hpbGQubm9kZU5hbWUgXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhcXVlOiBjaGlsZC5nZXRBdHRyaWJ1dGUoICdvcGFxdWUnICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhcnNlRWZmZWN0UGFyYW1ldGVyKCBjaGlsZCApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0UGFyYW1ldGVyKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbIGNoaWxkLm5vZGVOYW1lIF0gPSBwYXJzZUZsb2F0cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb2F0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyBjaGlsZC5ub2RlTmFtZSBdID0gcGFyc2VGbG9hdCggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbIGNoaWxkLm5vZGVOYW1lIF0gPSB7IGlkOiBjaGlsZC5nZXRBdHRyaWJ1dGUoICd0ZXh0dXJlJyApLCBleHRyYTogcGFyc2VFZmZlY3RQYXJhbWV0ZXJUZXh0dXJlKCBjaGlsZCApIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdFBhcmFtZXRlclRleHR1cmUoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGVjaG5pcXVlOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2V4dHJhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUVmZmVjdFBhcmFtZXRlclRleHR1cmVFeHRyYSggY2hpbGQsIGRhdGEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0UGFyYW1ldGVyVGV4dHVyZUV4dHJhKCB4bWwsIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RlY2huaXF1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VFZmZlY3RQYXJhbWV0ZXJUZXh0dXJlRXh0cmFUZWNobmlxdWUoIGNoaWxkLCBkYXRhICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdFBhcmFtZXRlclRleHR1cmVFeHRyYVRlY2huaXF1ZSggeG1sLCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZXBlYXRVJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlcGVhdFYnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb2Zmc2V0VSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvZmZzZXRWJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRlY2huaXF1ZVsgY2hpbGQubm9kZU5hbWUgXSA9IHBhcnNlRmxvYXQoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd3cmFwVSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd3cmFwVic6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc29tZSBmaWxlcyBoYXZlIHZhbHVlcyBmb3Igd3JhcFUvd3JhcFYgd2hpY2ggYmVjb21lIE5hTiB2aWEgcGFyc2VJbnRcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLnRleHRDb250ZW50LnRvVXBwZXJDYXNlKCkgPT09ICdUUlVFJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWNobmlxdWVbIGNoaWxkLm5vZGVOYW1lIF0gPSAxO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGNoaWxkLnRleHRDb250ZW50LnRvVXBwZXJDYXNlKCkgPT09ICdGQUxTRScgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGVjaG5pcXVlWyBjaGlsZC5ub2RlTmFtZSBdID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRlY2huaXF1ZVsgY2hpbGQubm9kZU5hbWUgXSA9IHBhcnNlSW50KCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0RXh0cmEoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZWNobmlxdWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGVjaG5pcXVlID0gcGFyc2VFZmZlY3RFeHRyYVRlY2huaXF1ZSggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0RXh0cmFUZWNobmlxdWUoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkb3VibGVfc2lkZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbIGNoaWxkLm5vZGVOYW1lIF0gPSBwYXJzZUludCggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkRWZmZWN0KCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RWZmZWN0KCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkuZWZmZWN0c1sgaWQgXSwgYnVpbGRFZmZlY3QgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIG1hdGVyaWFsXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZU1hdGVyaWFsKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHhtbC5nZXRBdHRyaWJ1dGUoICduYW1lJyApXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zdGFuY2VfZWZmZWN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnVybCA9IHBhcnNlSWQoIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3VybCcgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkubWF0ZXJpYWxzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZE1hdGVyaWFsKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBlZmZlY3QgPSBnZXRFZmZlY3QoIGRhdGEudXJsICk7XG4gICAgICAgICAgICAgICAgdmFyIHRlY2huaXF1ZSA9IGVmZmVjdC5wcm9maWxlLnRlY2huaXF1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZXh0cmEgPSBlZmZlY3QucHJvZmlsZS5leHRyYTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgc3dpdGNoICggdGVjaG5pcXVlLnR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Bob25nJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxpbm4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdsYW1iZXJ0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5uYW1lID0gZGF0YS5uYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRleHR1cmUoIHRleHR1cmVPYmplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzYW1wbGVyID0gZWZmZWN0LnByb2ZpbGUuc2FtcGxlcnNbIHRleHR1cmVPYmplY3QuaWQgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBnZXQgaW1hZ2VcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzYW1wbGVyICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VyZmFjZSA9IGVmZmVjdC5wcm9maWxlLnN1cmZhY2VzWyBzYW1wbGVyLnNvdXJjZSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBnZXRJbWFnZSggc3VyZmFjZS5pbml0X2Zyb20gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IFVuZGVmaW5lZCBzYW1wbGVyLiBBY2Nlc3MgaW1hZ2UgZGlyZWN0bHkgKHNlZSAjMTI1MzApLicgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlID0gZ2V0SW1hZ2UoIHRleHR1cmVPYmplY3QuaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGV4dHVyZSBpZiBpbWFnZSBpcyBhdmFpYWJsZVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGltYWdlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZSA9IHRleHR1cmVMb2FkZXIubG9hZCggaW1hZ2UgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRyYSA9IHRleHR1cmVPYmplY3QuZXh0cmE7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGV4dHJhICE9PSB1bmRlZmluZWQgJiYgZXh0cmEudGVjaG5pcXVlICE9PSB1bmRlZmluZWQgJiYgaXNFbXB0eSggZXh0cmEudGVjaG5pcXVlICkgPT09IGZhbHNlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZWNobmlxdWUgPSBleHRyYS50ZWNobmlxdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53cmFwUyA9IHRlY2huaXF1ZS53cmFwVSA/IFRIUkVFLlJlcGVhdFdyYXBwaW5nIDogVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLndyYXBUID0gdGVjaG5pcXVlLndyYXBWID8gVEhSRUUuUmVwZWF0V3JhcHBpbmcgOiBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUub2Zmc2V0LnNldCggdGVjaG5pcXVlLm9mZnNldFUgfHwgMCwgdGVjaG5pcXVlLm9mZnNldFYgfHwgMCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUucmVwZWF0LnNldCggdGVjaG5pcXVlLnJlcGVhdFUgfHwgMSwgdGVjaG5pcXVlLnJlcGVhdFYgfHwgMSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLndyYXBTID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogVW5hYmxlIHRvIGxvYWQgdGV4dHVyZSB3aXRoIElEOicsIHRleHR1cmVPYmplY3QuaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwYXJhbWV0ZXJzID0gdGVjaG5pcXVlLnBhcmFtZXRlcnM7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVyID0gcGFyYW1ldGVyc1sga2V5IF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGtleSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpZmZ1c2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFyYW1ldGVyLmNvbG9yICkgbWF0ZXJpYWwuY29sb3IuZnJvbUFycmF5KCBwYXJhbWV0ZXIuY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmFtZXRlci50ZXh0dXJlICkgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSggcGFyYW1ldGVyLnRleHR1cmUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwZWN1bGFyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmFtZXRlci5jb2xvciAmJiBtYXRlcmlhbC5zcGVjdWxhciApIG1hdGVyaWFsLnNwZWN1bGFyLmZyb21BcnJheSggcGFyYW1ldGVyLmNvbG9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJhbWV0ZXIudGV4dHVyZSApIG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gZ2V0VGV4dHVyZSggcGFyYW1ldGVyLnRleHR1cmUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NoaW5pbmVzcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJhbWV0ZXIuZmxvYXQgJiYgbWF0ZXJpYWwuc2hpbmluZXNzIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc2hpbmluZXNzID0gcGFyYW1ldGVyLmZsb2F0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW1pc3Npb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFyYW1ldGVyLmNvbG9yICYmIG1hdGVyaWFsLmVtaXNzaXZlIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZW1pc3NpdmUuZnJvbUFycmF5KCBwYXJhbWV0ZXIuY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvL1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0cmFuc3BhcmVudCA9IHBhcmFtZXRlcnNbICd0cmFuc3BhcmVudCcgXTtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNwYXJlbmN5ID0gcGFyYW1ldGVyc1sgJ3RyYW5zcGFyZW5jeScgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyA8dHJhbnNwYXJlbmN5PiBkb2VzIG5vdCBleGlzdCBidXQgPHRyYW5zcGFyZW50PlxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdHJhbnNwYXJlbmN5ID09PSB1bmRlZmluZWQgJiYgdHJhbnNwYXJlbnQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW5jeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0OiAxXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIDx0cmFuc3BhcmVudD4gZG9lcyBub3QgZXhpc3QgYnV0IDx0cmFuc3BhcmVuY3k+XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0cmFuc3BhcmVudCA9PT0gdW5kZWZpbmVkICYmIHRyYW5zcGFyZW5jeSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFxdWU6ICdBX09ORScsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFsgMSwgMSwgMSwgMSBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9IH07XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdHJhbnNwYXJlbnQgJiYgdHJhbnNwYXJlbmN5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgY2FzZSBpZiBhIHRleHR1cmUgZXhpc3RzIGJ1dCBubyBjb2xvclxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHRyYW5zcGFyZW50LmRhdGEudGV4dHVyZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmFscGhhTWFwID0gZ2V0VGV4dHVyZSggdHJhbnNwYXJlbnQuZGF0YS50ZXh0dXJlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSB0cmFuc3BhcmVudC5kYXRhLmNvbG9yO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdHJhbnNwYXJlbnQub3BhcXVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FfT05FJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IGNvbG9yWyAzIF0gKiB0cmFuc3BhcmVuY3kuZmxvYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JHQl9aRVJPJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IDEgLSAoIGNvbG9yWyAwIF0gKiB0cmFuc3BhcmVuY3kuZmxvYXQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQV9aRVJPJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IDEgLSAoIGNvbG9yWyAzIF0gKiB0cmFuc3BhcmVuY3kuZmxvYXQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUkdCX09ORSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSBjb2xvclsgMCBdICogdHJhbnNwYXJlbmN5LmZsb2F0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBJbnZhbGlkIG9wYXF1ZSB0eXBlIFwiJXNcIiBvZiB0cmFuc3BhcmVudCB0YWcuJywgdHJhbnNwYXJlbnQub3BhcXVlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsLm9wYWNpdHkgPCAxICkgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vXG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBleHRyYSAhPT0gdW5kZWZpbmVkICYmIGV4dHJhLnRlY2huaXF1ZSAhPT0gdW5kZWZpbmVkICYmIGV4dHJhLnRlY2huaXF1ZS5kb3VibGVfc2lkZWQgPT09IDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNpZGUgPSBUSFJFRS5Eb3VibGVTaWRlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRNYXRlcmlhbCggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1aWxkKCBsaWJyYXJ5Lm1hdGVyaWFsc1sgaWQgXSwgYnVpbGRNYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gY2FtZXJhXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUNhbWVyYSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB4bWwuZ2V0QXR0cmlidXRlKCAnbmFtZScgKVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ29wdGljcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vcHRpY3MgPSBwYXJzZUNhbWVyYU9wdGljcyggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LmNhbWVyYXNbIHhtbC5nZXRBdHRyaWJ1dGUoICdpZCcgKSBdID0gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQ2FtZXJhT3B0aWNzKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RlY2huaXF1ZV9jb21tb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUNhbWVyYVRlY2huaXF1ZSggY2hpbGQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUNhbWVyYVRlY2huaXF1ZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BlcnNwZWN0aXZlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ29ydGhvZ3JhcGhpYyc6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWNobmlxdWUgPSBjaGlsZC5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBhcmFtZXRlcnMgPSBwYXJzZUNhbWVyYVBhcmFtZXRlcnMoIGNoaWxkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUNhbWVyYVBhcmFtZXRlcnMoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd4Zm92JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lmb3YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneG1hZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd5bWFnJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3puZWFyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3pmYXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXNwZWN0X3JhdGlvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyBjaGlsZC5ub2RlTmFtZSBdID0gcGFyc2VGbG9hdCggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkQ2FtZXJhKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjYW1lcmE7XG4gICAgXG4gICAgICAgICAgICAgICAgc3dpdGNoICggZGF0YS5vcHRpY3MudGVjaG5pcXVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwZXJzcGVjdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vcHRpY3MucGFyYW1ldGVycy55Zm92LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3B0aWNzLnBhcmFtZXRlcnMuYXNwZWN0X3JhdGlvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3B0aWNzLnBhcmFtZXRlcnMuem5lYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vcHRpY3MucGFyYW1ldGVycy56ZmFyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ29ydGhvZ3JhcGhpYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeW1hZyA9IGRhdGEub3B0aWNzLnBhcmFtZXRlcnMueW1hZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4bWFnID0gZGF0YS5vcHRpY3MucGFyYW1ldGVycy54bWFnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzcGVjdFJhdGlvID0gZGF0YS5vcHRpY3MucGFyYW1ldGVycy5hc3BlY3RfcmF0aW87XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWFnID0gKCB4bWFnID09PSB1bmRlZmluZWQgKSA/ICggeW1hZyAqIGFzcGVjdFJhdGlvICkgOiB4bWFnO1xuICAgICAgICAgICAgICAgICAgICAgICAgeW1hZyA9ICggeW1hZyA9PT0gdW5kZWZpbmVkICkgPyAoIHhtYWcgLyBhc3BlY3RSYXRpbyApIDogeW1hZztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHhtYWcgKj0gMC41O1xuICAgICAgICAgICAgICAgICAgICAgICAgeW1hZyAqPSAwLjU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0geG1hZywgeG1hZywgeW1hZywgLSB5bWFnLCAvLyBsZWZ0LCByaWdodCwgdG9wLCBib3R0b21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9wdGljcy5wYXJhbWV0ZXJzLnpuZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3B0aWNzLnBhcmFtZXRlcnMuemZhclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgY2FtZXJhLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbWVyYTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENhbWVyYSggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBsaWJyYXJ5LmNhbWVyYXNbIGlkIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggZGF0YSwgYnVpbGRDYW1lcmEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogQ291bGRuXFwndCBmaW5kIGNhbWVyYSB3aXRoIElEOicsIGlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBsaWdodFxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VMaWdodCggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RlY2huaXF1ZV9jb21tb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBwYXJzZUxpZ2h0VGVjaG5pcXVlKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkubGlnaHRzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUxpZ2h0VGVjaG5pcXVlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGlyZWN0aW9uYWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BvdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhbWJpZW50JzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRlY2huaXF1ZSA9IGNoaWxkLm5vZGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGFyYW1ldGVycyA9IHBhcnNlTGlnaHRQYXJhbWV0ZXJzKCBjaGlsZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VMaWdodFBhcmFtZXRlcnMoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZhbGxvZmZfYW5nbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZmFsbG9mZkFuZ2xlID0gcGFyc2VGbG9hdCggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3F1YWRyYXRpY19hdHRlbnVhdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBwYXJzZUZsb2F0KCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGlzdGFuY2UgPSBmID8gTWF0aC5zcXJ0KCAxIC8gZiApIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkTGlnaHQoIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGxpZ2h0O1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIGRhdGEudGVjaG5pcXVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkaXJlY3Rpb25hbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nwb3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHQgPSBuZXcgVEhSRUUuU3BvdExpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYW1iaWVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEucGFyYW1ldGVycy5jb2xvciApIGxpZ2h0LmNvbG9yLmNvcHkoIGRhdGEucGFyYW1ldGVycy5jb2xvciApO1xuICAgICAgICAgICAgICAgIGlmICggZGF0YS5wYXJhbWV0ZXJzLmRpc3RhbmNlICkgbGlnaHQuZGlzdGFuY2UgPSBkYXRhLnBhcmFtZXRlcnMuZGlzdGFuY2U7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpZ2h0O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TGlnaHQoIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gbGlicmFyeS5saWdodHNbIGlkIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggZGF0YSwgYnVpbGRMaWdodCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBDb3VsZG5cXCd0IGZpbmQgbGlnaHQgd2l0aCBJRDonLCBpZCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gZ2VvbWV0cnlcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlR2VvbWV0cnkoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogeG1sLmdldEF0dHJpYnV0ZSggJ25hbWUnICksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IHt9LFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczoge30sXG4gICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZXM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWVzaCA9IGdldEVsZW1lbnRzQnlUYWdOYW1lKCB4bWwsICdtZXNoJyApWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZyB0YWdzIGluc2lkZSBnZW9tZXRyeSBhcmUgbm90IHN1cHBvcnRlZCB5ZXQgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMTI2MDYpOiBjb252ZXhfbWVzaCwgc3BsaW5lLCBicmVwXG4gICAgICAgICAgICAgICAgaWYgKCBtZXNoID09PSB1bmRlZmluZWQgKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgbWVzaC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbWVzaC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gY2hpbGQuZ2V0QXR0cmlidXRlKCAnaWQnICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc291cmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNvdXJjZXNbIGlkIF0gPSBwYXJzZVNvdXJjZSggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcnRpY2VzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkYXRhLnNvdXJjZXNbIGlkIF0gPSBkYXRhLnNvdXJjZXNbIHBhcnNlSWQoIGdldEVsZW1lbnRzQnlUYWdOYW1lKCBjaGlsZCwgJ2lucHV0JyApWyAwIF0uZ2V0QXR0cmlidXRlKCAnc291cmNlJyApICkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnZlcnRpY2VzID0gcGFyc2VHZW9tZXRyeVZlcnRpY2VzKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9seWdvbnMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IFVuc3VwcG9ydGVkIHByaW1pdGl2ZSB0eXBlOiAnLCBjaGlsZC5ub2RlTmFtZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluZXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluZXN0cmlwcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwb2x5bGlzdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmlhbmdsZXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJpbWl0aXZlcy5wdXNoKCBwYXJzZUdlb21ldHJ5UHJpbWl0aXZlKCBjaGlsZCApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBjaGlsZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkuZ2VvbWV0cmllc1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VTb3VyY2UoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXk6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzdHJpZGU6IDNcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb2F0X2FycmF5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdOYW1lX2FycmF5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFycmF5ID0gcGFyc2VTdHJpbmdzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGVjaG5pcXVlX2NvbW1vbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjY2Vzc29yID0gZ2V0RWxlbWVudHNCeVRhZ05hbWUoIGNoaWxkLCAnYWNjZXNzb3InIClbIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGFjY2Vzc29yICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3RyaWRlID0gcGFyc2VJbnQoIGFjY2Vzc29yLmdldEF0dHJpYnV0ZSggJ3N0cmlkZScgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlR2VvbWV0cnlWZXJ0aWNlcyggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NlbWFudGljJyApIF0gPSBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzb3VyY2UnICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUdlb21ldHJ5UHJpbWl0aXZlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHByaW1pdGl2ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogeG1sLm5vZGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbDogeG1sLmdldEF0dHJpYnV0ZSggJ21hdGVyaWFsJyApLFxuICAgICAgICAgICAgICAgICAgICBjb3VudDogcGFyc2VJbnQoIHhtbC5nZXRBdHRyaWJ1dGUoICdjb3VudCcgKSApLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dHM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBzdHJpZGU6IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAnc291cmNlJyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbWFudGljID0gY2hpbGQuZ2V0QXR0cmlidXRlKCAnc2VtYW50aWMnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHBhcnNlSW50KCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdvZmZzZXQnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUuaW5wdXRzWyBzZW1hbnRpYyBdID0geyBpZDogaWQsIG9mZnNldDogb2Zmc2V0IH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLnN0cmlkZSA9IE1hdGgubWF4KCBwcmltaXRpdmUuc3RyaWRlLCBvZmZzZXQgKyAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2Y291bnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS52Y291bnQgPSBwYXJzZUludHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUucCA9IHBhcnNlSW50cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJpbWl0aXZlO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ3JvdXBQcmltaXRpdmVzKCBwcmltaXRpdmVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBidWlsZCA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHByaW1pdGl2ZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJpbWl0aXZlID0gcHJpbWl0aXZlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGJ1aWxkWyBwcmltaXRpdmUudHlwZSBdID09PSB1bmRlZmluZWQgKSBidWlsZFsgcHJpbWl0aXZlLnR5cGUgXSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBidWlsZFsgcHJpbWl0aXZlLnR5cGUgXS5wdXNoKCBwcmltaXRpdmUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRHZW9tZXRyeSggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGQgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlcyA9IGRhdGEuc291cmNlcztcbiAgICAgICAgICAgICAgICB2YXIgdmVydGljZXMgPSBkYXRhLnZlcnRpY2VzO1xuICAgICAgICAgICAgICAgIHZhciBwcmltaXRpdmVzID0gZGF0YS5wcmltaXRpdmVzO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlcy5sZW5ndGggPT09IDAgKSByZXR1cm4ge307XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gb3VyIGdvYWwgaXMgdG8gY3JlYXRlIG9uZSBidWZmZXIgZ2VvZW10cnkgZm9yIGEgc2luZ2xlIHR5cGUgb2YgcHJpbWl0aXZlc1xuICAgICAgICAgICAgICAgIC8vIGZpcnN0LCB3ZSBncm91cCBhbGwgcHJpbWl0aXZlcyBieSB0aGVpciB0eXBlXG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwZWRQcmltaXRpdmVzID0gZ3JvdXBQcmltaXRpdmVzKCBwcmltaXRpdmVzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIHR5cGUgaW4gZ3JvdXBlZFByaW1pdGl2ZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlY29uZCwgd2UgY3JlYXRlIGZvciBlYWNoIHR5cGUgb2YgcHJpbWl0aXZlcyAocG9seWxpc3QsdHJpYW5nbGVzIG9yIGxpbmVzKSBhIGJ1ZmZlciBnZW9tZXRyeVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBidWlsZFsgdHlwZSBdID0gYnVpbGRHZW9tZXRyeVR5cGUoIGdyb3VwZWRQcmltaXRpdmVzWyB0eXBlIF0sIHNvdXJjZXMsIHZlcnRpY2VzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBidWlsZDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkR2VvbWV0cnlUeXBlKCBwcmltaXRpdmVzLCBzb3VyY2VzLCB2ZXJ0aWNlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGQgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB7IGFycmF5OiBbXSwgc3RyaWRlOiAwIH07XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbCA9IHsgYXJyYXk6IFtdLCBzdHJpZGU6IDAgfTtcbiAgICAgICAgICAgICAgICB2YXIgdXYgPSB7IGFycmF5OiBbXSwgc3RyaWRlOiAwIH07XG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yID0geyBhcnJheTogW10sIHN0cmlkZTogMCB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBza2luSW5kZXggPSB7IGFycmF5OiBbXSwgc3RyaWRlOiA0IH07XG4gICAgICAgICAgICAgICAgdmFyIHNraW5XZWlnaHQgPSB7IGFycmF5OiBbXSwgc3RyaWRlOiA0IH07XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsS2V5cyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IDAsIGNvdW50ID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgcCA9IDA7IHAgPCBwcmltaXRpdmVzLmxlbmd0aDsgcCArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaW1pdGl2ZSA9IHByaW1pdGl2ZXNbIHAgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0cyA9IHByaW1pdGl2ZS5pbnB1dHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmlhbmdsZUNvdW50ID0gMTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmltaXRpdmUudmNvdW50ICYmIHByaW1pdGl2ZS52Y291bnRbIDAgXSA9PT0gNCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlQ291bnQgPSAyOyAvLyBvbmUgcXVhZCAtPiB0d28gdHJpYW5nbGVzXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZ3JvdXBzXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlLnR5cGUgPT09ICdsaW5lcycgfHwgcHJpbWl0aXZlLnR5cGUgPT09ICdsaW5lc3RyaXBzJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ID0gcHJpbWl0aXZlLmNvdW50ICogMjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ID0gcHJpbWl0aXZlLmNvdW50ICogMyAqIHRyaWFuZ2xlQ291bnQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkR3JvdXAoIHN0YXJ0LCBjb3VudCwgcCApO1xuICAgICAgICAgICAgICAgICAgICBzdGFydCArPSBjb3VudDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0ZXJpYWxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmltaXRpdmUubWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEtleXMucHVzaCggcHJpbWl0aXZlLm1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2VvbWV0cnkgZGF0YVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbmFtZSBpbiBpbnB1dHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dHNbIG5hbWUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIG5hbWUgKVx0e1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1ZFUlRFWCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBrZXkgaW4gdmVydGljZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSB2ZXJ0aWNlc1sga2V5IF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBrZXkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUE9TSVRJT04nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2VzWyBpZCBdLCBpbnB1dC5vZmZzZXQsIHBvc2l0aW9uLmFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnN0cmlkZSA9IHNvdXJjZXNbIGlkIF0uc3RyaWRlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNvdXJjZXMuc2tpbldlaWdodHMgJiYgc291cmNlcy5za2luSW5kaWNlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkR2VvbWV0cnlEYXRhKCBwcmltaXRpdmUsIHNvdXJjZXMuc2tpbkluZGljZXMsIGlucHV0Lm9mZnNldCwgc2tpbkluZGV4LmFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2VzLnNraW5XZWlnaHRzLCBpbnB1dC5vZmZzZXQsIHNraW5XZWlnaHQuYXJyYXkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdOT1JNQUwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2VzWyBpZCBdLCBpbnB1dC5vZmZzZXQsIG5vcm1hbC5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWwuc3RyaWRlID0gc291cmNlc1sgaWQgXS5zdHJpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NPTE9SJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlc1sgaWQgXSwgaW5wdXQub2Zmc2V0LCBjb2xvci5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvci5zdHJpZGUgPSBzb3VyY2VzWyBpZCBdLnN0cmlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVEVYQ09PUkQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2VzWyBpZCBdLCBpbnB1dC5vZmZzZXQsIHV2LmFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2LnN0cmlkZSA9IHNvdXJjZXNbIGlkIF0uc3RyaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBTZW1hbnRpYyBcIiVzXCIgbm90IGhhbmRsZWQgaW4gZ2VvbWV0cnkgYnVpbGQgcHJvY2Vzcy4nLCBrZXkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdOT1JNQUwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2VzWyBpbnB1dC5pZCBdLCBpbnB1dC5vZmZzZXQsIG5vcm1hbC5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWwuc3RyaWRlID0gc291cmNlc1sgaW5wdXQuaWQgXS5zdHJpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NPTE9SJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlc1sgaW5wdXQuaWQgXSwgaW5wdXQub2Zmc2V0LCBjb2xvci5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvci5zdHJpZGUgPSBzb3VyY2VzWyBpbnB1dC5pZCBdLnN0cmlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVEVYQ09PUkQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2VzWyBpbnB1dC5pZCBdLCBpbnB1dC5vZmZzZXQsIHV2LmFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2LnN0cmlkZSA9IHNvdXJjZXNbIGlucHV0LmlkIF0uc3RyaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBnZW9tZXRyeVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggcG9zaXRpb24uYXJyYXkubGVuZ3RoID4gMCApIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLmFycmF5LCBwb3NpdGlvbi5zdHJpZGUgKSApO1xuICAgICAgICAgICAgICAgIGlmICggbm9ybWFsLmFycmF5Lmxlbmd0aCA+IDAgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsLmFycmF5LCBub3JtYWwuc3RyaWRlICkgKTtcbiAgICAgICAgICAgICAgICBpZiAoIGNvbG9yLmFycmF5Lmxlbmd0aCA+IDAgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvci5hcnJheSwgY29sb3Iuc3RyaWRlICkgKTtcbiAgICAgICAgICAgICAgICBpZiAoIHV2LmFycmF5Lmxlbmd0aCA+IDAgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1di5hcnJheSwgdXYuc3RyaWRlICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHNraW5JbmRleC5hcnJheS5sZW5ndGggPiAwICkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnc2tpbkluZGV4JywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHNraW5JbmRleC5hcnJheSwgc2tpbkluZGV4LnN0cmlkZSApICk7XG4gICAgICAgICAgICAgICAgaWYgKCBza2luV2VpZ2h0LmFycmF5Lmxlbmd0aCA+IDAgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdza2luV2VpZ2h0JywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHNraW5XZWlnaHQuYXJyYXksIHNraW5XZWlnaHQuc3RyaWRlICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBidWlsZC5kYXRhID0gZ2VvbWV0cnk7XG4gICAgICAgICAgICAgICAgYnVpbGQudHlwZSA9IHByaW1pdGl2ZXNbIDAgXS50eXBlO1xuICAgICAgICAgICAgICAgIGJ1aWxkLm1hdGVyaWFsS2V5cyA9IG1hdGVyaWFsS2V5cztcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGQ7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2UsIG9mZnNldCwgYXJyYXkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGluZGljZXMgPSBwcmltaXRpdmUucDtcbiAgICAgICAgICAgICAgICB2YXIgc3RyaWRlID0gcHJpbWl0aXZlLnN0cmlkZTtcbiAgICAgICAgICAgICAgICB2YXIgdmNvdW50ID0gcHJpbWl0aXZlLnZjb3VudDtcbiAgICBcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwdXNoVmVjdG9yKCBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBpbmRpY2VzWyBpICsgb2Zmc2V0IF0gKiBzb3VyY2VTdHJpZGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBpbmRleCArIHNvdXJjZVN0cmlkZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheS5wdXNoKCBzb3VyY2VBcnJheVsgaW5kZXggXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtYXhjb3VudCA9IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZUFycmF5ID0gc291cmNlLmFycmF5O1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VTdHJpZGUgPSBzb3VyY2Uuc3RyaWRlO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlLnZjb3VudCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB2Y291bnQubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IHZjb3VudFsgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjb3VudCA9PT0gNCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGluZGV4ICsgc3RyaWRlICogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGluZGV4ICsgc3RyaWRlICogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGluZGV4ICsgc3RyaWRlICogMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGluZGV4ICsgc3RyaWRlICogMztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNoVmVjdG9yKCBhICk7IHB1c2hWZWN0b3IoIGIgKTsgcHVzaFZlY3RvciggZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hWZWN0b3IoIGIgKTsgcHVzaFZlY3RvciggYyApOyBwdXNoVmVjdG9yKCBkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBjb3VudCA9PT0gMyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGluZGV4ICsgc3RyaWRlICogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGluZGV4ICsgc3RyaWRlICogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGluZGV4ICsgc3RyaWRlICogMjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNoVmVjdG9yKCBhICk7IHB1c2hWZWN0b3IoIGIgKTsgcHVzaFZlY3RvciggYyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhjb3VudCA9IE1hdGgubWF4KCBtYXhjb3VudCwgY291bnQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IHN0cmlkZSAqIGNvdW50O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF4Y291bnQgPiAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBHZW9tZXRyeSBoYXMgZmFjZXMgd2l0aCBtb3JlIHRoYW4gNCB2ZXJ0aWNlcy4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaFZlY3RvciggaSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0R2VvbWV0cnkoIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggbGlicmFyeS5nZW9tZXRyaWVzWyBpZCBdLCBidWlsZEdlb21ldHJ5ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBraW5lbWF0aWNzXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUtpbmVtYXRpY3NNb2RlbCggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB4bWwuZ2V0QXR0cmlidXRlKCAnbmFtZScgKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgam9pbnRzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgbGlua3M6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZWNobmlxdWVfY29tbW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUtpbmVtYXRpY3NUZWNobmlxdWVDb21tb24oIGNoaWxkLCBkYXRhICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbGlicmFyeS5raW5lbWF0aWNzTW9kZWxzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEtpbmVtYXRpY3NNb2RlbCggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEuYnVpbGQgIT09IHVuZGVmaW5lZCApIHJldHVybiBkYXRhLmJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0S2luZW1hdGljc01vZGVsKCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkua2luZW1hdGljc01vZGVsc1sgaWQgXSwgYnVpbGRLaW5lbWF0aWNzTW9kZWwgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlS2luZW1hdGljc1RlY2huaXF1ZUNvbW1vbiggeG1sLCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2pvaW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmpvaW50c1sgY2hpbGQuZ2V0QXR0cmlidXRlKCAnc2lkJyApIF0gPSBwYXJzZUtpbmVtYXRpY3NKb2ludCggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGlua3MucHVzaCggcGFyc2VLaW5lbWF0aWNzTGluayggY2hpbGQgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VLaW5lbWF0aWNzSm9pbnQoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcmlzbWF0aWMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmV2b2x1dGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBwYXJzZUtpbmVtYXRpY3NKb2ludFBhcmFtZXRlciggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlS2luZW1hdGljc0pvaW50UGFyYW1ldGVyKCB4bWwsIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZDogeG1sLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogeG1sLmdldEF0dHJpYnV0ZSggJ25hbWUnICkgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGF4aXM6IG5ldyBUSFJFRS5WZWN0b3IzKCksXG4gICAgICAgICAgICAgICAgICAgIGxpbWl0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiAwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHhtbC5ub2RlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgemVyb1Bvc2l0aW9uOiAwLFxuICAgICAgICAgICAgICAgICAgICBtaWRkbGVQb3NpdGlvbjogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXhpcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5heGlzLmZyb21BcnJheSggYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbWl0cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IGNoaWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnbWF4JyApWyAwIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbiA9IGNoaWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnbWluJyApWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5saW1pdHMubWF4ID0gcGFyc2VGbG9hdCggbWF4LnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5saW1pdHMubWluID0gcGFyc2VGbG9hdCggbWluLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gaWYgbWluIGlzIGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbiBtYXgsIGNvbnNpZGVyIHRoZSBqb2ludCBzdGF0aWNcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEubGltaXRzLm1pbiA+PSBkYXRhLmxpbWl0cy5tYXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdGljID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIG1pZGRsZSBwb3NpdGlvblxuICAgIFxuICAgICAgICAgICAgICAgIGRhdGEubWlkZGxlUG9zaXRpb24gPSAoIGRhdGEubGltaXRzLm1pbiArIGRhdGEubGltaXRzLm1heCApIC8gMi4wO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VLaW5lbWF0aWNzTGluayggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBzaWQ6IHhtbC5nZXRBdHRyaWJ1dGUoICdzaWQnICksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHhtbC5nZXRBdHRyaWJ1dGUoICduYW1lJyApIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybXM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRhY2htZW50X2Z1bGwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYXR0YWNobWVudHMucHVzaCggcGFyc2VLaW5lbWF0aWNzQXR0YWNobWVudCggY2hpbGQgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zbGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHJhbnNmb3Jtcy5wdXNoKCBwYXJzZUtpbmVtYXRpY3NUcmFuc2Zvcm0oIGNoaWxkICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlS2luZW1hdGljc0F0dGFjaG1lbnQoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgam9pbnQ6IHhtbC5nZXRBdHRyaWJ1dGUoICdqb2ludCcgKS5zcGxpdCggJy8nICkucG9wKCksXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBsaW5rczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGlua3MucHVzaCggcGFyc2VLaW5lbWF0aWNzTGluayggY2hpbGQgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zbGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHJhbnNmb3Jtcy5wdXNoKCBwYXJzZUtpbmVtYXRpY3NUcmFuc2Zvcm0oIGNoaWxkICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlS2luZW1hdGljc1RyYW5zZm9ybSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB4bWwubm9kZU5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCB4bWwudGV4dENvbnRlbnQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9iaiA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9iai5mcm9tQXJyYXkoIGFycmF5ICkudHJhbnNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJhbnNsYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub2JqID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub2JqLmZyb21BcnJheSggYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vYmogPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vYmouZnJvbUFycmF5KCBhcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hbmdsZSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoIGFycmF5WyAzIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlS2luZW1hdGljc1NjZW5lKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJpbmRKb2ludEF4aXM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiaW5kX2pvaW50X2F4aXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYmluZEpvaW50QXhpcy5wdXNoKCBwYXJzZUtpbmVtYXRpY3NCaW5kSm9pbnRBeGlzKCBjaGlsZCApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbGlicmFyeS5raW5lbWF0aWNzU2NlbmVzWyBwYXJzZUlkKCB4bWwuZ2V0QXR0cmlidXRlKCAndXJsJyApICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUtpbmVtYXRpY3NCaW5kSm9pbnRBeGlzKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogeG1sLmdldEF0dHJpYnV0ZSggJ3RhcmdldCcgKS5zcGxpdCggJy8nICkucG9wKClcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F4aXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbSA9IGNoaWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAncGFyYW0nIClbIDAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmF4aXMgPSBwYXJhbS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wSm9pbnRJbmRleCA9IGRhdGEuYXhpcy5zcGxpdCggJ2luc3RfJyApLnBvcCgpLnNwbGl0KCAnYXhpcycgKVsgMCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuam9pbnRJbmRleCA9IHRtcEpvaW50SW5kZXguc3Vic3RyKCAwLCB0bXBKb2ludEluZGV4Lmxlbmd0aCAtIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkS2luZW1hdGljc1NjZW5lKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZGF0YS5idWlsZCAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIGRhdGEuYnVpbGQ7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRLaW5lbWF0aWNzU2NlbmUoIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggbGlicmFyeS5raW5lbWF0aWNzU2NlbmVzWyBpZCBdLCBidWlsZEtpbmVtYXRpY3NTY2VuZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBLaW5lbWF0aWNzKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBraW5lbWF0aWNzTW9kZWxJZCA9IE9iamVjdC5rZXlzKCBsaWJyYXJ5LmtpbmVtYXRpY3NNb2RlbHMgKVsgMCBdO1xuICAgICAgICAgICAgICAgIHZhciBraW5lbWF0aWNzU2NlbmVJZCA9IE9iamVjdC5rZXlzKCBsaWJyYXJ5LmtpbmVtYXRpY3NTY2VuZXMgKVsgMCBdO1xuICAgICAgICAgICAgICAgIHZhciB2aXN1YWxTY2VuZUlkID0gT2JqZWN0LmtleXMoIGxpYnJhcnkudmlzdWFsU2NlbmVzIClbIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGtpbmVtYXRpY3NNb2RlbElkID09PSB1bmRlZmluZWQgfHwga2luZW1hdGljc1NjZW5lSWQgPT09IHVuZGVmaW5lZCApIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIga2luZW1hdGljc01vZGVsID0gZ2V0S2luZW1hdGljc01vZGVsKCBraW5lbWF0aWNzTW9kZWxJZCApO1xuICAgICAgICAgICAgICAgIHZhciBraW5lbWF0aWNzU2NlbmUgPSBnZXRLaW5lbWF0aWNzU2NlbmUoIGtpbmVtYXRpY3NTY2VuZUlkICk7XG4gICAgICAgICAgICAgICAgdmFyIHZpc3VhbFNjZW5lID0gZ2V0VmlzdWFsU2NlbmUoIHZpc3VhbFNjZW5lSWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYmluZEpvaW50QXhpcyA9IGtpbmVtYXRpY3NTY2VuZS5iaW5kSm9pbnRBeGlzO1xuICAgICAgICAgICAgICAgIHZhciBqb2ludE1hcCA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGJpbmRKb2ludEF4aXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXMgPSBiaW5kSm9pbnRBeGlzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSByZXN1bHQgb2YgdGhlIGZvbGxvd2luZyBxdWVyeSBpcyBhbiBlbGVtZW50IG9mIHR5cGUgJ3RyYW5zbGF0ZScsICdyb3RhdGUnLCdzY2FsZScgb3IgJ21hdHJpeCdcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBjb2xsYWRhLnF1ZXJ5U2VsZWN0b3IoICdbc2lkPVwiJyArIGF4aXMudGFyZ2V0ICsgJ1wiXScgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0YXJnZXRFbGVtZW50ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBwYXJlbnQgb2YgdGhlIHRyYW5zZnJvbSBlbGVtZW50XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50VmlzdWFsRWxlbWVudCA9IHRhcmdldEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbm5lY3QgdGhlIGpvaW50IG9mIHRoZSBraW5lbWF0aWNzIG1vZGVsIHdpdGggdGhlIGVsZW1lbnQgaW4gdGhlIHZpc3VhbCBzY2VuZVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdCggYXhpcy5qb2ludEluZGV4LCBwYXJlbnRWaXN1YWxFbGVtZW50ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29ubmVjdCggam9pbnRJbmRleCwgdmlzdWFsRWxlbWVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc3VhbEVsZW1lbnROYW1lID0gdmlzdWFsRWxlbWVudC5nZXRBdHRyaWJ1dGUoICduYW1lJyApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnQgPSBraW5lbWF0aWNzTW9kZWwuam9pbnRzWyBqb2ludEluZGV4IF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZpc3VhbFNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggb2JqZWN0Lm5hbWUgPT09IHZpc3VhbEVsZW1lbnROYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW50TWFwWyBqb2ludEluZGV4IF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogb2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zOiBidWlsZFRyYW5zZm9ybUxpc3QoIHZpc3VhbEVsZW1lbnQgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnQ6IGpvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogam9pbnQuemVyb1Bvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbTAgPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuICAgIFxuICAgICAgICAgICAgICAgIGtpbmVtYXRpY3MgPSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGpvaW50czoga2luZW1hdGljc01vZGVsICYmIGtpbmVtYXRpY3NNb2RlbC5qb2ludHMsXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGdldEpvaW50VmFsdWU6IGZ1bmN0aW9uICggam9pbnRJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2ludERhdGEgPSBqb2ludE1hcFsgam9pbnRJbmRleCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBqb2ludERhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpvaW50RGF0YS5wb3NpdGlvbjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogSm9pbnQgJyArIGpvaW50SW5kZXggKyAnIGRvZXNuXFwndCBleGlzdC4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHNldEpvaW50VmFsdWU6IGZ1bmN0aW9uICggam9pbnRJbmRleCwgdmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnREYXRhID0gam9pbnRNYXBbIGpvaW50SW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggam9pbnREYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2ludCA9IGpvaW50RGF0YS5qb2ludDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID4gam9pbnQubGltaXRzLm1heCB8fCB2YWx1ZSA8IGpvaW50LmxpbWl0cy5taW4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IEpvaW50ICcgKyBqb2ludEluZGV4ICsgJyB2YWx1ZSAnICsgdmFsdWUgKyAnIG91dHNpZGUgb2YgbGltaXRzIChtaW46ICcgKyBqb2ludC5saW1pdHMubWluICsgJywgbWF4OiAnICsgam9pbnQubGltaXRzLm1heCArICcpLicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBqb2ludC5zdGF0aWMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IEpvaW50ICcgKyBqb2ludEluZGV4ICsgJyBpcyBzdGF0aWMuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBqb2ludERhdGEub2JqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXhpcyA9IGpvaW50LmF4aXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1zID0gam9pbnREYXRhLnRyYW5zZm9ybXM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeC5pZGVudGl0eSgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlYWNoIHVwZGF0ZSwgd2UgaGF2ZSB0byBhcHBseSBhbGwgdHJhbnNmb3JtcyBpbiB0aGUgY29ycmVjdCBvcmRlclxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0cmFuc2Zvcm1zLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1zWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIGNvbm5lY3Rpb24gb2YgdGhlIHRyYW5zZm9ybSBub2RlIHdpdGggYSBqb2ludCwgYXBwbHkgdGhlIGpvaW50IHZhbHVlXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRyYW5zZm9ybS5zaWQgJiYgdHJhbnNmb3JtLnNpZC5pbmRleE9mKCBqb2ludEluZGV4ICkgIT09IC0gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBqb2ludC50eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZXZvbHV0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXgubXVsdGlwbHkoIG0wLm1ha2VSb3RhdGlvbkF4aXMoIGF4aXMsIFRIUkVFLk1hdGguZGVnVG9SYWQoIHZhbHVlICkgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ByaXNtYXRpYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXgubXVsdGlwbHkoIG0wLm1ha2VUcmFuc2xhdGlvbiggYXhpcy54ICogdmFsdWUsIGF4aXMueSAqIHZhbHVlLCBheGlzLnogKiB2YWx1ZSApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IFVua25vd24gam9pbnQgdHlwZTogJyArIGpvaW50LnR5cGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdHJhbnNmb3JtLnR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXgubXVsdGlwbHkoIHRyYW5zZm9ybS5vYmogKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4Lm11bHRpcGx5KCBtMC5tYWtlVHJhbnNsYXRpb24oIHRyYW5zZm9ybS5vYmoueCwgdHJhbnNmb3JtLm9iai55LCB0cmFuc2Zvcm0ub2JqLnogKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeC5zY2FsZSggdHJhbnNmb3JtLm9iaiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXgubXVsdGlwbHkoIG0wLm1ha2VSb3RhdGlvbkF4aXMoIHRyYW5zZm9ybS5vYmosIHRyYW5zZm9ybS5hbmdsZSApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdHJpeC5jb3B5KCBtYXRyaXggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdHJpeC5kZWNvbXBvc2UoIG9iamVjdC5wb3NpdGlvbiwgb2JqZWN0LnF1YXRlcm5pb24sIG9iamVjdC5zY2FsZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2ludE1hcFsgam9pbnRJbmRleCBdLnBvc2l0aW9uID0gdmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6ICcgKyBqb2ludEluZGV4ICsgJyBkb2VzIG5vdCBleGlzdC4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRUcmFuc2Zvcm1MaXN0KCBub2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1zID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHhtbCA9IGNvbGxhZGEucXVlcnlTZWxlY3RvciggJ1tpZD1cIicgKyBub2RlLmlkICsgJ1wiXScgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpLmZyb21BcnJheSggYXJyYXkgKS50cmFuc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zLnB1c2goIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkOiBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzaWQnICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNoaWxkLm5vZGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmo6IG1hdHJpeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zbGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KCBhcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybXMucHVzaCgge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWQ6IGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY2hpbGQubm9kZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iajogdmVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBwYXJzZUZsb2F0cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoIGFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuZ2xlID0gVEhSRUUuTWF0aC5kZWdUb1JhZCggYXJyYXlbIDMgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybXMucHVzaCgge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWQ6IGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY2hpbGQubm9kZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iajogdmVjdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmdsZTogYW5nbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybXM7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBub2Rlc1xuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcGFyZU5vZGVzKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0geG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnbm9kZScgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgYWxsIG5vZGUgZWxlbWVudHMgaGF2ZSBpZCBhdHRyaWJ1dGVzXG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggZWxlbWVudC5oYXNBdHRyaWJ1dGUoICdpZCcgKSA9PT0gZmFsc2UgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ2lkJywgZ2VuZXJhdGVJZCgpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICAgICAgICAgIHZhciB2ZWN0b3IgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VOb2RlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHhtbC5nZXRBdHRyaWJ1dGUoICduYW1lJyApIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB4bWwuZ2V0QXR0cmlidXRlKCAndHlwZScgKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHhtbC5nZXRBdHRyaWJ1dGUoICdpZCcgKSxcbiAgICAgICAgICAgICAgICAgICAgc2lkOiB4bWwuZ2V0QXR0cmlidXRlKCAnc2lkJyApLFxuICAgICAgICAgICAgICAgICAgICBtYXRyaXg6IG5ldyBUSFJFRS5NYXRyaXg0KCksXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VDYW1lcmFzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VDb250cm9sbGVyczogW10sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlTGlnaHRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VHZW9tZXRyaWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VOb2RlczogW10sXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybXM6IHt9XG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdub2RlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGVzLnB1c2goIGNoaWxkLmdldEF0dHJpYnV0ZSggJ2lkJyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VOb2RlKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zdGFuY2VfY2FtZXJhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluc3RhbmNlQ2FtZXJhcy5wdXNoKCBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICd1cmwnICkgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zdGFuY2VfY29udHJvbGxlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbnN0YW5jZUNvbnRyb2xsZXJzLnB1c2goIHBhcnNlTm9kZUluc3RhbmNlKCBjaGlsZCApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnN0YW5jZV9saWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbnN0YW5jZUxpZ2h0cy5wdXNoKCBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICd1cmwnICkgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zdGFuY2VfZ2VvbWV0cnknOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaW5zdGFuY2VHZW9tZXRyaWVzLnB1c2goIHBhcnNlTm9kZUluc3RhbmNlKCBjaGlsZCApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnN0YW5jZV9ub2RlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluc3RhbmNlTm9kZXMucHVzaCggcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAndXJsJyApICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXRyaXgubXVsdGlwbHkoIG1hdHJpeC5mcm9tQXJyYXkoIGFycmF5ICkudHJhbnNwb3NlKCkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRyYW5zZm9ybXNbIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSBdID0gY2hpbGQubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3Rvci5mcm9tQXJyYXkoIGFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXRyaXgubXVsdGlwbHkoIG1hdHJpeC5tYWtlVHJhbnNsYXRpb24oIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHJhbnNmb3Jtc1sgY2hpbGQuZ2V0QXR0cmlidXRlKCAnc2lkJyApIF0gPSBjaGlsZC5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuZ2xlID0gVEhSRUUuTWF0aC5kZWdUb1JhZCggYXJyYXlbIDMgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWF0cml4Lm11bHRpcGx5KCBtYXRyaXgubWFrZVJvdGF0aW9uQXhpcyggdmVjdG9yLmZyb21BcnJheSggYXJyYXkgKSwgYW5nbGUgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHJhbnNmb3Jtc1sgY2hpbGQuZ2V0QXR0cmlidXRlKCAnc2lkJyApIF0gPSBjaGlsZC5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBwYXJzZUZsb2F0cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hdHJpeC5zY2FsZSggdmVjdG9yLmZyb21BcnJheSggYXJyYXkgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHJhbnNmb3Jtc1sgY2hpbGQuZ2V0QXR0cmlidXRlKCAnc2lkJyApIF0gPSBjaGlsZC5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2V4dHJhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIGNoaWxkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbGlicmFyeS5ub2Rlc1sgZGF0YS5pZCBdID0gZGF0YTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlTm9kZUluc3RhbmNlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBwYXJzZUlkKCB4bWwuZ2V0QXR0cmlidXRlKCAndXJsJyApICksXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsczoge30sXG4gICAgICAgICAgICAgICAgICAgIHNrZWxldG9uczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiaW5kX21hdGVyaWFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VzID0gY2hpbGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdpbnN0YW5jZV9tYXRlcmlhbCcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPCBpbnN0YW5jZXMubGVuZ3RoOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbIGogXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN5bWJvbCA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZSggJ3N5bWJvbCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZSggJ3RhcmdldCcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXRlcmlhbHNbIHN5bWJvbCBdID0gcGFyc2VJZCggdGFyZ2V0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2tlbGV0b24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc2tlbGV0b25zLnB1c2goIHBhcnNlSWQoIGNoaWxkLnRleHRDb250ZW50ICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZFNrZWxldG9uKCBza2VsZXRvbnMsIGpvaW50cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYm9uZURhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc29ydGVkQm9uZURhdGEgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgaSwgaiwgZGF0YTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBhIHNrZWxldG9uIGNhbiBoYXZlIG11bHRpcGxlIHJvb3QgYm9uZXMuIGNvbGxhZGEgZXhwcmVzc2VzIHRoaXNcbiAgICAgICAgICAgICAgICAvLyBzaXR1dGF0aW9uIHdpdGggbXVsdGlwbGUgXCJza2VsZXRvblwiIHRhZ3MgcGVyIGNvbnRyb2xsZXIgaW5zdGFuY2VcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IHNrZWxldG9ucy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBza2VsZXRvbiA9IHNrZWxldG9uc1sgaSBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IGdldE5vZGUoIHNrZWxldG9uICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldHVwIGJvbmUgZGF0YSBmb3IgYSBzaW5nbGUgYm9uZSBoaWVyYXJjaHlcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRCb25lSGllcmFyY2h5KCByb290LCBqb2ludHMsIGJvbmVEYXRhICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIHNvcnQgYm9uZSBkYXRhICh0aGUgb3JkZXIgaXMgZGVmaW5lZCBpbiB0aGUgY29ycmVzcG9uZGluZyBjb250cm9sbGVyKVxuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgam9pbnRzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggaiA9IDA7IGogPCBib25lRGF0YS5sZW5ndGg7IGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYm9uZURhdGFbIGogXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGF0YS5ib25lLm5hbWUgPT09IGpvaW50c1sgaSBdLm5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkQm9uZURhdGFbIGkgXSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9jZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCB1bnByb2Nlc3NlZCBib25lIGRhdGEgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgYm9uZURhdGEubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYm9uZURhdGFbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBkYXRhLnByb2Nlc3NlZCA9PT0gZmFsc2UgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRCb25lRGF0YS5wdXNoKCBkYXRhICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2Nlc3NlZCA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gc2V0dXAgYXJyYXlzIGZvciBza2VsZXRvbiBjcmVhdGlvblxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBib25lcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBib25lSW52ZXJzZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IHNvcnRlZEJvbmVEYXRhLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHNvcnRlZEJvbmVEYXRhWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJvbmVzLnB1c2goIGRhdGEuYm9uZSApO1xuICAgICAgICAgICAgICAgICAgICBib25lSW52ZXJzZXMucHVzaCggZGF0YS5ib25lSW52ZXJzZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLlNrZWxldG9uKCBib25lcywgYm9uZUludmVyc2VzICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEJvbmVIaWVyYXJjaHkoIHJvb3QsIGpvaW50cywgYm9uZURhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gc2V0dXAgYm9uZSBkYXRhIGZyb20gdmlzdWFsIHNjZW5lXG4gICAgXG4gICAgICAgICAgICAgICAgcm9vdC50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggb2JqZWN0LmlzQm9uZSA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lSW52ZXJzZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHJpZXZlIHRoZSBib25lSW52ZXJzZSBmcm9tIHRoZSBjb250cm9sbGVyIGRhdGFcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGpvaW50cy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW50ID0gam9pbnRzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBqb2ludC5uYW1lID09PSBvYmplY3QubmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZUludmVyc2UgPSBqb2ludC5ib25lSW52ZXJzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBib25lSW52ZXJzZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIHRoZXJlIGNhbiBiZSBqb2ludHMgaW4gdGhlIHZpc3VhbCBzY2VuZSB0aGF0IGFyZSBub3QgcGFydCBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3JyZXNwb25kaW5nIGNvbnRyb2xsZXIuIEluIHRoaXMgY2FzZSwgd2UgaGF2ZSB0byBjcmVhdGUgYSBkdW1teSBib25lSW52ZXJzZSBtYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdGhlIHJlc3BlY3RpdmUgYm9uZS4gVGhpcyBib25lIHdvbid0IGFmZmVjdCBhbnkgdmVydGljZXMsIGJlY2F1c2UgdGhlcmUgYXJlIG5vIHNraW4gaW5kaWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB3ZWlnaHRzIGRlZmluZWQgZm9yIGl0LiBCdXQgd2Ugc3RpbGwgaGF2ZSB0byBhZGQgdGhlIGJvbmUgdG8gdGhlIHNvcnRlZCBib25lIGxpc3QgaW4gb3JkZXIgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgYSBjb3JyZWN0IGFuaW1hdGlvbiBvZiB0aGUgbW9kZWwuXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmVJbnZlcnNlID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvbmVEYXRhLnB1c2goIHsgYm9uZTogb2JqZWN0LCBib25lSW52ZXJzZTogYm9uZUludmVyc2UsIHByb2Nlc3NlZDogZmFsc2UgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGROb2RlKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1hdHJpeCA9IGRhdGEubWF0cml4O1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IGRhdGEubm9kZXM7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlQ2FtZXJhcyA9IGRhdGEuaW5zdGFuY2VDYW1lcmFzO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUNvbnRyb2xsZXJzID0gZGF0YS5pbnN0YW5jZUNvbnRyb2xsZXJzO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUxpZ2h0cyA9IGRhdGEuaW5zdGFuY2VMaWdodHM7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlR2VvbWV0cmllcyA9IGRhdGEuaW5zdGFuY2VHZW9tZXRyaWVzO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZU5vZGVzID0gZGF0YS5pbnN0YW5jZU5vZGVzO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIG5vZGVzXG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKCBnZXROb2RlKCBub2Rlc1sgaSBdICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UgY2FtZXJhc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGluc3RhbmNlQ2FtZXJhcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VDYW1lcmEgPSBnZXRDYW1lcmEoIGluc3RhbmNlQ2FtZXJhc1sgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggaW5zdGFuY2VDYW1lcmEgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RzLnB1c2goIGluc3RhbmNlQ2FtZXJhLmNsb25lKCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZSBjb250cm9sbGVyc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGluc3RhbmNlQ29udHJvbGxlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VDb250cm9sbGVyc1sgaSBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGdldENvbnRyb2xsZXIoIGluc3RhbmNlLmlkICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyaWVzID0gZ2V0R2VvbWV0cnkoIGNvbnRyb2xsZXIuaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld09iamVjdHMgPSBidWlsZE9iamVjdHMoIGdlb21ldHJpZXMsIGluc3RhbmNlLm1hdGVyaWFscyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2tlbGV0b25zID0gaW5zdGFuY2Uuc2tlbGV0b25zO1xuICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnRzID0gY29udHJvbGxlci5za2luLmpvaW50cztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNrZWxldG9uID0gYnVpbGRTa2VsZXRvbiggc2tlbGV0b25zLCBqb2ludHMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwLCBqbCA9IG5ld09iamVjdHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gbmV3T2JqZWN0c1sgaiBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuYmluZCggc2tlbGV0b24sIGNvbnRyb2xsZXIuc2tpbi5iaW5kTWF0cml4ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm5vcm1hbGl6ZVNraW5XZWlnaHRzKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RzLnB1c2goIG9iamVjdCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlIGxpZ2h0c1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGluc3RhbmNlTGlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUxpZ2h0ID0gZ2V0TGlnaHQoIGluc3RhbmNlTGlnaHRzWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbnN0YW5jZUxpZ2h0ICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKCBpbnN0YW5jZUxpZ2h0LmNsb25lKCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZSBnZW9tZXRyaWVzXG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gaW5zdGFuY2VHZW9tZXRyaWVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlR2VvbWV0cmllc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhIHNpbmdsZSBnZW9tZXRyeSBpbnN0YW5jZSBpbiBjb2xsYWRhIGNhbiBsZWFkIHRvIG11bHRpcGxlIG9iamVjdDNEcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgY2FzZSB3aGVuIHByaW1pdGl2ZXMgYXJlIGNvbWJpbmVkIGxpa2UgdHJpYW5nbGVzIGFuZCBsaW5lc1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cmllcyA9IGdldEdlb21ldHJ5KCBpbnN0YW5jZS5pZCApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3T2JqZWN0cyA9IGJ1aWxkT2JqZWN0cyggZ2VvbWV0cmllcywgaW5zdGFuY2UubWF0ZXJpYWxzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMCwgamwgPSBuZXdPYmplY3RzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKCBuZXdPYmplY3RzWyBqIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZSBub2Rlc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGluc3RhbmNlTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKCBnZXROb2RlKCBpbnN0YW5jZU5vZGVzWyBpIF0gKS5jbG9uZSgpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBvYmplY3Q7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub2Rlcy5sZW5ndGggPT09IDAgJiYgb2JqZWN0cy5sZW5ndGggPT09IDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdHNbIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSAoIHR5cGUgPT09ICdKT0lOVCcgKSA/IG5ldyBUSFJFRS5Cb25lKCkgOiBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuYWRkKCBvYmplY3RzWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBvYmplY3QubmFtZSA9ICggdHlwZSA9PT0gJ0pPSU5UJyApID8gZGF0YS5zaWQgOiBkYXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm1hdHJpeC5jb3B5KCBtYXRyaXggKTtcbiAgICAgICAgICAgICAgICBvYmplY3QubWF0cml4LmRlY29tcG9zZSggb2JqZWN0LnBvc2l0aW9uLCBvYmplY3QucXVhdGVybmlvbiwgb2JqZWN0LnNjYWxlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVNYXRlcmlhbEJpbmRpbmcoIGtleXMsIGluc3RhbmNlTWF0ZXJpYWxzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbHMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IGluc3RhbmNlTWF0ZXJpYWxzWyBrZXlzWyBpIF0gXTtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzLnB1c2goIGdldE1hdGVyaWFsKCBpZCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbHM7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZE9iamVjdHMoIGdlb21ldHJpZXMsIGluc3RhbmNlTWF0ZXJpYWxzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIHR5cGUgaW4gZ2VvbWV0cmllcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gZ2VvbWV0cmllc1sgdHlwZSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxzID0gcmVzb2x2ZU1hdGVyaWFsQmluZGluZyggZ2VvbWV0cnkubWF0ZXJpYWxLZXlzLCBpbnN0YW5jZU1hdGVyaWFscyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgY2FzZSBpZiBubyBtYXRlcmlhbHMgYXJlIGRlZmluZWRcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbHMubGVuZ3RoID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlID09PSAnbGluZXMnIHx8IHR5cGUgPT09ICdsaW5lc3RyaXBzJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMucHVzaCggbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzLnB1c2goIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVnYXJkIHNraW5uaW5nXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBza2lubmluZyA9ICggZ2VvbWV0cnkuZGF0YS5hdHRyaWJ1dGVzLnNraW5JbmRleCAhPT0gdW5kZWZpbmVkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2tpbm5pbmcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBtYXRlcmlhbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHNbIGkgXS5za2lubmluZyA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hvb3NlIGJldHdlZW4gYSBzaW5nbGUgb3IgbXVsdGkgbWF0ZXJpYWxzIChtYXRlcmlhbCBhcnJheSlcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gKCBtYXRlcmlhbHMubGVuZ3RoID09PSAxICkgPyBtYXRlcmlhbHNbIDAgXSA6IG1hdGVyaWFscztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbm93IGNyZWF0ZSBhIHNwZWNpZmljIDNEIG9iamVjdFxuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCB0eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluZXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMoIGdlb21ldHJ5LmRhdGEsIG1hdGVyaWFsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5lc3RyaXBzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSBuZXcgVEhSRUUuTGluZSggZ2VvbWV0cnkuZGF0YSwgbWF0ZXJpYWwgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RyaWFuZ2xlcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwb2x5bGlzdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBza2lubmluZyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0ID0gbmV3IFRIUkVFLlNraW5uZWRNZXNoKCBnZW9tZXRyeS5kYXRhLCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeS5kYXRhLCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBvYmplY3RzLnB1c2goIG9iamVjdCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0cztcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5vZGUoIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggbGlicmFyeS5ub2Rlc1sgaWQgXSwgYnVpbGROb2RlICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyB2aXN1YWwgc2NlbmVzXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVZpc3VhbFNjZW5lKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHhtbC5nZXRBdHRyaWJ1dGUoICduYW1lJyApLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHByZXBhcmVOb2RlcyggeG1sICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHhtbCwgJ25vZGUnICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNoaWxkcmVuLnB1c2goIHBhcnNlTm9kZSggZWxlbWVudHNbIGkgXSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkudmlzdWFsU2NlbmVzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZFZpc3VhbFNjZW5lKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBncm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgICAgICAgICAgIGdyb3VwLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZGF0YS5jaGlsZHJlbjtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQuaWQgPT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5hZGQoIGJ1aWxkTm9kZSggY2hpbGQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW4gSUQsIGxldCdzIHRyeSB0byBnZXQgdGhlIGZpbmlzaGVkIGJ1aWxkIChlLmcuIGpvaW50cyBhcmUgYWxyZWFkeSBidWlsZClcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmFkZCggZ2V0Tm9kZSggY2hpbGQuaWQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZpc3VhbFNjZW5lKCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkudmlzdWFsU2NlbmVzWyBpZCBdLCBidWlsZFZpc3VhbFNjZW5lICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBzY2VuZXNcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlU2NlbmUoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBnZXRFbGVtZW50c0J5VGFnTmFtZSggeG1sLCAnaW5zdGFuY2VfdmlzdWFsX3NjZW5lJyApWyAwIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFZpc3VhbFNjZW5lKCBwYXJzZUlkKCBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoICd1cmwnICkgKSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBBbmltYXRpb25zKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjbGlwcyA9IGxpYnJhcnkuY2xpcHM7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBpc0VtcHR5KCBjbGlwcyApID09PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGlzRW1wdHkoIGxpYnJhcnkuYW5pbWF0aW9ucyApID09PSBmYWxzZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBhbmltYXRpb25zIGJ1dCBubyBjbGlwcywgd2UgY3JlYXRlIGEgZGVmYXVsdCBjbGlwIGZvciBwbGF5YmFja1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGlkIGluIGxpYnJhcnkuYW5pbWF0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uVHJhY2tzID0gZ2V0QW5pbWF0aW9uKCBpZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGFuaW1hdGlvblRyYWNrcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja3MucHVzaCggYW5pbWF0aW9uVHJhY2tzWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goIG5ldyBUSFJFRS5BbmltYXRpb25DbGlwKCAnZGVmYXVsdCcsIC0gMSwgdHJhY2tzICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpZCBpbiBjbGlwcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaCggZ2V0QW5pbWF0aW9uQ2xpcCggaWQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgY29uc29sZS50aW1lKCAnVEhSRUUuQ29sbGFkYUxvYWRlcicgKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggdGV4dC5sZW5ndGggPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2NlbmU6IG5ldyBUSFJFRS5TY2VuZSgpIH07XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBjb25zb2xlLnRpbWUoICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBET01QYXJzZXInICk7XG4gICAgXG4gICAgICAgICAgICB2YXIgeG1sID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyggdGV4dCwgJ2FwcGxpY2F0aW9uL3htbCcgKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZCggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IERPTVBhcnNlcicgKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBjb2xsYWRhID0gZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHhtbCwgJ0NPTExBREEnIClbIDAgXTtcbiAgICBcbiAgICAgICAgICAgIC8vIG1ldGFkYXRhXG4gICAgXG4gICAgICAgICAgICB2YXIgdmVyc2lvbiA9IGNvbGxhZGEuZ2V0QXR0cmlidXRlKCAndmVyc2lvbicgKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogRmlsZSB2ZXJzaW9uJywgdmVyc2lvbiApO1xuICAgIFxuICAgICAgICAgICAgdmFyIGFzc2V0ID0gcGFyc2VBc3NldCggZ2V0RWxlbWVudHNCeVRhZ05hbWUoIGNvbGxhZGEsICdhc3NldCcgKVsgMCBdICk7XG4gICAgICAgICAgICB2YXIgdGV4dHVyZUxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcbiAgICAgICAgICAgIHRleHR1cmVMb2FkZXIuc2V0UGF0aCggcGF0aCApLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG4gICAgXG4gICAgICAgICAgICAvL1xuICAgIFxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBraW5lbWF0aWNzID0ge307XG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgIFxuICAgICAgICAgICAgLy9cbiAgICBcbiAgICAgICAgICAgIHZhciBsaWJyYXJ5ID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IHt9LFxuICAgICAgICAgICAgICAgIGNsaXBzOiB7fSxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyczoge30sXG4gICAgICAgICAgICAgICAgaW1hZ2VzOiB7fSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiB7fSxcbiAgICAgICAgICAgICAgICBtYXRlcmlhbHM6IHt9LFxuICAgICAgICAgICAgICAgIGNhbWVyYXM6IHt9LFxuICAgICAgICAgICAgICAgIGxpZ2h0czoge30sXG4gICAgICAgICAgICAgICAgZ2VvbWV0cmllczoge30sXG4gICAgICAgICAgICAgICAgbm9kZXM6IHt9LFxuICAgICAgICAgICAgICAgIHZpc3VhbFNjZW5lczoge30sXG4gICAgICAgICAgICAgICAga2luZW1hdGljc01vZGVsczoge30sXG4gICAgICAgICAgICAgICAga2luZW1hdGljc1NjZW5lczoge31cbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICBjb25zb2xlLnRpbWUoICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBQYXJzZScgKTtcbiAgICBcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfYW5pbWF0aW9ucycsICdhbmltYXRpb24nLCBwYXJzZUFuaW1hdGlvbiApO1xuICAgICAgICAgICAgcGFyc2VMaWJyYXJ5KCBjb2xsYWRhLCAnbGlicmFyeV9hbmltYXRpb25fY2xpcHMnLCAnYW5pbWF0aW9uX2NsaXAnLCBwYXJzZUFuaW1hdGlvbkNsaXAgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfY29udHJvbGxlcnMnLCAnY29udHJvbGxlcicsIHBhcnNlQ29udHJvbGxlciApO1xuICAgICAgICAgICAgcGFyc2VMaWJyYXJ5KCBjb2xsYWRhLCAnbGlicmFyeV9pbWFnZXMnLCAnaW1hZ2UnLCBwYXJzZUltYWdlICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X2VmZmVjdHMnLCAnZWZmZWN0JywgcGFyc2VFZmZlY3QgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfbWF0ZXJpYWxzJywgJ21hdGVyaWFsJywgcGFyc2VNYXRlcmlhbCApO1xuICAgICAgICAgICAgcGFyc2VMaWJyYXJ5KCBjb2xsYWRhLCAnbGlicmFyeV9jYW1lcmFzJywgJ2NhbWVyYScsIHBhcnNlQ2FtZXJhICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X2xpZ2h0cycsICdsaWdodCcsIHBhcnNlTGlnaHQgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfZ2VvbWV0cmllcycsICdnZW9tZXRyeScsIHBhcnNlR2VvbWV0cnkgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfbm9kZXMnLCAnbm9kZScsIHBhcnNlTm9kZSApO1xuICAgICAgICAgICAgcGFyc2VMaWJyYXJ5KCBjb2xsYWRhLCAnbGlicmFyeV92aXN1YWxfc2NlbmVzJywgJ3Zpc3VhbF9zY2VuZScsIHBhcnNlVmlzdWFsU2NlbmUgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfa2luZW1hdGljc19tb2RlbHMnLCAna2luZW1hdGljc19tb2RlbCcsIHBhcnNlS2luZW1hdGljc01vZGVsICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdzY2VuZScsICdpbnN0YW5jZV9raW5lbWF0aWNzX3NjZW5lJywgcGFyc2VLaW5lbWF0aWNzU2NlbmUgKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZCggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IFBhcnNlJyApO1xuICAgIFxuICAgICAgICAgICAgY29uc29sZS50aW1lKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogQnVpbGQnICk7XG4gICAgXG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkuYW5pbWF0aW9ucywgYnVpbGRBbmltYXRpb24gKTtcbiAgICAgICAgICAgIGJ1aWxkTGlicmFyeSggbGlicmFyeS5jbGlwcywgYnVpbGRBbmltYXRpb25DbGlwICk7XG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkuY29udHJvbGxlcnMsIGJ1aWxkQ29udHJvbGxlciApO1xuICAgICAgICAgICAgYnVpbGRMaWJyYXJ5KCBsaWJyYXJ5LmltYWdlcywgYnVpbGRJbWFnZSApO1xuICAgICAgICAgICAgYnVpbGRMaWJyYXJ5KCBsaWJyYXJ5LmVmZmVjdHMsIGJ1aWxkRWZmZWN0ICk7XG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkubWF0ZXJpYWxzLCBidWlsZE1hdGVyaWFsICk7XG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkuY2FtZXJhcywgYnVpbGRDYW1lcmEgKTtcbiAgICAgICAgICAgIGJ1aWxkTGlicmFyeSggbGlicmFyeS5saWdodHMsIGJ1aWxkTGlnaHQgKTtcbiAgICAgICAgICAgIGJ1aWxkTGlicmFyeSggbGlicmFyeS5nZW9tZXRyaWVzLCBidWlsZEdlb21ldHJ5ICk7XG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkudmlzdWFsU2NlbmVzLCBidWlsZFZpc3VhbFNjZW5lICk7XG4gICAgXG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBCdWlsZCcgKTtcbiAgICBcbiAgICAgICAgICAgIHNldHVwQW5pbWF0aW9ucygpO1xuICAgICAgICAgICAgc2V0dXBLaW5lbWF0aWNzKCk7XG4gICAgXG4gICAgICAgICAgICB2YXIgc2NlbmUgPSBwYXJzZVNjZW5lKCBnZXRFbGVtZW50c0J5VGFnTmFtZSggY29sbGFkYSwgJ3NjZW5lJyApWyAwIF0gKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggYXNzZXQudXBBeGlzID09PSAnWl9VUCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgc2NlbmUucm90YXRpb24ueCA9IC0gTWF0aC5QSSAvIDI7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBzY2VuZS5zY2FsZS5tdWx0aXBseVNjYWxhciggYXNzZXQudW5pdCApO1xuICAgIFxuICAgICAgICAgICAgY29uc29sZS50aW1lRW5kKCAnVEhSRUUuQ29sbGFkYUxvYWRlcicgKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucyxcbiAgICAgICAgICAgICAgICBraW5lbWF0aWNzOiBraW5lbWF0aWNzLFxuICAgICAgICAgICAgICAgIGxpYnJhcnk6IGxpYnJhcnksXG4gICAgICAgICAgICAgICAgc2NlbmU6IHNjZW5lXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgfTsiLCJ7QmFzZUNsYXNzfSA9IHJlcXVpcmUgJy4vX0Jhc2VDbGFzcy5jb2ZmZWUnXG5cbmFjY2VwdGVkTW9kZWxQcm9wZXJ0aWVzID0gW1xuICAgICd4J1xuICAgICd5J1xuICAgICd6J1xuICAgICdyb3RhdGlvblgnXG4gICAgJ3JvdGF0aW9uWSdcbiAgICAncm90YXRpb25aJ1xuICAgICdzY2FsZSdcbiAgICAnc2NhbGVYJ1xuICAgICdzY2FsZVknXG4gICAgJ3NjYWxlWidcbiAgICAnb3B0aW9ucydcbl1cblxucmVzZXJ2ZWRTdGF0ZUVycm9yID0gKG5hbWUpIC0+XG5cdHRocm93IEVycm9yKFwiVGhlIHN0YXRlICcje25hbWV9JyBpcyBhIHJlc2VydmVkIG5hbWUuXCIpXG5cbmNsYXNzIGV4cG9ydHMuU3RhdGVzIGV4dGVuZHMgQmFzZUNsYXNzXG5cbiAgICBjb25zdHJ1Y3RvcjogKG1vZGVsKSAtPlxuICAgICAgICBzdXBlcigpXG5cbiAgICAgICAgQG1vZGVsID0gbW9kZWxcblxuICAgICAgICBAaW5pdGlhbE1vZGVsUHJvcGVydGllcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIE9iamVjdC5nZXRQcm90b3R5cGVPZiBAbW9kZWwuaW5pdGlhbFByb3BlcnRpZXNcblxuICAgICAgICBAc3RhdGVzID0gXG4gICAgICAgICAgICBkZWZhdWx0OiBAZmlsdGVyUHJvcGVydGllcyBAaW5pdGlhbE1vZGVsUHJvcGVydGllc1xuICAgICAgICAgICAgY3VycmVudDogQGZpbHRlclByb3BlcnRpZXMgQGluaXRpYWxNb2RlbFByb3BlcnRpZXNcblxuICAgIGZpbHRlclByb3BlcnRpZXM6IChwcm9wZXRpZXMpIC0+XG4gICAgICAgIG5ld1Byb3BlcnR5T2JqID0ge31cbiAgICAgICAgcHJvcGV0aWVzLm1hcCAoaykgPT5cbiAgICAgICAgICAgIGlmIGFjY2VwdGVkTW9kZWxQcm9wZXJ0aWVzLmluY2x1ZGVzIGtcbiAgICAgICAgICAgICAgICBuZXdQcm9wZXJ0eU9ialtrXSA9IEBtb2RlbFtrXVxuICAgICAgICByZXR1cm4gbmV3UHJvcGVydHlPYmpcbiAgICBcbiAgICBAZGVmaW5lICdjdXJyZW50JyxcbiAgICAgICAgZ2V0OiAtPiBAc3RhdGVzLmN1cnJlbnQsXG4gICAgICAgIHNldDogKHN0YXRlKSAtPlxuICAgICAgICAgICAgQHN0YXRlcy5wcmV2aW91cyA9IEBzdGF0ZXMuY3VycmVudFxuICAgICAgICAgICAgQHN0YXRlcy5jdXJyZW50ID0gc3RhdGVcbiAgICBcbiAgICBAZGVmaW5lICdwcmV2aW91cycsXG4gICAgICAgIGdldDogLT4gQHN0YXRlcy5wcmV2aW91cyIsIl8gPSBGcmFtZXIuX1xuXG5yZXF1aXJlICcuL2xpYi9PcmJpdENvbnRyb2xzJ1xue0Jhc2VDbGFzc30gPSByZXF1aXJlICcuL19CYXNlQ2xhc3MuY29mZmVlJ1xue0FuaW1hdGlvbn0gPSByZXF1aXJlICcuL19BbmltYXRpb24uY29mZmVlJ1xue1N0YXRlc30gPSByZXF1aXJlICcuL19TdGF0ZXMuY29mZmVlJ1xuXG5jbGFzcyBleHBvcnRzLkNhbWVyYSBleHRlbmRzIEJhc2VDbGFzc1xuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcz17fSwgc2NlbmVET00pIC0+XG4gICAgICAgIHN1cGVyKClcblxuICAgICAgICBAc2NlbmVET00gPSBzY2VuZURPTVxuXG4gICAgICAgIF8uZGVmYXVsdHMgcHJvcGVydGllcyxcbiAgICAgICAgICAgIHg6IDBcbiAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgIHo6IDUwMFxuICAgICAgICAgICAgcm90YXRpb25YOiAwXG4gICAgICAgICAgICByb3RhdGlvblk6IDBcbiAgICAgICAgICAgIHJvdGF0aW9uWjogMFxuICAgICAgICAgICAgZm92OiAzNVxuICAgICAgICAgICAgbmVhcjogMC4xXG4gICAgICAgICAgICBmYXI6IDEwMDAwXG4gICAgICAgICAgICBlbmFibGVQYW46IGZhbHNlXG4gICAgICAgICAgICBlbmFibGVab29tOiBmYWxzZVxuICAgICAgICAgICAgZW5hYmxlUm90YXRlOiBmYWxzZVxuICAgICAgICAgICAgYXV0b1JvdGF0ZTogZmFsc2VcbiAgICAgICAgICAgIGF1dG9Sb3RhdGVTcGVlZDogMTBcbiAgICAgICAgICAgIHRhcmdldDogbmV3IFRIUkVFLlZlY3RvcjMgMCwgMCwgMFxuXG4gICAgICAgIEBuYXRpdmVDYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmZvdiwgXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmFzcGVjdCwgXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLm5lYXIsIFxuICAgICAgICAgICAgcHJvcGVydGllcy5mYXJcbiAgICAgICAgKVxuXG4gICAgICAgIGlmIHByb3BlcnRpZXMub3JiaXRDb250cm9sc1xuICAgICAgICAgICAgQHNldHVwT3JiaXRDb250cm9scyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgQHNldFBvc2l0aW9uIFtwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSwgcHJvcGVydGllcy56XVxuICAgICAgICBAc2V0Um90YXRpb24gW3Byb3BlcnRpZXMucm90YXRpb25YLCBwcm9wZXJ0aWVzLnJvdGF0aW9uWSwgcHJvcGVydGllcy5yb3RhdGlvblpdXG5cbiAgICAgICAgQHNhdmVJbml0aWFsUHJvcGVydGllcygpXG5cbiAgICAgICAgQF9zdGF0ZXMgPSBuZXcgU3RhdGVzIEBcbiAgICBcbiAgICBzZXR1cE9yYml0Q29udHJvbHM6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBAY29udHJvbHMgPSBuZXcgVEhSRUUuT3JiaXRDb250cm9scyBAbmF0aXZlQ2FtZXJhLCBAc2NlbmVET01cbiAgICAgICAgQGVuYWJsZVBhbiA9IHByb3BlcnRpZXMuZW5hYmxlUGFuXG4gICAgICAgIEBlbmFibGVab29tID0gcHJvcGVydGllcy5lbmFibGVab29tXG4gICAgICAgIEBlbmFibGVSb3RhdGUgPSBwcm9wZXJ0aWVzLmVuYWJsZVJvdGF0ZVxuICAgICAgICBAYXV0b1JvdGF0ZSA9IHByb3BlcnRpZXMuYXV0b1JvdGF0ZVxuICAgICAgICBAYXV0b1JvdGF0ZVNwZWVkID0gcHJvcGVydGllcy5hdXRvUm90YXRlU3BlZWRcbiAgICAgICAgQHRhcmdldCA9IHByb3BlcnRpZXMudGFyZ2V0XG5cbiAgICBzYXZlSW5pdGlhbFByb3BlcnRpZXM6ICgpIC0+XG4gICAgICAgIEBpbml0aWFsUHJvcGVydGllcyA9IEBcblxuICAgIG9uOiAoZXZlbnROYW1lLCBjYikgLT5cblxuICAgICAgICBpZiBldmVudE5hbWUuaW5jbHVkZXMgJ2NoYW5nZSdcbiAgICAgICAgICAgIGNhbGxiYWNrID0gKGUpIC0+IGNiKGUudmFsdWUpXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmFkZEV2ZW50TGlzdGVuZXIgZXZlbnROYW1lLCBjYWxsYmFja1xuXG4gICAgICAgICAgICBGcmFtZXIuQ3VycmVudENvbnRleHQub24gJ3Jlc2V0JywgPT5cbiAgICAgICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLnJlbW92ZUV2ZW50TGlzdGVuZXIgZXZlbnROYW1lLCBjYWxsYmFja1xuXG4gICAgc2V0UG9zaXRpb246IChwb3NpdGlvbnMpIC0+XG4gICAgICAgIEB4ID0gcG9zaXRpb25zWzBdXG4gICAgICAgIEB5ID0gcG9zaXRpb25zWzFdXG4gICAgICAgIEB6ID0gcG9zaXRpb25zWzJdXG4gICAgXG4gICAgc2V0Um90YXRpb246IChyb3RhdGlvbnMpIC0+XG4gICAgICAgIEByb3RhdGlvblggPSByb3RhdGlvbnNbMF1cbiAgICAgICAgQHJvdGF0aW9uWSA9IHJvdGF0aW9uc1sxXVxuICAgICAgICBAcm90YXRpb25aID0gcm90YXRpb25zWzJdXG4gICAgXG4gICAgYW5pbWF0ZTogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIG5ldyBBbmltYXRpb24gQCwgcHJvcGVydGllc1xuICAgIFxuICAgIGxvb2tBdDogKGEsIGIsIGMpIC0+XG4gICAgICAgIGlmIGFyZ3VtZW50cy5sZW5ndGggPT0gMVxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5sb29rQXQgYVxuICAgICAgICBlbHNlIGlmIGFyZ3VtZW50cy5sZW5ndGggPT0gM1xuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5sb29rQXQgYSwgYiwgY1xuICAgIFxuICAgIHN0YXRlU3dpdGNoOiAoc3RhdGUpIC0+XG4gICAgICAgICMgTG9vcCB0aHJvdWdoIHN0YXRlcyBvbiBtb2RlbCB0byBmaW5kIHRoZSBzcGVjaWZpZWQgb25lXG4gICAgICAgIE9iamVjdC5rZXlzKEBzdGF0ZXMpLm1hcCAoaykgPT4gXG4gICAgICAgICAgICBpZiBrID09IHN0YXRlXG4gICAgICAgICAgICAgICAgQHN0YXRlcy5jdXJyZW50ID0gQHN0YXRlc1trXVxuXG4gICAgICAgICAgICAgICAgIyBMb29wIHRocm91Z2ggcHJvcGVydHkga2V5cyBvbiB0aGUgc3RhdGUgYW5kIGFwcGx5IHRoZSB2YWx1ZXMgdG8gbW9kZWxcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhAc3RhdGVzLmN1cnJlbnQpLm1hcCAocGspICA9PlxuICAgICAgICAgICAgICAgICAgICBAW3BrXSA9IEBzdGF0ZXMuY3VycmVudFtwa11cbiAgICBcbiAgICBzdGF0ZUN5Y2xlOiAoc3RhdGVBLCBzdGF0ZUIpIC0+XG4gICAgICAgICMgQ2hlY2sgaWYgc3RhdGVBIG9yIHN0YXRlQiBhbHJlYWR5IGlzIHRoZSBjdXJyZW50IHN0YXRlIG9uIG1vZGVsXG4gICAgICAgIGlmIEBzdGF0ZXMuY3VycmVudCA9PSBAc3RhdGVzW3N0YXRlQV0gfHwgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVCXVxuICAgICAgICAgICAgaWYgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVBXSB0aGVuIEBhbmltYXRlIHN0YXRlQlxuICAgICAgICAgICAgZWxzZSBpZiBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUJdIHRoZW4gQGFuaW1hdGUgc3RhdGVBXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgICMgSWYgbmVpdGhlciBhcmUgY3VycmVudCwgYW5pbWF0ZSB0byBzdGF0ZUFcbiAgICAgICAgICAgIEBhbmltYXRlIHN0YXRlQVxuXG4gICAgQGRlZmluZSAncG9zaXRpb24nLFxuICAgICAgICBnZXQ6IC0+IEBuYXRpdmVDYW1lcmEucG9zaXRpb25cbiAgICBcbiAgICBAZGVmaW5lICd4JyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLnBvc2l0aW9uLnhcbiAgICAgICAgc2V0OiAoeCkgLT4gXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLnBvc2l0aW9uLnggPSB4XG4gICAgICAgICAgICBAY29udHJvbHMudXBkYXRlKCkgaWYgQGNvbnRyb2xzXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6eCcsIHZhbHVlOiBAeH1cbiAgICBcbiAgICBAZGVmaW5lICd5JyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLnBvc2l0aW9uLnlcbiAgICAgICAgc2V0OiAoeSkgLT4gXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLnBvc2l0aW9uLnkgPSB5XG4gICAgICAgICAgICBAY29udHJvbHMudXBkYXRlKCkgaWYgQGNvbnRyb2xzXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6eScsIHZhbHVlOiBAeX1cbiAgICBcbiAgICBAZGVmaW5lICd6JyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLnBvc2l0aW9uLnpcbiAgICAgICAgc2V0OiAoeikgLT4gXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLnBvc2l0aW9uLnogPSB6XG4gICAgICAgICAgICBAY29udHJvbHMudXBkYXRlKCkgaWYgQGNvbnRyb2xzXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6eicsIHZhbHVlOiBAen1cblxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uJyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLnJvdGF0aW9uXG4gICAgXG4gICAgQGRlZmluZSAncm90YXRpb25YJyxcbiAgICAgICAgZ2V0OiAtPiBUSFJFRS5NYXRoLnJhZFRvRGVnIEBuYXRpdmVDYW1lcmEucm90YXRpb24ueFxuICAgICAgICBzZXQ6ICh4KSAtPiBcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEucm90YXRpb24ueCA9IFRIUkVFLk1hdGguZGVnVG9SYWQgeFxuICAgICAgICAgICAgQGNvbnRyb2xzLnVwZGF0ZSgpIGlmIEBjb250cm9sc1xuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnJvdGF0aW9uWCcsIHZhbHVlOiBAcm90YXRpb25YfVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWScsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyBAbmF0aXZlQ2FtZXJhLnJvdGF0aW9uLnlcbiAgICAgICAgc2V0OiAoeSkgLT4gXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLnJvdGF0aW9uLnkgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkIHlcbiAgICAgICAgICAgIEBjb250cm9scy51cGRhdGUoKSBpZiBAY29udHJvbHNcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpyb3RhdGlvblknLCB2YWx1ZTogQHJvdGF0aW9uWX1cbiAgICBcbiAgICBAZGVmaW5lICdyb3RhdGlvblonLFxuICAgICAgICBnZXQ6IC0+IFRIUkVFLk1hdGgucmFkVG9EZWcgQG5hdGl2ZUNhbWVyYS5yb3RhdGlvbi56XG4gICAgICAgIHNldDogKHopIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5yb3RhdGlvbi56ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCB6XG4gICAgICAgICAgICBAY29udHJvbHMudXBkYXRlKCkgaWYgQGNvbnRyb2xzXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cm90YXRpb25aJywgdmFsdWU6IEByb3RhdGlvblp9XG4gICAgXG4gICAgQGRlZmluZSAnZm92JyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLmZvdlxuICAgICAgICBzZXQ6IChmb3YpIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5mb3YgPSBmb3ZcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpmb3YnLCB2YWx1ZTogQGZvdn1cbiAgICBcbiAgICBAZGVmaW5lICd6b29tJyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLnpvb21cbiAgICAgICAgc2V0OiAoZmFjdG9yKSAtPiBcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuem9vbSA9IGZhY3RvclxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnpvb20nLCB2YWx1ZTogQHpvb219XG4gICAgXG4gICAgQGRlZmluZSAnbmVhcicsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS5uZWFyXG4gICAgICAgIHNldDogKG5lYXIpIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5uZWFyID0gbmVhclxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOm5lYXInLCB2YWx1ZTogQG5lYXJ9XG4gICAgXG4gICAgQGRlZmluZSAnZmFyJyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLmZhclxuICAgICAgICBzZXQ6IChmYXIpIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5mYXIgPSBmYXJcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpmYXInLCB2YWx1ZTogQGZhcn1cbiAgICBcbiAgICBAZGVmaW5lICdhc3BlY3QnLFxuICAgICAgICBnZXQ6IC0+IEBuYXRpdmVDYW1lcmEuYXNwZWN0XG4gICAgICAgIHNldDogKGFzcGVjdCkgLT4gXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmFzcGVjdCA9IGFzcGVjdFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmFzcGVjdCcsIHZhbHVlOiBAYXNwZWN0fVxuICAgIFxuICAgIEBkZWZpbmUgJ3N0YXRlcycsXG4gICAgICAgIGdldDogLT5cbiAgICAgICAgICAgIEBfc3RhdGVzLnN0YXRlc1xuICAgICAgICBzZXQ6IChzdGF0ZXMpIC0+XG4gICAgICAgICAgICBfLmV4dGVuZCBAc3RhdGVzLCBzdGF0ZXNcblxuICAgIEBkZWZpbmUgJ2VuYWJsZVBhbicsXG4gICAgICAgIGdldDogLT4gQGNvbnRyb2xzLmVuYWJsZVBhblxuICAgICAgICBzZXQ6IChib29sKSAtPlxuICAgICAgICAgICAgQGNvbnRyb2xzLmVuYWJsZVBhbiA9IGJvb2xcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTplbmFibGVQYW4nLCB2YWx1ZTogQGVuYWJsZVBhbn1cbiAgICBcbiAgICBAZGVmaW5lICdlbmFibGVab29tJyxcbiAgICAgICAgZ2V0OiAtPiBAY29udHJvbHMuZW5hYmxlWm9vbVxuICAgICAgICBzZXQ6IChib29sKSAtPiBcbiAgICAgICAgICAgIEBjb250cm9scy5lbmFibGVab29tID0gYm9vbFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmVuYWJsZVpvb20nLCB2YWx1ZTogQGVuYWJsZVpvb219XG4gICAgXG4gICAgQGRlZmluZSAnZW5hYmxlUm90YXRlJyxcbiAgICAgICAgZ2V0OiAtPiBAY29udHJvbHMuZW5hYmxlUm90YXRlXG4gICAgICAgIHNldDogKGJvb2wpIC0+IFxuICAgICAgICAgICAgQGNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGJvb2xcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTplbmFibGVSb3RhdGUnLCB2YWx1ZTogQGVuYWJsZVJvdGF0ZX1cbiAgICBcbiAgICBAZGVmaW5lICdhdXRvUm90YXRlJyxcbiAgICAgICAgZ2V0OiAtPiBAY29udHJvbHMuYXV0b1JvdGF0ZVxuICAgICAgICBzZXQ6IChib29sKSAtPiBcbiAgICAgICAgICAgIEBjb250cm9scy5hdXRvUm90YXRlID0gYm9vbFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmF1dG9Sb3RhdGUnLCB2YWx1ZTogQGF1dG9Sb3RhdGV9XG4gICAgXG4gICAgQGRlZmluZSAnYXV0b1JvdGF0ZVNwZWVkJyxcbiAgICAgICAgZ2V0OiAtPiBAY29udHJvbHMuYXV0b1JvdGF0ZVNwZWVkXG4gICAgICAgIHNldDogKHNwZWVkKSAtPiBcbiAgICAgICAgICAgIEBjb250cm9scy5hdXRvUm90YXRlU3BlZWQgPSBzcGVlZFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmF1dG9Sb3RhdGVTcGVlZCcsIHZhbHVlOiBAYXV0b1JvdGF0ZVNwZWVkfVxuICAgIFxuICAgIEBkZWZpbmUgJ3RhcmdldCcsXG4gICAgICAgIGdldDogLT4gQGNvbnRyb2xzLnRhcmdldFxuICAgICAgICBzZXQ6ICh2ZWN0b3IzKSAtPiBcbiAgICAgICAgICAgIEBjb250cm9scy50YXJnZXQgPSB2ZWN0b3IzXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6dGFyZ2V0JywgdmFsdWU6IEB0YXJnZXR9IiwiY2xhc3MgZXhwb3J0cy5CYXNlQ2xhc3NcblxuICAgIEBkZWZpbmUgPSAocHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKSAtPlxuICAgICAgICBpZiBkZXNjcmlwdG9yLnJlYWRvbmx5XG4gICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9ICh2YWx1ZSkgLT5cbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIiN7QGNvbnN0cnVjdG9yLm5hbWV9LiN7cHJvcGVydHlOYW1lfSBpcyByZWFkb25seVwiKVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShAcHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpIiwiXyA9IEZyYW1lci5fXG5cbntNb2RlbH0gPSByZXF1aXJlICcuL01vZGVsLmNvZmZlZSdcblxuY2xhc3MgZXhwb3J0cy5BbmltYXRpb24gZXh0ZW5kcyBGcmFtZXIuRXZlbnRFbWl0dGVyXG4gICAgY29uc3RydWN0b3I6IChtb2RlbCwgcHJvcGVydGllcz17fSkgLT5cbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBcbiAgICAgICAgaWYgIXByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvciAnUGxlYXNlIHNwZWNpZnkgcHJvcGVydGllcyBvciBhIHN0YXRlIHRvIGFuaW1hdGUhJ1xuICAgICAgICAgICAgXG4gICAgICAgICMgSWYgcHJvcGVydGllcyBpcyBhIHN0cmluZywgdGhlbiBpdCBpcyBhIFN0YXRlIE5hbWVcbiAgICAgICAgaWYgXy5pc1N0cmluZyBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBzdGF0ZU5hbWUgPSBwcm9wZXJ0aWVzXG5cbiAgICAgICAgICAgICMgTG9vcCB0aHJvdWdoIHN0YXRlcyBvbiBtb2RlbCB0byBmaW5kIHRoZSBzcGVjaWZpZWQgc3RhdGVcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG1vZGVsLnN0YXRlcykubWFwIChrKSA9PiBcbiAgICAgICAgICAgICAgICBpZiBrID09IHN0YXRlTmFtZVxuICAgICAgICAgICAgICAgICAgICAjIFNldCBjdXJyZW50IHN0YXRlIHRvIHNwZWNpZmllZCBzdGF0ZSBhbmQgYXBwbHkgc3RhdGUgcHJvcGVydGllcyB0byBwcm9wZXJ0aWVzIHZhcmlhYmxlXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN0YXRlcy5jdXJyZW50ID0gbW9kZWwuc3RhdGVzW2tdXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBtb2RlbC5zdGF0ZXNbc3RhdGVOYW1lXVxuXG4gICAgICAgIEBwcm9wZXJ0aWVzID0gQGZpbHRlclByb3BlcnRpZXMgcHJvcGVydGllc1xuICAgICAgICBAb3B0aW9ucyA9IF8uZGVmYXVsdHMgcHJvcGVydGllcy5vcHRpb25zLCBcbiAgICAgICAgICAgIHRpbWU6IDFcbiAgICAgICAgICAgIGRlbGF5OiAwXG4gICAgICAgICAgICBjdXJ2ZTogJ2xpbmVhcidcblxuICAgICAgICAjIERlbGF5IHRoZSBsb29wIGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIDBzXG4gICAgICAgIFV0aWxzLmRlbGF5IEBvcHRpb25zLmRlbGF5LCA9PlxuXG4gICAgICAgICAgICBAbW9kZWwgPSBtb2RlbFxuICAgICAgICAgICAgQG1lc2ggPSBtb2RlbC5tZXNoIHx8IG1vZGVsLmxpZ2h0IHx8IG1vZGVsLm5hdGl2ZUNhbWVyYVxuICAgICAgICAgICAgQGZwcyA9IDYwXG4gICAgICAgICAgICBAdGltZSA9IEBvcHRpb25zLnRpbWVcbiAgICAgICAgICAgIEByZW5kZXJlZEZyYW1lcyA9IDBcbiAgICAgICAgICAgIEB0b3RhbEZyYW1lcyA9IEB0aW1lICogQGZwc1xuICAgICAgICAgICAgQG1vZGVsUHJvcGVydHlJbml0aWFsVmFsdWVzID0ge31cbiAgICAgICAgICAgIEBkZWx0YXMgPSBAY2FsY3VsYXRlRGVsdGFzKClcblxuXG4gICAgICAgICAgICAjIElmIHRoZXJlIGFyZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGFuaW1hdGlvbiBwcm9wZXJ0eSB2YWx1ZXMgYW5kIHRoZSBtb2RlbCdzIGN1cnJlbnQgcHJvcGVydHkgdmFsdWVzIChEZWx0YSlcbiAgICAgICAgICAgIGlmIEBkZWx0YXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgIyBDcmVhdGUgYW4gaW50ZXJ2YWwgdGhhdCBydW5zIGV2ZXJ5IDYwIHNlY29uZHNcbiAgICAgICAgICAgICAgICBAaW50ZXJ2YWxEaXNwb3NlciA9IHNldEludGVydmFsICgpID0+IFxuICAgICAgICAgICAgICAgICAgICAjIENoZWNrIGlmIHRoZSBhbW91bnQgb2YgcmVuZGVyZWQgZnJhbWVzIGV4Y2VlZHMgYW1vdW50IG9mIHRvdGFsIGZyYW1lcyB0aGF0IHRoZSBhbmltdGlvbiBpcyBzdXBwb3NlZCB0byBydW4gZm9yXG4gICAgICAgICAgICAgICAgICAgIGlmIEByZW5kZXJlZEZyYW1lcyA+PSBAdG90YWxGcmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgaXQgZXhjZWVkcywgZGlzcG9zZS9lbmQgdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEBkaXNwb3NlSW50ZXJ2YWxcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICMgRWxzZSBrZWVwIHRoZSBsb29wIGdvaW5nXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSBAYW5pbWF0aW9uTG9vcFxuICAgICAgICAgICAgICAgICAgICBAcmVuZGVyZWRGcmFtZXMrK1xuICAgICAgICAgICAgICAgICwgMTAwMCAvIEBmcHNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgIyBNYWtlIHN1cmUgdG8gZGlzcG9zZSBvdXIgYW5pbWF0aW9uIGxvb3AgaWYgRnJhbWVyJ3MgQ3VycmVudENvbnRleHQgcmVzZXRzXG4gICAgICAgICAgICAjIE90aGVyd2lzZSB3ZSdsbCBsZWFrIGxvYWRzIG9mIG1lbW9yeVxuICAgICAgICAgICAgRnJhbWVyLkN1cnJlbnRDb250ZXh0Lm9uICdyZXNldCcsID0+XG4gICAgICAgICAgICAgICAgaWYgQGludGVydmFsRGlzcG9zZXJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCBAaW50ZXJ2YWxEaXNwb3NlclxuXG4gICAgZmlsdGVyUHJvcGVydGllczogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIHByb3BzID0gT2JqZWN0LmFzc2lnbiB7fSwgcHJvcGVydGllc1xuICAgICAgICBkZWxldGUgcHJvcHMub3B0aW9uc1xuICAgICAgICBwcm9wc1xuXG4gICAgY2FsY3VsYXRlRGVsdGFzOiAoKSAtPlxuICAgICAgICAjIExvb3AgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY2FsY3VsYXRlIHRoZSBkZWx0YSBiZXR3ZWVuIGN1cnJlbnQgbW9kZWwgcHJvcGVydHkgdmFsdWUgYW5kXG4gICAgICAgICMgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiB0aGlzIGFuaW1hdGlvblxuICAgICAgICAjIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBhcnJheSBvZiBrZXkvdmFsdWUgcGFpcnMgdGhhdCBjb250YWlucyB0aGUgdmFsdWUgKERlbHRhKSB0byBhbmltYXRlIGZvciBldmVyeSBwcm9wZXJ0eVxuXG4gICAgICAgIGRlbHRhcyA9IE9iamVjdC5rZXlzKEBwcm9wZXJ0aWVzKS5tYXAgKGspID0+XG5cbiAgICAgICAgICAgIEBtb2RlbFByb3BlcnR5SW5pdGlhbFZhbHVlc1trXSA9IEBtb2RlbFtrXVxuXG4gICAgICAgICAgICBuZXdPYmogPSB7fVxuICAgICAgICAgICAgaWYgQG1vZGVsW2tdID4gQHByb3BlcnRpZXNba11cbiAgICAgICAgICAgICAgICBuZXdPYmpba10gPSAtTWF0aC5hYnMgQG1vZGVsW2tdIC0gQHByb3BlcnRpZXNba11cbiAgICAgICAgICAgIGVsc2UgaWYgQG1vZGVsW2tdIDwgQHByb3BlcnRpZXNba11cbiAgICAgICAgICAgICAgICBuZXdPYmpba10gPSBNYXRoLmFicyBAbW9kZWxba10gLSBAcHJvcGVydGllc1trXVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgIG5ld09ialxuXG4gICAgICAgIGRlbHRhcy5maWx0ZXIgKGQpIC0+XG4gICAgICAgICAgICBkXG5cbiAgICBhcHBseUVhc2luZzogKHQsIGIsIGMsIGQpIC0+XG5cbiAgICAgICAgaWYgQG9wdGlvbnMuY3VydmUuaW5jbHVkZXMgJ2Vhc2UnXG4gICAgICAgICAgICBAW0BvcHRpb25zLmN1cnZlXSB0LCBiLCBjLCBkXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBsaW5lYXIgdCwgYiwgYywgZFxuXG4gICAgYW5pbWF0aW9uTG9vcDogKCkgPT5cblxuICAgICAgICBmb3IgZGVsdGEsIGkgaW4gQGRlbHRhc1xuXG4gICAgICAgICAgICBwcm9wID0gT2JqZWN0LmtleXMoZGVsdGEpWzBdXG4gICAgICAgICAgICBkZWx0YVZhbHVlID0gT2JqZWN0LnZhbHVlcyhkZWx0YSlbMF1cblxuICAgICAgICAgICAgZWFzZWRWYWx1ZSA9IEBhcHBseUVhc2luZyhAcmVuZGVyZWRGcmFtZXMsIEBtb2RlbFByb3BlcnR5SW5pdGlhbFZhbHVlc1twcm9wXSwgZGVsdGFWYWx1ZSwgQHRvdGFsRnJhbWVzKVxuXG4gICAgICAgICAgICBAbW9kZWxbcHJvcF0gPSBlYXNlZFZhbHVlXG5cbiAgICBkaXNwb3NlSW50ZXJ2YWw6ICgpIC0+XG4gICAgICAgIGNsZWFySW50ZXJ2YWwgQGludGVydmFsRGlzcG9zZXJcbiAgICBcblxuXG5cbiAgICBsaW5lYXI6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogdCAvIGQgKyBiXG5cbiAgICBlYXNlSW5RdWFkOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgYyAqICh0IC89IGQpICogdCArIGJcblxuICAgIGVhc2VPdXRRdWFkOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgLWMgKiAodCAvPSBkKSAqICh0IC0gMikgKyBiXG5cbiAgICBlYXNlSW5PdXRRdWFkOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgaWYgKHQgLz0gZCAvIDIpIDwgMVxuICAgICAgICAgICAgYyAvIDIgKiB0ICogdCArIGJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgLWMgLyAyICogKCgtLXQpICogKHQgLSAyKSAtIDEpICsgYlxuXG4gICAgZWFzZUluQ3ViaWM6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogKHQgLz0gZCkgKiB0ICogdCArIGJcblxuICAgIGVhc2VPdXRDdWJpYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKyAxKSArIGJcblxuICAgIGVhc2VJbk91dEN1YmljOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgaWYgKHQgLz0gZCAvIDIpIDwgMSBcbiAgICAgICAgICAgIGMgLyAyICogdCAqIHQgKiB0ICsgYlxuICAgICAgICBlbHNlIFxuICAgICAgICAgICAgYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpICsgYlxuXG4gICAgZWFzZUluUXVhcnQ6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKyBiXG5cbiAgICBlYXNlT3V0UXVhcnQ6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICAtYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCAqIHQgLSAxKSArIGJcblxuICAgIGVhc2VJbk91dFF1YXJ0OiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgaWYgKHQgLz0gZCAvIDIpIDwgMVxuICAgICAgICAgICAgYyAvIDIgKiB0ICogdCAqIHQgKiB0ICsgYlxuICAgICAgICBlbHNlIFxuICAgICAgICAgICAgLWMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMikgKyBiXG5cbiAgICBlYXNlSW5RdWludDogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGMgKiAodCAvPSBkKSAqIHQgKiB0ICogdCAqIHQgKyBiXG5cbiAgICBlYXNlT3V0UXVpbnQ6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxKSArIGJcblxuICAgIGVhc2VJbk91dFF1aW50OiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgaWYgKHQgLz0gZCAvIDIpIDwgMVxuICAgICAgICAgICAgYyAvIDIgKiB0ICogdCAqIHQgKiB0ICogdCArIGJcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIGMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpICsgYlxuXG4gICAgZWFzZUluU2luZTogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIC1jICogTWF0aC5jb3ModCAvIGQgKiAoTWF0aC5QSSAvIDIpKSArIGMgKyBiXG5cbiAgICBlYXNlT3V0U2luZTogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGMgKiBNYXRoLnNpbih0IC8gZCAqIChNYXRoLlBJIC8gMikpICsgYlxuXG4gICAgZWFzZUluT3V0U2luZTogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIC1jIC8gMiAqIChNYXRoLmNvcyhNYXRoLlBJICogdCAvIGQpIC0gMSkgKyBiXG5cbiAgICBlYXNlSW5FeHBvOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgKHQgPT0gMCkgPyBiIDogYyAqIE1hdGgucG93KDIsIDEwICogKHQgLyBkIC0gMSkpICsgYlxuXG4gICAgZWFzZU91dEV4cG86ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICAodCA9PSBkKSA/IGIgKyBjIDogYyAqICgtTWF0aC5wb3coMiwgLTEwICogdCAvIGQpICsgMSkgKyBiXG5cbiAgICBlYXNlSW5PdXRFeHBvOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgaWYgdCA9PSAwXG4gICAgICAgICAgICBiXG4gICAgICAgIGlmIHQgPT0gZFxuICAgICAgICAgICAgYiArIGNcbiAgICAgICAgaWYgKHQgLz0gZCAvIDIpIDwgMSBcbiAgICAgICAgICAgIGMgLyAyICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSArIGJcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIGMgLyAyICogKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMikgKyBiXG5cbiAgICBlYXNlSW5DaXJjOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgLWMgKiAoTWF0aC5zcXJ0KDEgLSAodCAvPSBkKSAqIHQpIC0gMSkgKyBiXG5cbiAgICBlYXNlT3V0Q2lyYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGMgKiBNYXRoLnNxcnQoMSAtICh0ID0gdCAvIGQgLSAxKSAqIHQpICsgYlxuXG4gICAgZWFzZUluT3V0Q2lyYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGlmICh0IC89IGQgLyAyKSA8IDFcbiAgICAgICAgICAgIC1jIC8gMiAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpICsgYlxuICAgICAgICBlbHNlIFxuICAgICAgICAgICAgYyAvIDIgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSkgKyBiXG5cbiAgICBlYXNlSW5FbGFzdGljOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgcyA9IDEuNzAxNThcbiAgICAgICAgcCA9IDBcbiAgICAgICAgYSA9IGNcblxuICAgICAgICBpZiB0ID09IDAgXG4gICAgICAgICAgICBiICBcbiAgICAgICAgaWYgKHQgLz0gZCkgPT0gMVxuICAgICAgICAgICAgYiArIGNcblxuICAgICAgICBpZiAhcCBcbiAgICAgICAgICAgIHAgPSBkICogLjNcbiAgICAgICAgaWYgYSA8IE1hdGguYWJzKGMpXG4gICAgICAgICAgICBhID0gY1xuICAgICAgICAgICAgcyA9IHAgLyA0XG4gICAgICAgIGVsc2UgXG4gICAgICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4gKGMgLyBhKVxuXG4gICAgICAgIC0oYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCApKSArIGJcblxuICAgIGVhc2VPdXRFbGFzdGljOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgcyA9IDEuNzAxNThcbiAgICAgICAgcCA9IDBcbiAgICAgICAgYSA9IGNcblxuICAgICAgICBpZiB0ID09IDAgXG4gICAgICAgICAgICBiXG4gICAgICAgIGlmICh0IC89IGQpID09IDEgXG4gICAgICAgICAgICBiICsgYyBcblxuICAgICAgICBpZiAhcFxuICAgICAgICAgICAgcCA9IGQgKiAuM1xuICAgICAgICBpZiBhIDwgTWF0aC5hYnMoYylcbiAgICAgICAgICAgIGEgPSBjXG4gICAgICAgICAgICBzID0gcCAvIDRcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbiAoYyAvIGEpXG5cbiAgICAgICAgYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKyBjICsgYlxuXG4gICAgZWFzZUluT3V0RWxhc3RpYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIHMgPSAxLjcwMTU4XG4gICAgICAgIHAgPSAwXG4gICAgICAgIGEgPSBjXG5cbiAgICAgICAgaWYgdCA9PSAwXG4gICAgICAgICAgICBiXG4gICAgICAgIGlmICh0IC89IGQgLyAyKSA9PSAyXG4gICAgICAgICAgICBiICsgYyBcbiAgICAgICAgXG4gICAgICAgIGlmICFwIFxuICAgICAgICAgICAgcCA9IGQgKiAoLjMgKiAxLjUpXG4gICAgICAgIGlmIGEgPCBNYXRoLmFicyhjKVxuICAgICAgICAgICAgYSA9IGNcbiAgICAgICAgICAgIHMgPSBwIC8gNFxuICAgICAgICBlbHNlIFxuICAgICAgICAgICAgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luIChjIC8gYSlcbiAgICAgICAgaWYgKHQgPCAxKSBcbiAgICAgICAgICAgIC0uNSAqIChhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSkgKyBiXG4gICAgICAgIFxuICAgICAgICBhICogTWF0aC5wb3coMiwgLTEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKiAuNSArIGMgKyBiIiwiXyA9IEZyYW1lci5fXG5cbntTY2VuZX0gPSByZXF1aXJlICcuL1NjZW5lLmNvZmZlZSdcblxuY2xhc3MgZXhwb3J0cy5TdHVkaW8gZXh0ZW5kcyBTY2VuZVxuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcz17fSkgLT5cblxuICAgICAgICBfLmRlZmF1bHRzIHByb3BlcnRpZXMsXG4gICAgICAgICAgICBjYW1lcmE6XG4gICAgICAgICAgICAgICAgeTogMjIwXG4gICAgICAgICAgICAgICAgcm90YXRpb25YOiAtMTVcblxuICAgICAgICBzdXBlciBwcm9wZXJ0aWVzXG5cbiAgICAgICAgQHNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IgMHg5MTgxYTBcbiAgICAgICAgQHNjZW5lLmZvZyA9IG5ldyBUSFJFRS5Gb2cgMHg5MTgxYTAsIDQwMCwgMTAwMFxuICAgICAgICBcbiAgICAgICAgQGhsaWdodCA9IG5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQgMHhmZmZmZmYsIDB4NDQ0NDQ0XG4gICAgICAgIEBobGlnaHQucG9zaXRpb24ueSA9IDIwMFxuICAgICAgICBAc2NlbmUuYWRkIEBobGlnaHRcblxuICAgICAgICBAbGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCAweGZmZmZmZiwgLjFcbiAgICAgICAgQGxpZ2h0LnBvc2l0aW9uLnNldCAwLCA4MDAsIDBcbiAgICAgICAgQGxpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlXG4gICAgICAgIEBsaWdodC5zaGFkb3cuY2FtZXJhLm5lYXIgPSAxMDBcbiAgICAgICAgQGxpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyID0gMTAwMFxuICAgICAgICBAbGlnaHQuc2hhZG93LmJpYXMgPSAuMDAwMVxuICAgICAgICBAbGlnaHQuc2hhZG93LnJhZGl1cyA9IDVcbiAgICAgICAgQGxpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gMTAyNFxuICAgICAgICBAbGlnaHQuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gMTAyNFxuICAgICAgICBAc2NlbmUuYWRkIEBsaWdodFxuXG4gICAgICAgIEBsaWdodDIgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCAweGZmOTk5OSwgLjNcbiAgICAgICAgQGxpZ2h0Mi5wb3NpdGlvbi5zZXQgLTEwMCwgMjAwLCAtMzAwXG4gICAgICAgIEBzY2VuZS5hZGQgQGxpZ2h0MlxuXG4gICAgICAgIEBsaWdodDMgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCAweDY2NjZmZiwgLjJcbiAgICAgICAgQGxpZ2h0My5wb3NpdGlvbi5zZXQgMTAwLCAyMDAsIC0zMDBcbiAgICAgICAgQHNjZW5lLmFkZCBAbGlnaHQzXG5cbiAgICAgICAgQGxpZ2h0NCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0IDB4ZmY5OTk5LCAuM1xuICAgICAgICBAbGlnaHQ0LnBvc2l0aW9uLnNldCAtMTAwLCAyMDAsIDMwMFxuICAgICAgICBAc2NlbmUuYWRkIEBsaWdodDRcblxuICAgICAgICBAbGlnaHQ1ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQgMHg2NjY2ZmYsIC4yXG4gICAgICAgIEBsaWdodDUucG9zaXRpb24uc2V0IDEwMCwgMjAwLCAzMDBcbiAgICAgICAgQHNjZW5lLmFkZCBAbGlnaHQ1XG5cbiAgICAgICAgQGZsb29yR2VvID0gbmV3IFRIUkVFLkNpcmNsZUdlb21ldHJ5IDgwMCwgMTAwXG4gICAgICAgIEBmbG9vck1hdCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbFxuICAgICAgICAgICAgcm91Z2huZXNzOiAuNlxuICAgICAgICAgICAgY29sb3I6IDB4YWFhYWFhXG4gICAgICAgICAgICBtZXRhbG5lc3M6IDAuMlxuICAgICAgICAgICAgYnVtcFNjYWxlOiAwLjAwMDVcbiAgICAgICAgQGZsb29yID0gbmV3IFRIUkVFLk1lc2ggQGZsb29yR2VvLCBAZmxvb3JNYXRcbiAgICAgICAgQGZsb29yLnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDJcbiAgICAgICAgQGZsb29yLnJlY2VpdmVTaGFkb3cgPSB0cnVlXG4gICAgICAgIEBzY2VuZS5hZGQgQGZsb29yXG5cbiAgICAgICAgIyMjXG4gICAgICAgIEBncmlkID0gbmV3IFRIUkVFLkdyaWRIZWxwZXIgMjAwMCwgMjAsIDB4MDAwMDAwLCAweDAwMDAwMFxuICAgICAgICBAZ3JpZC5tYXRlcmlhbC5vcGFjaXR5ID0gLjJcbiAgICAgICAgQGdyaWQubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlXG4gICAgICAgIEBzY2VuZS5hZGQgQGdyaWRcbiAgICAgICAgIyMjIiwiXyA9IEZyYW1lci5fXG5cbntDYW1lcmF9ID0gcmVxdWlyZSAnLi9fQ2FtZXJhLmNvZmZlZSdcblxuY2xhc3MgZXhwb3J0cy5TY2VuZSBleHRlbmRzIExheWVyXG4gICAgY29uc3RydWN0b3I6IChwcm9wZXJ0aWVzPXt9KSAtPlxuICAgICAgICBzdXBlciBfLmRlZmF1bHRzIHByb3BlcnRpZXMsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMDAwJ1xuXG4gICAgICAgICMgUkVOREVSRVJcbiAgICAgICAgXG4gICAgICAgIEByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyXG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWVcbiAgICAgICAgICAgIGFscGhhOiB0cnVlXG5cbiAgICAgICAgQF9lbGVtZW50LmFwcGVuZENoaWxkIEByZW5kZXJlci5kb21FbGVtZW50XG4gICAgICAgIEByZW5kZXJlci5zZXRTaXplIEB3aWR0aCwgQGhlaWdodFxuICAgICAgICBAcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb1xuICAgICAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgICAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICAgICAgQHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZVxuICAgICAgICBAcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwXG5cblxuICAgICAgICAjIFNDRU5FXG5cbiAgICAgICAgQHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lXG5cblxuICAgICAgICAjIENBTUVSQVxuXG4gICAgICAgIGNhbWVyYVByb3BzID0gXy5kZWZhdWx0cyBwcm9wZXJ0aWVzLmNhbWVyYSxcbiAgICAgICAgICAgIGFzcGVjdDogQHdpZHRoIC8gQGhlaWdodFxuXG4gICAgICAgIEBjYW1lcmEgPSBuZXcgQ2FtZXJhIGNhbWVyYVByb3BzLCBALl9lbGVtZW50XG5cblxuICAgICAgICAjIFJFU0laSU5HXG5cbiAgICAgICAgQ2FudmFzLm9uUmVzaXplIEBvbldpbmRvd1Jlc2l6ZVxuXG5cbiAgICAgICAgIyBSQVlDQVNURVJcblxuICAgICAgICBAcmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlclxuICAgICAgICBAbW91c2UgPSBuZXcgVEhSRUUuVmVjdG9yMlxuICAgICAgICBAaW50ZXJzZWN0ZWQgPSBudWxsXG4gICAgICAgIEBpbnRlcnNlY3RlZEV2ZW50RW1pdHRlZCA9IGZhbHNlXG4gICAgICAgIEBtb3VzZWRvd24gPSBmYWxzZVxuICAgICAgICBcbiAgICAgICAgQG9uICdtb3VzZW1vdmUnLCAoZSkgPT5cbiAgICAgICAgICAgIEBtb3VzZS54ID0gKGUuY2xpZW50WCAvIEB3aWR0aCkgKiAyIC0gMVxuICAgICAgICAgICAgQG1vdXNlLnkgPSAtKGUuY2xpZW50WSAvIEBoZWlnaHQpICogMiArIDFcblxuICAgICAgICBAb24gJ21vdXNlZG93bicsIChlKSA9PlxuICAgICAgICAgICAgQG1vdXNlZG93biA9IHRydWVcbiAgICAgICAgICAgIGlmIEBpbnRlcnNlY3RlZFxuICAgICAgICAgICAgICAgIEBpbnRlcnNlY3RlZC5vYmplY3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ21vdXNlZG93bid9XG4gICAgICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnb25tb3VzZWRvd24nfVxuICAgICAgICAgICAgICAgIEBpbnRlcnNlY3RlZC5vYmplY3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NsaWNrJ31cbiAgICAgICAgICAgICAgICBAaW50ZXJzZWN0ZWQub2JqZWN0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdvbmNsaWNrJ31cbiAgICAgICAgXG4gICAgICAgIEBvbiAnbW91c2V1cCcsIChlKSA9PlxuICAgICAgICAgICAgQG1vdXNlZG93biA9IGZhbHNlXG4gICAgICAgICAgICBpZiBAaW50ZXJzZWN0ZWRcbiAgICAgICAgICAgICAgICBAaW50ZXJzZWN0ZWQub2JqZWN0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdtb3VzZXVwJ31cbiAgICAgICAgICAgICAgICBAaW50ZXJzZWN0ZWQub2JqZWN0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdvbm1vdXNldXAnfVxuXG5cbiAgICAgICAgIyBBTklNQVRJT04gTE9PUFxuXG4gICAgICAgIEBsb29wKClcblxuICAgICAgICBGcmFtZXIuQ3VycmVudENvbnRleHQub24gJ3Jlc2V0JywgPT5cbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lIEBhbmltYXRpb25Mb29wUmVxdWVzdElkXG5cblxuXG4gICAgbG9vcDogKCkgPT5cbiAgICAgICAgQGFuaW1hdGlvbkxvb3BSZXF1ZXN0SWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQGxvb3BcblxuICAgICAgICBpZiBAYW5pbWF0aW9uTG9vcFxuICAgICAgICAgICAgQGFuaW1hdGlvbkxvb3AoKVxuXG4gICAgICAgIGlmIEBjYW1lcmEuY29udHJvbHNcbiAgICAgICAgICAgIEBjYW1lcmEuY29udHJvbHMudXBkYXRlKClcblxuICAgICAgICBAaGFuZGxlUmF5Y2FzdGVyKClcblxuICAgICAgICBAcmVuZGVyZXIucmVuZGVyIEBzY2VuZSwgQGNhbWVyYS5uYXRpdmVDYW1lcmFcbiAgICBcblxuICAgIFxuICAgIGhhbmRsZVJheWNhc3RlcjogKCkgPT5cbiAgICAgICAgQHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhIEBtb3VzZSwgQGNhbWVyYS5uYXRpdmVDYW1lcmFcbiAgICAgICAgaW50ZXJzZWN0cyA9IEByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyBAc2NlbmUuY2hpbGRyZW4sIHRydWVcblxuICAgICAgICBpZiBpbnRlcnNlY3RzLmxlbmd0aCAmJiBAaW50ZXJzZWN0ZWQgIT0gaW50ZXJzZWN0c1swXVxuICAgICAgICAgICAgQGludGVyc2VjdGVkID0gaW50ZXJzZWN0c1swXVxuICAgICAgICBcbiAgICAgICAgaWYgQGludGVyc2VjdGVkICYmICFpbnRlcnNlY3RzLmxlbmd0aFxuICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnbW91c2VvdXQnfVxuICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnb25tb3VzZW91dCd9XG4gICAgICAgIFxuICAgICAgICBpZiAhaW50ZXJzZWN0cy5sZW5ndGhcbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZCA9IG51bGxcbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZEV2ZW50RW1pdHRlZCA9IGZhbHNlXG4gICAgICAgIFxuICAgICAgICBpZiAhQGludGVyc2VjdGVkRXZlbnRFbWl0dGVkICYmIEBpbnRlcnNlY3RlZFxuICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnbW91c2VvdmVyJ31cbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZC5vYmplY3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ29ubW91c2VvdmVyJ31cbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZEV2ZW50RW1pdHRlZCA9IHRydWVcbiAgICBcbiAgICBvbldpbmRvd1Jlc2l6ZTogKGUpID0+XG4gICAgICAgIEBjYW1lcmEuYXNwZWN0ID0gQHdpZHRoIC8gQGhlaWdodFxuICAgICAgICBAY2FtZXJhLm5hdGl2ZUNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KClcbiAgICAgICAgQHJlbmRlcmVyLnNldFNpemUgQHdpZHRoLCBAaGVpZ2h0IiwiXyA9IEZyYW1lci5fXG5cbiMgQ0xBU1NFU1xuXG57QmFzZUNsYXNzfSA9IHJlcXVpcmUgJy4vX0Jhc2VDbGFzcy5jb2ZmZWUnXG57QW5pbWF0aW9ufSA9IHJlcXVpcmUgJy4vX0FuaW1hdGlvbi5jb2ZmZWUnXG57U3RhdGVzfSA9IHJlcXVpcmUgJy4vX1N0YXRlcy5jb2ZmZWUnXG5cbiMgTE9BREVSU1xuXG57T0JKfSA9IHJlcXVpcmUgJy4vbG9hZGVycy9PQkouY29mZmVlJ1xue0ZCWH0gPSByZXF1aXJlICcuL2xvYWRlcnMvRkJYLmNvZmZlZSdcbntHTFRGfSA9IHJlcXVpcmUgJy4vbG9hZGVycy9HTFRGLmNvZmZlZSdcbntDb2xsYWRhfSA9IHJlcXVpcmUgJy4vbG9hZGVycy9Db2xsYWRhLmNvZmZlZSdcbntKU09OT2JqZWN0fSA9IHJlcXVpcmUgJy4vbG9hZGVycy9KU09OT2JqZWN0LmNvZmZlZSdcblxuY2xhc3MgZXhwb3J0cy5Nb2RlbCBleHRlbmRzIEJhc2VDbGFzc1xuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcz17fSkgLT5cbiAgICAgICAgc3VwZXIoKVxuXG4gICAgICAgIF8uZGVmYXVsdHMgcHJvcGVydGllcyxcbiAgICAgICAgICAgIGFuaW1hdGU6IHRydWVcbiAgICAgICAgICAgIGNhc3RTaGFkb3c6IHRydWVcbiAgICAgICAgICAgIHJlY2VpdmVTaGFkb3c6IHRydWVcbiAgICAgICAgICAgIHJlcG9zaXRpb246IHRydWVcblxuICAgICAgICBzd2l0Y2ggQGdldEV4dGVuc2lvbiBwcm9wZXJ0aWVzLnBhdGhcbiAgICAgICAgICAgIHdoZW4gJ29iaidcbiAgICAgICAgICAgICAgICBuZXcgT0JKIHByb3BlcnRpZXMsIChtb2RlbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgQG1lc2ggPSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICBAc2V0dXBNb2RlbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICB3aGVuICdmYngnXG4gICAgICAgICAgICAgICAgbmV3IEZCWCBwcm9wZXJ0aWVzLCAobW9kZWwpID0+XG4gICAgICAgICAgICAgICAgICAgIEBtZXNoID0gbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgQHNldHVwTW9kZWwgcHJvcGVydGllc1xuICAgICAgICAgICAgd2hlbiAnZ2x0ZicgfHwgJ2dsYidcbiAgICAgICAgICAgICAgICBuZXcgR0xURiBwcm9wZXJ0aWVzLCAobW9kZWwpID0+XG4gICAgICAgICAgICAgICAgICAgIEBtZXNoID0gbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgQHNldHVwTW9kZWwgcHJvcGVydGllc1xuICAgICAgICAgICAgd2hlbiAnZGFlJ1xuICAgICAgICAgICAgICAgIG5ldyBDb2xsYWRhIHByb3BlcnRpZXMsIChtb2RlbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgQG1lc2ggPSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICBAc2V0dXBNb2RlbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICB3aGVuICdqc29uJ1xuICAgICAgICAgICAgICAgIG5ldyBKU09OT2JqZWN0IHByb3BlcnRpZXMsIChtb2RlbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgQG1lc2ggPSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICBAc2V0dXBNb2RlbCBwcm9wZXJ0aWVzXG5cblxuICAgIGdldEV4dGVuc2lvbjogKHBhdGgpIC0+XG4gICAgICAgIHBhdGguc3BsaXQoJy4nKS5wb3AoKVxuXG4gICAgc2V0dXBNb2RlbDogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIGlmIHByb3BlcnRpZXMucmVwb3NpdGlvblxuICAgICAgICAgICAgQHJlcG9zaXRpb25NZXNoKClcblxuICAgICAgICBAcGl2b3QgPSBuZXcgVEhSRUUuR3JvdXBcbiAgICAgICAgQHBpdm90LmFkZCBAbWVzaFxuXG4gICAgICAgIEBzYXZlSW5pdGlhbFByb3BlcnRpZXMoKVxuXG4gICAgICAgIGlmIHByb3BlcnRpZXMubWF0ZXJpYWxcbiAgICAgICAgICAgIEBhcHBseU1hdGVyaWFsIHByb3BlcnRpZXMubWF0ZXJpYWxcbiAgICAgICAgXG4gICAgICAgIEBzZXR1cFNoYWRvd1NldHRpbmdzIHByb3BlcnRpZXNcbiAgICAgICAgXG4gICAgICAgIGlmIHByb3BlcnRpZXMuc21vb3RoU2hhZGluZ1xuICAgICAgICAgICAgQG1lc2gudHJhdmVyc2UgKGMpIC0+XG4gICAgICAgICAgICAgICAgaWYgYyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hcbiAgICAgICAgICAgICAgICAgICAgYy5tYXRlcmlhbC5zaGFkaW5nID0gVEhSRUUuU21vb3RoU2hhZGluZ1xuICAgICAgICBcbiAgICAgICAgaWYgcHJvcGVydGllcy5hbmltYXRlICYmIEBtZXNoLmFuaW1hdGlvbnMgJiYgQG1lc2guYW5pbWF0aW9uc1swXVxuICAgICAgICAgICAgQGhhbmRsZUFuaW1hdGlvbnMgcHJvcGVydGllc1xuXG4gICAgICAgIGlmIHByb3BlcnRpZXMucGFyZW50XG4gICAgICAgICAgICBAYWRkVG9SZW5kZXJpbmdJbnN0YW5jZSBwcm9wZXJ0aWVzLnBhcmVudFxuXG4gICAgICAgIEBzZXRTY2FsZSBwcm9wZXJ0aWVzLnNjYWxlLCBwcm9wZXJ0aWVzLnNjYWxlWCwgcHJvcGVydGllcy5zY2FsZVksIHByb3BlcnRpZXMuc2NhbGVaXG4gICAgICAgIEBzZXRQb3NpdGlvbiBbcHJvcGVydGllcy54LCBwcm9wZXJ0aWVzLnksIHByb3BlcnRpZXMuel1cbiAgICAgICAgQHNldFJvdGF0aW9uIFtwcm9wZXJ0aWVzLnJvdGF0aW9uWCwgcHJvcGVydGllcy5yb3RhdGlvblksIHByb3BlcnRpZXMucm90YXRpb25aXVxuICAgICAgICBAc2V0TWlkKFxuICAgICAgICAgICAgbWlkWDogcHJvcGVydGllcy5taWRYXG4gICAgICAgICAgICBtaWRZOiBwcm9wZXJ0aWVzLm1pZFlcbiAgICAgICAgICAgIG1pZFo6IHByb3BlcnRpZXMubWlkWlxuICAgICAgICApXG5cbiAgICAgICAgaWYgcHJvcGVydGllcy52aXNpYmxlXG4gICAgICAgICAgICBAdmlzaWJsZSA9IHByb3BlcnRpZXMudmlzaWJsZVxuICAgICAgICBcbiAgICAgICAgQF9zdGF0ZXMgPSBuZXcgU3RhdGVzIEBcblxuICAgICAgICBpZiBwcm9wZXJ0aWVzLm9uTG9hZFxuICAgICAgICAgICAgcHJvcGVydGllcy5vbkxvYWQgQFxuXG4gICAgcmVwb3NpdGlvbk1lc2g6ICgpIC0+XG4gICAgICAgIEBib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKCkuc2V0RnJvbU9iamVjdCBAbWVzaFxuICAgICAgICBAb2Zmc2V0ID0gQGJvdW5kaW5nQm94LmdldENlbnRlciBAbWVzaC5wb3NpdGlvblxuICAgICAgICBAbWVzaC5wb3NpdGlvbi5tdWx0aXBseVNjYWxhciAtMVxuXG4gICAgc2F2ZUluaXRpYWxQcm9wZXJ0aWVzOiAoKSAtPlxuICAgICAgICBAaW5pdGlhbFByb3BlcnRpZXMgPSBAXG5cbiAgICBhcHBseU1hdGVyaWFsOiAobWF0ZXJpYWwpIC0+XG4gICAgICAgIEBtZXNoLnRyYXZlcnNlIChjKSAtPlxuICAgICAgICAgICAgaWYgYyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hcbiAgICAgICAgICAgICAgICBjLm1hdGVyaWFsID0gbWF0ZXJpYWxcblxuICAgIHNldHVwU2hhZG93U2V0dGluZ3M6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBAbWVzaC50cmF2ZXJzZSAoYykgLT5cbiAgICAgICAgICAgIGlmIGMgaW5zdGFuY2VvZiBUSFJFRS5NZXNoXG4gICAgICAgICAgICAgICAgYy5jYXN0U2hhZG93ID0gcHJvcGVydGllcy5jYXN0U2hhZG93XG4gICAgICAgICAgICAgICAgYy5yZWNlaXZlU2hhZG93ID0gcHJvcGVydGllcy5yZWNlaXZlU2hhZG93XG5cbiAgICBhZGRUb1JlbmRlcmluZ0luc3RhbmNlOiAocGFyZW50KSAtPlxuICAgICAgICBpZiBwYXJlbnQuc2NlbmUgdGhlbiBwYXJlbnQuc2NlbmUuYWRkIEBwaXZvdFxuICAgICAgICBlbHNlIHBhcmVudC5hZGQgQHBpdm90XG4gICAgXG4gICAgaGFuZGxlQW5pbWF0aW9uczogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIGlmIF8uaXNOdW1iZXIgcHJvcGVydGllcy5hbmltYXRpb25cbiAgICAgICAgICAgIEBhbmltYXRpb25JbmRleCA9IHByb3BlcnRpZXMuYW5pbWF0aW9uIC0gMVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAYW5pbWF0aW9uSW5kZXggPSAwXG5cbiAgICAgICAgQGNsb2NrID0gbmV3IFRIUkVFLkNsb2NrXG4gICAgICAgIEBtZXNoLm1peGVyID0gbmV3IFRIUkVFLkFuaW1hdGlvbk1peGVyIEBtZXNoXG5cbiAgICAgICAgQGFjdGlvbiA9IEBtZXNoLm1peGVyLmNsaXBBY3Rpb24gQG1lc2guYW5pbWF0aW9uc1tAYW5pbWF0aW9uSW5kZXhdXG4gICAgICAgIEBhY3Rpb24ucGxheSgpXG4gICAgICAgIFxuICAgICAgICBAdXBkYXRlTWl4ZXIoKVxuXG4gICAgICAgIEZyYW1lci5DdXJyZW50Q29udGV4dC5vbiAncmVzZXQnLCA9PlxuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUgQG1peGVyUmVxdWVzdElkXG4gICAgICAgIFxuICAgIHVwZGF0ZU1peGVyOiAoKSA9PlxuICAgICAgICBAbWl4ZXJSZXF1ZXN0SWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQHVwZGF0ZU1peGVyXG4gICAgICAgIEBtZXNoLm1peGVyLnVwZGF0ZSBAY2xvY2suZ2V0RGVsdGEoKVxuICAgIFxuICAgIG9uOiAoZXZlbnROYW1lLCBjYikgLT5cblxuICAgICAgICBpZiBldmVudE5hbWUuaW5jbHVkZXMgJ2NoYW5nZSdcblxuICAgICAgICAgICAgY2FsbGJhY2sgPSAoZSkgLT4gY2IoZS52YWx1ZSlcblxuICAgICAgICAgICAgQHBpdm90LmFkZEV2ZW50TGlzdGVuZXIgZXZlbnROYW1lLCBjYWxsYmFja1xuXG4gICAgICAgICAgICBGcmFtZXIuQ3VycmVudENvbnRleHQub24gJ3Jlc2V0JywgPT5cbiAgICAgICAgICAgICAgICBAcGl2b3QucmVtb3ZlRXZlbnRMaXN0ZW5lciBldmVudE5hbWUsIGNhbGxiYWNrXG5cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQG1lc2gudHJhdmVyc2UgKGMpIC0+XG4gICAgICAgICAgICAgICAgaWYgYyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hcblxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9ICgpIC0+IGNiKClcblxuICAgICAgICAgICAgICAgICAgICBjLmFkZEV2ZW50TGlzdGVuZXIgZXZlbnROYW1lLCBjYWxsYmFja1xuXG4gICAgICAgICAgICAgICAgICAgIEZyYW1lci5DdXJyZW50Q29udGV4dC5vbiAncmVzZXQnLCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgYy5yZW1vdmVFdmVudExpc3RlbmVyIGV2ZW50TmFtZSwgY2FsbGJhY2tcblxuXG4gICAgc2V0U2NhbGU6ICh1bmlmb3JtU2NhbGUsIHNjYWxlWCwgc2NhbGVZLCBzY2FsZVopIC0+XG4gICAgICAgIGlmIHVuaWZvcm1TY2FsZVxuICAgICAgICAgICAgQHNjYWxlID0gdW5pZm9ybVNjYWxlIHx8IDFcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNjYWxlWCA9IHNjYWxlWCB8fCAxXG4gICAgICAgICAgICBAc2NhbGVZID0gc2NhbGVZIHx8IDFcbiAgICAgICAgICAgIEBzY2FsZVogPSBzY2FsZVogfHwgMVxuICAgIFxuICAgIHNldFBvc2l0aW9uOiAocG9zaXRpb24pIC0+XG4gICAgICAgIEB4ID0gcG9zaXRpb25bMF0gfHwgMFxuICAgICAgICBAeSA9IHBvc2l0aW9uWzFdIHx8IDBcbiAgICAgICAgQHogPSBwb3NpdGlvblsyXSB8fCAwXG5cbiAgICBzZXRSb3RhdGlvbjogKHJvdGF0aW9uKSAtPlxuICAgICAgICBAcm90YXRpb25YID0gcm90YXRpb25bMF0gfHwgMFxuICAgICAgICBAcm90YXRpb25ZID0gcm90YXRpb25bMV0gfHwgMFxuICAgICAgICBAcm90YXRpb25aID0gcm90YXRpb25bMl0gfHwgMFxuXG4gICAgc2V0TWlkOiAobWlkKSAtPlxuICAgICAgICBPYmplY3Qua2V5cyhtaWQpLm1hcCAoaykgPT5cbiAgICAgICAgICAgIGlmIG1pZFtrXVxuICAgICAgICAgICAgICAgIEBba10gPSBtaWRba11cbiAgICBcbiAgICBhbmltYXRlOiAocHJvcGVydGllcykgLT5cbiAgICAgICAgbmV3IEFuaW1hdGlvbiBALCBwcm9wZXJ0aWVzXG4gICAgXG4gICAgbG9va0F0OiAoYSwgYiwgYykgLT5cbiAgICAgICAgaWYgYXJndW1lbnRzLmxlbmd0aCA9PSAxXG4gICAgICAgICAgICBAcGl2b3QubG9va0F0IGFcbiAgICAgICAgZWxzZSBpZiBhcmd1bWVudHMubGVuZ3RoID09IDNcbiAgICAgICAgICAgIEBwaXZvdC5sb29rQXQgYSwgYiwgY1xuICAgIFxuICAgIHN0YXRlU3dpdGNoOiAoc3RhdGUpIC0+XG4gICAgICAgICMgTG9vcCB0aHJvdWdoIHN0YXRlcyBvbiBtb2RlbCB0byBmaW5kIHRoZSBzcGVjaWZpZWQgb25lXG4gICAgICAgIE9iamVjdC5rZXlzKEBzdGF0ZXMpLm1hcCAoaykgPT4gXG4gICAgICAgICAgICBpZiBrID09IHN0YXRlXG4gICAgICAgICAgICAgICAgQHN0YXRlcy5jdXJyZW50ID0gQHN0YXRlc1trXVxuXG4gICAgICAgICAgICAgICAgIyBMb29wIHRocm91Z2ggcHJvcGVydHkga2V5cyBvbiB0aGUgc3RhdGUgYW5kIGFwcGx5IHRoZSB2YWx1ZXMgdG8gbW9kZWxcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhAc3RhdGVzLmN1cnJlbnQpLm1hcCAocGspICA9PlxuICAgICAgICAgICAgICAgICAgICBAW3BrXSA9IEBzdGF0ZXMuY3VycmVudFtwa11cbiAgICBcbiAgICBzdGF0ZUN5Y2xlOiAoc3RhdGVBLCBzdGF0ZUIpIC0+XG4gICAgICAgICMgQ2hlY2sgaWYgc3RhdGVBIG9yIHN0YXRlQiBhbHJlYWR5IGlzIHRoZSBjdXJyZW50IHN0YXRlIG9uIG1vZGVsXG4gICAgICAgIGlmIEBzdGF0ZXMuY3VycmVudCA9PSBAc3RhdGVzW3N0YXRlQV0gfHwgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVCXVxuICAgICAgICAgICAgaWYgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVBXSB0aGVuIEBhbmltYXRlIHN0YXRlQlxuICAgICAgICAgICAgZWxzZSBpZiBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUJdIHRoZW4gQGFuaW1hdGUgc3RhdGVBXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgICMgSWYgbmVpdGhlciBhcmUgY3VycmVudCwgYW5pbWF0ZSB0byBzdGF0ZUFcbiAgICAgICAgICAgIEBhbmltYXRlIHN0YXRlQVxuICAgICAgICAgICAgXG5cblxuXG4gICAgQGRlZmluZSAnc2NhbGUnLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5zY2FsZS54LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gXG4gICAgICAgICAgICBAcGl2b3Quc2NhbGUuc2V0KHNjYWxlLCBzY2FsZSwgc2NhbGUpXG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpzY2FsZScsIHZhbHVlOiBAc2NhbGV9XG4gICAgXG4gICAgQGRlZmluZSAnc2NhbGVYJyxcbiAgICAgICAgZ2V0OiAtPiBAcGl2b3Quc2NhbGUueCxcbiAgICAgICAgc2V0OiAoc2NhbGUpIC0+IFxuICAgICAgICAgICAgQHBpdm90LnNjYWxlLnNldChzY2FsZSwgQHBpdm90LnNjYWxlLnksIEBwaXZvdC5zY2FsZS56KVxuICAgICAgICAgICAgQHBpdm90LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6c2NhbGVYJywgdmFsdWU6IEBzY2FsZVh9XG5cbiAgICBAZGVmaW5lICdzY2FsZVknLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5zY2FsZS55LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gXG4gICAgICAgICAgICBAcGl2b3Quc2NhbGUuc2V0KEBwaXZvdC5zY2FsZS54LCBzY2FsZSwgQHBpdm90LnNjYWxlLnopXG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpzY2FsZVknLCB2YWx1ZTogQHNjYWxlWX1cbiAgICBcbiAgICBAZGVmaW5lICdzY2FsZVonLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5zY2FsZS56LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gXG4gICAgICAgICAgICBAcGl2b3Quc2NhbGUuc2V0KEBwaXZvdC5zY2FsZS54LCBAcGl2b3Quc2NhbGUueSwgc2NhbGUpXG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpzY2FsZVonLCB2YWx1ZTogQHNjYWxlWn1cblxuICAgIEBkZWZpbmUgJ3Bvc2l0aW9uJyxcbiAgICAgICAgZ2V0OiAtPiBAcGl2b3QucG9zaXRpb25cblxuICAgIEBkZWZpbmUgJ3gnLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5wb3NpdGlvbi54LFxuICAgICAgICBzZXQ6ICh4KSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5wb3NpdGlvbi54ID0geFxuICAgICAgICAgICAgQHBpdm90LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6eCcsIHZhbHVlOiBAeH1cbiAgICBcbiAgICBAZGVmaW5lICd5JyxcbiAgICAgICAgZ2V0OiAtPiBAcGl2b3QucG9zaXRpb24ueSxcbiAgICAgICAgc2V0OiAoeSkgLT4gXG4gICAgICAgICAgICBAcGl2b3QucG9zaXRpb24ueSA9IHlcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnknLCB2YWx1ZTogQHl9XG4gICAgXG4gICAgQGRlZmluZSAneicsXG4gICAgICAgIGdldDogLT4gQHBpdm90LnBvc2l0aW9uLnosXG4gICAgICAgIHNldDogKHopIC0+IFxuICAgICAgICAgICAgQHBpdm90LnBvc2l0aW9uLnogPSB6XG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp6JywgdmFsdWU6IEB6fVxuXG4gICAgQGRlZmluZSAncm90YXRpb24nLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5yb3RhdGlvblxuXG4gICAgQGRlZmluZSAncm90YXRpb25YJyxcbiAgICAgICAgZ2V0OiAtPiBUSFJFRS5NYXRoLnJhZFRvRGVnKEBwaXZvdC5yb3RhdGlvbi54KSxcbiAgICAgICAgc2V0OiAoeCkgLT4gXG4gICAgICAgICAgICBAcGl2b3Qucm90YXRpb24ueCA9IFRIUkVFLk1hdGguZGVnVG9SYWQoeClcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnJvdGF0aW9uWCcsIHZhbHVlOiBAcm90YXRpb25YfVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWScsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcGl2b3Qucm90YXRpb24ueSksXG4gICAgICAgIHNldDogKHkpIC0+IFxuICAgICAgICAgICAgQHBpdm90LnJvdGF0aW9uLnkgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKHkpXG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpyb3RhdGlvblknLCB2YWx1ZTogQHJvdGF0aW9uWX1cbiAgICBcbiAgICBAZGVmaW5lICdyb3RhdGlvblonLFxuICAgICAgICBnZXQ6IC0+IFRIUkVFLk1hdGgucmFkVG9EZWcoQHBpdm90LnJvdGF0aW9uLnopLFxuICAgICAgICBzZXQ6ICh6KSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5yb3RhdGlvbi56ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh6KVxuICAgICAgICAgICAgQHBpdm90LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cm90YXRpb25aJywgdmFsdWU6IEByb3RhdGlvblp9XG4gICAgXG4gICAgQGRlZmluZSAnbWlkWCcsXG4gICAgICAgIHNldDogKG1pZFgpIC0+IEBtZXNoLnBvc2l0aW9uLnggPSAtbWlkWFxuICAgIFxuICAgIEBkZWZpbmUgJ21pZFknLFxuICAgICAgICBzZXQ6IChtaWRZKSAtPiBAbWVzaC5wb3NpdGlvbi55ID0gLW1pZFlcbiAgICBcbiAgICBAZGVmaW5lICdtaWRaJyxcbiAgICAgICAgc2V0OiAobWlkWikgLT4gQG1lc2gucG9zaXRpb24ueiA9IC1taWRaXG5cbiAgICBAZGVmaW5lICdwYXJlbnQnLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5wYXJlbnQsXG4gICAgICAgIHNldDogKHBhcmVudCkgLT4gXG4gICAgICAgICAgICBAcGl2b3QucGFyZW50ID0gcGFyZW50XG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpwYXJlbnQnLCB2YWx1ZTogQHBhcmVudH1cbiAgICBcbiAgICBAZGVmaW5lICd2aXNpYmxlJyxcbiAgICAgICAgZ2V0OiAtPiBAcGl2b3QudmlzaWJsZVxuICAgICAgICBzZXQ6IChib29sKSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC52aXNpYmxlID0gYm9vbFxuICAgICAgICAgICAgQHBpdm90LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6dmlzaWJsZScsIHZhbHVlOiBAdmlzaWJsZX1cbiAgICBcbiAgICBAZGVmaW5lICdjaGlsZHJlbicsXG4gICAgICAgIGdldDogLT4gQHBpdm90LmNoaWxkcmVuXG4gICAgXG4gICAgQGRlZmluZSAnc2l6ZScsXG4gICAgICAgIGdldDogLT4ge1xuICAgICAgICAgICAgaGVpZ2h0OiBAYm91bmRpbmdCb3gubWF4LnkgLSBAYm91bmRpbmdCb3gubWluLnlcbiAgICAgICAgICAgIHdpZHRoOiBAYm91bmRpbmdCb3gubWF4LnggLSBAYm91bmRpbmdCb3gubWluLnhcbiAgICAgICAgICAgIGRlcHRoOiBAYm91bmRpbmdCb3gubWF4LnogLSBAYm91bmRpbmdCb3gubWluLnpcbiAgICAgICAgfVxuICAgIFxuICAgIEBkZWZpbmUgJ3N0YXRlcycsXG4gICAgICAgIGdldDogLT5cbiAgICAgICAgICAgIEBfc3RhdGVzLnN0YXRlc1xuICAgICAgICBzZXQ6IChzdGF0ZXMpIC0+XG4gICAgICAgICAgICBfLmV4dGVuZCBAc3RhdGVzLCBzdGF0ZXNcbiAgICBcbiAgICBAZGVmaW5lICdhbmltYXRpb24nLFxuICAgICAgICBnZXQ6IC0+IEBhbmltYXRpb25JbmRleCArIDEsXG4gICAgICAgIHNldDogKGFuaW1hdGlvbikgLT4gXG4gICAgICAgICAgICBpZiBAbWVzaC5hbmltYXRpb25zW2FuaW1hdGlvbiAtIDFdXG4gICAgICAgICAgICAgICAgQGFuaW1hdGlvbkluZGV4ID0gYW5pbWF0aW9uIC0gMVxuICAgICAgICAgICAgICAgIEBhY3Rpb24gPSBAbWVzaC5taXhlci5jbGlwQWN0aW9uIEBtZXNoLmFuaW1hdGlvbnNbQGFuaW1hdGlvbkluZGV4XVxuICAgICAgICAgICAgICAgIEBhY3Rpb24ucGxheSgpIiwiXyA9IEZyYW1lci5fXG5cbmNsYXNzIGV4cG9ydHMuTWVzaCBleHRlbmRzIFRIUkVFLk1lc2hcblxuICAgIEBkZWZpbmUgPSAocHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKSAtPlxuICAgICAgICBpZiBkZXNjcmlwdG9yLnJlYWRvbmx5XG4gICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9ICh2YWx1ZSkgLT5cbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIiN7QGNvbnN0cnVjdG9yLm5hbWV9LiN7cHJvcGVydHlOYW1lfSBpcyByZWFkb25seVwiKVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShAcHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpXG5cbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXM9e30pIC0+XG4gICAgICAgIHN1cGVyIHByb3BlcnRpZXMuZ2VvbWV0cnksIHByb3BlcnRpZXMubWF0ZXJpYWxcblxuICAgICAgICBfLmRlZmF1bHRzIHByb3BlcnRpZXMsXG4gICAgICAgICAgICBjYXN0U2hhZG93OiB0cnVlXG4gICAgICAgICAgICByZWNlaXZlU2hhZG93OiB0cnVlXG5cbiAgICAgICAgQHNldHVwU2hhZG93U2V0dGluZ3MgcHJvcGVydGllc1xuXG4gICAgICAgIGlmIHByb3BlcnRpZXMucGFyZW50XG4gICAgICAgICAgICBAYWRkVG9SZW5kZXJpbmdJbnN0YW5jZSBwcm9wZXJ0aWVzLnBhcmVudFxuICAgICAgICBcbiAgICAgICAgQHNldFNjYWxlIHByb3BlcnRpZXMuc2NhbGUsIHByb3BlcnRpZXMuc2NhbGVYLCBwcm9wZXJ0aWVzLnNjYWxlWSwgcHJvcGVydGllcy5zY2FsZVpcbiAgICAgICAgQHNldFBvc2l0aW9uIFtwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSwgcHJvcGVydGllcy56XVxuICAgICAgICBAc2V0Um90YXRpb24gW3Byb3BlcnRpZXMucm90YXRpb25YLCBwcm9wZXJ0aWVzLnJvdGF0aW9uWSwgcHJvcGVydGllcy5yb3RhdGlvblpdXG5cbiAgICBzZXR1cFNoYWRvd1NldHRpbmdzOiAocHJvcGVydGllcykgLT5cbiAgICAgICAgQGNhc3RTaGFkb3cgPSBwcm9wZXJ0aWVzLmNhc3RTaGFkb3dcbiAgICAgICAgQHJlY2VpdmVTaGFkb3cgPSBwcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3dcblxuICAgIGFkZFRvUmVuZGVyaW5nSW5zdGFuY2U6IChwYXJlbnQpIC0+XG4gICAgICAgIGlmIHBhcmVudC5zY2VuZSB0aGVuIHBhcmVudC5zY2VuZS5hZGQgQFxuICAgICAgICBlbHNlIHBhcmVudC5hZGQgQFxuXG4gICAgc2V0U2NhbGU6ICh1bmlmb3JtU2NhbGUsIHNjYWxlWCwgc2NhbGVZLCBzY2FsZVopIC0+XG4gICAgICAgIGlmIHVuaWZvcm1TY2FsZVxuICAgICAgICAgICAgQHNjYWxlID0gdW5pZm9ybVNjYWxlIHx8IDFcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNjYWxlWCA9IHNjYWxlWCB8fCAxXG4gICAgICAgICAgICBAc2NhbGVZID0gc2NhbGVZIHx8IDFcbiAgICAgICAgICAgIEBzY2FsZVogPSBzY2FsZVogfHwgMVxuICAgIFxuICAgIHNldFBvc2l0aW9uOiAocG9zaXRpb24pIC0+XG4gICAgICAgIEB4ID0gcG9zaXRpb25bMF0gfHwgMFxuICAgICAgICBAeSA9IHBvc2l0aW9uWzFdIHx8IDBcbiAgICAgICAgQHogPSBwb3NpdGlvblsyXSB8fCAwXG5cbiAgICBzZXRSb3RhdGlvbjogKHJvdGF0aW9uKSAtPlxuICAgICAgICBAcm90YXRpb25YID0gcm90YXRpb25bMF0gfHwgMFxuICAgICAgICBAcm90YXRpb25ZID0gcm90YXRpb25bMV0gfHwgMFxuICAgICAgICBAcm90YXRpb25aID0gcm90YXRpb25bMl0gfHwgMFxuXG4gICAgQGRlZmluZSAnc2NhbGUnLFxuICAgICAgICBnZXQ6IC0+IEBzY2FsZS54LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gQHNjYWxlLnNldChzY2FsZSwgc2NhbGUsIHNjYWxlKVxuICAgIFxuICAgIEBkZWZpbmUgJ3NjYWxlWCcsXG4gICAgICAgIGdldDogLT4gQHNjYWxlLngsXG4gICAgICAgIHNldDogKHNjYWxlKSAtPiBAc2NhbGUuc2V0KHNjYWxlLCBAc2NhbGUueSwgQHNjYWxlLnopXG5cbiAgICBAZGVmaW5lICdzY2FsZVknLFxuICAgICAgICBnZXQ6IC0+IEBzY2FsZS55LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gQHNjYWxlLnNldChAc2NhbGUueCwgc2NhbGUsIEBzY2FsZS56KVxuICAgIFxuICAgIEBkZWZpbmUgJ3NjYWxlWicsXG4gICAgICAgIGdldDogLT4gQHNjYWxlLnosXG4gICAgICAgIHNldDogKHNjYWxlKSAtPiBAc2NhbGUuc2V0KEBzY2FsZS54LCBAc2NhbGUueSwgc2NhbGUpXG5cbiAgICBAZGVmaW5lICd4JyxcbiAgICAgICAgZ2V0OiAtPiBAcG9zaXRpb24ueCxcbiAgICAgICAgc2V0OiAoeCkgLT4gQHBvc2l0aW9uLnggPSB4XG4gICAgXG4gICAgQGRlZmluZSAneScsXG4gICAgICAgIGdldDogLT4gQHBvc2l0aW9uLnksXG4gICAgICAgIHNldDogKHkpIC0+IEBwb3NpdGlvbi55ID0geVxuICAgIFxuICAgIEBkZWZpbmUgJ3onLFxuICAgICAgICBnZXQ6IC0+IEBwb3NpdGlvbi56LFxuICAgICAgICBzZXQ6ICh6KSAtPiBAcG9zaXRpb24ueiA9IHpcblxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWCcsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcm90YXRpb24ueCksXG4gICAgICAgIHNldDogKHgpIC0+IEByb3RhdGlvbi54ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh4KVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWScsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcm90YXRpb24ueSksXG4gICAgICAgIHNldDogKHkpIC0+IEByb3RhdGlvbi55ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh5KVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWicsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcm90YXRpb24ueiksXG4gICAgICAgIHNldDogKHopIC0+IEByb3RhdGlvbi56ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh6KSIsIl8gPSBGcmFtZXIuX1xuXG57QmFzZUNsYXNzfSA9IHJlcXVpcmUgJy4vX0Jhc2VDbGFzcy5jb2ZmZWUnXG57QW5pbWF0aW9ufSA9IHJlcXVpcmUgJy4vX0FuaW1hdGlvbi5jb2ZmZWUnXG57U3RhdGVzfSA9IHJlcXVpcmUgJy4vX1N0YXRlcy5jb2ZmZWUnXG5cbmNsYXNzIGV4cG9ydHMuTGlnaHQgZXh0ZW5kcyBCYXNlQ2xhc3NcbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIHN1cGVyKClcblxuICAgICAgICBpZiAhcHJvcGVydGllcy50eXBlXG4gICAgICAgICAgICB0aHJvdyBFcnJvciAnUGxlYXNlIHNwZWNpZnkgYSBsaWdodCB0eXBlISdcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0aWVzID0gXy5kZWZhdWx0cyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgQHNldHVwTGlnaHQoKVxuXG4gICAgc2V0dXBMaWdodDogLT5cbiAgICAgICAgc3dpdGNoIEBwcm9wZXJ0aWVzLnR5cGVcbiAgICAgICAgICAgIHdoZW4gJ3BvaW50J1xuICAgICAgICAgICAgICAgIEBsaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KFxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuQ29sb3IgQHByb3BlcnRpZXMuY29sb3IsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5pbnRlbnNpdHksIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5kaXN0YW5jZSwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmRlY2F5XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgd2hlbiAnZGlyZWN0aW9uYWwnXG4gICAgICAgICAgICAgICAgQGxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5Db2xvciBAcHJvcGVydGllcy5jb2xvciwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmludGVuc2l0eVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHdoZW4gJ2FtYmllbnQnXG4gICAgICAgICAgICAgICAgQGxpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodChcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLkNvbG9yIEBwcm9wZXJ0aWVzLmNvbG9yLCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMuaW50ZW5zaXR5XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgd2hlbiAnaGVtaXNwaGVyZSdcbiAgICAgICAgICAgICAgICBAbGlnaHQgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KFxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuQ29sb3IgQHByb3BlcnRpZXMuc2t5Q29sb3IsIFxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuQ29sb3IgQHByb3BlcnRpZXMuZ3JvdW5kQ29sb3IsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5pbnRlbnNpdHlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB3aGVuICdyZWN0YXJlYSdcbiAgICAgICAgICAgICAgICBAbGlnaHQgPSBuZXcgVEhSRUUuUmVjdEFyZWFMaWdodChcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLkNvbG9yIEBwcm9wZXJ0aWVzLmNvbG9yLCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMuaW50ZW5zaXR5LCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMud2lkdGgsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5oZWlnaHRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB3aGVuICdzcG90J1xuICAgICAgICAgICAgICAgIEBsaWdodCA9IG5ldyBUSFJFRS5TcG90TGlnaHQoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5Db2xvciBAcHJvcGVydGllcy5jb2xvciwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmludGVuc2l0eSwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmRpc3RhbmNlLCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMuYW5nbGUsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5wZW51bWJyYSwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmRlY2F5XG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgIEBhZGRUb1JlbmRlcmluZ0luc3RhbmNlIEBwcm9wZXJ0aWVzLnBhcmVudFxuXG4gICAgICAgIEBhcHBseVByb3BlcnRpZXMoKVxuXG4gICAgICAgIEBzYXZlSW5pdGlhbFByb3BlcnRpZXMoKVxuICAgICAgICBcbiAgICAgICAgQF9zdGF0ZXMgPSBuZXcgU3RhdGVzIEBcblxuICAgIGFkZFRvUmVuZGVyaW5nSW5zdGFuY2U6IChwYXJlbnQpIC0+XG4gICAgICAgIGlmIHBhcmVudC5zY2VuZSB0aGVuIHBhcmVudC5zY2VuZS5hZGQgQGxpZ2h0XG4gICAgICAgIGVsc2UgcGFyZW50LmFkZCBAbGlnaHRcbiAgICBcbiAgICBhcHBseVByb3BlcnRpZXM6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBPYmplY3Qua2V5cyhAcHJvcGVydGllcykubWFwIChrKSA9PlxuICAgICAgICAgICAgQFtrXSA9IEBwcm9wZXJ0aWVzW2tdXG5cbiAgICBzYXZlSW5pdGlhbFByb3BlcnRpZXM6ICgpIC0+XG4gICAgICAgIEBpbml0aWFsUHJvcGVydGllcyA9IEBcblxuICAgIG9uOiAoZXZlbnROYW1lLCBjYikgLT5cblxuICAgICAgICBpZiBldmVudE5hbWUuaW5jbHVkZXMgJ2NoYW5nZSdcbiAgICAgICAgICAgIGNhbGxiYWNrID0gKGUpIC0+IGNiKGUudmFsdWUpXG4gICAgICAgICAgICBAbGlnaHQuYWRkRXZlbnRMaXN0ZW5lciBldmVudE5hbWUsIGNhbGxiYWNrXG5cbiAgICAgICAgICAgIEZyYW1lci5DdXJyZW50Q29udGV4dC5vbiAncmVzZXQnLCA9PlxuICAgICAgICAgICAgICAgIEBsaWdodC5yZW1vdmVFdmVudExpc3RlbmVyIGV2ZW50TmFtZSwgY2FsbGJhY2tcblxuICAgIGFuaW1hdGU6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBuZXcgQW5pbWF0aW9uIEAsIHByb3BlcnRpZXNcblxuICAgIHN0YXRlU3dpdGNoOiAoc3RhdGUpIC0+XG4gICAgICAgICMgTG9vcCB0aHJvdWdoIHN0YXRlcyBvbiBtb2RlbCB0byBmaW5kIHRoZSBzcGVjaWZpZWQgb25lXG4gICAgICAgIE9iamVjdC5rZXlzKEBzdGF0ZXMpLm1hcCAoaykgPT4gXG4gICAgICAgICAgICBpZiBrID09IHN0YXRlXG4gICAgICAgICAgICAgICAgQHN0YXRlcy5jdXJyZW50ID0gQHN0YXRlc1trXVxuXG4gICAgICAgICAgICAgICAgIyBMb29wIHRocm91Z2ggcHJvcGVydHkga2V5cyBvbiB0aGUgc3RhdGUgYW5kIGFwcGx5IHRoZSB2YWx1ZXMgdG8gbW9kZWxcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhAc3RhdGVzLmN1cnJlbnQpLm1hcCAocGspICA9PlxuICAgICAgICAgICAgICAgICAgICBAW3BrXSA9IEBzdGF0ZXMuY3VycmVudFtwa11cbiAgICBcbiAgICBzdGF0ZUN5Y2xlOiAoc3RhdGVBLCBzdGF0ZUIpIC0+XG4gICAgICAgICMgQ2hlY2sgaWYgc3RhdGVBIG9yIHN0YXRlQiBhbHJlYWR5IGlzIHRoZSBjdXJyZW50IHN0YXRlIG9uIG1vZGVsXG4gICAgICAgIGlmIEBzdGF0ZXMuY3VycmVudCA9PSBAc3RhdGVzW3N0YXRlQV0gfHwgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVCXVxuICAgICAgICAgICAgaWYgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVBXSB0aGVuIEBhbmltYXRlIHN0YXRlQlxuICAgICAgICAgICAgZWxzZSBpZiBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUJdIHRoZW4gQGFuaW1hdGUgc3RhdGVBXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgICMgSWYgbmVpdGhlciBhcmUgY3VycmVudCwgYW5pbWF0ZSB0byBzdGF0ZUFcbiAgICAgICAgICAgIEBhbmltYXRlIHN0YXRlQVxuXG5cbiAgICAjIEdFTkVSSUMgT0JKRUNUM0QgUFJPUEVSVElFU1xuXG4gICAgQGRlZmluZSAncG9zaXRpb24nLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5wb3NpdGlvblxuXG4gICAgQGRlZmluZSAneCcsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LnBvc2l0aW9uLngsXG4gICAgICAgIHNldDogKHgpIC0+IFxuICAgICAgICAgICAgQGxpZ2h0LnBvc2l0aW9uLnggPSB4XG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp4JywgdmFsdWU6IEB4fVxuICAgIFxuICAgIEBkZWZpbmUgJ3knLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5wb3NpdGlvbi55LFxuICAgICAgICBzZXQ6ICh5KSAtPiBcbiAgICAgICAgICAgIEBsaWdodC5wb3NpdGlvbi55ID0geVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6eScsIHZhbHVlOiBAeX1cbiAgICBcbiAgICBAZGVmaW5lICd6JyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQucG9zaXRpb24ueixcbiAgICAgICAgc2V0OiAoeikgLT4gXG4gICAgICAgICAgICBAbGlnaHQucG9zaXRpb24ueiA9IHpcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnonLCB2YWx1ZTogQHp9XG5cbiAgICBAZGVmaW5lICdyb3RhdGlvbicsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LnJvdGF0aW9uXG5cbiAgICBAZGVmaW5lICdyb3RhdGlvblgnLFxuICAgICAgICBnZXQ6IC0+IFRIUkVFLk1hdGgucmFkVG9EZWcoQGxpZ2h0LnJvdGF0aW9uLngpLFxuICAgICAgICBzZXQ6ICh4KSAtPiBcbiAgICAgICAgICAgIEBsaWdodC5yb3RhdGlvbi54ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh4KVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cm90YXRpb25YJywgdmFsdWU6IEByb3RhdGlvblh9XG4gICAgXG4gICAgQGRlZmluZSAncm90YXRpb25ZJyxcbiAgICAgICAgZ2V0OiAtPiBUSFJFRS5NYXRoLnJhZFRvRGVnKEBsaWdodC5yb3RhdGlvbi55KSxcbiAgICAgICAgc2V0OiAoeSkgLT4gXG4gICAgICAgICAgICBAbGlnaHQucm90YXRpb24ueSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoeSlcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnJvdGF0aW9uWScsIHZhbHVlOiBAcm90YXRpb25ZfVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWicsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAbGlnaHQucm90YXRpb24ueiksXG4gICAgICAgIHNldDogKHopIC0+IFxuICAgICAgICAgICAgQGxpZ2h0LnJvdGF0aW9uLnogPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKHopXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpyb3RhdGlvblonLCB2YWx1ZTogQHJvdGF0aW9uWn1cbiAgICBcbiAgICBAZGVmaW5lICd2aXNpYmxlJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQudmlzaWJsZVxuICAgICAgICBzZXQ6IChib29sKSAtPiBcbiAgICAgICAgICAgIEBsaWdodC52aXNpYmxlID0gYm9vbFxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6dmlzaWJsZScsIHZhbHVlOiBAdmlzaWJsZX1cbiAgICBcbiAgICBAZGVmaW5lICdzdGF0ZXMnLFxuICAgICAgICBnZXQ6IC0+XG4gICAgICAgICAgICBAX3N0YXRlcy5zdGF0ZXNcbiAgICAgICAgc2V0OiAoc3RhdGVzKSAtPlxuICAgICAgICAgICAgXy5leHRlbmQgQHN0YXRlcywgc3RhdGVzXG5cbiAgICAjIExJR0hUIFBST1BFUlRJRVNcblxuICAgIEBkZWZpbmUgJ2NvbG9yJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuY29sb3JcbiAgICAgICAgc2V0OiAoY29sb3IpIC0+XG4gICAgICAgICAgICBAbGlnaHQuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IgY29sb3JcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmNvbG9yJywgdmFsdWU6IEBjb2xvcn1cbiAgICBcbiAgICBAZGVmaW5lICdpbnRlbnNpdHknLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5pbnRlbnNpdHlcbiAgICAgICAgc2V0OiAoaW50ZW5zaXR5KSAtPlxuICAgICAgICAgICAgQGxpZ2h0LmludGVuc2l0eSA9IGludGVuc2l0eVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6aW50ZW5zaXR5JywgdmFsdWU6IEBpbnRlbnNpdHl9XG5cbiAgICBAZGVmaW5lICdhbmdsZScsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LmFuZ2xlXG4gICAgICAgIHNldDogKGFuZ2xlKSAtPlxuICAgICAgICAgICAgQGxpZ2h0LmFuZ2xlID0gYW5nbGVcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmFuZ2xlJywgdmFsdWU6IEBhbmdsZX1cbiAgICBcbiAgICBAZGVmaW5lICdjYXN0U2hhZG93JyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuY2FzdFNoYWRvd1xuICAgICAgICBzZXQ6IChib29sKSAtPlxuICAgICAgICAgICAgQGxpZ2h0LmNhc3RTaGFkb3cgPSBib29sXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpjYXN0U2hhZG93JywgdmFsdWU6IEBjYXN0U2hhZG93fVxuICAgIFxuICAgIEBkZWZpbmUgJ2RlY2F5JyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuZGVjYXlcbiAgICAgICAgc2V0OiAoZGVjYXkpIC0+XG4gICAgICAgICAgICBAbGlnaHQuZGVjYXkgPSBkZWNheVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6ZGVjYXknLCB2YWx1ZTogQGRlY2F5fVxuICAgIFxuICAgIEBkZWZpbmUgJ2Rpc3RhbmNlJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuZGlzdGFuY2VcbiAgICAgICAgc2V0OiAoZGlzdGFuY2UpIC0+XG4gICAgICAgICAgICBAbGlnaHQuZGlzdGFuY2UgPSBkaXN0YW5jZVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6ZGlzdGFuY2UnLCB2YWx1ZTogQGRpc3RhbmNlfVxuICAgIFxuICAgIEBkZWZpbmUgJ3BlbnVtYnJhJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQucGVudW1icmFcbiAgICAgICAgc2V0OiAocGVudW1icmEpIC0+XG4gICAgICAgICAgICBAbGlnaHQucGVudW1icmEgPSBwZW51bWJyYVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cGVudW1icmEnLCB2YWx1ZTogQHBlbnVtYnJhfVxuICAgIFxuICAgIEBkZWZpbmUgJ3Bvd2VyJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQucG93ZXJcbiAgICAgICAgc2V0OiAocG93ZXIpIC0+XG4gICAgICAgICAgICBAbGlnaHQucG93ZXIgPSBwb3dlclxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cG93ZXInLCB2YWx1ZTogQHBvd2VyfVxuICAgIFxuICAgIEBkZWZpbmUgJ3NoYWRvdycsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LnNoYWRvd1xuICAgICAgICBzZXQ6IChzaGFkb3cpIC0+XG4gICAgICAgICAgICBAbGlnaHQuc2hhZG93ID0gc2hhZG93XG4gICAgXG4gICAgQGRlZmluZSAndGFyZ2V0JyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQudGFyZ2V0XG4gICAgICAgIHNldDogKHRhcmdldCkgLT5cbiAgICAgICAgICAgIEBsaWdodC50YXJnZXQgPSB0YXJnZXRcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnRhcmdldCcsIHZhbHVlOiBAdGFyZ2V0fVxuICAgIFxuICAgIEBkZWZpbmUgJ3dpZHRoJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQud2lkdGhcbiAgICAgICAgc2V0OiAod2lkdGgpIC0+XG4gICAgICAgICAgICBAbGlnaHQud2lkdGggPSB3aWR0aFxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6d2lkdGgnLCB2YWx1ZTogQHdpZHRofVxuICAgIFxuICAgIEBkZWZpbmUgJ2hlaWdodCcsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LmhlaWdodFxuICAgICAgICBzZXQ6IChoZWlnaHQpIC0+XG4gICAgICAgICAgICBAbGlnaHQuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpoZWlnaHQnLCB2YWx1ZTogQGhlaWdodH1cbiAgICBcbiAgICBAZGVmaW5lICdncm91bmRDb2xvcicsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0Lmdyb3VuZENvbG9yXG4gICAgICAgIHNldDogKGdyb3VuZENvbG9yKSAtPlxuICAgICAgICAgICAgQGxpZ2h0Lmdyb3VuZENvbG9yID0gbmV3IFRIUkVFLkNvbG9yIGdyb3VuZENvbG9yXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpncm91bmRDb2xvcicsIHZhbHVlOiBAZ3JvdW5kQ29sb3J9XG4gICAgXG4gICAgQGRlZmluZSAnc2t5Q29sb3InLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5za3lDb2xvclxuICAgICAgICBzZXQ6IChza3lDb2xvcikgLT5cbiAgICAgICAgICAgIEBsaWdodC5za3lDb2xvciA9IG5ldyBUSFJFRS5Db2xvciBza3lDb2xvclxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6c2t5Q29sb3InLCB2YWx1ZTogQHNreUNvbG9yfSIsInMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdzY3JpcHQnXG5zLnNldEF0dHJpYnV0ZSAnc3JjJywgJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtNzUwNTY1MzMtMydcbnMuc2V0QXR0cmlidXRlICdhc3luYycsICcnXG5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkIHNcblxud2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW11cblxud2luZG93Lmd0YWcgPSAoKSAtPiBcbiAgICBkYXRhTGF5ZXIucHVzaCBhcmd1bWVudHNcbndpbmRvdy5ndGFnICdqcycsIG5ldyBEYXRlKClcbndpbmRvdy5ndGFnICdjb25maWcnLCAnVUEtNzUwNTY1MzMtMydcblxuaWYgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMgJ2ZyYW1lci5jbG91ZCdcbiAgICB3aW5kb3cuZ3RhZyAnZXZlbnQnLCAnQ2xvdWQnLFxuICAgICAgICAnZXZlbnRfY2F0ZWdvcnknOiAnVmlzaXRvcnMnXG5lbHNlXG4gICAgd2luZG93Lmd0YWcgJ2V2ZW50JywgJ05vbi1DbG91ZCcsXG4gICAgICAgICdldmVudF9jYXRlZ29yeSc6ICdWaXNpdG9ycyciLCJ3aW5kb3cuVEhSRUUgPSByZXF1aXJlICcuL3NyYy9saWIvdGhyZWUubWluLmpzJ1xucmVxdWlyZSAnLi9zcmMvR0EuY29mZmVlJ1xuXG57U2NlbmV9ID0gcmVxdWlyZSAnLi9zcmMvU2NlbmUuY29mZmVlJ1xue1N0dWRpb30gPSByZXF1aXJlICcuL3NyYy9TdHVkaW8uY29mZmVlJ1xue01vZGVsfSA9IHJlcXVpcmUgJy4vc3JjL01vZGVsLmNvZmZlZSdcbntNZXNofSA9IHJlcXVpcmUgJy4vc3JjL01lc2guY29mZmVlJ1xue0xpZ2h0fSA9IHJlcXVpcmUgJy4vc3JjL0xpZ2h0LmNvZmZlZSdcblxubW9kdWxlLmV4cG9ydHMgPVxuICAgIFNjZW5lOiBTY2VuZVxuICAgIFN0dWRpbzogU3R1ZGlvXG4gICAgTW9kZWw6IE1vZGVsXG4gICAgTWVzaDogTWVzaFxuICAgIExpZ2h0OiBMaWdodFxuXG4gICAgIyBNQVRFUklBTFNcblxuICAgIE1lc2hQaG9uZ01hdGVyaWFsOiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbFxuICAgIE1lc2hOb3JtYWxNYXRlcmlhbDogVEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsXG4gICAgTWVzaFN0YW5kYXJkTWF0ZXJpYWw6IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsXG4gICAgTGluZUJhc2ljTWF0ZXJpYWw6IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsXG4gICAgTGluZURhc2hlZE1hdGVyaWFsOiBUSFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWxcbiAgICBNZXNoQmFzaWNNYXRlcmlhbDogVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWxcbiAgICBNZXNoRGVwdGhNYXRlcmlhbDogVEhSRUUuTWVzaERlcHRoTWF0ZXJpYWxcbiAgICBNZXNoTGFtYmVydE1hdGVyaWFsOiBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsXG4gICAgTWVzaFBoeXNpY2FsTWF0ZXJpYWw6IFRIUkVFLk1lc2hQaHlzaWNhbE1hdGVyaWFsXG4gICAgTWVzaFRvb25NYXRlcmlhbDogVEhSRUUuTWVzaFRvb25NYXRlcmlhbFxuICAgIFBvaW50c01hdGVyaWFsOiBUSFJFRS5Qb2ludHNNYXRlcmlhbFxuICAgIFJhd1NoYWRlck1hdGVyaWFsOiBUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbFxuICAgIFNoYWRlck1hdGVyaWFsOiBUSFJFRS5TaGFkZXJNYXRlcmlhbFxuICAgIFNoYWRvd01hdGVyaWFsOiBUSFJFRS5TaGFkb3dNYXRlcmlhbFxuICAgIFNwcml0ZU1hdGVyaWFsOiBUSFJFRS5TcHJpdGVNYXRlcmlhbCIsIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBd0JBQTtBREFBLElBQUE7O0FBQUEsTUFBTSxDQUFDLEtBQVAsR0FBZSxPQUFBLENBQVEsd0JBQVI7O0FBQ2YsT0FBQSxDQUFRLGlCQUFSOztBQUVDLFFBQVMsT0FBQSxDQUFRLG9CQUFSOztBQUNULFNBQVUsT0FBQSxDQUFRLHFCQUFSOztBQUNWLFFBQVMsT0FBQSxDQUFRLG9CQUFSOztBQUNULE9BQVEsT0FBQSxDQUFRLG1CQUFSOztBQUNSLFFBQVMsT0FBQSxDQUFRLG9CQUFSOztBQUVWLE1BQU0sQ0FBQyxPQUFQLEdBQ0k7RUFBQSxLQUFBLEVBQU8sS0FBUDtFQUNBLE1BQUEsRUFBUSxNQURSO0VBRUEsS0FBQSxFQUFPLEtBRlA7RUFHQSxJQUFBLEVBQU0sSUFITjtFQUlBLEtBQUEsRUFBTyxLQUpQO0VBUUEsaUJBQUEsRUFBbUIsS0FBSyxDQUFDLGlCQVJ6QjtFQVNBLGtCQUFBLEVBQW9CLEtBQUssQ0FBQyxrQkFUMUI7RUFVQSxvQkFBQSxFQUFzQixLQUFLLENBQUMsb0JBVjVCO0VBV0EsaUJBQUEsRUFBbUIsS0FBSyxDQUFDLGlCQVh6QjtFQVlBLGtCQUFBLEVBQW9CLEtBQUssQ0FBQyxrQkFaMUI7RUFhQSxpQkFBQSxFQUFtQixLQUFLLENBQUMsaUJBYnpCO0VBY0EsaUJBQUEsRUFBbUIsS0FBSyxDQUFDLGlCQWR6QjtFQWVBLG1CQUFBLEVBQXFCLEtBQUssQ0FBQyxtQkFmM0I7RUFnQkEsb0JBQUEsRUFBc0IsS0FBSyxDQUFDLG9CQWhCNUI7RUFpQkEsZ0JBQUEsRUFBa0IsS0FBSyxDQUFDLGdCQWpCeEI7RUFrQkEsY0FBQSxFQUFnQixLQUFLLENBQUMsY0FsQnRCO0VBbUJBLGlCQUFBLEVBQW1CLEtBQUssQ0FBQyxpQkFuQnpCO0VBb0JBLGNBQUEsRUFBZ0IsS0FBSyxDQUFDLGNBcEJ0QjtFQXFCQSxjQUFBLEVBQWdCLEtBQUssQ0FBQyxjQXJCdEI7RUFzQkEsY0FBQSxFQUFnQixLQUFLLENBQUMsY0F0QnRCOzs7OztBRFZKLElBQUE7O0FBQUEsQ0FBQSxHQUFJLFFBQVEsQ0FBQyxhQUFULENBQXVCLFFBQXZCOztBQUNKLENBQUMsQ0FBQyxZQUFGLENBQWUsS0FBZixFQUFzQiwyREFBdEI7O0FBQ0EsQ0FBQyxDQUFDLFlBQUYsQ0FBZSxPQUFmLEVBQXdCLEVBQXhCOztBQUNBLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixDQUExQjs7QUFFQSxNQUFNLENBQUMsU0FBUCxHQUFtQixNQUFNLENBQUMsU0FBUCxJQUFvQjs7QUFFdkMsTUFBTSxDQUFDLElBQVAsR0FBYyxTQUFBO1NBQ1YsU0FBUyxDQUFDLElBQVYsQ0FBZSxTQUFmO0FBRFU7O0FBRWQsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFaLEVBQXNCLElBQUEsSUFBQSxDQUFBLENBQXRCOztBQUNBLE1BQU0sQ0FBQyxJQUFQLENBQVksUUFBWixFQUFzQixlQUF0Qjs7QUFFQSxJQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQXJCLENBQThCLGNBQTlCLENBQUg7RUFDSSxNQUFNLENBQUMsSUFBUCxDQUFZLE9BQVosRUFBcUIsT0FBckIsRUFDSTtJQUFBLGdCQUFBLEVBQWtCLFVBQWxCO0dBREosRUFESjtDQUFBLE1BQUE7RUFJSSxNQUFNLENBQUMsSUFBUCxDQUFZLE9BQVosRUFBcUIsV0FBckIsRUFDSTtJQUFBLGdCQUFBLEVBQWtCLFVBQWxCO0dBREosRUFKSjs7Ozs7QURaQSxJQUFBLCtCQUFBO0VBQUE7OztBQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBRVYsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsU0FBVSxPQUFBLENBQVEsa0JBQVI7O0FBRUwsT0FBTyxDQUFDOzs7RUFDRyxlQUFDLFVBQUQ7SUFDVCxxQ0FBQTtJQUVBLElBQUcsQ0FBQyxVQUFVLENBQUMsSUFBZjtBQUNJLFlBQU0sS0FBQSxDQUFNLDhCQUFOLEVBRFY7O0lBR0EsSUFBQyxDQUFBLFVBQUQsR0FBYyxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVg7SUFFZCxJQUFDLENBQUEsVUFBRCxDQUFBO0VBUlM7O2tCQVViLFVBQUEsR0FBWSxTQUFBO0FBQ1IsWUFBTyxJQUFDLENBQUEsVUFBVSxDQUFDLElBQW5CO0FBQUEsV0FDUyxPQURUO1FBRVEsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxVQUFOLENBQ0wsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBeEIsRUFDSixJQUFDLENBQUEsVUFBVSxDQUFDLFNBRFIsRUFFSixJQUFDLENBQUEsVUFBVSxDQUFDLFFBRlIsRUFHSixJQUFDLENBQUEsVUFBVSxDQUFDLEtBSFIsQ0FESztBQURaO0FBRFQsV0FRUyxhQVJUO1FBU1EsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxnQkFBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQXhCLEVBQ0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxTQURSLENBREs7QUFEWjtBQVJULFdBYVMsU0FiVDtRQWNRLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsWUFBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQXhCLEVBQ0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxTQURSLENBREs7QUFEWjtBQWJULFdBa0JTLFlBbEJUO1FBbUJRLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsZUFBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLFFBQXhCLEVBQ0EsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxVQUFVLENBQUMsV0FBeEIsRUFDSixJQUFDLENBQUEsVUFBVSxDQUFDLFNBRFIsQ0FEQSxDQURLO0FBRFo7QUFsQlQsV0F3QlMsVUF4QlQ7UUF5QlEsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxhQUFOLENBQ0wsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBeEIsRUFDSixJQUFDLENBQUEsVUFBVSxDQUFDLFNBRFIsRUFFSixJQUFDLENBQUEsVUFBVSxDQUFDLEtBRlIsRUFHSixJQUFDLENBQUEsVUFBVSxDQUFDLE1BSFIsQ0FESztBQURaO0FBeEJULFdBK0JTLE1BL0JUO1FBZ0NRLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsU0FBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQXhCLEVBQ0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxTQURSLEVBRUosSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUZSLEVBR0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUhSLEVBSUosSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUpSLEVBS0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUxSLENBREs7QUFoQ3JCO0lBeUNBLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixJQUFDLENBQUEsVUFBVSxDQUFDLE1BQXBDO0lBRUEsSUFBQyxDQUFBLGVBQUQsQ0FBQTtJQUVBLElBQUMsQ0FBQSxxQkFBRCxDQUFBO1dBRUEsSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLE1BQUEsQ0FBTyxJQUFQO0VBaERQOztrQkFrRFosc0JBQUEsR0FBd0IsU0FBQyxNQUFEO0lBQ3BCLElBQUcsTUFBTSxDQUFDLEtBQVY7YUFBcUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFiLENBQWlCLElBQUMsQ0FBQSxLQUFsQixFQUFyQjtLQUFBLE1BQUE7YUFDSyxNQUFNLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxLQUFaLEVBREw7O0VBRG9COztrQkFJeEIsZUFBQSxHQUFpQixTQUFDLFVBQUQ7V0FDYixNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxVQUFiLENBQXdCLENBQUMsR0FBekIsQ0FBNkIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7ZUFDekIsS0FBRSxDQUFBLENBQUEsQ0FBRixHQUFPLEtBQUMsQ0FBQSxVQUFXLENBQUEsQ0FBQTtNQURNO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE3QjtFQURhOztrQkFJakIscUJBQUEsR0FBdUIsU0FBQTtXQUNuQixJQUFDLENBQUEsaUJBQUQsR0FBcUI7RUFERjs7a0JBR3ZCLEVBQUEsR0FBSSxTQUFDLFNBQUQsRUFBWSxFQUFaO0FBRUEsUUFBQTtJQUFBLElBQUcsU0FBUyxDQUFDLFFBQVYsQ0FBbUIsUUFBbkIsQ0FBSDtNQUNJLFFBQUEsR0FBVyxTQUFDLENBQUQ7ZUFBTyxFQUFBLENBQUcsQ0FBQyxDQUFDLEtBQUw7TUFBUDtNQUNYLElBQUMsQ0FBQSxLQUFLLENBQUMsZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsUUFBbkM7YUFFQSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFDOUIsS0FBQyxDQUFBLEtBQUssQ0FBQyxtQkFBUCxDQUEyQixTQUEzQixFQUFzQyxRQUF0QztRQUQ4QjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbEMsRUFKSjs7RUFGQTs7a0JBU0osT0FBQSxHQUFTLFNBQUMsVUFBRDtXQUNELElBQUEsU0FBQSxDQUFVLElBQVYsRUFBYSxVQUFiO0VBREM7O2tCQUdULFdBQUEsR0FBYSxTQUFDLEtBQUQ7V0FFVCxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxNQUFiLENBQW9CLENBQUMsR0FBckIsQ0FBeUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7UUFDckIsSUFBRyxDQUFBLEtBQUssS0FBUjtVQUNJLEtBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixHQUFrQixLQUFDLENBQUEsTUFBTyxDQUFBLENBQUE7aUJBRzFCLE1BQU0sQ0FBQyxJQUFQLENBQVksS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFwQixDQUE0QixDQUFDLEdBQTdCLENBQWlDLFNBQUMsRUFBRDttQkFDN0IsS0FBRSxDQUFBLEVBQUEsQ0FBRixHQUFRLEtBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUSxDQUFBLEVBQUE7VUFESyxDQUFqQyxFQUpKOztNQURxQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBekI7RUFGUzs7a0JBVWIsVUFBQSxHQUFZLFNBQUMsTUFBRCxFQUFTLE1BQVQ7SUFFUixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixLQUFtQixJQUFDLENBQUEsTUFBTyxDQUFBLE1BQUEsQ0FBM0IsSUFBc0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUFwRTtNQUNJLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUE5QjtlQUEyQyxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBM0M7T0FBQSxNQUNLLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUE5QjtlQUEyQyxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBM0M7T0FGVDtLQUFBLE1BQUE7YUFLSSxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFMSjs7RUFGUTs7RUFZWixLQUFDLENBQUEsTUFBRCxDQUFRLFVBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7R0FESjs7RUFHQSxLQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFBbkIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sVUFBUDtRQUFtQixLQUFBLEVBQU8sSUFBQyxDQUFBLENBQTNCO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUFuQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxVQUFQO1FBQW1CLEtBQUEsRUFBTyxJQUFDLENBQUEsQ0FBM0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQW5CLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0I7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLFVBQVA7UUFBbUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxDQUEzQjtPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFVBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7R0FESjs7RUFHQSxLQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQXBDO0lBQUgsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsQ0FBcEI7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFwQztJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0IsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBcEM7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sa0JBQVA7UUFBMkIsS0FBQSxFQUFPLElBQUMsQ0FBQSxTQUFuQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLEdBQWlCO2FBQ2pCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxnQkFBUDtRQUF5QixLQUFBLEVBQU8sSUFBQyxDQUFBLE9BQWpDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFDRCxJQUFDLENBQUEsT0FBTyxDQUFDO0lBRFIsQ0FBTDtJQUVBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7YUFDRCxDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxNQUFWLEVBQWtCLE1BQWxCO0lBREMsQ0FGTDtHQURKOztFQVFBLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBbUIsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLEtBQVo7YUFDbkIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGNBQVA7UUFBdUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUEvQjtPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxTQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxTQUFQLEdBQW1CO2FBQ25CLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBZTthQUNmLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxjQUFQO1FBQXVCLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBL0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxZQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsSUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxHQUFvQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sbUJBQVA7UUFBNEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxVQUFwQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLE9BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxLQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEdBQWU7YUFDZixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sY0FBUDtRQUF1QixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQS9CO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLFFBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsR0FBa0I7YUFDbEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGlCQUFQO1FBQTBCLEtBQUEsRUFBTyxJQUFDLENBQUEsUUFBbEM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsUUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxHQUFrQjthQUNsQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0saUJBQVA7UUFBMEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxRQUFsQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLE9BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxLQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEdBQWU7YUFDZixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sY0FBUDtRQUF1QixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQS9CO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7YUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FBZ0I7SUFEZixDQURMO0dBREo7O0VBS0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsTUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxHQUFnQjthQUNoQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBZTthQUNmLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxjQUFQO1FBQXVCLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBL0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsTUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxHQUFnQjthQUNoQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsYUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLFdBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFdBQVAsR0FBeUIsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLFdBQVo7YUFDekIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLG9CQUFQO1FBQTZCLEtBQUEsRUFBTyxJQUFDLENBQUEsV0FBckM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsUUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxHQUFzQixJQUFBLEtBQUssQ0FBQyxLQUFOLENBQVksUUFBWjthQUN0QixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0saUJBQVA7UUFBMEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxRQUFsQztPQUFyQjtJQUZDLENBREw7R0FESjs7OztHQS9Pd0I7Ozs7QURONUIsSUFBQSxDQUFBO0VBQUE7OztBQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBRUwsT0FBTyxDQUFDOzs7RUFFVixJQUFDLENBQUEsTUFBRCxHQUFVLFNBQUMsWUFBRCxFQUFlLFVBQWY7SUFDTixJQUFHLFVBQVUsQ0FBQyxRQUFkO01BQ0ksVUFBVSxDQUFDLEdBQVgsR0FBaUIsU0FBQyxLQUFEO0FBQ2IsY0FBTSxLQUFBLENBQVMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFkLEdBQW1CLEdBQW5CLEdBQXNCLFlBQXRCLEdBQW1DLGNBQTNDO01BRE8sRUFEckI7O1dBSUEsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsSUFBQyxDQUFBLFNBQXZCLEVBQWtDLFlBQWxDLEVBQWdELFVBQWhEO0VBTE07O0VBT0csY0FBQyxVQUFEOztNQUFDLGFBQVc7O0lBQ3JCLHNDQUFNLFVBQVUsQ0FBQyxRQUFqQixFQUEyQixVQUFVLENBQUMsUUFBdEM7SUFFQSxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVgsRUFDSTtNQUFBLFVBQUEsRUFBWSxJQUFaO01BQ0EsYUFBQSxFQUFlLElBRGY7S0FESjtJQUlBLElBQUMsQ0FBQSxtQkFBRCxDQUFxQixVQUFyQjtJQUVBLElBQUcsVUFBVSxDQUFDLE1BQWQ7TUFDSSxJQUFDLENBQUEsc0JBQUQsQ0FBd0IsVUFBVSxDQUFDLE1BQW5DLEVBREo7O0lBR0EsSUFBQyxDQUFBLFFBQUQsQ0FBVSxVQUFVLENBQUMsS0FBckIsRUFBNEIsVUFBVSxDQUFDLE1BQXZDLEVBQStDLFVBQVUsQ0FBQyxNQUExRCxFQUFrRSxVQUFVLENBQUMsTUFBN0U7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUMsVUFBVSxDQUFDLENBQVosRUFBZSxVQUFVLENBQUMsQ0FBMUIsRUFBNkIsVUFBVSxDQUFDLENBQXhDLENBQWI7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUMsVUFBVSxDQUFDLFNBQVosRUFBdUIsVUFBVSxDQUFDLFNBQWxDLEVBQTZDLFVBQVUsQ0FBQyxTQUF4RCxDQUFiO0VBZFM7O2lCQWdCYixtQkFBQSxHQUFxQixTQUFDLFVBQUQ7SUFDakIsSUFBQyxDQUFBLFVBQUQsR0FBYyxVQUFVLENBQUM7V0FDekIsSUFBQyxDQUFBLGFBQUQsR0FBaUIsVUFBVSxDQUFDO0VBRlg7O2lCQUlyQixzQkFBQSxHQUF3QixTQUFDLE1BQUQ7SUFDcEIsSUFBRyxNQUFNLENBQUMsS0FBVjthQUFxQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBakIsRUFBckI7S0FBQSxNQUFBO2FBQ0ssTUFBTSxDQUFDLEdBQVAsQ0FBVyxJQUFYLEVBREw7O0VBRG9COztpQkFJeEIsUUFBQSxHQUFVLFNBQUMsWUFBRCxFQUFlLE1BQWYsRUFBdUIsTUFBdkIsRUFBK0IsTUFBL0I7SUFDTixJQUFHLFlBQUg7YUFDSSxJQUFDLENBQUEsS0FBRCxHQUFTLFlBQUEsSUFBZ0IsRUFEN0I7S0FBQSxNQUFBO01BR0ksSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7TUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7YUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVUsRUFMeEI7O0VBRE07O2lCQVFWLFdBQUEsR0FBYSxTQUFDLFFBQUQ7SUFDVCxJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtJQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtXQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtFQUhYOztpQkFLYixXQUFBLEdBQWEsU0FBQyxRQUFEO0lBQ1QsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7SUFDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7V0FDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7RUFIbkI7O0VBS2IsSUFBQyxDQUFBLE1BQUQsQ0FBUSxPQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLEtBQVgsRUFBa0IsS0FBbEIsRUFBeUIsS0FBekI7SUFBWCxDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLEtBQVgsRUFBa0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUF6QixFQUE0QixJQUFDLENBQUEsS0FBSyxDQUFDLENBQW5DO0lBQVgsQ0FETDtHQURKOztFQUlBLElBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7YUFBVyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFDLENBQUEsS0FBSyxDQUFDLENBQWxCLEVBQXFCLEtBQXJCLEVBQTRCLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBbkM7SUFBWCxDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBbEIsRUFBcUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUE1QixFQUErQixLQUEvQjtJQUFYLENBREw7R0FESjs7RUFJQSxJQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQztJQUFiLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO2FBQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxDQUFWLEdBQWM7SUFBckIsQ0FETDtHQURKOztFQUlBLElBQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDO0lBQWIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7YUFBTyxJQUFDLENBQUEsUUFBUSxDQUFDLENBQVYsR0FBYztJQUFyQixDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxRQUFRLENBQUM7SUFBYixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDthQUFPLElBQUMsQ0FBQSxRQUFRLENBQUMsQ0FBVixHQUFjO0lBQXJCLENBREw7R0FESjs7RUFJQSxJQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLElBQUMsQ0FBQSxRQUFRLENBQUMsQ0FBOUI7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDthQUFPLElBQUMsQ0FBQSxRQUFRLENBQUMsQ0FBVixHQUFjLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjtJQUFyQixDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsUUFBUSxDQUFDLENBQTlCO0lBQUgsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7YUFBTyxJQUFDLENBQUEsUUFBUSxDQUFDLENBQVYsR0FBYyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsQ0FBcEI7SUFBckIsQ0FETDtHQURKOztFQUlBLElBQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLFFBQVEsQ0FBQyxDQUE5QjtJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO2FBQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxDQUFWLEdBQWMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO0lBQXJCLENBREw7R0FESjs7OztHQXZGdUIsS0FBSyxDQUFDOzs7O0FERmpDLElBQUEsb0VBQUE7RUFBQTs7OztBQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBSVYsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsU0FBVSxPQUFBLENBQVEsa0JBQVI7O0FBSVYsTUFBTyxPQUFBLENBQVEsc0JBQVI7O0FBQ1AsTUFBTyxPQUFBLENBQVEsc0JBQVI7O0FBQ1AsT0FBUSxPQUFBLENBQVEsdUJBQVI7O0FBQ1IsVUFBVyxPQUFBLENBQVEsMEJBQVI7O0FBQ1gsYUFBYyxPQUFBLENBQVEsNkJBQVI7O0FBRVQsT0FBTyxDQUFDOzs7RUFDRyxlQUFDLFVBQUQ7O01BQUMsYUFBVzs7O0lBQ3JCLHFDQUFBO0lBRUEsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxVQUFYLEVBQ0k7TUFBQSxPQUFBLEVBQVMsSUFBVDtNQUNBLFVBQUEsRUFBWSxJQURaO01BRUEsYUFBQSxFQUFlLElBRmY7TUFHQSxVQUFBLEVBQVksSUFIWjtLQURKO0FBTUEsWUFBTyxJQUFDLENBQUEsWUFBRCxDQUFjLFVBQVUsQ0FBQyxJQUF6QixDQUFQO0FBQUEsV0FDUyxLQURUO1FBRVksSUFBQSxHQUFBLENBQUksVUFBSixFQUFnQixDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFDLEtBQUQ7WUFDaEIsS0FBQyxDQUFBLElBQUQsR0FBUTttQkFDUixLQUFDLENBQUEsVUFBRCxDQUFZLFVBQVo7VUFGZ0I7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWhCO0FBREg7QUFEVCxXQUtTLEtBTFQ7UUFNWSxJQUFBLEdBQUEsQ0FBSSxVQUFKLEVBQWdCLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsS0FBRDtZQUNoQixLQUFDLENBQUEsSUFBRCxHQUFRO21CQUNSLEtBQUMsQ0FBQSxVQUFELENBQVksVUFBWjtVQUZnQjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBaEI7QUFESDtBQUxULFdBU1MsTUFBQSxJQUFVLEtBVG5CO1FBVVksSUFBQSxJQUFBLENBQUssVUFBTCxFQUFpQixDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFDLEtBQUQ7WUFDakIsS0FBQyxDQUFBLElBQUQsR0FBUTttQkFDUixLQUFDLENBQUEsVUFBRCxDQUFZLFVBQVo7VUFGaUI7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCO0FBREg7QUFUVCxXQWFTLEtBYlQ7UUFjWSxJQUFBLE9BQUEsQ0FBUSxVQUFSLEVBQW9CLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsS0FBRDtZQUNwQixLQUFDLENBQUEsSUFBRCxHQUFRO21CQUNSLEtBQUMsQ0FBQSxVQUFELENBQVksVUFBWjtVQUZvQjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEI7QUFESDtBQWJULFdBaUJTLE1BakJUO1FBa0JZLElBQUEsVUFBQSxDQUFXLFVBQVgsRUFBdUIsQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQyxLQUFEO1lBQ3ZCLEtBQUMsQ0FBQSxJQUFELEdBQVE7bUJBQ1IsS0FBQyxDQUFBLFVBQUQsQ0FBWSxVQUFaO1VBRnVCO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtBQWxCWjtFQVRTOztrQkFnQ2IsWUFBQSxHQUFjLFNBQUMsSUFBRDtXQUNWLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFlLENBQUMsR0FBaEIsQ0FBQTtFQURVOztrQkFHZCxVQUFBLEdBQVksU0FBQyxVQUFEO0lBQ1IsSUFBRyxVQUFVLENBQUMsVUFBZDtNQUNJLElBQUMsQ0FBQSxjQUFELENBQUEsRUFESjs7SUFHQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBQ25CLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxJQUFaO0lBRUEsSUFBQyxDQUFBLHFCQUFELENBQUE7SUFFQSxJQUFHLFVBQVUsQ0FBQyxRQUFkO01BQ0ksSUFBQyxDQUFBLGFBQUQsQ0FBZSxVQUFVLENBQUMsUUFBMUIsRUFESjs7SUFHQSxJQUFDLENBQUEsbUJBQUQsQ0FBcUIsVUFBckI7SUFFQSxJQUFHLFVBQVUsQ0FBQyxhQUFkO01BQ0ksSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLENBQWUsU0FBQyxDQUFEO1FBQ1gsSUFBRyxDQUFBLFlBQWEsS0FBSyxDQUFDLElBQXRCO2lCQUNJLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBWCxHQUFxQixLQUFLLENBQUMsY0FEL0I7O01BRFcsQ0FBZixFQURKOztJQUtBLElBQUcsVUFBVSxDQUFDLE9BQVgsSUFBc0IsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUE1QixJQUEwQyxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQVcsQ0FBQSxDQUFBLENBQTlEO01BQ0ksSUFBQyxDQUFBLGdCQUFELENBQWtCLFVBQWxCLEVBREo7O0lBR0EsSUFBRyxVQUFVLENBQUMsTUFBZDtNQUNJLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixVQUFVLENBQUMsTUFBbkMsRUFESjs7SUFHQSxJQUFDLENBQUEsUUFBRCxDQUFVLFVBQVUsQ0FBQyxLQUFyQixFQUE0QixVQUFVLENBQUMsTUFBdkMsRUFBK0MsVUFBVSxDQUFDLE1BQTFELEVBQWtFLFVBQVUsQ0FBQyxNQUE3RTtJQUNBLElBQUMsQ0FBQSxXQUFELENBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBWixFQUFlLFVBQVUsQ0FBQyxDQUExQixFQUE2QixVQUFVLENBQUMsQ0FBeEMsQ0FBYjtJQUNBLElBQUMsQ0FBQSxXQUFELENBQWEsQ0FBQyxVQUFVLENBQUMsU0FBWixFQUF1QixVQUFVLENBQUMsU0FBbEMsRUFBNkMsVUFBVSxDQUFDLFNBQXhELENBQWI7SUFDQSxJQUFDLENBQUEsTUFBRCxDQUNJO01BQUEsSUFBQSxFQUFNLFVBQVUsQ0FBQyxJQUFqQjtNQUNBLElBQUEsRUFBTSxVQUFVLENBQUMsSUFEakI7TUFFQSxJQUFBLEVBQU0sVUFBVSxDQUFDLElBRmpCO0tBREo7SUFNQSxJQUFHLFVBQVUsQ0FBQyxPQUFkO01BQ0ksSUFBQyxDQUFBLE9BQUQsR0FBVyxVQUFVLENBQUMsUUFEMUI7O0lBR0EsSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLE1BQUEsQ0FBTyxJQUFQO0lBRWYsSUFBRyxVQUFVLENBQUMsTUFBZDthQUNJLFVBQVUsQ0FBQyxNQUFYLENBQWtCLElBQWxCLEVBREo7O0VBdkNROztrQkEwQ1osY0FBQSxHQUFnQixTQUFBO0lBQ1osSUFBQyxDQUFBLFdBQUQsR0FBbUIsSUFBQSxLQUFLLENBQUMsSUFBTixDQUFBLENBQVksQ0FBQyxhQUFiLENBQTJCLElBQUMsQ0FBQSxJQUE1QjtJQUNuQixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxXQUFXLENBQUMsU0FBYixDQUF1QixJQUFDLENBQUEsSUFBSSxDQUFDLFFBQTdCO1dBQ1YsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBZixDQUE4QixDQUFDLENBQS9CO0VBSFk7O2tCQUtoQixxQkFBQSxHQUF1QixTQUFBO1dBQ25CLElBQUMsQ0FBQSxpQkFBRCxHQUFxQjtFQURGOztrQkFHdkIsYUFBQSxHQUFlLFNBQUMsUUFBRDtXQUNYLElBQUMsQ0FBQSxJQUFJLENBQUMsUUFBTixDQUFlLFNBQUMsQ0FBRDtNQUNYLElBQUcsQ0FBQSxZQUFhLEtBQUssQ0FBQyxJQUF0QjtlQUNJLENBQUMsQ0FBQyxRQUFGLEdBQWEsU0FEakI7O0lBRFcsQ0FBZjtFQURXOztrQkFLZixtQkFBQSxHQUFxQixTQUFDLFVBQUQ7V0FDakIsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLENBQWUsU0FBQyxDQUFEO01BQ1gsSUFBRyxDQUFBLFlBQWEsS0FBSyxDQUFDLElBQXRCO1FBQ0ksQ0FBQyxDQUFDLFVBQUYsR0FBZSxVQUFVLENBQUM7ZUFDMUIsQ0FBQyxDQUFDLGFBQUYsR0FBa0IsVUFBVSxDQUFDLGNBRmpDOztJQURXLENBQWY7RUFEaUI7O2tCQU1yQixzQkFBQSxHQUF3QixTQUFDLE1BQUQ7SUFDcEIsSUFBRyxNQUFNLENBQUMsS0FBVjthQUFxQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBQyxDQUFBLEtBQWxCLEVBQXJCO0tBQUEsTUFBQTthQUNLLE1BQU0sQ0FBQyxHQUFQLENBQVcsSUFBQyxDQUFBLEtBQVosRUFETDs7RUFEb0I7O2tCQUl4QixnQkFBQSxHQUFrQixTQUFDLFVBQUQ7SUFDZCxJQUFHLENBQUMsQ0FBQyxRQUFGLENBQVcsVUFBVSxDQUFDLFNBQXRCLENBQUg7TUFDSSxJQUFDLENBQUEsY0FBRCxHQUFrQixVQUFVLENBQUMsU0FBWCxHQUF1QixFQUQ3QztLQUFBLE1BQUE7TUFHSSxJQUFDLENBQUEsY0FBRCxHQUFrQixFQUh0Qjs7SUFLQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBQ25CLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixHQUFrQixJQUFBLEtBQUssQ0FBQyxjQUFOLENBQXFCLElBQUMsQ0FBQSxJQUF0QjtJQUVsQixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVosQ0FBdUIsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFXLENBQUEsSUFBQyxDQUFBLGNBQUQsQ0FBeEM7SUFDVixJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBQTtJQUVBLElBQUMsQ0FBQSxXQUFELENBQUE7V0FFQSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUM5QixvQkFBQSxDQUFxQixLQUFDLENBQUEsY0FBdEI7TUFEOEI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDO0VBZGM7O2tCQWlCbEIsV0FBQSxHQUFhLFNBQUE7SUFDVCxJQUFDLENBQUEsY0FBRCxHQUFrQixxQkFBQSxDQUFzQixJQUFDLENBQUEsV0FBdkI7V0FDbEIsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBWixDQUFtQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsQ0FBQSxDQUFuQjtFQUZTOztrQkFJYixFQUFBLEdBQUksU0FBQyxTQUFELEVBQVksRUFBWjtBQUVBLFFBQUE7SUFBQSxJQUFHLFNBQVMsQ0FBQyxRQUFWLENBQW1CLFFBQW5CLENBQUg7TUFFSSxRQUFBLEdBQVcsU0FBQyxDQUFEO2VBQU8sRUFBQSxDQUFHLENBQUMsQ0FBQyxLQUFMO01BQVA7TUFFWCxJQUFDLENBQUEsS0FBSyxDQUFDLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLFFBQW5DO2FBRUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUF0QixDQUF5QixPQUF6QixFQUFrQyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQzlCLEtBQUMsQ0FBQSxLQUFLLENBQUMsbUJBQVAsQ0FBMkIsU0FBM0IsRUFBc0MsUUFBdEM7UUFEOEI7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDLEVBTko7S0FBQSxNQUFBO2FBVUksSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLENBQWUsU0FBQyxDQUFEO1FBQ1gsSUFBRyxDQUFBLFlBQWEsS0FBSyxDQUFDLElBQXRCO1VBRUksUUFBQSxHQUFXLFNBQUE7bUJBQU0sRUFBQSxDQUFBO1VBQU47VUFFWCxDQUFDLENBQUMsZ0JBQUYsQ0FBbUIsU0FBbkIsRUFBOEIsUUFBOUI7aUJBRUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUF0QixDQUF5QixPQUF6QixFQUFrQyxDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFBO3FCQUM5QixDQUFDLENBQUMsbUJBQUYsQ0FBc0IsU0FBdEIsRUFBaUMsUUFBakM7WUFEOEI7VUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDLEVBTko7O01BRFcsQ0FBZixFQVZKOztFQUZBOztrQkF1QkosUUFBQSxHQUFVLFNBQUMsWUFBRCxFQUFlLE1BQWYsRUFBdUIsTUFBdkIsRUFBK0IsTUFBL0I7SUFDTixJQUFHLFlBQUg7YUFDSSxJQUFDLENBQUEsS0FBRCxHQUFTLFlBQUEsSUFBZ0IsRUFEN0I7S0FBQSxNQUFBO01BR0ksSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7TUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7YUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVUsRUFMeEI7O0VBRE07O2tCQVFWLFdBQUEsR0FBYSxTQUFDLFFBQUQ7SUFDVCxJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtJQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtXQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtFQUhYOztrQkFLYixXQUFBLEdBQWEsU0FBQyxRQUFEO0lBQ1QsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7SUFDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7V0FDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7RUFIbkI7O2tCQUtiLE1BQUEsR0FBUSxTQUFDLEdBQUQ7V0FDSixNQUFNLENBQUMsSUFBUCxDQUFZLEdBQVosQ0FBZ0IsQ0FBQyxHQUFqQixDQUFxQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtRQUNqQixJQUFHLEdBQUksQ0FBQSxDQUFBLENBQVA7aUJBQ0ksS0FBRSxDQUFBLENBQUEsQ0FBRixHQUFPLEdBQUksQ0FBQSxDQUFBLEVBRGY7O01BRGlCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQjtFQURJOztrQkFLUixPQUFBLEdBQVMsU0FBQyxVQUFEO1dBQ0QsSUFBQSxTQUFBLENBQVUsSUFBVixFQUFhLFVBQWI7RUFEQzs7a0JBR1QsTUFBQSxHQUFRLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQO0lBQ0osSUFBRyxTQUFTLENBQUMsTUFBVixLQUFvQixDQUF2QjthQUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFjLENBQWQsRUFESjtLQUFBLE1BRUssSUFBRyxTQUFTLENBQUMsTUFBVixLQUFvQixDQUF2QjthQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFEQzs7RUFIRDs7a0JBTVIsV0FBQSxHQUFhLFNBQUMsS0FBRDtXQUVULE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLE1BQWIsQ0FBb0IsQ0FBQyxHQUFyQixDQUF5QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtRQUNyQixJQUFHLENBQUEsS0FBSyxLQUFSO1VBQ0ksS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEdBQWtCLEtBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQTtpQkFHMUIsTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFDLENBQUEsTUFBTSxDQUFDLE9BQXBCLENBQTRCLENBQUMsR0FBN0IsQ0FBaUMsU0FBQyxFQUFEO21CQUM3QixLQUFFLENBQUEsRUFBQSxDQUFGLEdBQVEsS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFRLENBQUEsRUFBQTtVQURLLENBQWpDLEVBSko7O01BRHFCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QjtFQUZTOztrQkFVYixVQUFBLEdBQVksU0FBQyxNQUFELEVBQVMsTUFBVDtJQUVSLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUEzQixJQUFzQyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQXBFO01BQ0ksSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQTlCO2VBQTJDLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUEzQztPQUFBLE1BQ0ssSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQTlCO2VBQTJDLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUEzQztPQUZUO0tBQUEsTUFBQTthQUtJLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUxKOztFQUZROztFQVlaLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsS0FBakIsRUFBd0IsS0FBeEIsRUFBK0IsS0FBL0I7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sY0FBUDtRQUF1QixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQS9CO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsS0FBakIsRUFBd0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBckMsRUFBd0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBckQ7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBOUIsRUFBaUMsS0FBakMsRUFBd0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBckQ7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBOUIsRUFBaUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBOUMsRUFBaUQsS0FBakQ7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUFuQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxVQUFQO1FBQW1CLEtBQUEsRUFBTyxJQUFDLENBQUEsQ0FBM0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQW5CLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0I7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLFVBQVA7UUFBbUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxDQUEzQjtPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFBbkIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sVUFBUDtRQUFtQixLQUFBLEVBQU8sSUFBQyxDQUFBLENBQTNCO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBcEM7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sa0JBQVA7UUFBMkIsS0FBQSxFQUFPLElBQUMsQ0FBQSxTQUFuQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQXBDO0lBQUgsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsQ0FBcEI7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFwQztJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0IsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsTUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsSUFBRDthQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQWYsR0FBbUIsQ0FBQztJQUE5QixDQUFMO0dBREo7O0VBR0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxNQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxJQUFEO2FBQVUsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBZixHQUFtQixDQUFDO0lBQTlCLENBQUw7R0FESjs7RUFHQSxLQUFDLENBQUEsTUFBRCxDQUFRLE1BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFDLElBQUQ7YUFBVSxJQUFDLENBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFmLEdBQW1CLENBQUM7SUFBOUIsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FBZ0I7YUFDaEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGVBQVA7UUFBd0IsS0FBQSxFQUFPLElBQUMsQ0FBQSxNQUFoQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLEdBQWlCO2FBQ2pCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxnQkFBUDtRQUF5QixLQUFBLEVBQU8sSUFBQyxDQUFBLE9BQWpDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsTUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRztRQUNKLE1BQUEsRUFBUSxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFqQixHQUFxQixJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUQxQztRQUVKLEtBQUEsRUFBTyxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFqQixHQUFxQixJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUZ6QztRQUdKLEtBQUEsRUFBTyxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFqQixHQUFxQixJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUh6Qzs7SUFBSCxDQUFMO0dBREo7O0VBT0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUNELElBQUMsQ0FBQSxPQUFPLENBQUM7SUFEUixDQUFMO0lBRUEsR0FBQSxFQUFLLFNBQUMsTUFBRDthQUNELENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBQyxDQUFBLE1BQVYsRUFBa0IsTUFBbEI7SUFEQyxDQUZMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxjQUFELEdBQWtCO0lBQXJCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxTQUFEO01BQ0QsSUFBRyxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQVcsQ0FBQSxTQUFBLEdBQVksQ0FBWixDQUFwQjtRQUNJLElBQUMsQ0FBQSxjQUFELEdBQWtCLFNBQUEsR0FBWTtRQUM5QixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVosQ0FBdUIsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFXLENBQUEsSUFBQyxDQUFBLGNBQUQsQ0FBeEM7ZUFDVixJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBQSxFQUhKOztJQURDLENBREw7R0FESjs7OztHQTlTd0I7Ozs7QURoQjVCLElBQUEsU0FBQTtFQUFBOzs7O0FBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQzs7QUFFVixTQUFVLE9BQUEsQ0FBUSxrQkFBUjs7QUFFTCxPQUFPLENBQUM7OztFQUNHLGVBQUMsVUFBRDtBQUNULFFBQUE7O01BRFUsYUFBVzs7Ozs7SUFDckIsdUNBQU0sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxVQUFYLEVBQ0Y7TUFBQSxlQUFBLEVBQWlCLE1BQWpCO0tBREUsQ0FBTjtJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsS0FBSyxDQUFDLGFBQU4sQ0FDWjtNQUFBLFNBQUEsRUFBVyxJQUFYO01BQ0EsS0FBQSxFQUFPLElBRFA7S0FEWTtJQUloQixJQUFDLENBQUEsUUFBUSxDQUFDLFdBQVYsQ0FBc0IsSUFBQyxDQUFBLFFBQVEsQ0FBQyxVQUFoQztJQUNBLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixDQUFrQixJQUFDLENBQUEsS0FBbkIsRUFBMEIsSUFBQyxDQUFBLE1BQTNCO0lBQ0EsSUFBQyxDQUFBLFFBQVEsQ0FBQyxhQUFWLENBQXdCLE1BQU0sQ0FBQyxnQkFBL0I7SUFDQSxJQUFDLENBQUEsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBM0IsR0FBbUM7SUFDbkMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQTNCLEdBQW9DO0lBQ3BDLElBQUMsQ0FBQSxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQXBCLEdBQThCO0lBQzlCLElBQUMsQ0FBQSxRQUFRLENBQUMsU0FBUyxDQUFDLElBQXBCLEdBQTJCLEtBQUssQ0FBQztJQUtqQyxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBS25CLFdBQUEsR0FBYyxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVUsQ0FBQyxNQUF0QixFQUNWO01BQUEsTUFBQSxFQUFRLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLE1BQWxCO0tBRFU7SUFHZCxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsTUFBQSxDQUFPLFdBQVAsRUFBb0IsSUFBQyxDQUFDLFFBQXRCO0lBS2QsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsSUFBQyxDQUFBLGNBQWpCO0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFJLEtBQUssQ0FBQztJQUN2QixJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBQ25CLElBQUMsQ0FBQSxXQUFELEdBQWU7SUFDZixJQUFDLENBQUEsdUJBQUQsR0FBMkI7SUFDM0IsSUFBQyxDQUFBLFNBQUQsR0FBYTtJQUViLElBQUMsQ0FBQSxFQUFELENBQUksV0FBSixFQUFpQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtRQUNiLEtBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBUCxHQUFXLENBQUMsQ0FBQyxDQUFDLE9BQUYsR0FBWSxLQUFDLENBQUEsS0FBZCxDQUFBLEdBQXVCLENBQXZCLEdBQTJCO2VBQ3RDLEtBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBUCxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBRixHQUFZLEtBQUMsQ0FBQSxNQUFkLENBQUQsR0FBeUIsQ0FBekIsR0FBNkI7TUFGM0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCO0lBSUEsSUFBQyxDQUFBLEVBQUQsQ0FBSSxXQUFKLEVBQWlCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO1FBQ2IsS0FBQyxDQUFBLFNBQUQsR0FBYTtRQUNiLElBQUcsS0FBQyxDQUFBLFdBQUo7VUFDSSxLQUFDLENBQUEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFwQixDQUFrQztZQUFDLElBQUEsRUFBTSxXQUFQO1dBQWxDO1VBQ0EsS0FBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7WUFBQyxJQUFBLEVBQU0sYUFBUDtXQUFsQztVQUNBLEtBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1lBQUMsSUFBQSxFQUFNLE9BQVA7V0FBbEM7aUJBQ0EsS0FBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7WUFBQyxJQUFBLEVBQU0sU0FBUDtXQUFsQyxFQUpKOztNQUZhO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFqQjtJQVFBLElBQUMsQ0FBQSxFQUFELENBQUksU0FBSixFQUFlLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO1FBQ1gsS0FBQyxDQUFBLFNBQUQsR0FBYTtRQUNiLElBQUcsS0FBQyxDQUFBLFdBQUo7VUFDSSxLQUFDLENBQUEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFwQixDQUFrQztZQUFDLElBQUEsRUFBTSxTQUFQO1dBQWxDO2lCQUNBLEtBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1lBQUMsSUFBQSxFQUFNLFdBQVA7V0FBbEMsRUFGSjs7TUFGVztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZjtJQVNBLElBQUMsQ0FBQSxJQUFELENBQUE7SUFFQSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUM5QixvQkFBQSxDQUFxQixLQUFDLENBQUEsc0JBQXRCO01BRDhCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQztFQXBFUzs7a0JBeUViLElBQUEsR0FBTSxTQUFBO0lBQ0YsSUFBQyxDQUFBLHNCQUFELEdBQTBCLHFCQUFBLENBQXNCLElBQUMsQ0FBQSxJQUF2QjtJQUUxQixJQUFHLElBQUMsQ0FBQSxhQUFKO01BQ0ksSUFBQyxDQUFBLGFBQUQsQ0FBQSxFQURKOztJQUdBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFYO01BQ0ksSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBakIsQ0FBQSxFQURKOztJQUdBLElBQUMsQ0FBQSxlQUFELENBQUE7V0FFQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBaUIsSUFBQyxDQUFBLEtBQWxCLEVBQXlCLElBQUMsQ0FBQSxNQUFNLENBQUMsWUFBakM7RUFYRTs7a0JBZU4sZUFBQSxHQUFpQixTQUFBO0FBQ2IsUUFBQTtJQUFBLElBQUMsQ0FBQSxTQUFTLENBQUMsYUFBWCxDQUF5QixJQUFDLENBQUEsS0FBMUIsRUFBaUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxZQUF6QztJQUNBLFVBQUEsR0FBYSxJQUFDLENBQUEsU0FBUyxDQUFDLGdCQUFYLENBQTRCLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBbkMsRUFBNkMsSUFBN0M7SUFFYixJQUFHLFVBQVUsQ0FBQyxNQUFYLElBQXFCLElBQUMsQ0FBQSxXQUFELEtBQWdCLFVBQVcsQ0FBQSxDQUFBLENBQW5EO01BQ0ksSUFBQyxDQUFBLFdBQUQsR0FBZSxVQUFXLENBQUEsQ0FBQSxFQUQ5Qjs7SUFHQSxJQUFHLElBQUMsQ0FBQSxXQUFELElBQWdCLENBQUMsVUFBVSxDQUFDLE1BQS9CO01BQ0ksSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7UUFBQyxJQUFBLEVBQU0sVUFBUDtPQUFsQztNQUNBLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1FBQUMsSUFBQSxFQUFNLFlBQVA7T0FBbEMsRUFGSjs7SUFJQSxJQUFHLENBQUMsVUFBVSxDQUFDLE1BQWY7TUFDSSxJQUFDLENBQUEsV0FBRCxHQUFlO01BQ2YsSUFBQyxDQUFBLHVCQUFELEdBQTJCLE1BRi9COztJQUlBLElBQUcsQ0FBQyxJQUFDLENBQUEsdUJBQUYsSUFBNkIsSUFBQyxDQUFBLFdBQWpDO01BQ0ksSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7UUFBQyxJQUFBLEVBQU0sV0FBUDtPQUFsQztNQUNBLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1FBQUMsSUFBQSxFQUFNLGFBQVA7T0FBbEM7YUFDQSxJQUFDLENBQUEsdUJBQUQsR0FBMkIsS0FIL0I7O0VBZmE7O2tCQW9CakIsY0FBQSxHQUFnQixTQUFDLENBQUQ7SUFDWixJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsR0FBaUIsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUE7SUFDM0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsc0JBQXJCLENBQUE7V0FDQSxJQUFDLENBQUEsUUFBUSxDQUFDLE9BQVYsQ0FBa0IsSUFBQyxDQUFBLEtBQW5CLEVBQTBCLElBQUMsQ0FBQSxNQUEzQjtFQUhZOzs7O0dBN0dROzs7O0FESjVCLElBQUEsUUFBQTtFQUFBOzs7QUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDOztBQUVWLFFBQVMsT0FBQSxDQUFRLGdCQUFSOztBQUVKLE9BQU8sQ0FBQzs7O0VBQ0csZ0JBQUMsVUFBRDs7TUFBQyxhQUFXOztJQUVyQixDQUFDLENBQUMsUUFBRixDQUFXLFVBQVgsRUFDSTtNQUFBLE1BQUEsRUFDSTtRQUFBLENBQUEsRUFBRyxHQUFIO1FBQ0EsU0FBQSxFQUFXLENBQUMsRUFEWjtPQURKO0tBREo7SUFLQSx3Q0FBTSxVQUFOO0lBRUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLEdBQXdCLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxRQUFaO0lBQ3hCLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxHQUFpQixJQUFBLEtBQUssQ0FBQyxHQUFOLENBQVUsUUFBVixFQUFvQixHQUFwQixFQUF5QixJQUF6QjtJQUVqQixJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsS0FBSyxDQUFDLGVBQU4sQ0FBc0IsUUFBdEIsRUFBZ0MsUUFBaEM7SUFDZCxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFqQixHQUFxQjtJQUNyQixJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFDLENBQUEsTUFBWjtJQUVBLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsVUFBTixDQUFpQixRQUFqQixFQUEyQixFQUEzQjtJQUNiLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQWhCLENBQW9CLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCLENBQTVCO0lBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLEdBQW9CO0lBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFyQixHQUE0QjtJQUM1QixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBckIsR0FBMkI7SUFDM0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBZCxHQUFxQjtJQUNyQixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFkLEdBQXVCO0lBQ3ZCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUF0QixHQUE4QjtJQUM5QixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBdEIsR0FBK0I7SUFDL0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsSUFBQyxDQUFBLEtBQVo7SUFFQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsS0FBSyxDQUFDLGdCQUFOLENBQXVCLFFBQXZCLEVBQWlDLEVBQWpDO0lBQ2QsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBakIsQ0FBcUIsQ0FBQyxHQUF0QixFQUEyQixHQUEzQixFQUFnQyxDQUFDLEdBQWpDO0lBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsSUFBQyxDQUFBLE1BQVo7SUFFQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsS0FBSyxDQUFDLGdCQUFOLENBQXVCLFFBQXZCLEVBQWlDLEVBQWpDO0lBQ2QsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBakIsQ0FBcUIsR0FBckIsRUFBMEIsR0FBMUIsRUFBK0IsQ0FBQyxHQUFoQztJQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxNQUFaO0lBRUEsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEtBQUssQ0FBQyxnQkFBTixDQUF1QixRQUF2QixFQUFpQyxFQUFqQztJQUNkLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCLENBQXFCLENBQUMsR0FBdEIsRUFBMkIsR0FBM0IsRUFBZ0MsR0FBaEM7SUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFDLENBQUEsTUFBWjtJQUVBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxLQUFLLENBQUMsZ0JBQU4sQ0FBdUIsUUFBdkIsRUFBaUMsRUFBakM7SUFDZCxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQixDQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQjtJQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxNQUFaO0lBRUEsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxLQUFLLENBQUMsY0FBTixDQUFxQixHQUFyQixFQUEwQixHQUExQjtJQUNoQixJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEtBQUssQ0FBQyxvQkFBTixDQUNaO01BQUEsU0FBQSxFQUFXLEVBQVg7TUFDQSxLQUFBLEVBQU8sUUFEUDtNQUVBLFNBQUEsRUFBVyxHQUZYO01BR0EsU0FBQSxFQUFXLE1BSFg7S0FEWTtJQUtoQixJQUFDLENBQUEsS0FBRCxHQUFhLElBQUEsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFDLENBQUEsUUFBWixFQUFzQixJQUFDLENBQUEsUUFBdkI7SUFDYixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQixDQUFDLElBQUksQ0FBQyxFQUFOLEdBQVc7SUFDL0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLEdBQXVCO0lBQ3ZCLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxLQUFaOztBQUVBOzs7Ozs7RUF0RFM7Ozs7R0FEWTs7OztBREo3QixJQUFBLFFBQUE7RUFBQTs7OztBQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBRVYsUUFBUyxPQUFBLENBQVEsZ0JBQVI7O0FBRUosT0FBTyxDQUFDOzs7RUFDRyxtQkFBQyxLQUFELEVBQVEsVUFBUjtBQUNULFFBQUE7O01BRGlCLGFBQVc7OztJQUM1Qix5Q0FBQTtJQUVBLElBQUcsQ0FBQyxVQUFKO0FBQ1EsWUFBTSxLQUFBLENBQU0sa0RBQU4sRUFEZDs7SUFJQSxJQUFHLENBQUMsQ0FBQyxRQUFGLENBQVcsVUFBWCxDQUFIO01BQ0ksU0FBQSxHQUFZO01BR1osTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFLLENBQUMsTUFBbEIsQ0FBeUIsQ0FBQyxHQUExQixDQUE4QixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsQ0FBRDtVQUMxQixJQUFHLENBQUEsS0FBSyxTQUFSO1lBRUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFiLEdBQXVCLEtBQUssQ0FBQyxNQUFPLENBQUEsQ0FBQTttQkFDcEMsVUFBQSxHQUFhLEtBQUssQ0FBQyxNQUFPLENBQUEsU0FBQSxFQUg5Qjs7UUFEMEI7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTlCLEVBSko7O0lBVUEsSUFBQyxDQUFBLFVBQUQsR0FBYyxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsVUFBbEI7SUFDZCxJQUFDLENBQUEsT0FBRCxHQUFXLENBQUMsQ0FBQyxRQUFGLENBQVcsVUFBVSxDQUFDLE9BQXRCLEVBQ1A7TUFBQSxJQUFBLEVBQU0sQ0FBTjtNQUNBLEtBQUEsRUFBTyxDQURQO01BRUEsS0FBQSxFQUFPLFFBRlA7S0FETztJQU1YLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFyQixFQUE0QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFFeEIsS0FBQyxDQUFBLEtBQUQsR0FBUztRQUNULEtBQUMsQ0FBQSxJQUFELEdBQVEsS0FBSyxDQUFDLElBQU4sSUFBYyxLQUFLLENBQUMsS0FBcEIsSUFBNkIsS0FBSyxDQUFDO1FBQzNDLEtBQUMsQ0FBQSxHQUFELEdBQU87UUFDUCxLQUFDLENBQUEsSUFBRCxHQUFRLEtBQUMsQ0FBQSxPQUFPLENBQUM7UUFDakIsS0FBQyxDQUFBLGNBQUQsR0FBa0I7UUFDbEIsS0FBQyxDQUFBLFdBQUQsR0FBZSxLQUFDLENBQUEsSUFBRCxHQUFRLEtBQUMsQ0FBQTtRQUN4QixLQUFDLENBQUEsMEJBQUQsR0FBOEI7UUFDOUIsS0FBQyxDQUFBLE1BQUQsR0FBVSxLQUFDLENBQUEsZUFBRCxDQUFBO1FBSVYsSUFBRyxLQUFDLENBQUEsTUFBTSxDQUFDLE1BQVg7VUFFSSxLQUFDLENBQUEsZ0JBQUQsR0FBb0IsV0FBQSxDQUFZLFNBQUE7WUFFNUIsSUFBRyxLQUFDLENBQUEsY0FBRCxJQUFtQixLQUFDLENBQUEsV0FBdkI7QUFFSSxxQkFBTyxLQUFDLENBQUEsZ0JBRlo7O1lBS0EscUJBQUEsQ0FBc0IsS0FBQyxDQUFBLGFBQXZCO21CQUNBLEtBQUMsQ0FBQSxjQUFEO1VBUjRCLENBQVosRUFTbEIsSUFBQSxHQUFPLEtBQUMsQ0FBQSxHQVRVLEVBRnhCOztlQWVBLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBdEIsQ0FBeUIsT0FBekIsRUFBa0MsU0FBQTtVQUM5QixJQUFHLEtBQUMsQ0FBQSxnQkFBSjttQkFDSSxhQUFBLENBQWMsS0FBQyxDQUFBLGdCQUFmLEVBREo7O1FBRDhCLENBQWxDO01BNUJ3QjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBNUI7RUF4QlM7O3NCQXdEYixnQkFBQSxHQUFrQixTQUFDLFVBQUQ7QUFDZCxRQUFBO0lBQUEsS0FBQSxHQUFRLE1BQU0sQ0FBQyxNQUFQLENBQWMsRUFBZCxFQUFrQixVQUFsQjtJQUNSLE9BQU8sS0FBSyxDQUFDO1dBQ2I7RUFIYzs7c0JBS2xCLGVBQUEsR0FBaUIsU0FBQTtBQUtiLFFBQUE7SUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsVUFBYixDQUF3QixDQUFDLEdBQXpCLENBQTZCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO0FBRWxDLFlBQUE7UUFBQSxLQUFDLENBQUEsMEJBQTJCLENBQUEsQ0FBQSxDQUE1QixHQUFpQyxLQUFDLENBQUEsS0FBTSxDQUFBLENBQUE7UUFFeEMsTUFBQSxHQUFTO1FBQ1QsSUFBRyxLQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBUCxHQUFZLEtBQUMsQ0FBQSxVQUFXLENBQUEsQ0FBQSxDQUEzQjtVQUNJLE1BQU8sQ0FBQSxDQUFBLENBQVAsR0FBWSxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQVAsR0FBWSxLQUFDLENBQUEsVUFBVyxDQUFBLENBQUEsQ0FBakMsRUFEakI7U0FBQSxNQUVLLElBQUcsS0FBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQVAsR0FBWSxLQUFDLENBQUEsVUFBVyxDQUFBLENBQUEsQ0FBM0I7VUFDRCxNQUFPLENBQUEsQ0FBQSxDQUFQLEdBQVksSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBUCxHQUFZLEtBQUMsQ0FBQSxVQUFXLENBQUEsQ0FBQSxDQUFqQyxFQURYO1NBQUEsTUFBQTtVQUdELEtBSEM7O2VBSUw7TUFYa0M7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTdCO1dBYVQsTUFBTSxDQUFDLE1BQVAsQ0FBYyxTQUFDLENBQUQ7YUFDVjtJQURVLENBQWQ7RUFsQmE7O3NCQXFCakIsV0FBQSxHQUFhLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtJQUVULElBQUcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBZixDQUF3QixNQUF4QixDQUFIO2FBQ0ksSUFBRSxDQUFBLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBVCxDQUFGLENBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBREo7S0FBQSxNQUFBO2FBR0ksSUFBQyxDQUFBLE1BQUQsQ0FBUSxDQUFSLEVBQVcsQ0FBWCxFQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFISjs7RUFGUzs7c0JBT2IsYUFBQSxHQUFlLFNBQUE7QUFFWCxRQUFBO0FBQUE7QUFBQTtTQUFBLDZDQUFBOztNQUVJLElBQUEsR0FBTyxNQUFNLENBQUMsSUFBUCxDQUFZLEtBQVosQ0FBbUIsQ0FBQSxDQUFBO01BQzFCLFVBQUEsR0FBYSxNQUFNLENBQUMsTUFBUCxDQUFjLEtBQWQsQ0FBcUIsQ0FBQSxDQUFBO01BRWxDLFVBQUEsR0FBYSxJQUFDLENBQUEsV0FBRCxDQUFhLElBQUMsQ0FBQSxjQUFkLEVBQThCLElBQUMsQ0FBQSwwQkFBMkIsQ0FBQSxJQUFBLENBQTFELEVBQWlFLFVBQWpFLEVBQTZFLElBQUMsQ0FBQSxXQUE5RTttQkFFYixJQUFDLENBQUEsS0FBTSxDQUFBLElBQUEsQ0FBUCxHQUFlO0FBUG5COztFQUZXOztzQkFXZixlQUFBLEdBQWlCLFNBQUE7V0FDYixhQUFBLENBQWMsSUFBQyxDQUFBLGdCQUFmO0VBRGE7O3NCQU1qQixNQUFBLEdBQVEsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ0osQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFSLEdBQVk7RUFEUjs7c0JBR1IsVUFBQSxHQUFZLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNSLENBQUEsR0FBSSxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUosR0FBZSxDQUFmLEdBQW1CO0VBRFg7O3NCQUdaLFdBQUEsR0FBYSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDVCxDQUFDLENBQUQsR0FBSyxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUwsR0FBZ0IsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFoQixHQUEwQjtFQURqQjs7c0JBR2IsYUFBQSxHQUFlLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtJQUNYLElBQUcsQ0FBQyxDQUFBLElBQUssQ0FBQSxHQUFJLENBQVYsQ0FBQSxHQUFlLENBQWxCO2FBQ0ksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFSLEdBQVksQ0FBWixHQUFnQixFQURwQjtLQUFBLE1BQUE7YUFHSSxDQUFDLENBQUQsR0FBSyxDQUFMLEdBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBSCxDQUFBLEdBQVEsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFSLEdBQWtCLENBQW5CLENBQVQsR0FBaUMsRUFIckM7O0VBRFc7O3NCQU1mLFdBQUEsR0FBYSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDVCxDQUFBLEdBQUksQ0FBQyxDQUFBLElBQUssQ0FBTixDQUFKLEdBQWUsQ0FBZixHQUFtQixDQUFuQixHQUF1QjtFQURkOztzQkFHYixZQUFBLEdBQWMsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1YsQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFiLENBQUEsR0FBa0IsQ0FBbEIsR0FBc0IsQ0FBdEIsR0FBMEIsQ0FBM0IsQ0FBSixHQUFvQztFQUQxQjs7c0JBR2QsY0FBQSxHQUFnQixTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7SUFDWixJQUFHLENBQUMsQ0FBQSxJQUFLLENBQUEsR0FBSSxDQUFWLENBQUEsR0FBZSxDQUFsQjthQUNJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBUixHQUFZLENBQVosR0FBZ0IsQ0FBaEIsR0FBb0IsRUFEeEI7S0FBQSxNQUFBO2FBR0ksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFDLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBQSxHQUFXLENBQVgsR0FBZSxDQUFmLEdBQW1CLENBQXBCLENBQVIsR0FBaUMsRUFIckM7O0VBRFk7O3NCQU1oQixXQUFBLEdBQWEsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1QsQ0FBQSxHQUFJLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBSixHQUFlLENBQWYsR0FBbUIsQ0FBbkIsR0FBdUIsQ0FBdkIsR0FBMkI7RUFEbEI7O3NCQUdiLFlBQUEsR0FBYyxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDVixDQUFDLENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBQSxHQUFJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBYixDQUFBLEdBQWtCLENBQWxCLEdBQXNCLENBQXRCLEdBQTBCLENBQTFCLEdBQThCLENBQS9CLENBQUwsR0FBeUM7RUFEL0I7O3NCQUdkLGNBQUEsR0FBZ0IsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0lBQ1osSUFBRyxDQUFDLENBQUEsSUFBSyxDQUFBLEdBQUksQ0FBVixDQUFBLEdBQWUsQ0FBbEI7YUFDSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQVIsR0FBWSxDQUFaLEdBQWdCLENBQWhCLEdBQW9CLENBQXBCLEdBQXdCLEVBRDVCO0tBQUEsTUFBQTthQUdJLENBQUMsQ0FBRCxHQUFLLENBQUwsR0FBUyxDQUFDLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBQSxHQUFXLENBQVgsR0FBZSxDQUFmLEdBQW1CLENBQW5CLEdBQXVCLENBQXhCLENBQVQsR0FBc0MsRUFIMUM7O0VBRFk7O3NCQU1oQixXQUFBLEdBQWEsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1QsQ0FBQSxHQUFJLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBSixHQUFlLENBQWYsR0FBbUIsQ0FBbkIsR0FBdUIsQ0FBdkIsR0FBMkIsQ0FBM0IsR0FBK0I7RUFEdEI7O3NCQUdiLFlBQUEsR0FBYyxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDVixDQUFBLEdBQUksQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQWIsQ0FBQSxHQUFrQixDQUFsQixHQUFzQixDQUF0QixHQUEwQixDQUExQixHQUE4QixDQUE5QixHQUFrQyxDQUFuQyxDQUFKLEdBQTRDO0VBRGxDOztzQkFHZCxjQUFBLEdBQWdCLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtJQUNaLElBQUcsQ0FBQyxDQUFBLElBQUssQ0FBQSxHQUFJLENBQVYsQ0FBQSxHQUFlLENBQWxCO2FBQ0ksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFSLEdBQVksQ0FBWixHQUFnQixDQUFoQixHQUFvQixDQUFwQixHQUF3QixDQUF4QixHQUE0QixFQURoQztLQUFBLE1BQUE7YUFHSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQUMsQ0FBQyxDQUFBLElBQUssQ0FBTixDQUFBLEdBQVcsQ0FBWCxHQUFlLENBQWYsR0FBbUIsQ0FBbkIsR0FBdUIsQ0FBdkIsR0FBMkIsQ0FBNUIsQ0FBUixHQUF5QyxFQUg3Qzs7RUFEWTs7c0JBTWhCLFVBQUEsR0FBWSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDUixDQUFDLENBQUQsR0FBSyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBQyxJQUFJLENBQUMsRUFBTCxHQUFVLENBQVgsQ0FBakIsQ0FBTCxHQUF1QyxDQUF2QyxHQUEyQztFQURuQzs7c0JBR1osV0FBQSxHQUFhLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNULENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBQyxJQUFJLENBQUMsRUFBTCxHQUFVLENBQVgsQ0FBakIsQ0FBSixHQUFzQztFQUQ3Qjs7c0JBR2IsYUFBQSxHQUFlLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNYLENBQUMsQ0FBRCxHQUFLLENBQUwsR0FBUyxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBSSxDQUFDLEVBQUwsR0FBVSxDQUFWLEdBQWMsQ0FBdkIsQ0FBQSxHQUE0QixDQUE3QixDQUFULEdBQTJDO0VBRGhDOztzQkFHZixVQUFBLEdBQVksU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0FBQ1IsUUFBQTsyQ0FBVztNQUFBLENBQUEsRUFBSSxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBQSxHQUFLLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQWpCLENBQUosR0FBb0MsQ0FBeEM7O0VBREg7O3NCQUdaLFdBQUEsR0FBYSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7QUFDVCxRQUFBOzJDQUFXLENBQUEsR0FBSTtNQUFBLENBQUEsRUFBSSxDQUFBLEdBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUMsRUFBRCxHQUFNLENBQU4sR0FBVSxDQUF0QixDQUFELEdBQTRCLENBQTdCLENBQUosR0FBc0MsQ0FBMUM7O0VBRE47O3NCQUdiLGFBQUEsR0FBZSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7SUFDWCxJQUFHLENBQUEsS0FBSyxDQUFSO01BQ0ksRUFESjs7SUFFQSxJQUFHLENBQUEsS0FBSyxDQUFSO01BQ0ksQ0FBQSxHQUFJLEVBRFI7O0lBRUEsSUFBRyxDQUFDLENBQUEsSUFBSyxDQUFBLEdBQUksQ0FBVixDQUFBLEdBQWUsQ0FBbEI7YUFDSSxDQUFBLEdBQUksQ0FBSixHQUFRLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQUEsR0FBSyxDQUFDLENBQUEsR0FBSSxDQUFMLENBQWpCLENBQVIsR0FBb0MsRUFEeEM7S0FBQSxNQUFBO2FBR0ksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULEVBQVksQ0FBQyxFQUFELEdBQU0sRUFBRSxDQUFwQixDQUFELEdBQTBCLENBQTNCLENBQVIsR0FBd0MsRUFINUM7O0VBTFc7O3NCQVVmLFVBQUEsR0FBWSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDUixDQUFDLENBQUQsR0FBSyxDQUFDLElBQUksQ0FBQyxJQUFMLENBQVUsQ0FBQSxHQUFJLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBQSxHQUFXLENBQXpCLENBQUEsR0FBOEIsQ0FBL0IsQ0FBTCxHQUF5QztFQURqQzs7c0JBR1osV0FBQSxHQUFhLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNULENBQUEsR0FBSSxJQUFJLENBQUMsSUFBTCxDQUFVLENBQUEsR0FBSSxDQUFDLENBQUEsR0FBSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQWIsQ0FBQSxHQUFrQixDQUFoQyxDQUFKLEdBQXlDO0VBRGhDOztzQkFHYixhQUFBLEdBQWUsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0lBQ1gsSUFBRyxDQUFDLENBQUEsSUFBSyxDQUFBLEdBQUksQ0FBVixDQUFBLEdBQWUsQ0FBbEI7YUFDSSxDQUFDLENBQUQsR0FBSyxDQUFMLEdBQVMsQ0FBQyxJQUFJLENBQUMsSUFBTCxDQUFVLENBQUEsR0FBSSxDQUFBLEdBQUksQ0FBbEIsQ0FBQSxHQUF1QixDQUF4QixDQUFULEdBQXNDLEVBRDFDO0tBQUEsTUFBQTthQUdJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBQyxJQUFJLENBQUMsSUFBTCxDQUFVLENBQUEsR0FBSSxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUEsR0FBVyxDQUF6QixDQUFBLEdBQThCLENBQS9CLENBQVIsR0FBNEMsRUFIaEQ7O0VBRFc7O3NCQU1mLGFBQUEsR0FBZSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7QUFDWCxRQUFBO0lBQUEsQ0FBQSxHQUFJO0lBQ0osQ0FBQSxHQUFJO0lBQ0osQ0FBQSxHQUFJO0lBRUosSUFBRyxDQUFBLEtBQUssQ0FBUjtNQUNJLEVBREo7O0lBRUEsSUFBRyxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUEsS0FBWSxDQUFmO01BQ0ksQ0FBQSxHQUFJLEVBRFI7O0lBR0EsSUFBRyxDQUFDLENBQUo7TUFDSSxDQUFBLEdBQUksQ0FBQSxHQUFJLEdBRFo7O0lBRUEsSUFBRyxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQVA7TUFDSSxDQUFBLEdBQUk7TUFDSixDQUFBLEdBQUksQ0FBQSxHQUFJLEVBRlo7S0FBQSxNQUFBO01BSUksQ0FBQSxHQUFJLENBQUEsR0FBSSxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBVixDQUFKLEdBQW9CLElBQUksQ0FBQyxJQUFMLENBQVcsQ0FBQSxHQUFJLENBQWYsRUFKNUI7O1dBTUEsQ0FBQyxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxFQUFBLEdBQUssQ0FBQyxDQUFBLElBQUssQ0FBTixDQUFqQixDQUFKLEdBQWlDLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFBLEdBQUksQ0FBSixHQUFRLENBQVQsQ0FBQSxHQUFjLENBQUMsQ0FBQSxHQUFJLElBQUksQ0FBQyxFQUFWLENBQWQsR0FBOEIsQ0FBdkMsQ0FBbEMsQ0FBRCxHQUFpRjtFQWxCdEU7O3NCQW9CZixjQUFBLEdBQWdCLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtBQUNaLFFBQUE7SUFBQSxDQUFBLEdBQUk7SUFDSixDQUFBLEdBQUk7SUFDSixDQUFBLEdBQUk7SUFFSixJQUFHLENBQUEsS0FBSyxDQUFSO01BQ0ksRUFESjs7SUFFQSxJQUFHLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBQSxLQUFZLENBQWY7TUFDSSxDQUFBLEdBQUksRUFEUjs7SUFHQSxJQUFHLENBQUMsQ0FBSjtNQUNJLENBQUEsR0FBSSxDQUFBLEdBQUksR0FEWjs7SUFFQSxJQUFHLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsQ0FBUDtNQUNJLENBQUEsR0FBSTtNQUNKLENBQUEsR0FBSSxDQUFBLEdBQUksRUFGWjtLQUFBLE1BQUE7TUFJSSxDQUFBLEdBQUksQ0FBQSxHQUFJLENBQUMsQ0FBQSxHQUFJLElBQUksQ0FBQyxFQUFWLENBQUosR0FBb0IsSUFBSSxDQUFDLElBQUwsQ0FBVyxDQUFBLEdBQUksQ0FBZixFQUo1Qjs7V0FNQSxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULEVBQVksQ0FBQyxFQUFELEdBQU0sQ0FBbEIsQ0FBSixHQUEyQixJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQUEsR0FBYyxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBVixDQUFkLEdBQThCLENBQXZDLENBQTNCLEdBQXVFLENBQXZFLEdBQTJFO0VBbEIvRDs7c0JBb0JoQixnQkFBQSxHQUFrQixTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7QUFDZCxRQUFBO0lBQUEsQ0FBQSxHQUFJO0lBQ0osQ0FBQSxHQUFJO0lBQ0osQ0FBQSxHQUFJO0lBRUosSUFBRyxDQUFBLEtBQUssQ0FBUjtNQUNJLEVBREo7O0lBRUEsSUFBRyxDQUFDLENBQUEsSUFBSyxDQUFBLEdBQUksQ0FBVixDQUFBLEtBQWdCLENBQW5CO01BQ0ksQ0FBQSxHQUFJLEVBRFI7O0lBR0EsSUFBRyxDQUFDLENBQUo7TUFDSSxDQUFBLEdBQUksQ0FBQSxHQUFJLENBQUMsRUFBQSxHQUFLLEdBQU4sRUFEWjs7SUFFQSxJQUFHLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsQ0FBUDtNQUNJLENBQUEsR0FBSTtNQUNKLENBQUEsR0FBSSxDQUFBLEdBQUksRUFGWjtLQUFBLE1BQUE7TUFJSSxDQUFBLEdBQUksQ0FBQSxHQUFJLENBQUMsQ0FBQSxHQUFJLElBQUksQ0FBQyxFQUFWLENBQUosR0FBb0IsSUFBSSxDQUFDLElBQUwsQ0FBVyxDQUFBLEdBQUksQ0FBZixFQUo1Qjs7SUFLQSxJQUFJLENBQUEsR0FBSSxDQUFSO01BQ0ksQ0FBQyxFQUFELEdBQU0sQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBQSxHQUFLLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBakIsQ0FBSixHQUFpQyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQUEsR0FBYyxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBVixDQUFkLEdBQThCLENBQXZDLENBQWxDLENBQU4sR0FBcUYsRUFEekY7O1dBR0EsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUMsRUFBRCxHQUFNLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBbEIsQ0FBSixHQUFrQyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQUEsR0FBYyxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBVixDQUFkLEdBQThCLENBQXZDLENBQWxDLEdBQThFLEVBQTlFLEdBQW1GLENBQW5GLEdBQXVGO0VBcEJ6RTs7OztHQTNPVSxNQUFNLENBQUM7Ozs7QURKakMsT0FBTyxDQUFDOzs7RUFFVixTQUFDLENBQUEsTUFBRCxHQUFVLFNBQUMsWUFBRCxFQUFlLFVBQWY7SUFDTixJQUFHLFVBQVUsQ0FBQyxRQUFkO01BQ0ksVUFBVSxDQUFDLEdBQVgsR0FBaUIsU0FBQyxLQUFEO0FBQ2IsY0FBTSxLQUFBLENBQVMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFkLEdBQW1CLEdBQW5CLEdBQXNCLFlBQXRCLEdBQW1DLGNBQTNDO01BRE8sRUFEckI7O1dBSUEsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsSUFBQyxDQUFBLFNBQXZCLEVBQWtDLFlBQWxDLEVBQWdELFVBQWhEO0VBTE07Ozs7Ozs7O0FERmQsSUFBQSwrQkFBQTtFQUFBOzs7QUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDOztBQUVYLE9BQUEsQ0FBUSxxQkFBUjs7QUFDQyxZQUFhLE9BQUEsQ0FBUSxxQkFBUjs7QUFDYixZQUFhLE9BQUEsQ0FBUSxxQkFBUjs7QUFDYixTQUFVLE9BQUEsQ0FBUSxrQkFBUjs7QUFFTCxPQUFPLENBQUM7OztFQUNHLGdCQUFDLFVBQUQsRUFBZ0IsUUFBaEI7O01BQUMsYUFBVzs7SUFDckIsc0NBQUE7SUFFQSxJQUFDLENBQUEsUUFBRCxHQUFZO0lBRVosQ0FBQyxDQUFDLFFBQUYsQ0FBVyxVQUFYLEVBQ0k7TUFBQSxDQUFBLEVBQUcsQ0FBSDtNQUNBLENBQUEsRUFBRyxDQURIO01BRUEsQ0FBQSxFQUFHLEdBRkg7TUFHQSxTQUFBLEVBQVcsQ0FIWDtNQUlBLFNBQUEsRUFBVyxDQUpYO01BS0EsU0FBQSxFQUFXLENBTFg7TUFNQSxHQUFBLEVBQUssRUFOTDtNQU9BLElBQUEsRUFBTSxHQVBOO01BUUEsR0FBQSxFQUFLLEtBUkw7TUFTQSxTQUFBLEVBQVcsS0FUWDtNQVVBLFVBQUEsRUFBWSxLQVZaO01BV0EsWUFBQSxFQUFjLEtBWGQ7TUFZQSxVQUFBLEVBQVksS0FaWjtNQWFBLGVBQUEsRUFBaUIsRUFiakI7TUFjQSxNQUFBLEVBQVksSUFBQSxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsQ0FkWjtLQURKO0lBaUJBLElBQUMsQ0FBQSxZQUFELEdBQW9CLElBQUEsS0FBSyxDQUFDLGlCQUFOLENBQ2hCLFVBQVUsQ0FBQyxHQURLLEVBRWhCLFVBQVUsQ0FBQyxNQUZLLEVBR2hCLFVBQVUsQ0FBQyxJQUhLLEVBSWhCLFVBQVUsQ0FBQyxHQUpLO0lBT3BCLElBQUcsVUFBVSxDQUFDLGFBQWQ7TUFDSSxJQUFDLENBQUEsa0JBQUQsQ0FBb0IsVUFBcEIsRUFESjs7SUFHQSxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUMsVUFBVSxDQUFDLENBQVosRUFBZSxVQUFVLENBQUMsQ0FBMUIsRUFBNkIsVUFBVSxDQUFDLENBQXhDLENBQWI7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUMsVUFBVSxDQUFDLFNBQVosRUFBdUIsVUFBVSxDQUFDLFNBQWxDLEVBQTZDLFVBQVUsQ0FBQyxTQUF4RCxDQUFiO0lBRUEsSUFBQyxDQUFBLHFCQUFELENBQUE7SUFFQSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsTUFBQSxDQUFPLElBQVA7RUFyQ047O21CQXVDYixrQkFBQSxHQUFvQixTQUFDLFVBQUQ7SUFDaEIsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxLQUFLLENBQUMsYUFBTixDQUFvQixJQUFDLENBQUEsWUFBckIsRUFBbUMsSUFBQyxDQUFBLFFBQXBDO0lBQ2hCLElBQUMsQ0FBQSxTQUFELEdBQWEsVUFBVSxDQUFDO0lBQ3hCLElBQUMsQ0FBQSxVQUFELEdBQWMsVUFBVSxDQUFDO0lBQ3pCLElBQUMsQ0FBQSxZQUFELEdBQWdCLFVBQVUsQ0FBQztJQUMzQixJQUFDLENBQUEsVUFBRCxHQUFjLFVBQVUsQ0FBQztJQUN6QixJQUFDLENBQUEsZUFBRCxHQUFtQixVQUFVLENBQUM7V0FDOUIsSUFBQyxDQUFBLE1BQUQsR0FBVSxVQUFVLENBQUM7RUFQTDs7bUJBU3BCLHFCQUFBLEdBQXVCLFNBQUE7V0FDbkIsSUFBQyxDQUFBLGlCQUFELEdBQXFCO0VBREY7O21CQUd2QixFQUFBLEdBQUksU0FBQyxTQUFELEVBQVksRUFBWjtBQUVBLFFBQUE7SUFBQSxJQUFHLFNBQVMsQ0FBQyxRQUFWLENBQW1CLFFBQW5CLENBQUg7TUFDSSxRQUFBLEdBQVcsU0FBQyxDQUFEO2VBQU8sRUFBQSxDQUFHLENBQUMsQ0FBQyxLQUFMO01BQVA7TUFDWCxJQUFDLENBQUEsWUFBWSxDQUFDLGdCQUFkLENBQStCLFNBQS9CLEVBQTBDLFFBQTFDO2FBRUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUF0QixDQUF5QixPQUF6QixFQUFrQyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQzlCLEtBQUMsQ0FBQSxZQUFZLENBQUMsbUJBQWQsQ0FBa0MsU0FBbEMsRUFBNkMsUUFBN0M7UUFEOEI7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDLEVBSko7O0VBRkE7O21CQVNKLFdBQUEsR0FBYSxTQUFDLFNBQUQ7SUFDVCxJQUFDLENBQUEsQ0FBRCxHQUFLLFNBQVUsQ0FBQSxDQUFBO0lBQ2YsSUFBQyxDQUFBLENBQUQsR0FBSyxTQUFVLENBQUEsQ0FBQTtXQUNmLElBQUMsQ0FBQSxDQUFELEdBQUssU0FBVSxDQUFBLENBQUE7RUFITjs7bUJBS2IsV0FBQSxHQUFhLFNBQUMsU0FBRDtJQUNULElBQUMsQ0FBQSxTQUFELEdBQWEsU0FBVSxDQUFBLENBQUE7SUFDdkIsSUFBQyxDQUFBLFNBQUQsR0FBYSxTQUFVLENBQUEsQ0FBQTtXQUN2QixJQUFDLENBQUEsU0FBRCxHQUFhLFNBQVUsQ0FBQSxDQUFBO0VBSGQ7O21CQUtiLE9BQUEsR0FBUyxTQUFDLFVBQUQ7V0FDRCxJQUFBLFNBQUEsQ0FBVSxJQUFWLEVBQWEsVUFBYjtFQURDOzttQkFHVCxNQUFBLEdBQVEsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVA7SUFDSixJQUFHLFNBQVMsQ0FBQyxNQUFWLEtBQW9CLENBQXZCO2FBQ0ksSUFBQyxDQUFBLFlBQVksQ0FBQyxNQUFkLENBQXFCLENBQXJCLEVBREo7S0FBQSxNQUVLLElBQUcsU0FBUyxDQUFDLE1BQVYsS0FBb0IsQ0FBdkI7YUFDRCxJQUFDLENBQUEsWUFBWSxDQUFDLE1BQWQsQ0FBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0IsRUFEQzs7RUFIRDs7bUJBTVIsV0FBQSxHQUFhLFNBQUMsS0FBRDtXQUVULE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLE1BQWIsQ0FBb0IsQ0FBQyxHQUFyQixDQUF5QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtRQUNyQixJQUFHLENBQUEsS0FBSyxLQUFSO1VBQ0ksS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEdBQWtCLEtBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQTtpQkFHMUIsTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFDLENBQUEsTUFBTSxDQUFDLE9BQXBCLENBQTRCLENBQUMsR0FBN0IsQ0FBaUMsU0FBQyxFQUFEO21CQUM3QixLQUFFLENBQUEsRUFBQSxDQUFGLEdBQVEsS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFRLENBQUEsRUFBQTtVQURLLENBQWpDLEVBSko7O01BRHFCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QjtFQUZTOzttQkFVYixVQUFBLEdBQVksU0FBQyxNQUFELEVBQVMsTUFBVDtJQUVSLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUEzQixJQUFzQyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQXBFO01BQ0ksSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQTlCO2VBQTJDLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUEzQztPQUFBLE1BQ0ssSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQTlCO2VBQTJDLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUEzQztPQUZUO0tBQUEsTUFBQTthQUtJLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUxKOztFQUZROztFQVNaLE1BQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsWUFBWSxDQUFDO0lBQWpCLENBQUw7R0FESjs7RUFHQSxNQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFBMUIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUF2QixHQUEyQjtNQUMzQixJQUFzQixJQUFDLENBQUEsUUFBdkI7UUFBQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBQSxFQUFBOzthQUNBLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxVQUFQO1FBQW1CLEtBQUEsRUFBTyxJQUFDLENBQUEsQ0FBM0I7T0FBNUI7SUFIQyxDQURMO0dBREo7O0VBT0EsTUFBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQTFCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBdkIsR0FBMkI7TUFDM0IsSUFBc0IsSUFBQyxDQUFBLFFBQXZCO1FBQUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFWLENBQUEsRUFBQTs7YUFDQSxJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0sVUFBUDtRQUFtQixLQUFBLEVBQU8sSUFBQyxDQUFBLENBQTNCO09BQTVCO0lBSEMsQ0FETDtHQURKOztFQU9BLE1BQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUExQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQXZCLEdBQTJCO01BQzNCLElBQXNCLElBQUMsQ0FBQSxRQUF2QjtRQUFBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFBLEVBQUE7O2FBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLFVBQVA7UUFBbUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxDQUEzQjtPQUE1QjtJQUhDLENBREw7R0FESjs7RUFPQSxNQUFDLENBQUEsTUFBRCxDQUFRLFVBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQVksQ0FBQztJQUFqQixDQUFMO0dBREo7O0VBR0EsTUFBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUEzQztJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBdkIsR0FBMkIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO01BQzNCLElBQXNCLElBQUMsQ0FBQSxRQUF2QjtRQUFBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFBLEVBQUE7O2FBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBNUI7SUFIQyxDQURMO0dBREo7O0VBT0EsTUFBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUEzQztJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBdkIsR0FBMkIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO01BQzNCLElBQXNCLElBQUMsQ0FBQSxRQUF2QjtRQUFBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFBLEVBQUE7O2FBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBNUI7SUFIQyxDQURMO0dBREo7O0VBT0EsTUFBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUEzQztJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBdkIsR0FBMkIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO01BQzNCLElBQXNCLElBQUMsQ0FBQSxRQUF2QjtRQUFBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFBLEVBQUE7O2FBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBNUI7SUFIQyxDQURMO0dBREo7O0VBT0EsTUFBQyxDQUFBLE1BQUQsQ0FBUSxLQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxZQUFZLENBQUM7SUFBakIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEdBQUQ7TUFDRCxJQUFDLENBQUEsWUFBWSxDQUFDLEdBQWQsR0FBb0I7YUFDcEIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLFlBQVA7UUFBcUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxHQUE3QjtPQUE1QjtJQUZDLENBREw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLE1BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQVksQ0FBQztJQUFqQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsTUFBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsSUFBZCxHQUFxQjthQUNyQixJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0sYUFBUDtRQUFzQixLQUFBLEVBQU8sSUFBQyxDQUFBLElBQTlCO09BQTVCO0lBRkMsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsTUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsWUFBWSxDQUFDO0lBQWpCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLEdBQXFCO2FBQ3JCLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxhQUFQO1FBQXNCLEtBQUEsRUFBTyxJQUFDLENBQUEsSUFBOUI7T0FBNUI7SUFGQyxDQURMO0dBREo7O0VBTUEsTUFBQyxDQUFBLE1BQUQsQ0FBUSxLQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxZQUFZLENBQUM7SUFBakIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEdBQUQ7TUFDRCxJQUFDLENBQUEsWUFBWSxDQUFDLEdBQWQsR0FBb0I7YUFDcEIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLFlBQVA7UUFBcUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxHQUE3QjtPQUE1QjtJQUZDLENBREw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLFFBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQVksQ0FBQztJQUFqQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsTUFBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsTUFBZCxHQUF1QjthQUN2QixJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQTVCO0lBRkMsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFDRCxJQUFDLENBQUEsT0FBTyxDQUFDO0lBRFIsQ0FBTDtJQUVBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7YUFDRCxDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxNQUFWLEVBQWtCLE1BQWxCO0lBREMsQ0FGTDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDO0lBQWIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLElBQUQ7TUFDRCxJQUFDLENBQUEsUUFBUSxDQUFDLFNBQVYsR0FBc0I7YUFDdEIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBNUI7SUFGQyxDQURMO0dBREo7O0VBTUEsTUFBQyxDQUFBLE1BQUQsQ0FBUSxZQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxRQUFRLENBQUM7SUFBYixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsSUFBRDtNQUNELElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBVixHQUF1QjthQUN2QixJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0sbUJBQVA7UUFBNEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxVQUFwQztPQUE1QjtJQUZDLENBREw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLGNBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQztJQUFiLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLFFBQVEsQ0FBQyxZQUFWLEdBQXlCO2FBQ3pCLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxxQkFBUDtRQUE4QixLQUFBLEVBQU8sSUFBQyxDQUFBLFlBQXRDO09BQTVCO0lBRkMsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsWUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDO0lBQWIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLElBQUQ7TUFDRCxJQUFDLENBQUEsUUFBUSxDQUFDLFVBQVYsR0FBdUI7YUFDdkIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLG1CQUFQO1FBQTRCLEtBQUEsRUFBTyxJQUFDLENBQUEsVUFBcEM7T0FBNUI7SUFGQyxDQURMO0dBREo7O0VBTUEsTUFBQyxDQUFBLE1BQUQsQ0FBUSxpQkFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDO0lBQWIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsUUFBUSxDQUFDLGVBQVYsR0FBNEI7YUFDNUIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLHdCQUFQO1FBQWlDLEtBQUEsRUFBTyxJQUFDLENBQUEsZUFBekM7T0FBNUI7SUFGQyxDQURMO0dBREo7O0VBTUEsTUFBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxRQUFRLENBQUM7SUFBYixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsT0FBRDtNQUNELElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixHQUFtQjthQUNuQixJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQTVCO0lBRkMsQ0FETDtHQURKOzs7O0dBck55Qjs7OztBRFA3QixJQUFBLHNEQUFBO0VBQUE7OztBQUFDLFlBQWEsT0FBQSxDQUFRLHFCQUFSOztBQUVkLHVCQUFBLEdBQTBCLENBQ3RCLEdBRHNCLEVBRXRCLEdBRnNCLEVBR3RCLEdBSHNCLEVBSXRCLFdBSnNCLEVBS3RCLFdBTHNCLEVBTXRCLFdBTnNCLEVBT3RCLE9BUHNCLEVBUXRCLFFBUnNCLEVBU3RCLFFBVHNCLEVBVXRCLFFBVnNCLEVBV3RCLFNBWHNCOztBQWMxQixrQkFBQSxHQUFxQixTQUFDLElBQUQ7QUFDcEIsUUFBTSxLQUFBLENBQU0sYUFBQSxHQUFjLElBQWQsR0FBbUIsdUJBQXpCO0FBRGM7O0FBR2YsT0FBTyxDQUFDOzs7RUFFRyxnQkFBQyxLQUFEO0lBQ1Qsc0NBQUE7SUFFQSxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRVQsSUFBQyxDQUFBLHNCQUFELEdBQTBCLE1BQU0sQ0FBQyxtQkFBUCxDQUEyQixNQUFNLENBQUMsY0FBUCxDQUFzQixJQUFDLENBQUEsS0FBSyxDQUFDLGlCQUE3QixDQUEzQjtJQUUxQixJQUFDLENBQUEsTUFBRCxHQUNJO01BQUEsQ0FBQSxPQUFBLENBQUEsRUFBUyxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBQyxDQUFBLHNCQUFuQixDQUFUO01BQ0EsT0FBQSxFQUFTLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFDLENBQUEsc0JBQW5CLENBRFQ7O0VBUks7O21CQVdiLGdCQUFBLEdBQWtCLFNBQUMsU0FBRDtBQUNkLFFBQUE7SUFBQSxjQUFBLEdBQWlCO0lBQ2pCLFNBQVMsQ0FBQyxHQUFWLENBQWMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7UUFDVixJQUFHLHVCQUF1QixDQUFDLFFBQXhCLENBQWlDLENBQWpDLENBQUg7aUJBQ0ksY0FBZSxDQUFBLENBQUEsQ0FBZixHQUFvQixLQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsRUFEL0I7O01BRFU7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWQ7QUFHQSxXQUFPO0VBTE87O0VBT2xCLE1BQUMsQ0FBQSxNQUFELENBQVEsU0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDO0lBQVgsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsR0FBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQzthQUMzQixJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsR0FBa0I7SUFGakIsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDO0lBQVgsQ0FBTDtHQURKOzs7O0dBMUJ5Qjs7OztBRG5CN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBRHZpSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FEajlHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FEM2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBRHppQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FEcnVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QURqaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QURkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FEbDVCQSxPQUFBLENBQVEseUJBQVI7O0FBRU0sT0FBTyxDQUFDO0VBQ0csaUJBQUMsVUFBRCxFQUFhLEVBQWI7SUFDVCxJQUFDLENBQUEsV0FBRCxHQUFlLElBQUksS0FBSyxDQUFDO0lBQ3pCLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixDQUFrQixVQUFVLENBQUMsSUFBN0IsRUFBbUMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE9BQUQ7UUFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFkLEdBQTJCLE9BQU8sQ0FBQztlQUNuQyxFQUFBLENBQUcsT0FBTyxDQUFDLEtBQVg7TUFGK0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQW5DLEVBR0UsSUFIRixFQUdRLFNBQUMsQ0FBRDthQUFPLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBWjtJQUFQLENBSFI7RUFGUzs7Ozs7Ozs7QURIakIsT0FBQSxDQUFRLHFCQUFSOztBQUNBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsT0FBQSxDQUFRLHVCQUFSLENBQWdDLENBQUM7O0FBRXpDLE9BQU8sQ0FBQztFQUNHLGFBQUMsVUFBRCxFQUFhLEVBQWI7SUFDVCxJQUFDLENBQUEsV0FBRCxHQUFlLElBQUksS0FBSyxDQUFDO0lBQ3pCLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixDQUFrQixVQUFVLENBQUMsSUFBN0IsRUFBbUMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEtBQUQ7ZUFDL0IsRUFBQSxDQUFHLEtBQUg7TUFEK0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQW5DLEVBRUUsSUFGRixFQUVRLFNBQUMsQ0FBRDthQUFPLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBWjtJQUFQLENBRlI7RUFGUzs7Ozs7Ozs7QURKakIsT0FBQSxDQUFRLHNCQUFSOztBQUVNLE9BQU8sQ0FBQztFQUNHLGNBQUMsVUFBRCxFQUFhLEVBQWI7SUFDVCxJQUFDLENBQUEsV0FBRCxHQUFlLElBQUksS0FBSyxDQUFDO0lBQ3pCLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixDQUFrQixVQUFVLENBQUMsSUFBN0IsRUFBbUMsU0FBQyxLQUFEO01BQy9CLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBWixHQUF5QixLQUFLLENBQUM7YUFDL0IsRUFBQSxDQUFHLEtBQUssQ0FBQyxLQUFUO0lBRitCLENBQW5DLEVBR0UsSUFIRixFQUdRLFNBQUMsQ0FBRDthQUFPLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBWjtJQUFQLENBSFI7RUFGUzs7Ozs7Ozs7QURIWCxPQUFPLENBQUM7RUFDRyxvQkFBQyxVQUFELEVBQWEsRUFBYjtJQUVULElBQUMsQ0FBQSxRQUFELENBQVUsVUFBVSxDQUFDLElBQXJCLEVBQTJCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO0FBQ3ZCLFlBQUE7UUFBQSxRQUFBLEdBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFYLENBQWdCLENBQUM7UUFFNUIsSUFBRyxRQUFRLENBQUMsSUFBVCxLQUFpQixRQUFwQjtpQkFBa0MsS0FBQyxDQUFBLFVBQUQsQ0FBWSxVQUFaLEVBQXdCLEVBQXhCLEVBQWxDO1NBQUEsTUFBQTtpQkFDSyxLQUFDLENBQUEsWUFBRCxDQUFjLFVBQWQsRUFBMEIsRUFBMUIsRUFETDs7TUFIdUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTNCO0VBRlM7O3VCQVNiLFVBQUEsR0FBWSxTQUFDLFVBQUQsRUFBYSxFQUFiO0lBQ1IsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLEtBQUssQ0FBQztXQUN6QixJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsQ0FBa0IsVUFBVSxDQUFDLElBQTdCLEVBQW1DLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxLQUFEO2VBQy9CLEVBQUEsQ0FBRyxLQUFIO01BRCtCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuQyxFQUVFLElBRkYsRUFFUSxTQUFDLENBQUQ7YUFBTyxPQUFPLENBQUMsR0FBUixDQUFZLENBQVo7SUFBUCxDQUZSO0VBRlE7O3VCQU1aLFlBQUEsR0FBYyxTQUFDLFVBQUQsRUFBYSxFQUFiO0lBQ1YsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLEtBQUssQ0FBQztXQUN6QixJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsQ0FBa0IsVUFBVSxDQUFDLElBQTdCLEVBQW1DLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxRQUFELEVBQVcsU0FBWDtBQUMvQixZQUFBO1FBQUEsUUFBQSxHQUFXLFNBQVUsQ0FBQSxDQUFBO1FBQ3JCLEtBQUEsR0FBWSxJQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsUUFBWCxFQUFxQixRQUFyQjtRQUNaLEtBQUssQ0FBQyxVQUFOLEdBQW1CLFFBQVEsQ0FBQztlQUU1QixFQUFBLENBQUcsS0FBSDtNQUwrQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbkMsRUFNRSxJQU5GLEVBTVEsU0FBQyxDQUFEO2FBQU8sT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFaO0lBQVAsQ0FOUjtFQUZVOzt1QkFVZCxRQUFBLEdBQVUsU0FBQyxJQUFELEVBQU8sRUFBUDtBQUNOLFFBQUE7SUFBQSxPQUFBLEdBQVUsSUFBSTtJQUNkLE9BQU8sQ0FBQyxnQkFBUixDQUF5QixrQkFBekI7SUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLEtBQWIsRUFBb0IsSUFBcEIsRUFBMEIsSUFBMUI7SUFDQSxPQUFPLENBQUMsa0JBQVIsR0FBNkIsU0FBQTtNQUN6QixJQUFHLE9BQU8sQ0FBQyxVQUFSLEtBQXNCLENBQXRCLElBQTJCLE9BQU8sQ0FBQyxNQUFSLEtBQWtCLEdBQWhEO2VBQ0ksRUFBQSxDQUFHLE9BQU8sQ0FBQyxZQUFYLEVBREo7O0lBRHlCO1dBRzdCLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBYjtFQVBNOzs7Ozs7OztBRDFCZCxPQUFBLENBQVEscUJBQVI7O0FBQ0EsT0FBQSxDQUFRLHFCQUFSOztBQUVNLE9BQU8sQ0FBQztFQUNHLGFBQUMsVUFBRCxFQUFhLEVBQWI7QUFDVCxRQUFBO0lBQUEsSUFBQSxHQUFPLFVBQVUsQ0FBQztJQUNsQixJQUFDLENBQUEsT0FBRCxHQUFXLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixFQUFrQixJQUFJLENBQUMsT0FBTCxDQUFhLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFlLENBQUMsR0FBaEIsQ0FBQSxDQUFiLENBQWxCO0lBQ1gsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVgsQ0FBZSxDQUFDLEdBQWhCLENBQUE7SUFDYixJQUFDLENBQUEsWUFBRCxHQUFnQixJQUFDLENBQUEsU0FBUyxDQUFDLE9BQVgsQ0FBbUIsTUFBbkIsRUFBMkIsTUFBM0I7SUFFaEIsSUFBQyxDQUFBLGNBQUQsR0FBa0IsSUFBSSxLQUFLLENBQUM7SUFDNUIsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLEtBQUssQ0FBQztJQUV6QixJQUFDLENBQUEsY0FBYyxDQUFDLE9BQWhCLENBQXdCLElBQUMsQ0FBQSxPQUF6QjtJQUNBLElBQUMsQ0FBQSxjQUFjLENBQUMsSUFBaEIsQ0FBcUIsSUFBQyxDQUFBLFlBQXRCLEVBQW9DLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxTQUFEO1FBQ2hDLFNBQVMsQ0FBQyxPQUFWLENBQUE7UUFFQSxLQUFDLENBQUEsV0FBVyxDQUFDLFlBQWIsQ0FBMEIsU0FBMUI7UUFDQSxLQUFDLENBQUEsV0FBVyxDQUFDLE9BQWIsQ0FBcUIsS0FBQyxDQUFBLE9BQXRCO2VBQ0EsS0FBQyxDQUFBLFdBQVcsQ0FBQyxJQUFiLENBQWtCLEtBQUMsQ0FBQSxTQUFuQixFQUE4QixTQUFDLEtBQUQ7aUJBQzFCLEVBQUEsQ0FBRyxLQUFIO1FBRDBCLENBQTlCO01BTGdDO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQztFQVZTIn0=
